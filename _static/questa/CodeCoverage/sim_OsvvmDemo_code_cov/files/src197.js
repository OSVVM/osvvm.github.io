var g_data = {"name":"C:/SynthWorks/Dev/_osvvm/OsvvmLibraries/DpRam/testbench/TbDpRam_BasicReadWrite.vhd","src":"--\n--  File Name:         TbDpRam_BasicReadWrite.vhd\n--  Design Unit Name:  Architecture of TestCtrl\n--  Revision:          OSVVM MODELS STANDARD VERSION\n--\n--  Maintainer:        Jim Lewis      email:  jim@synthworks.com\n--  Contributor(s):\n--     Jim Lewis      jim@synthworks.com\n--\n--\n--  Description:\n--      Test transaction source\n--\n--\n--  Developed by:\n--        SynthWorks Design Inc.\n--        VHDL Training Classes\n--        http://www.SynthWorks.com\n--\n--  Revision History:\n--    Date      Version    Description\n--    02/2022   2022.02    Initial revision\n--\n--\n--  This file is part of OSVVM.\n--  \n--  Copyright (c) 2022 by SynthWorks Design Inc.  \n--  \n--  Licensed under the Apache License, Version 2.0 (the \"License\");\n--  you may not use this file except in compliance with the License.\n--  You may obtain a copy of the License at\n--  \n--      https://www.apache.org/licenses/LICENSE-2.0\n--  \n--  Unless required by applicable law or agreed to in writing, software\n--  distributed under the License is distributed on an \"AS IS\" BASIS,\n--  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n--  See the License for the specific language governing permissions and\n--  limitations under the License.\n--  \n\narchitecture BasicReadWrite of TestCtrl is\n\n  signal Sync1, TestDone : integer_barrier := 1 ;\n  signal TbID : AlertLogIDType ; \n\nbegin\n\n  ------------------------------------------------------------\n  -- ControlProc\n  --   Set up AlertLog and wait for end of test\n  ------------------------------------------------------------\n  ControlProc : process\n  begin\n    -- Initialization of test\n    SetTestName(\"TbDpRam_BasicReadWrite\") ;\n    SetLogEnable(PASSED, TRUE) ;    -- Enable PASSED logs\n    SetLogEnable(INFO, TRUE) ;    -- Enable INFO logs\n    TbID <= NewID(\"Testbench\") ;\n\n    -- Wait for testbench initialization \n    wait for 0 ns ;  wait for 0 ns ;\n    TranscriptOpen(OSVVM_RESULTS_DIR & \"TbDpRam_BasicReadWrite.txt\") ;\n    SetTranscriptMirror(TRUE) ; \n\n    -- Wait for Design Reset\n    wait until nReset = '1' ;  \n    ClearAlerts ;\n\n    -- Wait for test to finish\n    WaitForBarrier(TestDone, 35 ms) ;\n    AlertIf(now >= 35 ms, \"Test finished due to timeout\") ;\n    AlertIf(GetAffirmCount < 1, \"Test is not Self-Checking\");\n    \n    \n    TranscriptClose ; \n    -- Printing differs in different simulators due to differences in process order execution\n    -- AlertIfDiff(\"./results/TbDpRam_BasicReadWrite.txt\", \"../AXI4/Axi4/testbench/validated_results/TbDpRam_BasicReadWrite.txt\", \"\") ; \n\n    EndOfTestReports ; \n    std.env.stop ; \n    wait ; \n  end process ControlProc ; \n\n  ------------------------------------------------------------\n  -- Manager1Proc\n  --   Generate transactions for AxiManager\n  ------------------------------------------------------------\n  Manager1Proc : process\n    variable Data : std_logic_vector(DATA_WIDTH-1 downto 0) ; \n    variable Manager1Id : AlertLogIDType ;\n  begin\n    wait until nReset = '1' ;  \n    -- First Alignment to clock\n    WaitForClock(Manager1Rec, 1) ; \n    Manager1Id := NewID(\"Manager1\", TbID) ; \n\n    for i in 1 to 10 loop \n      Write(Manager1Rec, X\"01_0000\" + i, X\"1000\" + i ) ;\n    end loop ;\n    \n    WaitForClock(Manager1Rec, 4) ; \n    \n    for i in 1 to 5 loop \n      Read(Manager1Rec, X\"02_0000\" + i, Data) ;\n      AffirmIfEqual(Manager1Id, Data, X\"2000\" + i, \"Read Data\") ;\n    end loop ;\n    for i in 6 to 10 loop \n      ReadCheck(Manager1Rec, X\"02_0000\" + i, X\"2000\" + i) ;\n    end loop ;\n\n    WaitForBarrier(TestDone) ;\n    wait ;\n  end process Manager1Proc ;\n  \n  ------------------------------------------------------------\n  -- Manager2Proc\n  --   Generate transactions for AxiManager\n  ------------------------------------------------------------\n  Manager2Proc : process\n    variable Data : std_logic_vector(DATA_WIDTH-1 downto 0) ; \n    variable Manager2Id : AlertLogIDType ;\n  begin\n    wait until nReset = '1' ;  \n    -- First Alignment to clock\n    WaitForClock(Manager2Rec, 1) ; \n    Manager2Id := NewID(\"Manager1\", TbID) ; \n\n    for i in 1 to 10 loop \n      Write(Manager2Rec, X\"02_0000\" + i, X\"2000\" + i ) ;\n    end loop ;\n    \n    WaitForClock(Manager2Rec, 4) ; \n    \n    for i in 1 to 5 loop \n      Read(Manager2Rec, X\"01_0000\" + i, Data) ;\n      AffirmIfEqual(Manager2Id, Data, X\"1000\" + i, \"Read Data\") ; \n    end loop ;\n    for i in 6 to 10 loop \n      ReadCheck(Manager2Rec, X\"01_0000\" + i, X\"1000\" + i) ;\n    end loop ;\n\n    WaitForBarrier(TestDone) ;\n\n    wait ;\n  end process Manager2Proc ;\n\n\nend BasicReadWrite ;\n\nlibrary OSVVM_AXI4 ;\n\nConfiguration TbDpRam_BasicReadWrite of TbDpRam is\n  for TestHarness\n    for TestCtrl_1 : TestCtrl\n      use entity work.TestCtrl(BasicReadWrite) ; \n    end for ; \n  end for ; \nend TbDpRam_BasicReadWrite ; ","lang":"vhdl"};
processSrcData(g_data);
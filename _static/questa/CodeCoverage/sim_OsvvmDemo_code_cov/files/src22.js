var g_data = {"name":"C:/SynthWorks/Dev/_osvvm/OsvvmLibraries/osvvm/DelayCoveragePkg.vhd","src":"--\n--  File Name:         DelayCoveragePkg.vhd\n--  Design Unit Name:  DelayCoveragePkg\n--  Revision:          STANDARD VERSION\n--\n--  Maintainer:        Jim Lewis      email:  jim@synthworks.com\n--  Contributor(s):\n--     Jim Lewis          SynthWorks\n--\n--\n--  Description:\n--     Implements a pattern for randomizing cycle based delays such as AXI's Valid and Ready \n--       \n--\n--  Developed for:\n--        SynthWorks Design Inc.\n--        VHDL Training Classes\n--        11898 SW 128th Ave.  Tigard, Or  97223\n--        http://www.SynthWorks.com\n--\n--  Revision History:\n--    Date      Version    Description\n--    05/2023   2023.05    Initial revision. \n--\n--\n--  This file is part of OSVVM.\n--  \n--  Copyright (c) 2023 by SynthWorks Design Inc.  \n--  \n--  Licensed under the Apache License, Version 2.0 (the \"License\");\n--  you may not use this file except in compliance with the License.\n--  You may obtain a copy of the License at\n--  \n--      https://www.apache.org/licenses/LICENSE-2.0\n--  \n--  Unless required by applicable law or agreed to in writing, software\n--  distributed under the License is distributed on an \"AS IS\" BASIS,\n--  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n--  See the License for the specific language governing permissions and\n--  limitations under the License.\n--  \n\nuse std.textio.all ;\nuse work.TextUtilPkg.all ; \nuse work.TbUtilPkg.all ; \nuse work.ResolutionPkg.all ; \nuse work.AlertLogPkg.all ; \nuse work.CoveragePkg.all ; \nuse work.NameStorePkg.all ;\nuse work.OsvvmScriptSettingsPkg.all ;\n\npackage DelayCoveragePkg is\n \n  type DelayCoverageIDType is record\n      ID             : integer_max ;\n      BurstLengthCov : CoverageIDType ; \n      BurstDelayCov  : CoverageIDType ; \n      BeatDelayCov   : CoverageIDType ; \n  end record DelayCoverageIDType ; \n  \n  type DelayCoverageIDArrayType is array (integer range <>) of DelayCoverageIDType ;  \n  \n  ------------------------------------------------------------\n  --- ///////////////////////////////////////////////////////////////////////////\n  ------------------------------------------------------------\n  -- DelayCoverageIDType Overloading \n  ------------------------------------------------------------\n  impure function NewID (\n    Name                : String ;\n    ParentID            : AlertLogIDType          := OSVVM_COVERAGE_ALERTLOG_ID ;\n    ReportMode          : AlertLogReportModeType  := DISABLED ;\n    Search              : NameSearchType          := PRIVATE_NAME ;\n    PrintParent         : AlertLogPrintParentType := PRINT_NAME_AND_PARENT\n  ) return DelayCoverageIDType ;\n  \n  ------------------------------------------------------------\n  impure function NewDelayCoverage ( \n    ID                  : Integer ;\n    Name                : String ;\n    ParentID            : AlertLogIDType          := OSVVM_COVERAGE_ALERTLOG_ID ;\n    ReportMode          : AlertLogReportModeType  := DISABLED ;\n    Search              : NameSearchType          := PRIVATE_NAME ;\n    PrintParent         : AlertLogPrintParentType := PRINT_NAME_AND_PARENT\n  ) return DelayCoverageIDType ;\n\n  ------------------------------------------------------------\n  impure function GetDelayCoverage(ID : integer) return DelayCoverageIDType ;\n  procedure SetDelayCoverage ( ID : DelayCoverageIDType ) ;\n  \n  ------------------------------------------------------------\n  impure function GetRandDelay ( ID : DelayCoverageIDType ) return integer ;\n  impure function GetRandDelay ( ID : DelayCoverageIDType ) return integer_vector ;\n\n  ------------------------------------------------------------\n  procedure DeallocateBins ( ID : DelayCoverageIDType ) ;\n  \n  ------------------------------------------------------------\n  --- ///////////////////////////////////////////////////////////////////////////\n  ------------------------------------------------------------\n------------------------------------------------------------\n-- The following items currently in ALPHA development mode\n-- They may be part of a future implementation, but they also may be removed.\n-- They were anticipated as needed for Axi4 VC, but an alternate path was used.\n-- They were removed for the official release.\n------------------------------------------------------------\n--!    -- DelayCoverageIDArrayType Overloading \n--!    ------------------------------------------------------------\n--!  -- experimental\n--!    impure function NewID (\n--!      Name                : string ;\n--!      Size                : positive ;\n--!      ParentID            : AlertLogIDType          := OSVVM_COVERAGE_ALERTLOG_ID ;\n--!      Name1               : string                  := \"\" ;\n--!      Name2               : string                  := \"\" ;\n--!      Name3               : string                  := \"\" ;\n--!      Name4               : string                  := \"\" ;\n--!      Name5               : string                  := \"\" ;\n--!      Name6               : string                  := \"\" ;\n--!      Name7               : string                  := \"\" ;\n--!      Name8               : string                  := \"\" ;\n--!      Name9               : string                  := \"\" ;\n--!      Name10              : string                  := \"\" ;\n--!      ReportMode          : AlertLogReportModeType  := DISABLED ;\n--!      Search              : NameSearchType          := PRIVATE_NAME ;\n--!      PrintParent         : AlertLogPrintParentType := PRINT_NAME_AND_PARENT \n--!    ) return DelayCoverageIDArrayType ;\n--!    \n--!    ------------------------------------------------------------\n--!  -- experimental\n--!    impure function NewDelayCoverage ( \n--!      ID                  : Integer ;               -- Starting ID, and the ID's are consecutive\n--!      Name                : String ;\n--!      Size                : positive ;\n--!      ParentID            : AlertLogIDType          := OSVVM_COVERAGE_ALERTLOG_ID ;\n--!      Name1               : string                  := \"\" ;\n--!      Name2               : string                  := \"\" ;\n--!      Name3               : string                  := \"\" ;\n--!      Name4               : string                  := \"\" ;\n--!      Name5               : string                  := \"\" ;\n--!      Name6               : string                  := \"\" ;\n--!      Name7               : string                  := \"\" ;\n--!      Name8               : string                  := \"\" ;\n--!      Name9               : string                  := \"\" ;\n--!      Name10              : string                  := \"\" ;\n--!      ReportMode          : AlertLogReportModeType  := DISABLED ;\n--!      Search              : NameSearchType          := PRIVATE_NAME ;\n--!      PrintParent         : AlertLogPrintParentType := PRINT_NAME_AND_PARENT \n--!    ) return DelayCoverageIDArrayType ;\n--!  \n--!  -- experimental, Removed during dev as it assumes the IDs are consecutive - which they may or may not be.\n--!  --   impure function GetDelayCoverage(ID : integer;  Size : positive ) return DelayCoverageIDArrayType ; \n--!  -- experimental\n--!    procedure SetDelayCoverage ( ID : DelayCoverageIDArrayType ) ; \n--!    \n--!    ------------------------------------------------------------\n--!    procedure DeallocateBins ( ID : DelayCoverageIDArrayType ) ;\n    \n    \n  -- Backward compatible with Beta Dev names\n  subtype BurstCoverageIDType is DelayCoverageIDType ; \n  subtype BurstCoverageIDArrayType is DelayCoverageIDArrayType ; \n\n  alias NewBurstCoverage is NewDelayCoverage [\n    Integer, String, AlertLogIDType, AlertLogReportModeType, NameSearchType, AlertLogPrintParentType return DelayCoverageIDType] ;\n\n  alias GetBurstCoverage is GetDelayCoverage[integer return DelayCoverageIDType] ;\n  alias SetBurstCoverage is SetDelayCoverage[DelayCoverageIDType] ;\n  \n  alias GetRandBurstDelay is GetRandDelay [DelayCoverageIDType return integer] ;\n  alias GetRandBurstDelay is GetRandDelay [DelayCoverageIDType return integer_vector] ;\n\nend package DelayCoveragePkg ;\n\n--- ///////////////////////////////////////////////////////////////////////////\n--- ///////////////////////////////////////////////////////////////////////////\n--- ///////////////////////////////////////////////////////////////////////////\n\npackage body DelayCoveragePkg is\n\n  type DelayCoveragePType is protected\n\n    ------------------------------------------------------------\n    --- ///////////////////////////////////////////////////////////////////////////\n    ------------------------------------------------------------\n    -- DelayCoverageIDType Overloading \n    ------------------------------------------------------------\n    impure function NewID (\n      Name                : String ;\n      ParentID            : AlertLogIDType          := OSVVM_COVERAGE_ALERTLOG_ID ;\n      ReportMode          : AlertLogReportModeType  := DISABLED ;\n      Search              : NameSearchType          := PRIVATE_NAME ;\n      PrintParent         : AlertLogPrintParentType := PRINT_NAME_AND_PARENT\n    ) return DelayCoverageIDType ;\n\n    ------------------------------------------------------------\n    impure function NewDelayCoverage ( \n      ID                  : Integer ;\n      Name                : String ;\n      ParentID            : AlertLogIDType          := OSVVM_COVERAGE_ALERTLOG_ID ;\n      ReportMode          : AlertLogReportModeType  := DISABLED ;\n      Search              : NameSearchType          := PRIVATE_NAME ;\n      PrintParent         : AlertLogPrintParentType := PRINT_NAME_AND_PARENT\n    ) return DelayCoverageIDType ;\n\n    impure function GetDelayCoverage(ID : integer) return DelayCoverageIDType ;\n    procedure SetDelayCoverage ( ID : DelayCoverageIDType ) ;\n    \n    ------------------------------------------------------------\n    impure function GetRandDelay ( ID : DelayCoverageIDType ) return integer ;\n    impure function GetRandDelay ( ID : DelayCoverageIDType ) return integer_vector ;\n    \n    ------------------------------------------------------------\n    procedure DeallocateBins ( ID : DelayCoverageIDType ) ;\n    \n    ------------------------------------------------------------\n    --- ///////////////////////////////////////////////////////////////////////////\n    ------------------------------------------------------------\n    -- DelayCoverageIDArrayType Overloading \n    ------------------------------------------------------------\n    impure function NewID (\n      Name                : string ;\n      Size                : positive ;\n      ParentID            : AlertLogIDType          := OSVVM_COVERAGE_ALERTLOG_ID ;\n      Name1               : string                  := \"\" ;\n      Name2               : string                  := \"\" ;\n      Name3               : string                  := \"\" ;\n      Name4               : string                  := \"\" ;\n      Name5               : string                  := \"\" ;\n      Name6               : string                  := \"\" ;\n      Name7               : string                  := \"\" ;\n      Name8               : string                  := \"\" ;\n      Name9               : string                  := \"\" ;\n      Name10              : string                  := \"\" ;\n      ReportMode          : AlertLogReportModeType  := DISABLED ;\n      Search              : NameSearchType          := PRIVATE_NAME ;\n      PrintParent         : AlertLogPrintParentType := PRINT_NAME_AND_PARENT \n    ) return DelayCoverageIDArrayType ;\n    \n    ------------------------------------------------------------\n    impure function NewDelayCoverage ( \n      ID                  : Integer ;               -- Starting ID, and the ID's are consecutive\n      Name                : String ;\n      Size                : positive ;\n      ParentID            : AlertLogIDType          := OSVVM_COVERAGE_ALERTLOG_ID ;\n      Name1               : string                  := \"\" ;\n      Name2               : string                  := \"\" ;\n      Name3               : string                  := \"\" ;\n      Name4               : string                  := \"\" ;\n      Name5               : string                  := \"\" ;\n      Name6               : string                  := \"\" ;\n      Name7               : string                  := \"\" ;\n      Name8               : string                  := \"\" ;\n      Name9               : string                  := \"\" ;\n      Name10              : string                  := \"\" ;\n      ReportMode          : AlertLogReportModeType  := DISABLED ;\n      Search              : NameSearchType          := PRIVATE_NAME ;\n      PrintParent         : AlertLogPrintParentType := PRINT_NAME_AND_PARENT \n    ) return DelayCoverageIDArrayType ;\n\n    impure function GetDelayCoverage(ID : integer;  Size : positive ) return DelayCoverageIDArrayType ;\n    procedure SetDelayCoverage ( ID : DelayCoverageIDArrayType ) ;\n    \n    ------------------------------------------------------------\n    procedure DeallocateBins ( ID : DelayCoverageIDArrayType ) ;\n    \n  end protected DelayCoveragePType ;\n\n\n  type DelayCoveragePType is protected body\n  \n    type SingletonStructType is record\n      BurstLengthCov    : CoverageIDType ; \n      BurstDelayCov     : CoverageIDType ; \n      BeatDelayCov      : CoverageIDType ; \n      BurstLength       : integer ; \n    end record SingletonStructType ;\n\n    type  SingletonArrayType    is array (integer range <>) of SingletonStructType ; \n    type  SingletonArrayPtrType is access SingletonArrayType ;\n    \n    variable SingletonArrayPtr : SingletonArrayPtrType ;   \n    variable NumItems          : integer := 0 ; \n    constant MIN_NUM_ITEMS     : integer := 32 ; -- Min amount to resize array\n    variable LocalNameStore    : NameStorePType ;\n\n    ------------------------------------------------------------\n    -- Package Local\n    function NormalizeArraySize( NewNumItems, MinNumItems : integer ) return integer is\n    ------------------------------------------------------------\n      variable NormNumItems : integer ;\n      variable ModNumItems  : integer ;\n    begin\n      NormNumItems := NewNumItems ; \n      ModNumItems  := NewNumItems mod MinNumItems ; \n      if ModNumItems > 0 then \n        NormNumItems := NormNumItems + (MinNumItems - ModNumItems) ; \n      end if ; \n      return NormNumItems ; \n    end function NormalizeArraySize ;\n\n    ------------------------------------------------------------\n    -- Package Local\n    procedure GrowNumberItems (\n    ------------------------------------------------------------\n      variable SingletonArrayPtr : InOut SingletonArrayPtrType ;\n      variable NumItems          : InOut integer ;\n      constant GrowAmount        : in    integer ;\n      constant MinNumItems       : in    integer \n    ) is\n      variable oldSingletonArrayPtr : SingletonArrayPtrType ;\n      variable NewNumItems     : integer ;\n      variable NewSize         : integer ;\n    begin\n      NewNumItems := NumItems + GrowAmount ; \n      NewSize     := NormalizeArraySize(NewNumItems, MinNumItems) ;\n      if SingletonArrayPtr = NULL then\n        SingletonArrayPtr := new SingletonArrayType(1 to NewSize) ;\n      elsif NewNumItems > SingletonArrayPtr'length then\n        oldSingletonArrayPtr := SingletonArrayPtr ;\n        SingletonArrayPtr    := new SingletonArrayType(1 to NewSize) ;\n        SingletonArrayPtr.all(1 to NumItems) := oldSingletonArrayPtr.all(1 to NumItems) ;\n        deallocate(oldSingletonArrayPtr) ;\n      end if ;\n      NumItems := NewNumItems ; \n    end procedure GrowNumberItems ;\n\n--    ------------------------------------------------------------\n--    -- PT Local\n--    impure function NewDelayCoverage ( \n--    ------------------------------------------------------------\n--      ID                  : Integer ;\n--      Name                : String ;\n--      ParentID            : AlertLogIDType          := OSVVM_COVERAGE_ALERTLOG_ID ;\n--      ReportMode          : AlertLogReportModeType  := DISABLED ;\n--      Search              : NameSearchType          := PRIVATE_NAME ;\n--      PrintParent         : AlertLogPrintParentType := PRINT_NAME_AND_PARENT\n--    ) return DelayCoverageIDType is\n--      variable NewCoverageID : DelayCoverageIDType ;\n--    begin\n--      SingletonArrayPtr(ID).BurstLengthCov := NewID(Name & ifelse(Name'length > 0, \" \", \"\") & \"BurstLength\", ParentID, ReportMode, Search, PrintParent) ; \n--      SingletonArrayPtr(ID).BurstDelayCov  := NewID(Name & ifelse(Name'length > 0, \" \", \"\") & \"BurstDelay\",  ParentID, ReportMode, Search, PrintParent) ; \n--      SingletonArrayPtr(ID).BeatDelayCov   := NewID(Name & ifelse(Name'length > 0, \" \", \"\") & \"BeatDelay\",   ParentID, ReportMode, Search, PrintParent) ; \n--      SingletonArrayPtr(ID).BurstLength    := 0 ; \n--      return GetDelayCoverage( ID ) ; \n--    end function NewDelayCoverage ; \n\n    ------------------------------------------------------------\n    ------------------------------------------------------------\n    -- DelayCoverageIDType Overloading \n    ------------------------------------------------------------\n    impure function NewID (\n    ------------------------------------------------------------\n      Name                : String ;\n      ParentID            : AlertLogIDType          := OSVVM_COVERAGE_ALERTLOG_ID ;\n      ReportMode          : AlertLogReportModeType  := DISABLED ;\n      Search              : NameSearchType          := PRIVATE_NAME ;\n      PrintParent         : AlertLogPrintParentType := PRINT_NAME_AND_PARENT\n    ) return DelayCoverageIDType is\n      variable NameID              : integer ;\n      variable ResolvedSearch      : NameSearchType ;\n      variable ResolvedPrintParent : AlertLogPrintParentType ;\n      variable NewCoverageID : DelayCoverageIDType ;\n    begin\n      ResolvedSearch      := ResolveSearch     (ParentID /= OSVVM_COVERAGE_ALERTLOG_ID, Search) ;\n      ResolvedPrintParent := ResolvePrintParent(ParentID /= OSVVM_COVERAGE_ALERTLOG_ID, PrintParent) ;\n\n      NameID := LocalNameStore.find(Name, ParentID, ResolvedSearch) ;\n\n      if NameID /= ID_NOT_FOUND.ID then\n        -- Get the current existing information\n        return GetDelayCoverage( NameID ) ;\n      else\n        -- Add New Coverage Model to Structure\n        GrowNumberItems(SingletonArrayPtr, NumItems, 1, MIN_NUM_ITEMS) ;\n\n        -- Add item to NameStore\n        NameID := LocalNameStore.NewID(Name, ParentID, ResolvedSearch) ;\n        AlertIfNotEqual(ParentID, NameID, NumItems, \"DelayCoveragePkg: in \" & Name & \", Index of LocalNameStore /= CoverageID\") ;\n\n        NewCoverageID := NewDelayCoverage( NumItems, Name, ParentID, ReportMode, ResolvedSearch, ResolvedPrintParent ) ;\n        SetDelayCoverage(NewCoverageID) ; \n        return NewCoverageID ; \n--        return NewDelayCoverage( NumItems, Name, ParentID, ReportMode, ResolveSearch, ResolvedPrintParent ) ;\n      end if ;\n    end function NewID ;\n\n    ------------------------------------------------------------\n    impure function NewDelayCoverage ( \n    ------------------------------------------------------------\n      ID                  : Integer ;\n      Name                : String ;\n      ParentID            : AlertLogIDType          := OSVVM_COVERAGE_ALERTLOG_ID ;\n      ReportMode          : AlertLogReportModeType  := DISABLED ;\n      Search              : NameSearchType          := PRIVATE_NAME ;\n      PrintParent         : AlertLogPrintParentType := PRINT_NAME_AND_PARENT\n    ) return DelayCoverageIDType is\n      variable ResolvedSearch      : NameSearchType ;\n      variable ResolvedPrintParent : AlertLogPrintParentType ;\n      variable NewCoverageID : DelayCoverageIDType ;\n    begin\n      ResolvedSearch      := ResolveSearch     (ParentID /= OSVVM_COVERAGE_ALERTLOG_ID, Search) ;\n      ResolvedPrintParent := ResolvePrintParent(ParentID /= OSVVM_COVERAGE_ALERTLOG_ID, PrintParent) ;\n\n      NewCoverageID.ID := ID ;\n      NewCoverageID.BurstLengthCov := NewID(Name & ifelse(Name'length > 0, \" \", \"\") & \"BurstLength\", ParentID, ReportMode, ResolvedSearch, ResolvedPrintParent) ; \n      SetCovWeight(NewCoverageID.BurstLengthCov, 0) ; \n      NewCoverageID.BurstDelayCov  := NewID(Name & ifelse(Name'length > 0, \" \", \"\") & \"BurstDelay\",  ParentID, ReportMode, ResolvedSearch, ResolvedPrintParent) ; \n      SetCovWeight(NewCoverageID.BurstDelayCov, 0) ; \n      NewCoverageID.BeatDelayCov   := NewID(Name & ifelse(Name'length > 0, \" \", \"\") & \"BeatDelay\",   ParentID, ReportMode, ResolvedSearch, ResolvedPrintParent) ; \n      SetCovWeight(NewCoverageID.BeatDelayCov, 0) ; \n      return NewCoverageID ; \n    end function NewDelayCoverage ; \n\n    ------------------------------------------------------------\n    impure function GetDelayCoverage ( ID : integer ) return DelayCoverageIDType is\n    ------------------------------------------------------------\n      variable NewCoverageID : DelayCoverageIDType ;\n    begin\n      NewCoverageID.ID             := ID ; \n      NewCoverageID.BurstLengthCov := SingletonArrayPtr(ID).BurstLengthCov ; \n      NewCoverageID.BurstDelayCov  := SingletonArrayPtr(ID).BurstDelayCov  ; \n      NewCoverageID.BeatDelayCov   := SingletonArrayPtr(ID).BeatDelayCov   ; \n      return NewCoverageID ; \n    end function GetDelayCoverage ;\n    \n    ------------------------------------------------------------\n    procedure SetDelayCoverage ( ID : DelayCoverageIDType ) is\n    ------------------------------------------------------------\n    begin\n      SingletonArrayPtr(ID.ID).BurstLengthCov := ID.BurstLengthCov ; \n      SingletonArrayPtr(ID.ID).BurstDelayCov  := ID.BurstDelayCov  ; \n      SingletonArrayPtr(ID.ID).BeatDelayCov   := ID.BeatDelayCov   ; \n      SingletonArrayPtr(ID.ID).BurstLength    := 0 ; \n    end procedure SetDelayCoverage ;\n\n\n--    ------------------------------------------------------------\n--    impure function GetDelayCoverage ( ID : DelayCoverageIDType ) return DelayCoverageIDType is\n--    ------------------------------------------------------------\n--    begin\n--      return GetDelayCoverage(ID.ID) ; \n--    end function GetDelayCoverage ;\n\n    ------------------------------------------------------------\n    -- PT Local\n    impure function GetRandDelayCov ( ID : DelayCoverageIDType ) return CoverageIDType is\n    ------------------------------------------------------------\n      variable DelayCov : CoverageIDType ; \n    begin \n      if SingletonArrayPtr(ID.ID).BurstLength < 1 then \n        DelayCov := SingletonArrayPtr(ID.ID).BurstDelayCov ; \n        SingletonArrayPtr(ID.ID).BurstLength := GetRandPoint(SingletonArrayPtr(ID.ID).BurstLengthCov) ; \n        ICoverLast(SingletonArrayPtr(ID.ID).BurstLengthCov) ; \n      else\n        DelayCov := SingletonArrayPtr(ID.ID).BeatDelayCov ; \n      end if ; \n      SingletonArrayPtr(ID.ID).BurstLength := SingletonArrayPtr(ID.ID).BurstLength - 1; \n      return DelayCov ; \n    end function GetRandDelayCov ; \n\n    ------------------------------------------------------------\n    impure function GetRandDelay ( ID : DelayCoverageIDType ) return integer is\n    ------------------------------------------------------------\n      variable DelayCov  : CoverageIDType ;\n      variable RandIndex : integer ; \n    begin \n      DelayCov  := GetRandDelayCov( ID ) ;\n      RandIndex := GetRandIndex( DelayCov ) ; \n      ICoverLast( DelayCov ) ;\n      return GetPoint( DelayCov, RandIndex ) ; \n--      return GetRandPoint( GetRandDelayCov(ID), CoverLast => TRUE ) ; \n    end function GetRandDelay ; \n    \n    ------------------------------------------------------------\n    impure function GetRandDelay ( ID : DelayCoverageIDType ) return integer_vector is\n    ------------------------------------------------------------\n      variable DelayCov  : CoverageIDType ;\n      variable RandIndex : integer ; \n    begin \n      DelayCov  := GetRandDelayCov( ID ) ;\n      RandIndex := GetRandIndex( DelayCov ) ; \n      ICoverLast( DelayCov ) ;\n      return GetPoint( DelayCov, RandIndex ) ; \n--      return GetRandPoint( GetRandDelayCov(ID), CoverLast => TRUE ) ; \n    end function GetRandDelay ; \n\n--    ------------------------------------------------------------\n--    procedure DeallocateBins ( ID : DelayCoverageIDType ) is\n--    ------------------------------------------------------------\n--    begin\n--      SingletonArrayPtr(ID.ID).BurstLength := 0 ; \n--      DeallocateBins(SingletonArrayPtr(ID.ID).BurstLengthCov) ; \n--      DeallocateBins(SingletonArrayPtr(ID.ID).BurstDelayCov) ; \n--      DeallocateBins(SingletonArrayPtr(ID.ID).BeatDelayCov) ; \n--    end procedure DeallocateBins ;\n\n    ------------------------------------------------------------\n    procedure DeallocateBins ( ID : DelayCoverageIDType ) is\n    ------------------------------------------------------------\n    begin\n      SingletonArrayPtr(ID.ID).BurstLength := 0 ;  -- Changing the coverage models, so initialize the length to 0\n      DeallocateBins(ID.BurstLengthCov) ; \n      DeallocateBins(ID.BurstDelayCov) ; \n      DeallocateBins(ID.BeatDelayCov) ; \n    end procedure DeallocateBins ;\n    \n    ------------------------------------------------------------\n    ------------------------------------------------------------\n    -- DelayCoverageIDArrayType Overloading \n    ------------------------------------------------------------\n    impure function NewID (\n    ------------------------------------------------------------\n      Name                : string ;\n      Size                : positive ;\n      ParentID            : AlertLogIDType          := OSVVM_COVERAGE_ALERTLOG_ID ;\n      Name1               : string                  := \"\" ;\n      Name2               : string                  := \"\" ;\n      Name3               : string                  := \"\" ;\n      Name4               : string                  := \"\" ;\n      Name5               : string                  := \"\" ;\n      Name6               : string                  := \"\" ;\n      Name7               : string                  := \"\" ;\n      Name8               : string                  := \"\" ;\n      Name9               : string                  := \"\" ;\n      Name10              : string                  := \"\" ;\n      ReportMode          : AlertLogReportModeType  := DISABLED ;\n      Search              : NameSearchType          := PRIVATE_NAME ;\n      PrintParent         : AlertLogPrintParentType := PRINT_NAME_AND_PARENT \n    ) return DelayCoverageIDArrayType is\n      variable NewCoverageID : DelayCoverageIDArrayType(1 to Size) ;\n    begin\n      for i in NewCoverageID'range loop \n        case i is \n          when  1 => NewCoverageID(1)  := NewID(Name & ifelse(Name'length > 0 and Name1'length  > 0, \" \", \"\") & Name1,  ParentID, ReportMode, Search, PrintParent) ; \n          when  2 => NewCoverageID(2)  := NewID(Name & ifelse(Name'length > 0 and Name2'length  > 0, \" \", \"\") & Name2,  ParentID, ReportMode, Search, PrintParent) ; \n          when  3 => NewCoverageID(3)  := NewID(Name & ifelse(Name'length > 0 and Name3'length  > 0, \" \", \"\") & Name3,  ParentID, ReportMode, Search, PrintParent) ; \n          when  4 => NewCoverageID(4)  := NewID(Name & ifelse(Name'length > 0 and Name4'length  > 0, \" \", \"\") & Name4,  ParentID, ReportMode, Search, PrintParent) ; \n          when  5 => NewCoverageID(5)  := NewID(Name & ifelse(Name'length > 0 and Name5'length  > 0, \" \", \"\") & Name5,  ParentID, ReportMode, Search, PrintParent) ; \n          when  6 => NewCoverageID(6)  := NewID(Name & ifelse(Name'length > 0 and Name6'length  > 0, \" \", \"\") & Name6,  ParentID, ReportMode, Search, PrintParent) ; \n          when  7 => NewCoverageID(7)  := NewID(Name & ifelse(Name'length > 0 and Name7'length  > 0, \" \", \"\") & Name7,  ParentID, ReportMode, Search, PrintParent) ; \n          when  8 => NewCoverageID(8)  := NewID(Name & ifelse(Name'length > 0 and Name8'length  > 0, \" \", \"\") & Name8,  ParentID, ReportMode, Search, PrintParent) ; \n          when  9 => NewCoverageID(9)  := NewID(Name & ifelse(Name'length > 0 and Name9'length  > 0, \" \", \"\") & Name9,  ParentID, ReportMode, Search, PrintParent) ; \n          when 10 => NewCoverageID(10) := NewID(Name & ifelse(Name'length > 0 and Name10'length > 0, \" \", \"\") & Name10, ParentID, ReportMode, Search, PrintParent) ; \n          when others => NULL ; \n        end case ; \n      end loop ; \n      return NewCoverageID ; \n    end function NewID ;\n\n--!! todo\n--  --    -- insert an object into the data structure.   Updates the ID fields\n--      impure function NewID( ID : DelayCoverageIDArrayType ) return DelayCoverageIDArrayType is \n--        variable NewCoverageID : DelayCoverageIDArrayType(ID'range) ;\n--      begin\n--        for i in ID'range loop \n--          NewCoverageID(i) := NewID(ID(i)) ; \n--        end loop ; \n--        return NewCoverageID ; \n--      end function NewID ; \n\n\n    ------------------------------------------------------------\n    impure function NewDelayCoverage ( \n    ------------------------------------------------------------\n      ID                  : Integer ;               -- Starting ID, and the ID's are consecutive\n      Name                : String ;\n      Size                : positive ;\n      ParentID            : AlertLogIDType          := OSVVM_COVERAGE_ALERTLOG_ID ;\n      Name1               : string                  := \"\" ;\n      Name2               : string                  := \"\" ;\n      Name3               : string                  := \"\" ;\n      Name4               : string                  := \"\" ;\n      Name5               : string                  := \"\" ;\n      Name6               : string                  := \"\" ;\n      Name7               : string                  := \"\" ;\n      Name8               : string                  := \"\" ;\n      Name9               : string                  := \"\" ;\n      Name10              : string                  := \"\" ;\n      ReportMode          : AlertLogReportModeType  := DISABLED ;\n      Search              : NameSearchType          := PRIVATE_NAME ;\n      PrintParent         : AlertLogPrintParentType := PRINT_NAME_AND_PARENT \n    ) return DelayCoverageIDArrayType is\n      variable NewCoverageID : DelayCoverageIDArrayType(1 to Size) ;\n    begin\n      for i in NewCoverageID'range loop \n        case i is \n          when  1 => NewCoverageID(1)  := NewDelayCoverage(ID,   Name & ifelse(Name'length > 0 and Name1'length  > 0, \" \", \"\") & Name1,  ParentID, ReportMode, Search, PrintParent) ; \n          when  2 => NewCoverageID(2)  := NewDelayCoverage(ID+1, Name & ifelse(Name'length > 0 and Name2'length  > 0, \" \", \"\") & Name2,  ParentID, ReportMode, Search, PrintParent) ; \n          when  3 => NewCoverageID(3)  := NewDelayCoverage(ID+2, Name & ifelse(Name'length > 0 and Name3'length  > 0, \" \", \"\") & Name3,  ParentID, ReportMode, Search, PrintParent) ; \n          when  4 => NewCoverageID(4)  := NewDelayCoverage(ID+2, Name & ifelse(Name'length > 0 and Name4'length  > 0, \" \", \"\") & Name4,  ParentID, ReportMode, Search, PrintParent) ; \n          when  5 => NewCoverageID(5)  := NewDelayCoverage(ID+4, Name & ifelse(Name'length > 0 and Name5'length  > 0, \" \", \"\") & Name5,  ParentID, ReportMode, Search, PrintParent) ; \n          when  6 => NewCoverageID(6)  := NewDelayCoverage(ID+5, Name & ifelse(Name'length > 0 and Name6'length  > 0, \" \", \"\") & Name6,  ParentID, ReportMode, Search, PrintParent) ; \n          when  7 => NewCoverageID(7)  := NewDelayCoverage(ID+6, Name & ifelse(Name'length > 0 and Name7'length  > 0, \" \", \"\") & Name7,  ParentID, ReportMode, Search, PrintParent) ; \n          when  8 => NewCoverageID(8)  := NewDelayCoverage(ID+7, Name & ifelse(Name'length > 0 and Name8'length  > 0, \" \", \"\") & Name8,  ParentID, ReportMode, Search, PrintParent) ; \n          when  9 => NewCoverageID(9)  := NewDelayCoverage(ID+8, Name & ifelse(Name'length > 0 and Name9'length  > 0, \" \", \"\") & Name9,  ParentID, ReportMode, Search, PrintParent) ; \n          when 10 => NewCoverageID(10) := NewDelayCoverage(ID+9, Name & ifelse(Name'length > 0 and Name10'length > 0, \" \", \"\") & Name10, ParentID, ReportMode, Search, PrintParent) ; \n          when others => NULL ; \n        end case ; \n      end loop ; \n      return NewCoverageID ; \n    end function NewDelayCoverage ; \n\n    ------------------------------------------------------------\n    impure function GetDelayCoverage(ID : integer;  Size : positive ) return DelayCoverageIDArrayType is\n    ------------------------------------------------------------\n      variable NewCoverageID : DelayCoverageIDArrayType(0 to Size-1) ;\n    begin\n      for i in NewCoverageID'range loop \n        NewCoverageID(i) := GetDelayCoverage(ID+i) ; \n      end loop ; \n      return NewCoverageID ; \n    end function GetDelayCoverage ;\n    \n    ------------------------------------------------------------\n    procedure SetDelayCoverage ( ID : DelayCoverageIDArrayType ) is\n    ------------------------------------------------------------\n    begin\n      for i in ID'range loop \n        SetDelayCoverage(ID(i)) ; \n      end loop ; \n    end procedure SetDelayCoverage ;\n\n    ------------------------------------------------------------\n    procedure DeallocateBins ( ID : DelayCoverageIDArrayType ) is\n    ------------------------------------------------------------\n    begin\n      for i in ID'range loop \n        DeallocateBins(ID(i)) ; \n      end loop ; \n    end procedure DeallocateBins ;\n  end protected body DelayCoveragePType ;\n  \n\n-- /////////////////////////////////////////\n-- /////////////////////////////////////////\n-- Singleton Data Structure\n-- /////////////////////////////////////////\n-- /////////////////////////////////////////\n  shared variable DelayCoverage : DelayCoveragePType ; \n  \n  ------------------------------------------------------------\n  impure function NewID (\n  ------------------------------------------------------------\n    Name                : String ;\n    ParentID            : AlertLogIDType          := OSVVM_COVERAGE_ALERTLOG_ID ;\n    ReportMode          : AlertLogReportModeType  := DISABLED ;\n    Search              : NameSearchType          := PRIVATE_NAME ;\n    PrintParent         : AlertLogPrintParentType := PRINT_NAME_AND_PARENT\n  ) return DelayCoverageIDType is\n  begin\n    return DelayCoverage.NewID (Name, ParentID, ReportMode, Search, PrintParent) ;\n  end function NewID ;\n\n  ------------------------------------------------------------\n  impure function NewDelayCoverage ( \n  ------------------------------------------------------------\n    ID                  : Integer ;\n    Name                : String ;\n    ParentID            : AlertLogIDType          := OSVVM_COVERAGE_ALERTLOG_ID ;\n    ReportMode          : AlertLogReportModeType  := DISABLED ;\n    Search              : NameSearchType          := PRIVATE_NAME ;\n    PrintParent         : AlertLogPrintParentType := PRINT_NAME_AND_PARENT\n  ) return DelayCoverageIDType is\n  begin\n    return DelayCoverage.NewDelayCoverage (ID, Name, ParentID, ReportMode, Search, PrintParent) ;\n  end function NewDelayCoverage ; \n\n  ------------------------------------------------------------\n  impure function GetDelayCoverage ( ID : integer ) return DelayCoverageIDType is\n  ------------------------------------------------------------\n  begin\n    return DelayCoverage.GetDelayCoverage ( ID ) ;\n  end function GetDelayCoverage ;\n\n  ------------------------------------------------------------\n  procedure SetDelayCoverage ( ID : DelayCoverageIDType ) is\n  ------------------------------------------------------------\n  begin\n    DelayCoverage.SetDelayCoverage ( ID ) ;\n  end procedure SetDelayCoverage ;\n\n  ------------------------------------------------------------\n  impure function GetRandDelay ( ID : DelayCoverageIDType ) return integer is\n  ------------------------------------------------------------\n  begin\n    return DelayCoverage.GetRandDelay(ID) ;\n  end function GetRandDelay ;\n\n  ------------------------------------------------------------\n  impure function GetRandDelay ( ID : DelayCoverageIDType ) return integer_vector is\n  ------------------------------------------------------------\n  begin\n    return DelayCoverage.GetRandDelay(ID) ;\n  end function GetRandDelay ;\n\n  ------------------------------------------------------------\n  procedure DeallocateBins(ID : DelayCoverageIDType) is\n  ------------------------------------------------------------\n  begin\n    DelayCoverage.DeallocateBins(ID) ;\n  end procedure DeallocateBins ;\n  \n  ------------------------------------------------------------\n  --- ///////////////////////////////////////////////////////////////////////////\n  ------------------------------------------------------------\n  -- DelayCoverageIDArrayType Overloading \n  ------------------------------------------------------------\n  impure function NewID (\n  ------------------------------------------------------------\n    Name                : string ;\n    Size                : positive ;\n    ParentID            : AlertLogIDType          := OSVVM_COVERAGE_ALERTLOG_ID ;\n    Name1               : string                  := \"\" ;\n    Name2               : string                  := \"\" ;\n    Name3               : string                  := \"\" ;\n    Name4               : string                  := \"\" ;\n    Name5               : string                  := \"\" ;\n    Name6               : string                  := \"\" ;\n    Name7               : string                  := \"\" ;\n    Name8               : string                  := \"\" ;\n    Name9               : string                  := \"\" ;\n    Name10              : string                  := \"\" ;\n    ReportMode          : AlertLogReportModeType  := DISABLED ;\n    Search              : NameSearchType          := PRIVATE_NAME ;\n    PrintParent         : AlertLogPrintParentType := PRINT_NAME_AND_PARENT \n  ) return DelayCoverageIDArrayType is\n  begin\n    return DelayCoverage.NewID (\n      Name, Size, ParentID, \n      Name1, Name2, Name3, Name4, Name5, Name6, Name7, Name8, Name9, Name10, \n      ReportMode, Search, PrintParent) ;\n  end function NewID ;\n  \n  ------------------------------------------------------------\n  impure function NewDelayCoverage ( \n  ------------------------------------------------------------\n    ID                  : Integer ;               -- Starting ID, and the ID's are consecutive\n    Name                : String ;\n    Size                : positive ;\n    ParentID            : AlertLogIDType          := OSVVM_COVERAGE_ALERTLOG_ID ;\n    Name1               : string                  := \"\" ;\n    Name2               : string                  := \"\" ;\n    Name3               : string                  := \"\" ;\n    Name4               : string                  := \"\" ;\n    Name5               : string                  := \"\" ;\n    Name6               : string                  := \"\" ;\n    Name7               : string                  := \"\" ;\n    Name8               : string                  := \"\" ;\n    Name9               : string                  := \"\" ;\n    Name10              : string                  := \"\" ;\n    ReportMode          : AlertLogReportModeType  := DISABLED ;\n    Search              : NameSearchType          := PRIVATE_NAME ;\n    PrintParent         : AlertLogPrintParentType := PRINT_NAME_AND_PARENT \n  ) return DelayCoverageIDArrayType is\n  begin\n    return DelayCoverage.NewDelayCoverage (\n      ID, Name, Size, ParentID, \n      Name1, Name2, Name3, Name4, Name5, Name6, Name7, Name8, Name9, Name10, \n      ReportMode, Search, PrintParent) ;\n  end function NewDelayCoverage ; \n\n  ------------------------------------------------------------\n  impure function GetDelayCoverage(ID : integer;  Size : positive ) return DelayCoverageIDArrayType is\n  ------------------------------------------------------------\n  begin\n    return DelayCoverage.GetDelayCoverage ( ID, Size ) ;\n  end function GetDelayCoverage ;\n\n  ------------------------------------------------------------\n  procedure SetDelayCoverage ( ID : DelayCoverageIDArrayType ) is\n  ------------------------------------------------------------\n  begin\n    DelayCoverage.SetDelayCoverage ( ID ) ;\n  end procedure SetDelayCoverage ;\n\n  ------------------------------------------------------------\n  procedure DeallocateBins ( ID : DelayCoverageIDArrayType ) is\n  ------------------------------------------------------------\n  begin\n    DelayCoverage.DeallocateBins(ID) ;\n  end procedure DeallocateBins ;\n\n\nend package body DelayCoveragePkg ;","lang":"vhdl"};
processSrcData(g_data);
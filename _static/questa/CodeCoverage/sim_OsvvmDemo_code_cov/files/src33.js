var g_data = {"name":"C:/SynthWorks/Dev/_osvvm/OsvvmLibraries/osvvm/TranscriptPkg.vhd","src":"--\n--  File Name:         TranscriptPkg.vhd\n--  Design Unit Name:  TranscriptPkg\n--  Revision:          STANDARD VERSION\n--\n--  Maintainer:        Jim Lewis      email:  jim@synthworks.com\n--  Contributor(s):\n--     Jim Lewis      jim@synthworks.com\n--\n--\n--  Description:\n--        Define file identifier TranscriptFile\n--        provide subprograms to open, close, and print to it.\n--          \n--\n--  Developed for:\n--        SynthWorks Design Inc.\n--        VHDL Training Classes\n--        11898 SW 128th Ave.  Tigard, Or  97223\n--        http://www.SynthWorks.com\n--\n--  Revision History:\n--    Date      Version    Description\n--    01/2023   2023.01    Uses OSVVM_TRANSCRIPT_YAML_FILE from OsvvmScriptSettingsPkg\n--    02/2022   2022.03    Create YAML with files opened during test\n--    12/2020   2020.12    Updated TranscriptOpen parameter Status to InOut to work around simulator bug.\n--    01/2020   2020.01    Updated Licenses to Apache\n--    11/2016   2016.l1    Added procedure BlankLine\n--    01/2016   2016.01    TranscriptOpen function now calls procedure of same name\n--    01/2015   2015.01    Initial revision\n--\n--\n--  This file is part of OSVVM.\n--  \n--  Copyright (c) 2015 - 2020 by SynthWorks Design Inc.  \n--  \n--  Licensed under the Apache License, Version 2.0 (the \"License\");\n--  you may not use this file except in compliance with the License.\n--  You may obtain a copy of the License at\n--  \n--      https://www.apache.org/licenses/LICENSE-2.0\n--  \n--  Unless required by applicable law or agreed to in writing, software\n--  distributed under the License is distributed on an \"AS IS\" BASIS,\n--  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n--  See the License for the specific language governing permissions and\n--  limitations under the License.\n--  \n\nuse std.textio.all ;\nuse work.OsvvmScriptSettingsPkg.all ;\npackage TranscriptPkg is\n\n  -- File Identifier to facilitate usage of one transcript file \n  file             TranscriptFile : text ;\n  \n  -- Cause compile errors if READ_MODE is passed to TranscriptOpen\n  subtype WRITE_APPEND_OPEN_KIND is FILE_OPEN_KIND range WRITE_MODE to APPEND_MODE ; \n  \n  -- Open and close TranscriptFile.  Function allows declarative opens \n  procedure        TranscriptOpen (Status: InOut FILE_OPEN_STATUS; ExternalName: STRING; OpenKind: WRITE_APPEND_OPEN_KIND := WRITE_MODE) ;\n  procedure        TranscriptOpen (ExternalName: STRING; OpenKind: WRITE_APPEND_OPEN_KIND := WRITE_MODE) ;  \n  impure function  TranscriptOpen (ExternalName: STRING; OpenKind: WRITE_APPEND_OPEN_KIND := WRITE_MODE) return FILE_OPEN_STATUS ;\n  -- The following two are in ReportPkg to resolve circular depedencies\n  --   procedure TranscriptOpen (OpenKind: WRITE_APPEND_OPEN_KIND := WRITE_MODE) ;\n  --   procedure TranscriptOpen (Status: InOut FILE_OPEN_STATUS; OpenKind: WRITE_APPEND_OPEN_KIND := WRITE_MODE) ;\n  \n  procedure        TranscriptClose ;  \n  impure function  IsTranscriptOpen return boolean ; \n  alias            IsTranscriptEnabled is IsTranscriptOpen [return boolean] ;  \n  \n  -- Mirroring.  When using TranscriptPkw WriteLine and Print, uses both TranscriptFile and OUTPUT \n  procedure        SetTranscriptMirror (A : boolean := TRUE) ; \n  impure function  IsTranscriptMirrored return boolean ; \n  alias            GetTranscriptMirror is IsTranscriptMirrored [return boolean] ;\n\n  -- Write to TranscriptFile when open.  Write to OUTPUT when not open or IsTranscriptMirrored\n  procedure        WriteLine(buf : inout line)  ; \n  procedure        Print(s : string) ; \n  \n  -- Create \"count\" number of blank lines\n  procedure BlankLine (count : integer := 1) ;\n\nend TranscriptPkg ;\n  \n--- ///////////////////////////////////////////////////////////////////////////\n--- ///////////////////////////////////////////////////////////////////////////\n--- ///////////////////////////////////////////////////////////////////////////\n\npackage body TranscriptPkg is\n  ------------------------------------------------------------\n  type LocalBooleanPType is protected \n    procedure Set (A : boolean) ; \n    impure function get return boolean ; \n  end protected LocalBooleanPType ; \n  type LocalBooleanPType is protected body\n    variable GlobalVar : boolean := FALSE ; \n    procedure Set (A : boolean) is\n    begin\n       GlobalVar := A ; \n    end procedure Set ; \n    impure function get return boolean is\n    begin\n      return GlobalVar ; \n    end function get ; \n  end protected body LocalBooleanPType ; \n  \n  file TranscriptYamlFile : text ;\n  \n  ------------------------------------------------------------\n  shared variable TranscriptEnable : LocalBooleanPType ; \n  shared variable TranscriptMirror : LocalBooleanPType ; \n  shared variable TranscriptOpened : LocalBooleanPType ; \n\n  ------------------------------------------------------------\n  procedure CreateTranscriptYamlLog (Name : STRING) is\n  ------------------------------------------------------------\n    variable buf : line ;\n  begin\n    -- Create Yaml file with list of files.\n    if not TranscriptOpened.Get then\n      file_open(TranscriptYamlFile, OSVVM_TRANSCRIPT_YAML_FILE, WRITE_MODE) ;\n--      swrite(buf, \"Transcripts: \") ; \n--      WriteLine(TranscriptYamlFile, buf) ; \n      TranscriptOpened.Set(TRUE) ;\n    else\n      file_open(TranscriptYamlFile, OSVVM_TRANSCRIPT_YAML_FILE, APPEND_MODE) ;\n    end if ; \n    swrite(buf, \"  - \" & Name) ; \n    WriteLine(TranscriptYamlFile, buf) ; \n    file_close(TranscriptYamlFile) ;\n  end procedure CreateTranscriptYamlLog ; \n\n  ------------------------------------------------------------\n  procedure TranscriptOpen (Status: InOut FILE_OPEN_STATUS; ExternalName: STRING; OpenKind: WRITE_APPEND_OPEN_KIND := WRITE_MODE) is\n  ------------------------------------------------------------\n  begin\n    file_open(Status, TranscriptFile, ExternalName, OpenKind) ;\n    \n    if Status = OPEN_OK then \n      CreateTranscriptYamlLog(ExternalName) ; \n      TranscriptEnable.Set(TRUE) ;\n    end if ; \n  end procedure TranscriptOpen ; \n  \n  ------------------------------------------------------------\n  procedure TranscriptOpen (ExternalName: STRING; OpenKind: WRITE_APPEND_OPEN_KIND := WRITE_MODE) is\n  ------------------------------------------------------------\n    variable Status : FILE_OPEN_STATUS ; \n  begin\n    TranscriptOpen(Status, ExternalName, OpenKind) ;\n    if Status /= OPEN_OK then \n      report \"TranscriptPkg.TranscriptOpen file: \" & \n             ExternalName & \" status is: \" & to_string(status) & \" and is not OPEN_OK\" severity FAILURE ;\n    end if ; \n  end procedure TranscriptOpen ; \n  \n  ------------------------------------------------------------\n  impure function  TranscriptOpen (ExternalName: STRING; OpenKind: WRITE_APPEND_OPEN_KIND := WRITE_MODE) return FILE_OPEN_STATUS is\n  ------------------------------------------------------------\n    variable Status : FILE_OPEN_STATUS ; \n  begin\n    TranscriptOpen(Status, ExternalName, OpenKind) ;\n    return Status ; \n  end function TranscriptOpen ;\n\n  ------------------------------------------------------------\n  procedure TranscriptClose is\n  ------------------------------------------------------------\n  begin\n    if TranscriptEnable.Get then\n      file_close(TranscriptFile) ;\n    end if ; \n    TranscriptEnable.Set(FALSE) ;\n  end procedure TranscriptClose ; \n  \n  ------------------------------------------------------------\n  impure function IsTranscriptOpen return boolean is\n  ------------------------------------------------------------\n  begin\n    return TranscriptEnable.Get ;\n  end function IsTranscriptOpen ;\n  \n  ------------------------------------------------------------\n  procedure SetTranscriptMirror (A : boolean := TRUE) is \n  ------------------------------------------------------------\n  begin\n      TranscriptMirror.Set(A) ;\n  end procedure SetTranscriptMirror ; \n\n  ------------------------------------------------------------\n  impure function IsTranscriptMirrored return boolean is\n  ------------------------------------------------------------\n  begin\n    return TranscriptMirror.Get ;\n  end function IsTranscriptMirrored ;\n    \n  ------------------------------------------------------------\n  procedure WriteLine(buf : inout line) is \n  ------------------------------------------------------------\n  begin\n    if not TranscriptEnable.Get then\n      WriteLine(OUTPUT, buf) ; \n    elsif TranscriptMirror.Get then\n      TEE(TranscriptFile, buf) ; \n    else\n      WriteLine(TranscriptFile, buf) ; \n    end if ; \n  end procedure WriteLine ; \n\n  ------------------------------------------------------------\n  procedure Print(s : string) is \n  ------------------------------------------------------------\n    variable buf : line ; \n  begin\n    write(buf, s) ; \n    WriteLine(buf) ; \n  end procedure Print ; \n  \n  ------------------------------------------------------------\n  procedure BlankLine (count : integer := 1) is\n  ------------------------------------------------------------\n  begin\n    for i in 1 to count loop \n      print(\"\") ; \n    end loop ;\n  end procedure Blankline ; \n\nend package body TranscriptPkg ;","lang":"vhdl"};
processSrcData(g_data);
var g_data = {"name":"C:/SynthWorks/Dev/_osvvm/OsvvmLibraries/UART/src/UartTbPkg.vhd","src":"--\n--  File Name:         UartTbPkg.vhd\n--  Design Unit Name:  UartTbPkg\n--  OSVVM Release:     OSVVM MODELS STANDARD VERSION\n--\n--  Maintainer:        Jim Lewis      email:  jim@synthworks.com\n--  Contributor(s):\n--     Jim Lewis      jim@synthworks.com\n--\n--\n--  Description:\n--      Constant and Transaction Support for OSVVM UART Transmitter and Receiver models\n--\n--\n--  Developed by:\n--        SynthWorks Design Inc.\n--        VHDL Training Classes\n--        http://www.SynthWorks.com\n--\n--  Revision History:\n--    Date      Version    Description\n--    10/2022   2022.10    Added UartRecArrayType\n--    02/2022   2022.02    Replaced to_hstring with to_hxstring\n--    01/2020   2020.01    Updated license notice\n--    05/2019   2019.05    Updated for OSVVM public release\n--    1999      1999.00    Developed for SynthWorks' Advanced VHDL Testbenches and Verification Class\n--\n--\n--  This file is part of OSVVM.\n--\n--  Copyright (c) 1999 - 2020 by SynthWorks Design Inc.\n--\n--  Licensed under the Apache License, Version 2.0 (the \"License\");\n--  you may not use this file except in compliance with the License.\n--  You may obtain a copy of the License at\n--\n--      https://www.apache.org/licenses/LICENSE-2.0\n--\n--  Unless required by applicable law or agreed to in writing, software\n--  distributed under the License is distributed on an \"AS IS\" BASIS,\n--  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n--  See the License for the specific language governing permissions and\n--  limitations under the License.\n--\n\nlibrary ieee ;\n  use ieee.std_logic_1164.all ;\n  use ieee.numeric_std.all ;\n  use ieee.numeric_std_unsigned.all ;\n\n  use std.textio.all ;\n\nlibrary OSVVM ; \n  context OSVVM.OsvvmContext ;  \n\nlibrary osvvm_common ; \n  context osvvm_common.OsvvmCommonContext ;  \n  \npackage UartTbPkg is \n\n  ------------------------------------------------------------\n  -- UART Data and Error Injection Settings for Transaction Support\n  ------------------------------------------------------------\n  subtype  UartTb_DataType is std_logic_vector(7 downto 0) ;\n  subtype  UartTb_ErrorModeType is std_logic_vector(3 downto 1) ;\n\n  constant UARTTB_BREAK_INDEX  : integer := 3 ; \n  constant UARTTB_STOP_INDEX   : integer := 2 ; \n  constant UARTTB_PARITY_INDEX : integer := 1 ; \n\n  constant UARTTB_NO_ERROR     : UartTb_ErrorModeType := (others => '0') ;\n  constant UARTTB_BREAK_ERROR  : UartTb_ErrorModeType := (UARTTB_BREAK_INDEX => '1', others => '0') ;\n  constant UARTTB_STOP_ERROR   : UartTb_ErrorModeType := (UARTTB_STOP_INDEX => '1', others => '0') ;\n  constant UARTTB_PARITY_ERROR : UartTb_ErrorModeType := (UARTTB_PARITY_INDEX => '1', others => '0') ;\n\n  ------------------------------------------------------------\n  -- UART Transaction Record derived from StreamRecType\n  ------------------------------------------------------------\n  subtype UartRecType is StreamRecType (\n    DataToModel   (UartTb_DataType'range), \n    ParamToModel  (UartTb_ErrorModeType'range), \n    DataFromModel (UartTb_DataType'range), \n    ParamFromModel(UartTb_ErrorModeType'range) \n  ) ;\n  \n--  type UartRecArrayType is array (integer range <>) of UartRecType ; \n  subtype UartRecArrayType is StreamRecArrayType(open)(\n    DataToModel   (UartTb_DataType'range), \n    ParamToModel  (UartTb_ErrorModeType'range), \n    DataFromModel (UartTb_DataType'range), \n    ParamFromModel(UartTb_ErrorModeType'range) \n  ) ;\n\n  ------------------------------------------------------------\n  -- UART Options\n  ------------------------------------------------------------\n  type UartOptionType is (SET_PARITY_MODE, SET_STOP_BITS, SET_DATA_BITS, SET_BAUD);\n\n  ------------------------------------------------------------\n  -- Constants for UART ParityMode, StopBits, DataBits, and Baud\n  ------------------------------------------------------------\n  ------------------------------------------------------------\n  subtype  UartTb_BaudType is time_max ; \n  ------------------------------------------------------------\n  constant UARTTB_TIME_BASE         : time := 1 ns ;\n  constant UART_BAUD_PERIOD_250K    : time := 4000 ns ;\n  constant UART_BAUD_PERIOD_125K    : time := 8000 ns ;\n  constant UART_BAUD_PERIOD_115200  : time := 8680 ns ;\n  constant UART_BAUD_PERIOD_56K     : time := 8680 ns  * 2 ;\n  constant UART_BAUD_PERIOD_28_8K   : time := 8680 ns  * 4 ;\n  \n  constant BAUD_BINS : CovBinType := GenBin(UART_BAUD_PERIOD_250K/1 ns) & GenBin(UART_BAUD_PERIOD_125K/1 ns) &GenBin(UART_BAUD_PERIOD_115200/1 ns) & GenBin(UART_BAUD_PERIOD_56K/1 ns) & GenBin(UART_BAUD_PERIOD_28_8K/1 ns) ; \n\n  ------------------------------------------------------------\n  subtype  UartTb_DataBitsType is integer_max ; \n  ------------------------------------------------------------\n  constant UARTTB_DATA_BITS_5   : UartTb_DataBitsType := 5 ; \n  constant UARTTB_DATA_BITS_6   : UartTb_DataBitsType := 6 ; \n  constant UARTTB_DATA_BITS_7   : UartTb_DataBitsType := 7 ; \n  constant UARTTB_DATA_BITS_8   : UartTb_DataBitsType := 8 ; \n  \n  constant DATA_BITS_BINS : CovBinType := GenBin(UARTTB_DATA_BITS_5) & GenBin(UARTTB_DATA_BITS_6) & GenBin(UARTTB_DATA_BITS_7) & GenBin(UARTTB_DATA_BITS_8) ; \n\n  ------------------------------------------------------------\n  subtype  UartTb_ParityModeType is integer_max ; \n  ------------------------------------------------------------\n  constant UARTTB_PARITY_NONE   : UartTb_ParityModeType := 0 ; \n  constant UARTTB_PARITY_ODD    : UartTb_ParityModeType := 1 ; \n  constant UARTTB_PARITY_EVEN   : UartTb_ParityModeType := 3 ; \n  constant UARTTB_PARITY_ONE    : UartTb_ParityModeType := 5 ; \n  constant UARTTB_PARITY_ZERO   : UartTb_ParityModeType := 7 ; \n\n  constant PARITY_MODE_BINS : CovBinType := GenBin(UARTTB_PARITY_NONE) & \n           GenBin(UARTTB_PARITY_ODD) & GenBin(UARTTB_PARITY_EVEN) & \n           GenBin(UARTTB_PARITY_ONE) & GenBin(UARTTB_PARITY_ZERO) ; \n\n  ------------------------------------------------------------\n  subtype UartTb_StopBitsType   is integer_max ; \n  ------------------------------------------------------------\n  constant UARTTB_STOP_BITS_1   : integer := 1 ; \n  constant UARTTB_STOP_BITS_2   : integer := 2 ; \n  \n  constant STOP_BITS_BINS : CovBinType := GenBin(UARTTB_STOP_BITS_1) & GenBin(UARTTB_STOP_BITS_2) ; \n\n\n  ------------------------------------------------------------\n  -- UART Scoreboard Support\n  ------------------------------------------------------------\n  ------------------------------------------------------------\n  type UartStimType is record \n  ------------------------------------------------------------\n    Data     : std_logic_vector(7 downto 0) ; \n    Error    : UartTb_ErrorModeType ; \n  end record ; \n\n  ------------------------------------------------------------\n  function to_string (\n  ------------------------------------------------------------\n    constant  rec             : in    UartStimType \n  ) return string ; \n\n  ------------------------------------------------------------\n  function Match (\n  ------------------------------------------------------------\n    constant  Actual          : in    UartStimType ;\n    constant  Expected        : in    UartStimType\n  ) return boolean ; \n\n  \n  ------------------------------------------------------------\n  -- UART Model Transactions\n  ------------------------------------------------------------\n  ------------------------------------------------------------\n  -- SetUartBaud: \n  procedure SetUartBaud (\n  ------------------------------------------------------------\n    signal    TransactionRec : inout StreamRecType ;\n    constant  Baud           : UartTb_BaudType \n  ) ; \n\n  ------------------------------------------------------------\n  -- SetUartNumDataBits: \n  procedure SetUartNumDataBits (\n  ------------------------------------------------------------\n    signal    TransactionRec : inout StreamRecType ;\n    constant  NumDataBits    : UartTb_DataBitsType \n  ) ; \n\n  ------------------------------------------------------------\n  -- SetParityMode: \n  procedure SetUartParityMode (\n  ------------------------------------------------------------\n    signal    TransactionRec : inout StreamRecType ;\n    constant  ParityMode     : UartTb_ParityModeType \n  ) ; \n\n  ------------------------------------------------------------\n  -- SetUartNumStopBits: \n  procedure SetUartNumStopBits (\n  ------------------------------------------------------------\n    signal    TransactionRec : inout StreamRecType ;\n    constant  NumStopBits    : UartTb_StopBitsType \n  ) ; \n\n  ------------------------------------------------------------\n  -- SetUartState: \n  procedure SetUartState (\n  ------------------------------------------------------------\n    signal    TransactionRec : inout StreamRecType ;\n    constant  Baud           : UartTb_BaudType       := UART_BAUD_PERIOD_115200 ;\n    constant  DataBits       : UartTb_DataBitsType   := UARTTB_DATA_BITS_8 ;\n    constant  ParityMode     : UartTb_ParityModeType := UARTTB_PARITY_EVEN ;\n    constant  StopBits       : UartTb_StopBitsType   := UARTTB_STOP_BITS_1 \n  ) ; \n  \n  \n  ------------------------------------------------------------\n  -- UART Model Support\n  ------------------------------------------------------------  \n  ------------------------------------------------------------\n  function CalcParity (\n  ------------------------------------------------------------\n    constant  Data       : in std_logic_vector ;\n    constant  ParityMode : in UartTb_ParityModeType := UARTTB_PARITY_EVEN \n  ) return std_logic ; \n\n\n  ------------------------------------------------------------\n  -- CheckBaud:  Parameter Check\n  impure function CheckBaud (\n  ------------------------------------------------------------\n    constant  AlertLogID  : in AlertLogIDType ; \n    constant  baud        : in time ;\n    constant  StatusMsgOn : in boolean := FALSE \n  ) return time ; \n  \n  ------------------------------------------------------------\n  -- CheckNumDataBits:  Parameter Check\n  impure function CheckNumDataBits (\n  ------------------------------------------------------------\n    constant  AlertLogID  : in AlertLogIDType ; \n    constant  NumDataBits : in UartTb_DataBitsType ;\n    constant  StatusMsgOn : in boolean := FALSE \n  ) return UartTb_DataBitsType ; \n\n  ------------------------------------------------------------\n  -- CheckParityMode:  Parameter Check\n  impure function CheckParityMode (\n  ------------------------------------------------------------\n    constant  AlertLogID  : in AlertLogIDType ; \n    constant  ParityMode  : in UartTb_ParityModeType ;\n    constant  StatusMsgOn : in boolean := FALSE \n  ) return UartTb_ParityModeType ; \n\n  ------------------------------------------------------------\n  -- CheckNumStopBits:  Parameter Check\n  impure function CheckNumStopBits (\n  ------------------------------------------------------------\n    constant  AlertLogID  : in AlertLogIDType ; \n    constant  NumStopBits : in UartTb_StopBitsType ;\n    constant  StatusMsgOn : in boolean := FALSE \n  ) return UartTb_StopBitsType ; \n\n  ------------------------------------------------------------\n  -- Deprecated transaction procedures from the past\n  ------------------------------------------------------------\n  alias UartSend is  Send [UartRecType, std_logic_vector, boolean] ;\n  alias UartSend is  Send [UartRecType, std_logic_vector, std_logic_vector, boolean] ;\n  alias UartGet is   Get  [UartRecType, std_logic_vector, boolean] ;\n  alias UartGet is   Get  [UartRecType, std_logic_vector, std_logic_vector, boolean] ;\n  alias UartCheck is Check[UartRecType, std_logic_vector, boolean] ;\n  alias UartCheck is Check[UartRecType, std_logic_vector, std_logic_vector, boolean] ;\n  alias NoOp is      WaitForClock[UartRecType, natural] ;\n\nend UartTbPkg ;\n\npackage body UartTbPkg is \n\n  ------------------------------------------------------------\n  -- UART Scoreboard Support \n  ------------------------------------------------------------\n  ------------------------------------------------------------\n  function to_string (\n  ------------------------------------------------------------\n    constant  rec       : in    UartStimType \n  ) return string is \n  begin\n    return \"Data = \" & to_hxstring(rec.Data) & \n           \", Parity Error: \" & to_string( rec.Error(UARTTB_PARITY_INDEX)) &\n           \", Stop Error: \" & to_string( rec.Error(UARTTB_STOP_INDEX)) &\n           \", Break Error: \" & to_string( rec.Error(UARTTB_BREAK_INDEX)) ;\n  end function to_string ; \n  \n  ------------------------------------------------------------\n  function Match (\n  ------------------------------------------------------------\n    constant  Actual      : in    UartStimType ;\n    constant  Expected    : in    UartStimType\n  ) return boolean is \n  begin\n    if Expected.Error(UARTTB_BREAK_INDEX) = '1' then \n      return Actual.Error(UARTTB_BREAK_INDEX) = '1' ;\n    else \n      return Actual.Data = Expected.Data and Actual.Error = Expected.Error ; \n    end if ; \n  end function Match ; \n  \n  \n  ------------------------------------------------------------\n  -- UART Model Transactions\n  ------------------------------------------------------------\n  ------------------------------------------------------------\n  -- SetUartBaud: \n  procedure SetUartBaud (\n  ------------------------------------------------------------\n    signal    TransactionRec : inout StreamRecType ;\n    constant  Baud           : UartTb_BaudType \n  ) is \n  begin\n    SetModelOptions(TransactionRec, UartOptionType'pos(SET_BAUD), Baud) ;\n  end procedure SetUartBaud ; \n\n  ------------------------------------------------------------\n  -- SetUartNumDataBits: \n  procedure SetUartNumDataBits (\n  ------------------------------------------------------------\n    signal    TransactionRec : inout StreamRecType ;\n    constant  NumDataBits    : UartTb_DataBitsType \n  ) is \n  begin\n    SetModelOptions(TransactionRec, UartOptionType'pos(SET_DATA_BITS), NumDataBits) ;\n  end procedure SetUartNumDataBits ; \n\n  ------------------------------------------------------------\n  -- SetParityMode: \n  procedure SetUartParityMode (\n  ------------------------------------------------------------\n    signal    TransactionRec : inout StreamRecType ;\n    constant  ParityMode     : UartTb_ParityModeType \n  ) is \n  begin\n    SetModelOptions(TransactionRec, UartOptionType'pos(SET_PARITY_MODE), ParityMode) ;\n  end procedure SetUartParityMode ; \n\n  ------------------------------------------------------------\n  -- SetUartNumStopBits: \n  procedure SetUartNumStopBits (\n  ------------------------------------------------------------\n    signal    TransactionRec : inout StreamRecType ;\n    constant  NumStopBits    : UartTb_StopBitsType \n  ) is \n  begin\n    SetModelOptions(TransactionRec, UartOptionType'pos(SET_STOP_BITS), NumStopBits) ;\n  end procedure SetUartNumStopBits ; \n\n  ------------------------------------------------------------\n  -- SetUartState: \n  procedure SetUartState (\n  ------------------------------------------------------------\n    signal    TransactionRec : inout StreamRecType ;\n    constant  Baud           : UartTb_BaudType       := UART_BAUD_PERIOD_115200 ;\n    constant  DataBits       : UartTb_DataBitsType   := UARTTB_DATA_BITS_8 ;\n    constant  ParityMode     : UartTb_ParityModeType := UARTTB_PARITY_EVEN ;\n    constant  StopBits       : UartTb_StopBitsType   := UARTTB_STOP_BITS_1 \n  ) is \n  begin\n    SetUartBaud       (TransactionRec, Baud      ) ;\n    SetUartNumDataBits(TransactionRec, DataBits  ) ;\n    SetUartParityMode (TransactionRec, ParityMode) ; \n    SetUartNumStopBits(TransactionRec, StopBits  ) ;\n  end procedure SetUartState ; \n  \n  \n  ------------------------------------------------------------\n  -- UART Model Support\n  ------------------------------------------------------------\n  ------------------------------------------------------------\n  function CalcParity (\n  ------------------------------------------------------------\n    constant  Data       : in std_logic_vector ;\n    constant  ParityMode : in UartTb_ParityModeType := UARTTB_PARITY_EVEN \n  ) return std_logic is \n  begin\n    case ParityMode is\n      when UARTTB_PARITY_ODD  =>  return not (xor Data) ;\n      when UARTTB_PARITY_EVEN =>  return xor Data ; \n      when UARTTB_PARITY_ONE  =>  return '1' ; \n      when UARTTB_PARITY_ZERO =>  return '0' ;\n      when others =>              return '-' ;\n    end case ; \n  end function CalcParity ; \n\n\n  ------------------------------------------------------------\n  -- CheckBaud:  Parameter Check\n  impure function CheckBaud (\n  ------------------------------------------------------------\n    constant  AlertLogID  : in AlertLogIDType ; \n    constant  baud        : in time ;\n    constant  StatusMsgOn : in boolean := FALSE \n  ) return time is \n    variable ResultBaud : time ;\n  begin\n    if baud <= 0 sec then\n      Alert(AlertLogID, \n        \"Unsupported baud = \" & to_string(baud) & \". Using UART_BAUD_PERIOD_125K\", ERROR) ;\n      ResultBaud := UART_BAUD_PERIOD_125K ; \n    else\n      log(AlertLogID, \"Baud set to \" & to_string(baud, 1 ns), INFO, StatusMsgOn) ;\n      ResultBaud := Baud ; \n    end if ; \n    return ResultBaud ; \n  end function CheckBaud ; \n\n  ------------------------------------------------------------\n  -- CheckNumDataBits:  Parameter Check\n  impure function CheckNumDataBits (\n  ------------------------------------------------------------\n    constant  AlertLogID  : in AlertLogIDType ; \n    constant  NumDataBits : in UartTb_DataBitsType ;\n    constant  StatusMsgOn : in boolean := FALSE \n  ) return UartTb_DataBitsType is \n    variable ResultNumDataBits : UartTb_DataBitsType ;\n  begin\n    ResultNumDataBits := NumDataBits ; \n    case NumDataBits is\n      when UARTTB_DATA_BITS_5 =>   log(AlertLogID, \"NumDataBits set to UARTTB_DATA_BITS_5\", INFO, StatusMsgOn) ;\n      when UARTTB_DATA_BITS_6  =>  log(AlertLogID, \"NumDataBits set to UARTTB_DATA_BITS_6\", INFO, StatusMsgOn) ;\n      when UARTTB_DATA_BITS_7 =>   log(AlertLogID, \"NumDataBits set to UARTTB_DATA_BITS_7\", INFO, StatusMsgOn) ;\n      when UARTTB_DATA_BITS_8  =>  log(AlertLogID, \"NumDataBits set to UARTTB_DATA_BITS_8\", INFO, StatusMsgOn) ;\n      when others => \n        Alert(AlertLogID, \n          \"Unsupported NumDataBits = \" & to_string(NumDataBits) & \". Using UARTTB_DATA_BITS_8\", ERROR) ;\n        ResultNumDataBits := UARTTB_DATA_BITS_8 ; \n    end case ; \n    return ResultNumDataBits ; \n  end function CheckNumDataBits ; \n\n  ------------------------------------------------------------\n  -- CheckParityMode:  Parameter Check\n  impure function CheckParityMode (\n  ------------------------------------------------------------\n    constant  AlertLogID  : in AlertLogIDType ; \n    constant  ParityMode  : in UartTb_ParityModeType ;\n    constant  StatusMsgOn : in boolean := FALSE \n  ) return UartTb_ParityModeType is \n    variable ResultParityMode : UartTb_ParityModeType ;\n  begin\n    ResultParityMode := ParityMode ; \n    case ParityMode is\n      when UARTTB_PARITY_NONE =>  log(AlertLogID, \"ParityMode set to UARTTB_PARITY_NONE\", INFO, StatusMsgOn) ;\n      when UARTTB_PARITY_ODD  =>  log(AlertLogID, \"ParityMode set to UARTTB_PARITY_ODD\",  INFO, StatusMsgOn) ;\n      when UARTTB_PARITY_EVEN =>  log(AlertLogID, \"ParityMode set to UARTTB_PARITY_EVEN\", INFO, StatusMsgOn) ; \n      when UARTTB_PARITY_ONE  =>  log(AlertLogID, \"ParityMode set to UARTTB_PARITY_ONE\",  INFO, StatusMsgOn) ;\n      when UARTTB_PARITY_ZERO =>  log(AlertLogID, \"ParityMode set to UARTTB_PARITY_ZERO\", INFO, StatusMsgOn) ;\n      when others => \n        Alert(AlertLogID, \n          \"Unsupported ParityMode = \" & to_string(ParityMode) & \". Using EVEN PARITY\", ERROR) ;\n        ResultParityMode := UARTTB_PARITY_EVEN ; \n    end case ; \n    return ResultParityMode ; \n  end function CheckParityMode ; \n\n  ------------------------------------------------------------\n  -- CheckNumStopBits:  Parameter Check\n  impure function CheckNumStopBits (\n  ------------------------------------------------------------\n    constant  AlertLogID  : in AlertLogIDType ; \n    constant  NumStopBits : in UartTb_StopBitsType ;\n    constant  StatusMsgOn : in boolean := FALSE \n  ) return UartTb_StopBitsType is \n    variable ResultNumStopBits : UartTb_StopBitsType ;\n  begin\n    ResultNumStopBits := NumStopBits ; \n    case NumStopBits is\n      when UARTTB_STOP_BITS_1 =>   log(AlertLogID, \"NumStopBits set to UARTTB_STOP_BITS_1\", INFO, StatusMsgOn) ;\n      when UARTTB_STOP_BITS_2  =>  log(AlertLogID, \"NumStopBits set to UARTTB_STOP_BITS_2\", INFO, StatusMsgOn) ;\n      when others => \n        Alert(AlertLogID, \n          \"Unsupported NumStopBits = \" & to_string(NumStopBits) & \". Using UARTTB_STOP_BITS_1\", ERROR) ;\n        ResultNumStopBits := UARTTB_STOP_BITS_1 ; \n    end case ; \n    return ResultNumStopBits ; \n  end function CheckNumStopBits ; \n\nend UartTbPkg ;\n","lang":"vhdl"};
processSrcData(g_data);
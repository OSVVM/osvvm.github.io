var g_data = {"name":"C:/SynthWorks/Dev/_osvvm/OsvvmLibraries/AXI4/Axi4/TestCases/TbAxi4_AlertLogIDMemory.vhd","src":"--\n--  File Name:         TbAxi4_AlertLogIDMemory.vhd\n--  Design Unit Name:  Architecture of TestCtrl\n--  Revision:          OSVVM MODELS STANDARD VERSION\n--\n--  Maintainer:        Jim Lewis      email:  jim@synthworks.com\n--  Contributor(s):\n--     Jim Lewis      jim@synthworks.com\n--\n--\n--  Description:\n--      Test transaction source\n--\n--\n--  Developed by:\n--        SynthWorks Design Inc.\n--        VHDL Training Classes\n--        http://www.SynthWorks.com\n--\n--  Revision History:\n--    Date      Version    Description\n--    12/2020   2020.12    Initial revision\n--\n--\n--  This file is part of OSVVM.\n--  \n--  Copyright (c) 2017 - 2021 by SynthWorks Design Inc.  \n--  \n--  Licensed under the Apache License, Version 2.0 (the \"License\");\n--  you may not use this file except in compliance with the License.\n--  You may obtain a copy of the License at\n--  \n--      https://www.apache.org/licenses/LICENSE-2.0\n--  \n--  Unless required by applicable law or agreed to in writing, software\n--  distributed under the License is distributed on an \"AS IS\" BASIS,\n--  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n--  See the License for the specific language governing permissions and\n--  limitations under the License.\n--  \n\narchitecture AlertLogIDMemory of TestCtrl is\n\n  signal TestDone, Sync : integer_barrier := 1 ;\n  signal TbManagerID, TbSubordinateID : AlertLogIDType ; \n \nbegin\n\n  ------------------------------------------------------------\n  -- ControlProc\n  --   Set up AlertLog and wait for end of test\n  ------------------------------------------------------------\n  ControlProc : process\n  begin\n    -- Initialization of test\n    SetTestName(\"TbAxi4_AlertLogIDMemory\") ;\n    TbManagerID     <= GetAlertLogID(\"Manager\") ;\n    TbSubordinateID  <= GetAlertLogID(\"Subordinate\") ;\n    SetLogEnable(PASSED, TRUE) ;    -- Enable PASSED logs\n    SetLogEnable(INFO, TRUE) ;    -- Enable INFO logs\n    SetAlertStopCount(FAILURE, 2) ;    -- Enable INFO logs\n\n    -- Wait for testbench initialization \n    wait for 0 ns ;  wait for 0 ns ;\n    TranscriptOpen(OSVVM_RESULTS_DIR & \"TbAxi4_AlertLogIDMemory.txt\") ;\n    SetTranscriptMirror(TRUE) ; \n\n    -- Wait for Design Reset\n    wait until nReset = '1' ;  \n    ClearAlerts ;\n\n    -- Wait for test to finish\n    WaitForBarrier(TestDone, 35 ms) ;\n    AlertIf(now >= 35 ms, \"Test finished due to timeout\") ;\n--    AlertIf(GetAffirmCount < 1, \"Test is not Self-Checking\");\n    \n    \n    TranscriptClose ; \n    -- Printing differs in different simulators due to differences in process order execution\n    -- AlertIfDiff(\"./results/TbAxi4_AlertLogIDMemory.txt\", \"../AXI4/Axi4/testbench/validated_results/TbAxi4_AlertLogIDMemory.txt\", \"\") ; \n\n    EndOfTestReports(ExternalErrors => (FAILURE => -1, ERROR => -1, WARNING => -1)) ; \n    std.env.stop ;\n    wait ; \n  end process ControlProc ; \n\n  ------------------------------------------------------------\n  -- ManagerProc\n  --   Generate transactions for AxiManager\n  ------------------------------------------------------------\n  ManagerProc : process\n  begin\n    wait until nReset = '1' ;  \n    WaitForClock(ManagerRec, 2) ; \n    \n    WaitForBarrier(TestDone) ;\n    wait ;\n  end process ManagerProc ;\n\n\n  ------------------------------------------------------------\n  -- SubordinateProc\n  --   Generate transactions for AxiSubordinate\n  ------------------------------------------------------------\n  SubordinateProc : process\n    variable AlertLogID : AlertLogIDType ; \n    variable Count1, Count2 : integer ; \n  begin\n    wait until nReset = '1' ;  \n    WaitForClock(SubordinateRec, 2) ; \n    \n    GetAlertLogID(SubordinateRec, AlertLogID) ;\n    GetErrorCount(SubordinateRec, Count1) ;\n    AffirmIfEqual(TbSubordinateID, Count1, 0, \"GetErrorCount\") ;\n    Count2 := GetAlertCount(AlertLogID) ;\n    AffirmIfEqual(TbSubordinateID, Count2, 0, \"GetAlertCount\") ;\n    \n    Alert(AlertLogID, \"Injected Error 1\", ERROR) ;\n    GetErrorCount(SubordinateRec, Count1) ;\n    AffirmIfEqual(TbSubordinateID, Count1, 1, \"GetErrorCount\") ;\n    Count2 := GetAlertCount(AlertLogID) ;\n    AffirmIfEqual(TbSubordinateID, Count2, 1, \"GetAlertCount\") ;\n\n    SetAlertStopCount(AlertLogID, FAILURE, 10) ;\n    Alert(AlertLogID, \"Injected FAILURE 1\", FAILURE) ;\n    GetErrorCount(SubordinateRec, Count1) ;\n    AffirmIfEqual(TbSubordinateID, Count1, 2, \"GetErrorCount\") ;\n    Count2 := GetAlertCount(AlertLogID) ;\n    AffirmIfEqual(TbSubordinateID, Count2, 2, \"GetAlertCount\") ;\n\n    Alert(AlertLogID, \"Injected WARNING 1\", WARNING) ;\n    GetErrorCount(SubordinateRec, Count1) ;\n    AffirmIfEqual(TbSubordinateID, Count1, 3, \"GetErrorCount\") ;\n    Count2 := GetAlertCount(AlertLogID) ;\n    AffirmIfEqual(TbSubordinateID, Count2, 3, \"GetAlertCount\") ;\n\n    WaitForBarrier(TestDone) ;\n    wait ;\n  end process SubordinateProc ;\n\n\nend AlertLogIDMemory ;\n\nConfiguration TbAxi4_AlertLogIDMemory of TbAxi4Memory is\n  for TestHarness\n    for TestCtrl_1 : TestCtrl\n      use entity work.TestCtrl(AlertLogIDMemory) ; \n    end for ; \n--!!    for Subordinate_1 : Axi4Subordinate \n--!!      use entity OSVVM_AXI4.Axi4Memory ; \n--!!    end for ; \n  end for ; \nend TbAxi4_AlertLogIDMemory ; ","lang":"vhdl"};
processSrcData(g_data);
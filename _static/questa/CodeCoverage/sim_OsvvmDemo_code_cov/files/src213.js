var g_data = {"name":"C:/SynthWorks/Dev/_osvvm/OsvvmLibraries/UART/testbench/TbUart.vhd","src":"--\n--  File Name:         TbUart.vhd\n--  Design Unit Name:  TbUart\n--  OSVVM Release:     OSVVM MODELS STANDARD VERSION\n--\n--  Maintainer:        Jim Lewis      email:  jim@synthworks.com\n--  Contributor(s):\n--     Jim Lewis      jim@synthworks.com\n--\n--\n--  Description:\n--    Testbench that connects UartTx and UartRx\n--\n--\n--  Developed by:\n--        SynthWorks Design Inc.\n--        VHDL Training Classes\n--        http://www.SynthWorks.com\n--\n--  Revision History:\n--    Date      Version    Description\n--    1999      1999.00    Developed for SynthWorks' Advanced VHDL Testbenches and Verification Class\n--    05/2019   2019.05    Updated for OSVVM public release\n--    01/2020   2020.01    Updated license notice\n--\n--\n--  This file is part of OSVVM.\n--\n--  Copyright (c) 1999 - 2020 by SynthWorks Design Inc.\n--\n--  Licensed under the Apache License, Version 2.0 (the \"License\");\n--  you may not use this file except in compliance with the License.\n--  You may obtain a copy of the License at\n--\n--      https://www.apache.org/licenses/LICENSE-2.0\n--\n--  Unless required by applicable law or agreed to in writing, software\n--  distributed under the License is distributed on an \"AS IS\" BASIS,\n--  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n--  See the License for the specific language governing permissions and\n--  limitations under the License.\n--\n\nlibrary ieee ;\n  use ieee.std_logic_1164.all ;\n  use ieee.numeric_std.all ;\n\n  use std.textio.all ;\n\nlibrary osvvm ;\n  context osvvm.OsvvmContext ;\n\n  library osvvm_uart ;\n  context osvvm_uart.UartContext ;\n\nentity TbUart is \nend TbUart ;\n\narchitecture TestHarness of TbUart is\n\n  constant tperiod_Clk  : time := 10 ns ;\n  constant tpd          : time := 2 ns ;\n  signal Clk            : std_logic := '0' ;\n  signal nReset         : std_logic ;\n\n  -- Uart Interface\n  signal SerialData     : std_logic ;\n\n  ------------------------------------------------------------\n  component TestCtrl \n  -- Stimulus generation and synchronization\n  ------------------------------------------------------------\n  generic (\n    tperiod_Clk           : time := 10 ns \n  ) ; \n  port (\n    UartTxRec          : InOut UartRecType ;\n    UartRxRec          : InOut UartRecType ;\n\n    Clk                : In    std_logic ;\n    nReset             : In    std_logic \n  ) ;\n  end component ;\n\n  signal UartTxRec           : UartRecType ;\n  signal UartRxRec           : UartRecType ;\n\n\n\nbegin\n\n  ------------------------------------------------------------\n  -- create Clock \n  Osvvm.TbUtilPkg.CreateClock ( \n  ------------------------------------------------------------\n    Clk        => Clk, \n    Period     => tperiod_Clk \n  )  ; \n  \n  ------------------------------------------------------------\n  -- create nReset \n  Osvvm.TbUtilPkg.CreateReset ( \n  ------------------------------------------------------------\n    Reset       => nReset,\n    ResetActive => '0',\n    Clk         => Clk,\n    Period      => 7 * tperiod_Clk,\n    tpd         => tpd\n  ) ;\n\n\n  ------------------------------------------------------------\n  UartTx_1 : UartTx \n  ------------------------------------------------------------\n  port map (\n    TransRec            => UartTxRec,\n    SerialDataOut       => SerialData   \n  ) ;\n\n\n  ------------------------------------------------------------\n  UartRx_1 : UartRx \n  ------------------------------------------------------------\n  port map (\n    TransRec            => UartRxRec,\n    SerialDataIn        => SerialData \n  ) ;\n\n\n  ------------------------------------------------------------\n  TestCtrl_1 : TestCtrl \n  -- Stimulus generation and synchronization\n  ------------------------------------------------------------\n  generic map (\n    tperiod_Clk         => tperiod_Clk\n  ) \n  port map (\n    UartTxRec             => UartTxRec,\n    UartRxRec             => UartRxRec,\n\n    Clk                   => Clk,\n    nReset                => nReset\n  ) ;\n\nend TestHarness ;","lang":"vhdl"};
processSrcData(g_data);
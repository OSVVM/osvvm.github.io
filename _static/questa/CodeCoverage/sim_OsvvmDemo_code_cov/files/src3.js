var g_data = {"name":"C:/SynthWorks/Dev/_osvvm/OsvvmLibraries/Common/src/AddressBusTransactionArrayPkg.vhd","src":"--\n--  File Name:         AddressBusTransactionArrayPkg.vhd\n--  Design Unit Name:  AddressBusTransactionArrayPkg\n--  Revision:          OSVVM MODELS STANDARD VERSION\n--\n--  Maintainer:        Jim Lewis      email:  jim@synthworks.com\n--  Contributor(s):\n--     Jim Lewis      jim@synthworks.com\n--\n--\n--  Description:\n--    Defines Address Bus transaction initiation procedures (Read, Write, ...)\n--    for arrays of Address Bus Interfaces (AddressBusRecArrayType).\n--    Companion to AddressBusTransactionPkg.vhd\n--    \n--    This works around a VHDL issue documented in \n--    https://gitlab.com/IEEE-P1076/VHDL-Issues/-/issues/275\n--    When this issue is fixed and implemented, this package will\n--    no longer be needed\n--\n--\n--  Developed by:\n--        SynthWorks Design Inc.\n--        VHDL Training Classes\n--        http://www.SynthWorks.com\n--\n--  Revision History:\n--    Date      Version    Description\n--    11/2022   2022.11    Initial.   Derived from AddressBusTransactionPkg\n--\n--  This file is part of OSVVM.\n--  \n--  Copyright (c) 2022 by SynthWorks Design Inc.  \n--  \n--  Licensed under the Apache License, Version 2.0 (the \"License\");\n--  you may not use this file except in compliance with the License.\n--  You may obtain a copy of the License at\n--  \n--      https://www.apache.org/licenses/LICENSE-2.0\n--  \n--  Unless required by applicable law or agreed to in writing, software\n--  distributed under the License is distributed on an \"AS IS\" BASIS,\n--  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n--  See the License for the specific language governing permissions and\n--  limitations under the License.\n--  \nlibrary ieee ;\n  use ieee.std_logic_1164.all ;\n  use ieee.numeric_std.all ;\n  use ieee.numeric_std_unsigned.all ;\n  use ieee.math_real.all ;\n\nlibrary osvvm ;\n  context osvvm.OsvvmContext ;\n  use osvvm.ScoreboardPkg_slv.all ; \n\n  use work.FifoFillPkg_slv.all ; \n  use work.AddressBusTransactionPkg.all ; \n\npackage AddressBusTransactionArrayPkg is\n\n  -- ========================================================\n  --  Directive Transactions  \n  --  Directive transactions interact with the verification component \n  --  without generating any transactions or interface waveforms.\n  --  Supported by all verification components\n  -- ========================================================\n  ------------------------------------------------------------\n  procedure WaitForTransaction (\n  --  Wait until pending transaction completes\n  ------------------------------------------------------------\n    signal   TransactionRec : InOut AddressBusRecArrayType ;\n    constant Index          : In    integer  \n  ) ; \n\n  ------------------------------------------------------------\n  procedure WaitForWriteTransaction (\n  --  Wait until pending transaction completes\n  ------------------------------------------------------------\n    signal   TransactionRec : InOut AddressBusRecArrayType ;\n    constant Index          : In    integer  \n  ) ; \n\n  ------------------------------------------------------------\n  procedure WaitForReadTransaction (\n  --  Wait until pending transaction completes\n  ------------------------------------------------------------\n    signal   TransactionRec : InOut AddressBusRecArrayType ;\n    constant Index          : In    integer  \n  ) ;\n  \n  ------------------------------------------------------------\n  procedure WaitForClock (\n  -- Wait for NumberOfClocks number of clocks \n  -- relative to the verification component clock\n  ------------------------------------------------------------\n    signal   TransactionRec : InOut AddressBusRecArrayType ;\n    constant Index          : In    integer  ;\n    constant NumberOfClocks : In    natural := 1\n  ) ;\n\n  alias NoOp is WaitForClock [AddressBusRecArrayType, integer, natural] ;\n\n  ------------------------------------------------------------\n  procedure GetTransactionCount (\n  -- Get the number of transactions handled by the model.  \n  ------------------------------------------------------------\n    signal   TransactionRec : InOut AddressBusRecArrayType ;\n    constant Index          : In    integer  ;\n    variable Count          : Out   integer\n  ) ;\n\n  ------------------------------------------------------------\n  procedure GetWriteTransactionCount (\n  ------------------------------------------------------------\n    signal   TransactionRec : InOut AddressBusRecArrayType ;\n    constant Index          : In    integer  ;\n    variable Count          : Out   integer\n  ) ;\n\n  ------------------------------------------------------------\n  procedure GetReadTransactionCount (\n  -- Get the number of read transactions handled by the model.  \n  ------------------------------------------------------------\n    signal   TransactionRec : InOut AddressBusRecArrayType ;\n    constant Index          : In    integer  ;\n    variable Count          : Out   integer\n  ) ;\n\n  ------------------------------------------------------------\n  procedure GetAlertLogID (\n  -- Get the AlertLogID from the verification component.\n  ------------------------------------------------------------\n    signal   TransactionRec : InOut AddressBusRecArrayType ;\n    constant Index          : In    integer  ;\n    variable AlertLogID     : Out   AlertLogIDType\n  ) ;\n\n  ------------------------------------------------------------\n  procedure GetErrorCount (\n  -- Error reporting for testbenches that do not use OSVVM AlertLogPkg\n  -- Returns error count.  If an error count /= 0, also print errors\n  ------------------------------------------------------------\n    signal   TransactionRec : InOut AddressBusRecArrayType ;\n    constant Index          : In    integer  ;\n    variable ErrorCount     : Out   natural\n  ) ;\n\n  -- ========================================================\n  --  Set and Get Burst Mode   \n  --  Set Burst Mode for models that do bursting.\n  -- ========================================================\n  ------------------------------------------------------------\n  procedure SetBurstMode (\n  ------------------------------------------------------------\n    signal   TransactionRec : InOut AddressBusRecArrayType ;\n    constant Index          : In    integer  ;\n    constant OptVal         : In    AddressBusFifoBurstModeType\n  ) ;\n\n  ------------------------------------------------------------\n  procedure GetBurstMode (\n  ------------------------------------------------------------\n    signal   TransactionRec : InOut AddressBusRecArrayType ;\n    constant Index          : In    integer  ;\n    variable OptVal         : Out   AddressBusFifoBurstModeType\n  ) ;\n\n  -- ========================================================\n  --  Set and Get Model Options  \n  --  Model operations are directive transactions that are  \n  --  used to configure the verification component.  \n  --  They can either be used directly or with a model specific\n  --  wrapper around them - see AXI models for examples.\n  -- ========================================================\n  ------------------------------------------------------------\n  procedure SetModelOptions (\n  ------------------------------------------------------------\n    signal   TransactionRec : InOut AddressBusRecArrayType ;\n    constant Index          : In    integer  ;\n    constant Option         : In    integer ;\n    constant OptVal         : In    boolean\n  ) ;\n\n  ------------------------------------------------------------\n  procedure SetModelOptions (\n  ------------------------------------------------------------\n    signal   TransactionRec : InOut AddressBusRecArrayType ;\n    constant Index          : In    integer  ;\n    constant Option         : In    integer ;\n    constant OptVal         : In    integer\n  ) ;\n\n  ------------------------------------------------------------\n  procedure SetModelOptions (\n  ------------------------------------------------------------\n    signal   TransactionRec : InOut AddressBusRecArrayType ;\n    constant Index          : In    integer  ;\n    constant Option         : In    integer ;\n    constant OptVal         : In    std_logic_vector\n  ) ;\n  \n  ------------------------------------------------------------\n  procedure GetModelOptions (\n  ------------------------------------------------------------\n    signal   TransactionRec : InOut AddressBusRecArrayType ;\n    constant Index          : In    integer  ;\n    constant Option         : In    integer ;\n    variable OptVal         : Out   boolean\n  ) ;\n\n  ------------------------------------------------------------\n  procedure GetModelOptions (\n  ------------------------------------------------------------\n    signal   TransactionRec : InOut AddressBusRecArrayType ;\n    constant Index          : In    integer  ;\n    constant Option         : In    integer ;\n    variable OptVal         : Out   integer\n  ) ;\n\n  ------------------------------------------------------------\n  procedure GetModelOptions (\n  ------------------------------------------------------------\n    signal   TransactionRec : InOut AddressBusRecArrayType ;\n    constant Index          : In    integer  ;\n    constant Option         : In    integer ;\n    variable OptVal         : Out   std_logic_vector\n  ) ;\n\n  ------------------------------------------------------------\n  procedure InterruptReturn (\n  ------------------------------------------------------------\n    signal   TransactionRec : InOut AddressBusRecArrayType ;\n    constant Index          : In    integer  \n  ) ;\n\n\n  -- ========================================================\n  --  Master / Initiator Transactions  \n  -- ========================================================\n  -- ========================================================\n  --  Interface Independent Transactions\n  --  These transactions work independent of the interface.\n  --  Recommended for all tests that verify internal design functionality.\n  --  Many are blocking transactions which do not return (complete)\n  --  until the interface operation requested by the transaction  \n  --  has completed.\n  --  Some are asynchronous, which means they return before the\n  --  transaction is complete - typically even before it starts.\n  --  Supported by all verification components\n  -- ========================================================\n  ------------------------------------------------------------\n  procedure Write (\n  -- Blocking Write Transaction. \n  ------------------------------------------------------------\n    signal   TransactionRec : InOut AddressBusRecArrayType ;\n    constant Index          : In    integer  ;\n             iAddr          : In    std_logic_vector ;\n             iData          : In    std_logic_vector ;\n             StatusMsgOn    : In    boolean := false\n  ) ;\n\n  ------------------------------------------------------------\n  procedure WriteAsync (\n  -- Asynchronous / Non-Blocking Write Transaction\n  ------------------------------------------------------------\n    signal   TransactionRec : InOut AddressBusRecArrayType ;\n    constant Index          : In    integer  ;\n             iAddr          : In    std_logic_vector ;\n             iData          : In    std_logic_vector ;\n             StatusMsgOn    : In    boolean := false\n  ) ;\n\n  ------------------------------------------------------------\n  procedure Read (\n  -- Blocking Read Transaction.\n  ------------------------------------------------------------\n    signal   TransactionRec : InOut AddressBusRecArrayType ;\n    constant Index          : In    integer  ;\n             iAddr          : In    std_logic_vector ;\n    variable oData          : Out   std_logic_vector ;\n             StatusMsgOn    : In    boolean := false\n  ) ;\n\n  ------------------------------------------------------------\n  procedure ReadCheck (\n  -- Blocking Read Transaction and check iData, rather than returning a value.\n  ------------------------------------------------------------\n    signal   TransactionRec : InOut AddressBusRecArrayType ;\n    constant Index          : In    integer  ;\n             iAddr          : In    std_logic_vector ;\n             iData          : In    std_logic_vector ;\n             StatusMsgOn    : In    boolean := false\n  ) ;\n  \n  ------------------------------------------------------------\n  procedure ReadPoll (\n  -- Read location (iAddr) until Data(IndexI) = ValueI\n  -- WaitTime is the number of clocks to wait between reads.\n  -- oData is the value read.\n  ------------------------------------------------------------\n    signal   TransactionRec : InOut AddressBusRecArrayType ;\n    constant Index          : In    integer  ;\n             iAddr          : In    std_logic_vector ;\n    variable oData          : Out   std_logic_vector ;\n             RegIndex       : In    Integer ;\n             BitValue       : In    std_logic ;\n             StatusMsgOn    : In    boolean := false ;\n             WaitTime       : In    natural := 10\n  ) ;\n\n  ------------------------------------------------------------\n  procedure ReadPoll (\n  -- Read location (iAddr) until Data(IndexI) = ValueI\n  -- WaitTime is the number of clocks to wait between reads.\n  ------------------------------------------------------------\n    signal   TransactionRec : InOut AddressBusRecArrayType ;\n    constant Index          : In    integer  ;\n             iAddr          : In    std_logic_vector ;\n             RegIndex       : In    Integer ;\n             BitValue       : In    std_logic ;\n             StatusMsgOn    : In    boolean := false ;\n             WaitTime       : In    natural := 10\n  ) ;\n  \n  ------------------------------------------------------------\n  procedure WriteAndRead (\n  -- Write and Read Cycle that use same address and are dispatched together\n  ------------------------------------------------------------\n    signal   TransactionRec : InOut AddressBusRecArrayType ;\n    constant Index          : In    integer  ;\n             iAddr          : In    std_logic_vector ;\n             iData          : In    std_logic_vector ;\n    variable oData          : Out   std_logic_vector ;\n             StatusMsgOn    : In    boolean := false\n  ) ;\n\n  ------------------------------------------------------------\n  procedure WriteAndReadAsync (\n  -- Dispatch Write Address and Data.  Do not wait for completion\n  -- Dispatch Read Address.  Do not wait for Read Data.  \n  -- Retrieve read data with ReadData or TryReadData\n  ------------------------------------------------------------\n    signal   TransactionRec : InOut AddressBusRecArrayType ;\n    constant Index          : In    integer  ;\n             iAddr          : In    std_logic_vector ;\n             iData          : In    std_logic_vector ;\n             StatusMsgOn    : In    boolean := false\n  ) ;\n  \n  \n  -- ========================================================\n  --  Burst Transactions\n  --  Some interfaces support bursting, and some do not.  \n  --  Hence, support for burst transactions is optional.\n  --  However, for an interface that does not support bursting,  \n  --  it is appropriate to implement a burst as multiple single  \n  --  cycle operations.    \n  -- ========================================================\n  \n  ------------------------------------------------------------\n  procedure WriteBurst (\n  -- Blocking Write Burst.   \n  -- Data is provided separately via a WriteBurstFifo.   \n  -- NumFifoWords specifies the number of items from the FIFO to be transferred.\n  ------------------------------------------------------------\n    signal   TransactionRec : InOut AddressBusRecArrayType ;\n    constant Index          : In    integer  ;\n             iAddr          : In    std_logic_vector ;\n             NumFifoWords   : In    integer ;\n             StatusMsgOn    : In    boolean := false\n  ) ;\n\n  ------------------------------------------------------------\n  procedure WriteBurstVector (\n  ------------------------------------------------------------\n    signal   TransactionRec : InOut AddressBusRecArrayType ;\n    constant Index          : In    integer  ;\n             iAddr          : In    std_logic_vector ;\n             VectorOfWords  : In    slv_vector ;\n             StatusMsgOn    : In    boolean := false\n  ) ;\n  \n  ------------------------------------------------------------\n  procedure WriteBurstIncrement (\n  ------------------------------------------------------------\n    signal   TransactionRec : InOut AddressBusRecArrayType ;\n    constant Index          : In    integer  ;\n             iAddr          : In    std_logic_vector ;\n             FirstWord      : In    std_logic_vector ;\n             NumFifoWords   : In    integer ;\n             StatusMsgOn    : In    boolean := false\n  ) ;\n\n  ------------------------------------------------------------\n  procedure WriteBurstRandom (\n  ------------------------------------------------------------\n    signal   TransactionRec : InOut AddressBusRecArrayType ;\n    constant Index          : In    integer  ;\n             iAddr          : In    std_logic_vector ;\n             FirstWord      : In    std_logic_vector ;\n             NumFifoWords   : In    integer ;\n             StatusMsgOn    : In    boolean := false\n  ) ;\n\n  ------------------------------------------------------------\n  procedure WriteBurstRandom (\n  ------------------------------------------------------------\n    signal   TransactionRec : InOut AddressBusRecArrayType ;\n    constant Index          : In    integer  ;\n             iAddr          : In    std_logic_vector ;\n             CoverID        : In    CoverageIDType ;\n             NumFifoWords   : In    integer ;\n             FifoWidth      : In    integer ;\n             StatusMsgOn    : In    boolean := false\n  ) ;\n\n  ------------------------------------------------------------\n  procedure WriteBurstAsync (\n  -- Asynchronous / Non-Blocking Write Burst.   \n  -- Data is provided separately via a WriteBurstFifo.   \n  -- NumFifoWords specifies the number of bytes to be transferred.\n  ------------------------------------------------------------\n    signal   TransactionRec : InOut AddressBusRecArrayType ;\n    constant Index          : In    integer  ;\n             iAddr          : In    std_logic_vector ;\n             NumFifoWords   : In    integer ;\n             StatusMsgOn    : In    boolean := false\n  ) ;\n  \n------------------------------------------------------------\n  procedure WriteBurstVectorAsync (\n  ------------------------------------------------------------\n    signal   TransactionRec : InOut AddressBusRecArrayType ;\n    constant Index          : In    integer  ;\n             iAddr          : In    std_logic_vector ;\n             VectorOfWords  : In    slv_vector ;\n             StatusMsgOn    : In    boolean := false\n  ) ;\n  \n  ------------------------------------------------------------\n  procedure WriteBurstIncrementAsync (\n  ------------------------------------------------------------\n    signal   TransactionRec : InOut AddressBusRecArrayType ;\n    constant Index          : In    integer  ;\n             iAddr          : In    std_logic_vector ;\n             FirstWord      : In    std_logic_vector ;\n             NumFifoWords   : In    integer ;\n             StatusMsgOn    : In    boolean := false\n  ) ;\n\n  ------------------------------------------------------------\n  procedure WriteBurstRandomAsync (\n  ------------------------------------------------------------\n    signal   TransactionRec : InOut AddressBusRecArrayType ;\n    constant Index          : In    integer  ;\n             iAddr          : In    std_logic_vector ;\n             FirstWord      : In    std_logic_vector ;\n             NumFifoWords   : In    integer ;\n             StatusMsgOn    : In    boolean := false\n  ) ;\n\n  ------------------------------------------------------------\n  procedure WriteBurstRandomAsync (\n  ------------------------------------------------------------\n    signal   TransactionRec : InOut AddressBusRecArrayType ;\n    constant Index          : In    integer  ;\n             iAddr          : In    std_logic_vector ;\n             CoverID        : In    CoverageIDType ;\n             NumFifoWords   : In    integer ;\n             FifoWidth      : In    integer ;\n             StatusMsgOn    : In    boolean := false\n  ) ;\n\n  ------------------------------------------------------------\n  procedure ReadBurst (\n  -- Blocking Read Burst.\n  ------------------------------------------------------------\n    signal   TransactionRec : InOut AddressBusRecArrayType ;\n    constant Index          : In    integer  ;\n             iAddr          : In    std_logic_vector ;\n             NumFifoWords   : In    integer ;\n             StatusMsgOn    : In    boolean := false\n  ) ;\n\n  ------------------------------------------------------------\n  procedure ReadCheckBurstVector (\n  ------------------------------------------------------------\n    signal   TransactionRec : InOut AddressBusRecArrayType ;\n    constant Index          : In    integer  ;\n             iAddr          : In    std_logic_vector ;\n             VectorOfWords  : In    slv_vector ;\n             StatusMsgOn    : In    boolean := false\n  ) ;\n  \n  ------------------------------------------------------------\n  procedure ReadCheckBurstIncrement (\n  ------------------------------------------------------------\n    signal   TransactionRec : InOut AddressBusRecArrayType ;\n    constant Index          : In    integer  ;\n             iAddr          : In    std_logic_vector ;\n             FirstWord      : In    std_logic_vector ;\n             NumFifoWords   : In    integer ;\n             StatusMsgOn    : In    boolean := false\n  ) ;\n\n  ------------------------------------------------------------\n  procedure ReadCheckBurstRandom (\n  ------------------------------------------------------------\n    signal   TransactionRec : InOut AddressBusRecArrayType ;\n    constant Index          : In    integer  ;\n             iAddr          : In    std_logic_vector ;\n             FirstWord      : In    std_logic_vector ;\n             NumFifoWords   : In    integer ;\n             StatusMsgOn    : In    boolean := false\n  ) ;\n\n  ------------------------------------------------------------\n  procedure ReadCheckBurstRandom (\n  ------------------------------------------------------------\n    signal   TransactionRec : InOut AddressBusRecArrayType ;\n    constant Index          : In    integer  ;\n             iAddr          : In    std_logic_vector ;\n             CoverID        : In    CoverageIDType ;\n             NumFifoWords   : In    integer ;\n             FifoWidth      : In    integer ;\n             StatusMsgOn    : In    boolean := false\n  ) ;\n\n  -- ========================================================\n  --  Interface Specific Transactions\n  --  Support split transaction interfaces - such as AXI which\n  --  independently operates the write address, write data, \n  --  write response, read address, and read data interfaces. \n  --  For split transaction interfaces, these transactions are \n  --  required to fully test the interface characteristics.  \n  --  Most of these transactions are asynchronous.  \n  -- ========================================================\n\n  ------------------------------------------------------------\n  procedure WriteAddressAsync (\n  -- Non-blocking Write Address \n  ------------------------------------------------------------\n    signal   TransactionRec : InOut AddressBusRecArrayType ;\n    constant Index          : In    integer  ;\n             iAddr          : In    std_logic_vector ;\n             StatusMsgOn    : In    boolean := false\n  ) ;\n\n  ------------------------------------------------------------\n  procedure WriteDataAsync (\n  -- Non-blocking Write Data \n  ------------------------------------------------------------\n    signal   TransactionRec : InOut AddressBusRecArrayType ;\n    constant Index          : In    integer  ;\n             iAddr          : In    std_logic_vector ;\n             iData          : In    std_logic_vector ;\n             StatusMsgOn    : In    boolean := false\n  ) ;\n\n  ------------------------------------------------------------\n  procedure WriteDataAsync (\n  -- Non-blocking Write Data.  iAddr = 0.  \n  ------------------------------------------------------------\n    signal   TransactionRec : InOut AddressBusRecArrayType ;\n    constant Index          : In    integer  ;\n             iData          : In    std_logic_vector ;\n             StatusMsgOn    : In    boolean := false\n  ) ;\n  \n  ------------------------------------------------------------\n  procedure ReadAddressAsync (\n  -- Non-blocking Read Address\n  ------------------------------------------------------------\n    signal   TransactionRec : InOut AddressBusRecArrayType ;\n    constant Index          : In    integer  ;\n             iAddr          : In    std_logic_vector ;\n             StatusMsgOn    : In    boolean := false\n  ) ;\n\n  ------------------------------------------------------------\n  procedure ReadData (\n  -- Blocking Read Data\n  ------------------------------------------------------------\n    signal   TransactionRec : InOut AddressBusRecArrayType ;\n    constant Index          : In    integer  ;\n    variable oData          : Out   std_logic_vector ;\n             StatusMsgOn    : In    boolean := false\n  ) ;\n\n  ------------------------------------------------------------\n  procedure ReadCheckData (\n  -- Blocking Read data and check iData, rather than returning a value.\n  ------------------------------------------------------------\n    signal   TransactionRec : InOut AddressBusRecArrayType ;\n    constant Index          : In    integer  ;\n             iData          : In    std_logic_vector ;\n             StatusMsgOn    : In    boolean := false\n  ) ;\n\n  ------------------------------------------------------------\n  procedure TryReadData (\n  -- Try (non-blocking) read data attempt.   \n  -- If data is available, get it and return available TRUE.\n  -- Otherwise Return Available FALSE.\n  ------------------------------------------------------------\n    signal   TransactionRec : InOut AddressBusRecArrayType ;\n    constant Index          : In    integer  ;\n    variable oData          : Out   std_logic_vector ;\n    variable Available      : Out   boolean ;\n             StatusMsgOn    : In    boolean := false\n  ) ;\n\n  ------------------------------------------------------------\n  procedure TryReadCheckData (\n  -- Try (non-blocking) read data and check attempt.   \n  -- If data is available, check it and return available TRUE.\n  -- Otherwise Return Available FALSE.\n  ------------------------------------------------------------\n    signal   TransactionRec : InOut AddressBusRecArrayType ;\n    constant Index          : In    integer  ;\n             iData          : In    std_logic_vector ;\n    variable Available      : Out   boolean ;\n             StatusMsgOn    : In    boolean := false\n  ) ;\n\n  -- ========================================================\n  --  Pseudo Transactions\n  --  Interact with the record only.\n  -- ========================================================\n  ------------------------------------------------------------\n  procedure ReleaseTransactionRecord (\n  --  Must run on same delta cycle as AcquireTransactionRecord\n  ------------------------------------------------------------\n    signal   TransactionRec : InOut AddressBusRecArrayType ;\n    constant Index          : In    integer  \n  ) ; \n  \n  ------------------------------------------------------------\n  procedure AcquireTransactionRecord (\n  --  Must run on same delta cycle as ReleaseTransactionRecord\n  ------------------------------------------------------------\n    signal   TransactionRec : InOut AddressBusRecArrayType ;\n    constant Index          : In    integer  \n  ) ; \n  \n  -- ========================================================\n  --  Supports AddressBusResponderTransactionArrayPkg\n  -- ========================================================\n  ------------------------------------------------------------\n  procedure AddressBusArrayRequestTransaction (\n  --  Package Local\n  ------------------------------------------------------------\n    signal    TransactionRec   : inout AddressBusRecArrayType ;\n    constant  Index            : in    integer \n  ) ;\n\nend package AddressBusTransactionArrayPkg ;\n\n-- /////////////////////////////////////////////////////////////////////////////////////////\n-- /////////////////////////////////////////////////////////////////////////////////////////\n\npackage body AddressBusTransactionArrayPkg is\n\n  ------------------------------------------------------------\n  procedure AddressBusArrayRequestTransaction (\n  --  Package Local\n  ------------------------------------------------------------\n    signal    TransactionRec   : inout AddressBusRecArrayType ;\n    constant  Index            : in    integer \n  ) is\n  begin\n    case Index is \n      when  0 =>  RequestTransaction(Rdy => TransactionRec( 0).Rdy, Ack => TransactionRec( 0).Ack) ; \n      when  1 =>  RequestTransaction(Rdy => TransactionRec( 1).Rdy, Ack => TransactionRec( 1).Ack) ; \n      when  2 =>  RequestTransaction(Rdy => TransactionRec( 2).Rdy, Ack => TransactionRec( 2).Ack) ; \n      when  3 =>  RequestTransaction(Rdy => TransactionRec( 3).Rdy, Ack => TransactionRec( 3).Ack) ; \n      when  4 =>  RequestTransaction(Rdy => TransactionRec( 4).Rdy, Ack => TransactionRec( 4).Ack) ; \n      when  5 =>  RequestTransaction(Rdy => TransactionRec( 5).Rdy, Ack => TransactionRec( 5).Ack) ; \n      when  6 =>  RequestTransaction(Rdy => TransactionRec( 6).Rdy, Ack => TransactionRec( 6).Ack) ; \n      when  7 =>  RequestTransaction(Rdy => TransactionRec( 7).Rdy, Ack => TransactionRec( 7).Ack) ; \n      when  8 =>  RequestTransaction(Rdy => TransactionRec( 8).Rdy, Ack => TransactionRec( 8).Ack) ; \n      when  9 =>  RequestTransaction(Rdy => TransactionRec( 9).Rdy, Ack => TransactionRec( 9).Ack) ; \n      when 10 =>  RequestTransaction(Rdy => TransactionRec(10).Rdy, Ack => TransactionRec(10).Ack) ; \n      when 11 =>  RequestTransaction(Rdy => TransactionRec(11).Rdy, Ack => TransactionRec(11).Ack) ; \n      when 12 =>  RequestTransaction(Rdy => TransactionRec(12).Rdy, Ack => TransactionRec(12).Ack) ; \n      when 13 =>  RequestTransaction(Rdy => TransactionRec(13).Rdy, Ack => TransactionRec(13).Ack) ; \n      when 14 =>  RequestTransaction(Rdy => TransactionRec(14).Rdy, Ack => TransactionRec(14).Ack) ; \n      when 15 =>  RequestTransaction(Rdy => TransactionRec(15).Rdy, Ack => TransactionRec(15).Ack) ; \n      when 16 =>  RequestTransaction(Rdy => TransactionRec(16).Rdy, Ack => TransactionRec(16).Ack) ; \n      when 17 =>  RequestTransaction(Rdy => TransactionRec(17).Rdy, Ack => TransactionRec(17).Ack) ; \n      when 18 =>  RequestTransaction(Rdy => TransactionRec(18).Rdy, Ack => TransactionRec(18).Ack) ; \n      when 19 =>  RequestTransaction(Rdy => TransactionRec(19).Rdy, Ack => TransactionRec(19).Ack) ; \n      when 20 =>  RequestTransaction(Rdy => TransactionRec(20).Rdy, Ack => TransactionRec(20).Ack) ; \n      when 21 =>  RequestTransaction(Rdy => TransactionRec(21).Rdy, Ack => TransactionRec(21).Ack) ; \n      when 22 =>  RequestTransaction(Rdy => TransactionRec(22).Rdy, Ack => TransactionRec(22).Ack) ; \n      when 23 =>  RequestTransaction(Rdy => TransactionRec(23).Rdy, Ack => TransactionRec(23).Ack) ; \n      when 24 =>  RequestTransaction(Rdy => TransactionRec(24).Rdy, Ack => TransactionRec(24).Ack) ; \n      when 25 =>  RequestTransaction(Rdy => TransactionRec(25).Rdy, Ack => TransactionRec(25).Ack) ; \n      when 26 =>  RequestTransaction(Rdy => TransactionRec(26).Rdy, Ack => TransactionRec(26).Ack) ; \n      when 27 =>  RequestTransaction(Rdy => TransactionRec(27).Rdy, Ack => TransactionRec(27).Ack) ; \n      when 28 =>  RequestTransaction(Rdy => TransactionRec(28).Rdy, Ack => TransactionRec(28).Ack) ; \n      when 29 =>  RequestTransaction(Rdy => TransactionRec(29).Rdy, Ack => TransactionRec(29).Ack) ; \n      when 30 =>  RequestTransaction(Rdy => TransactionRec(30).Rdy, Ack => TransactionRec(30).Ack) ; \n      when 31 =>  RequestTransaction(Rdy => TransactionRec(31).Rdy, Ack => TransactionRec(31).Ack) ; \n      when 32 =>  RequestTransaction(Rdy => TransactionRec(32).Rdy, Ack => TransactionRec(32).Ack) ; \n      when 33 =>  RequestTransaction(Rdy => TransactionRec(33).Rdy, Ack => TransactionRec(33).Ack) ; \n      when 34 =>  RequestTransaction(Rdy => TransactionRec(34).Rdy, Ack => TransactionRec(34).Ack) ; \n      when 35 =>  RequestTransaction(Rdy => TransactionRec(35).Rdy, Ack => TransactionRec(35).Ack) ; \n      when 36 =>  RequestTransaction(Rdy => TransactionRec(36).Rdy, Ack => TransactionRec(36).Ack) ; \n      when 37 =>  RequestTransaction(Rdy => TransactionRec(37).Rdy, Ack => TransactionRec(37).Ack) ; \n      when 38 =>  RequestTransaction(Rdy => TransactionRec(38).Rdy, Ack => TransactionRec(38).Ack) ; \n      when 39 =>  RequestTransaction(Rdy => TransactionRec(39).Rdy, Ack => TransactionRec(39).Ack) ; \n      when 40 =>  RequestTransaction(Rdy => TransactionRec(40).Rdy, Ack => TransactionRec(40).Ack) ; \n      when 41 =>  RequestTransaction(Rdy => TransactionRec(41).Rdy, Ack => TransactionRec(41).Ack) ; \n      when 42 =>  RequestTransaction(Rdy => TransactionRec(42).Rdy, Ack => TransactionRec(42).Ack) ; \n      when 43 =>  RequestTransaction(Rdy => TransactionRec(43).Rdy, Ack => TransactionRec(43).Ack) ; \n      when 44 =>  RequestTransaction(Rdy => TransactionRec(44).Rdy, Ack => TransactionRec(44).Ack) ; \n      when 45 =>  RequestTransaction(Rdy => TransactionRec(45).Rdy, Ack => TransactionRec(45).Ack) ; \n      when 46 =>  RequestTransaction(Rdy => TransactionRec(46).Rdy, Ack => TransactionRec(46).Ack) ; \n      when 47 =>  RequestTransaction(Rdy => TransactionRec(47).Rdy, Ack => TransactionRec(47).Ack) ; \n      when 48 =>  RequestTransaction(Rdy => TransactionRec(48).Rdy, Ack => TransactionRec(48).Ack) ; \n      when 49 =>  RequestTransaction(Rdy => TransactionRec(49).Rdy, Ack => TransactionRec(49).Ack) ; \n      when 50 =>  RequestTransaction(Rdy => TransactionRec(50).Rdy, Ack => TransactionRec(50).Ack) ; \n      when 51 =>  RequestTransaction(Rdy => TransactionRec(51).Rdy, Ack => TransactionRec(51).Ack) ; \n      when 52 =>  RequestTransaction(Rdy => TransactionRec(52).Rdy, Ack => TransactionRec(52).Ack) ; \n      when 53 =>  RequestTransaction(Rdy => TransactionRec(53).Rdy, Ack => TransactionRec(53).Ack) ; \n      when 54 =>  RequestTransaction(Rdy => TransactionRec(54).Rdy, Ack => TransactionRec(54).Ack) ; \n      when 55 =>  RequestTransaction(Rdy => TransactionRec(55).Rdy, Ack => TransactionRec(55).Ack) ; \n      when 56 =>  RequestTransaction(Rdy => TransactionRec(56).Rdy, Ack => TransactionRec(56).Ack) ; \n      when 57 =>  RequestTransaction(Rdy => TransactionRec(57).Rdy, Ack => TransactionRec(57).Ack) ; \n      when 58 =>  RequestTransaction(Rdy => TransactionRec(58).Rdy, Ack => TransactionRec(58).Ack) ; \n      when 59 =>  RequestTransaction(Rdy => TransactionRec(59).Rdy, Ack => TransactionRec(59).Ack) ; \n      when 60 =>  RequestTransaction(Rdy => TransactionRec(60).Rdy, Ack => TransactionRec(60).Ack) ; \n      when 61 =>  RequestTransaction(Rdy => TransactionRec(61).Rdy, Ack => TransactionRec(61).Ack) ; \n      when 62 =>  RequestTransaction(Rdy => TransactionRec(62).Rdy, Ack => TransactionRec(62).Ack) ; \n      when 63 =>  RequestTransaction(Rdy => TransactionRec(63).Rdy, Ack => TransactionRec(63).Ack) ; \n      when 64 =>  RequestTransaction(Rdy => TransactionRec(64).Rdy, Ack => TransactionRec(64).Ack) ; \n      when 65 =>  RequestTransaction(Rdy => TransactionRec(65).Rdy, Ack => TransactionRec(65).Ack) ; \n      when 66 =>  RequestTransaction(Rdy => TransactionRec(66).Rdy, Ack => TransactionRec(66).Ack) ; \n      when 67 =>  RequestTransaction(Rdy => TransactionRec(67).Rdy, Ack => TransactionRec(67).Ack) ; \n      when 68 =>  RequestTransaction(Rdy => TransactionRec(68).Rdy, Ack => TransactionRec(68).Ack) ; \n      when 69 =>  RequestTransaction(Rdy => TransactionRec(69).Rdy, Ack => TransactionRec(69).Ack) ; \n      when 70 =>  RequestTransaction(Rdy => TransactionRec(70).Rdy, Ack => TransactionRec(70).Ack) ; \n      when 71 =>  RequestTransaction(Rdy => TransactionRec(71).Rdy, Ack => TransactionRec(71).Ack) ; \n      when 72 =>  RequestTransaction(Rdy => TransactionRec(72).Rdy, Ack => TransactionRec(72).Ack) ; \n      when 73 =>  RequestTransaction(Rdy => TransactionRec(73).Rdy, Ack => TransactionRec(73).Ack) ; \n      when 74 =>  RequestTransaction(Rdy => TransactionRec(74).Rdy, Ack => TransactionRec(74).Ack) ; \n      when 75 =>  RequestTransaction(Rdy => TransactionRec(75).Rdy, Ack => TransactionRec(75).Ack) ; \n      when 76 =>  RequestTransaction(Rdy => TransactionRec(76).Rdy, Ack => TransactionRec(76).Ack) ; \n      when 77 =>  RequestTransaction(Rdy => TransactionRec(77).Rdy, Ack => TransactionRec(77).Ack) ; \n      when 78 =>  RequestTransaction(Rdy => TransactionRec(78).Rdy, Ack => TransactionRec(78).Ack) ; \n      when 79 =>  RequestTransaction(Rdy => TransactionRec(79).Rdy, Ack => TransactionRec(79).Ack) ; \n      when 80 =>  RequestTransaction(Rdy => TransactionRec(80).Rdy, Ack => TransactionRec(80).Ack) ; \n      when 81 =>  RequestTransaction(Rdy => TransactionRec(81).Rdy, Ack => TransactionRec(81).Ack) ; \n      when 82 =>  RequestTransaction(Rdy => TransactionRec(82).Rdy, Ack => TransactionRec(82).Ack) ; \n      when 83 =>  RequestTransaction(Rdy => TransactionRec(83).Rdy, Ack => TransactionRec(83).Ack) ; \n      when 84 =>  RequestTransaction(Rdy => TransactionRec(84).Rdy, Ack => TransactionRec(84).Ack) ; \n      when 85 =>  RequestTransaction(Rdy => TransactionRec(85).Rdy, Ack => TransactionRec(85).Ack) ; \n      when 86 =>  RequestTransaction(Rdy => TransactionRec(86).Rdy, Ack => TransactionRec(86).Ack) ; \n      when 87 =>  RequestTransaction(Rdy => TransactionRec(87).Rdy, Ack => TransactionRec(87).Ack) ; \n      when 88 =>  RequestTransaction(Rdy => TransactionRec(88).Rdy, Ack => TransactionRec(88).Ack) ; \n      when 89 =>  RequestTransaction(Rdy => TransactionRec(89).Rdy, Ack => TransactionRec(89).Ack) ; \n      when 90 =>  RequestTransaction(Rdy => TransactionRec(90).Rdy, Ack => TransactionRec(90).Ack) ; \n      when 91 =>  RequestTransaction(Rdy => TransactionRec(91).Rdy, Ack => TransactionRec(91).Ack) ; \n      when 92 =>  RequestTransaction(Rdy => TransactionRec(92).Rdy, Ack => TransactionRec(92).Ack) ; \n      when 93 =>  RequestTransaction(Rdy => TransactionRec(93).Rdy, Ack => TransactionRec(93).Ack) ; \n      when 94 =>  RequestTransaction(Rdy => TransactionRec(94).Rdy, Ack => TransactionRec(94).Ack) ; \n      when 95 =>  RequestTransaction(Rdy => TransactionRec(95).Rdy, Ack => TransactionRec(95).Ack) ; \n      when 96 =>  RequestTransaction(Rdy => TransactionRec(96).Rdy, Ack => TransactionRec(96).Ack) ; \n      when 97 =>  RequestTransaction(Rdy => TransactionRec(97).Rdy, Ack => TransactionRec(97).Ack) ; \n      when 98 =>  RequestTransaction(Rdy => TransactionRec(98).Rdy, Ack => TransactionRec(98).Ack) ; \n      when 99 =>  RequestTransaction(Rdy => TransactionRec(99).Rdy, Ack => TransactionRec(99).Ack) ; \n      when 100 =>  RequestTransaction(Rdy => TransactionRec(100).Rdy, Ack => TransactionRec(100).Ack) ; \n      when 101 =>  RequestTransaction(Rdy => TransactionRec(101).Rdy, Ack => TransactionRec(101).Ack) ; \n      when 102 =>  RequestTransaction(Rdy => TransactionRec(102).Rdy, Ack => TransactionRec(102).Ack) ; \n      when 103 =>  RequestTransaction(Rdy => TransactionRec(103).Rdy, Ack => TransactionRec(103).Ack) ; \n      when 104 =>  RequestTransaction(Rdy => TransactionRec(104).Rdy, Ack => TransactionRec(104).Ack) ; \n      when 105 =>  RequestTransaction(Rdy => TransactionRec(105).Rdy, Ack => TransactionRec(105).Ack) ; \n      when 106 =>  RequestTransaction(Rdy => TransactionRec(106).Rdy, Ack => TransactionRec(106).Ack) ; \n      when 107 =>  RequestTransaction(Rdy => TransactionRec(107).Rdy, Ack => TransactionRec(107).Ack) ; \n      when 108 =>  RequestTransaction(Rdy => TransactionRec(108).Rdy, Ack => TransactionRec(108).Ack) ; \n      when 109 =>  RequestTransaction(Rdy => TransactionRec(109).Rdy, Ack => TransactionRec(109).Ack) ; \n      when 110 =>  RequestTransaction(Rdy => TransactionRec(110).Rdy, Ack => TransactionRec(110).Ack) ; \n      when 111 =>  RequestTransaction(Rdy => TransactionRec(111).Rdy, Ack => TransactionRec(111).Ack) ; \n      when 112 =>  RequestTransaction(Rdy => TransactionRec(112).Rdy, Ack => TransactionRec(112).Ack) ; \n      when 113 =>  RequestTransaction(Rdy => TransactionRec(113).Rdy, Ack => TransactionRec(113).Ack) ; \n      when 114 =>  RequestTransaction(Rdy => TransactionRec(114).Rdy, Ack => TransactionRec(114).Ack) ; \n      when 115 =>  RequestTransaction(Rdy => TransactionRec(115).Rdy, Ack => TransactionRec(115).Ack) ; \n      when 116 =>  RequestTransaction(Rdy => TransactionRec(116).Rdy, Ack => TransactionRec(116).Ack) ; \n      when 117 =>  RequestTransaction(Rdy => TransactionRec(117).Rdy, Ack => TransactionRec(117).Ack) ; \n      when 118 =>  RequestTransaction(Rdy => TransactionRec(118).Rdy, Ack => TransactionRec(118).Ack) ; \n      when 119 =>  RequestTransaction(Rdy => TransactionRec(119).Rdy, Ack => TransactionRec(119).Ack) ; \n      when 120 =>  RequestTransaction(Rdy => TransactionRec(120).Rdy, Ack => TransactionRec(120).Ack) ; \n      when 121 =>  RequestTransaction(Rdy => TransactionRec(121).Rdy, Ack => TransactionRec(121).Ack) ; \n      when 122 =>  RequestTransaction(Rdy => TransactionRec(122).Rdy, Ack => TransactionRec(122).Ack) ; \n      when 123 =>  RequestTransaction(Rdy => TransactionRec(123).Rdy, Ack => TransactionRec(123).Ack) ; \n      when 124 =>  RequestTransaction(Rdy => TransactionRec(124).Rdy, Ack => TransactionRec(124).Ack) ; \n      when 125 =>  RequestTransaction(Rdy => TransactionRec(125).Rdy, Ack => TransactionRec(125).Ack) ; \n      when 126 =>  RequestTransaction(Rdy => TransactionRec(126).Rdy, Ack => TransactionRec(126).Ack) ; \n      when 127 =>  RequestTransaction(Rdy => TransactionRec(127).Rdy, Ack => TransactionRec(127).Ack) ; \n      when 128 =>  RequestTransaction(Rdy => TransactionRec(128).Rdy, Ack => TransactionRec(128).Ack) ; \n      when 129 =>  RequestTransaction(Rdy => TransactionRec(129).Rdy, Ack => TransactionRec(129).Ack) ; \n      when others => Alert(\"AddressBusTransactionArrayPkg: Please extend AddressBusArrayRequestTransaction to handle \" & to_string(Index) & \" indices\") ; \n    end case ;  \n  end procedure AddressBusArrayRequestTransaction ; \n  \n  \n  -- ========================================================\n  --  Directive Transactions\n  --  Interact with verification component but not interface.\n  -- ========================================================\n  ------------------------------------------------------------\n  procedure WaitForTransaction (\n  --  Wait until pending transaction completes\n  ------------------------------------------------------------\n    signal   TransactionRec : InOut AddressBusRecArrayType ;\n    constant Index          : In    integer  \n  ) is\n  begin\n    TransactionRec(Index).Operation     <= WAIT_FOR_TRANSACTION ;\n    AddressBusArrayRequestTransaction(TransactionRec => TransactionRec, Index => Index) ; \n  end procedure WaitForTransaction ; \n\n  ------------------------------------------------------------\n  procedure WaitForWriteTransaction (\n  --  Wait until pending transaction completes\n  ------------------------------------------------------------\n    signal   TransactionRec : InOut AddressBusRecArrayType ;\n    constant Index          : In    integer  \n  ) is\n  begin\n    TransactionRec(Index).Operation     <= WAIT_FOR_WRITE_TRANSACTION ;\n    AddressBusArrayRequestTransaction(TransactionRec => TransactionRec, Index => Index) ; \n  end procedure WaitForWriteTransaction ; \n\n  ------------------------------------------------------------\n  procedure WaitForReadTransaction (\n  --  Wait until pending transaction completes\n  ------------------------------------------------------------\n    signal   TransactionRec : InOut AddressBusRecArrayType ;\n    constant Index          : In    integer  \n  ) is\n  begin\n    TransactionRec(Index).Operation     <= WAIT_FOR_READ_TRANSACTION ;\n    AddressBusArrayRequestTransaction(TransactionRec => TransactionRec, Index => Index) ; \n  end procedure WaitForReadTransaction ; \n\n  ------------------------------------------------------------\n  procedure WaitForClock (\n  -- Directive:  Wait for NumberOfClocks number of clocks in the model\n  ------------------------------------------------------------\n    signal   TransactionRec : InOut AddressBusRecArrayType ;\n    constant Index          : In    integer  ;\n    constant NumberOfClocks : In    natural := 1\n  ) is\n  begin\n    TransactionRec(Index).Operation     <= WAIT_FOR_CLOCK ;\n    TransactionRec(Index).IntToModel    <= NumberOfClocks ; \n    AddressBusArrayRequestTransaction(TransactionRec => TransactionRec, Index => Index) ;\n  end procedure WaitForClock ;\n\n  ------------------------------------------------------------\n  procedure GetTransactionCount (\n  ------------------------------------------------------------\n    signal   TransactionRec : InOut AddressBusRecArrayType ;\n    constant Index          : In    integer  ;\n    variable Count          : Out   integer\n  ) is\n  begin\n    TransactionRec(Index).Operation     <= GET_TRANSACTION_COUNT ;\n    AddressBusArrayRequestTransaction(TransactionRec => TransactionRec, Index => Index) ;\n\n    -- Return AlertLogID\n    Count := TransactionRec(Index).IntFromModel ;\n--    Count := integer(TransactionRec(Index).Rdy) ;\n  end procedure GetTransactionCount ;\n\n  ------------------------------------------------------------\n  procedure GetWriteTransactionCount (\n  ------------------------------------------------------------\n    signal   TransactionRec : InOut AddressBusRecArrayType ;\n    constant Index          : In    integer  ;\n    variable Count          : Out   integer\n  ) is\n  begin\n    TransactionRec(Index).Operation     <= GET_WRITE_TRANSACTION_COUNT ;\n    AddressBusArrayRequestTransaction(TransactionRec => TransactionRec, Index => Index) ;\n\n    -- Return AlertLogID\n    Count := TransactionRec(Index).IntFromModel ;\n  end procedure GetWriteTransactionCount ;\n\n  ------------------------------------------------------------\n  procedure GetReadTransactionCount (\n  ------------------------------------------------------------\n    signal   TransactionRec : InOut AddressBusRecArrayType ;\n    constant Index          : In    integer  ;\n    variable Count          : Out   integer\n  ) is\n  begin\n    TransactionRec(Index).Operation     <= GET_READ_TRANSACTION_COUNT ;\n    AddressBusArrayRequestTransaction(TransactionRec => TransactionRec, Index => Index) ;\n\n    -- Return AlertLogID\n    Count := TransactionRec(Index).IntFromModel ;\n  end procedure GetReadTransactionCount ;\n\n  ------------------------------------------------------------\n  procedure GetAlertLogID (\n  ------------------------------------------------------------\n    signal   TransactionRec : InOut AddressBusRecArrayType ;\n    constant Index          : In    integer  ;\n    variable AlertLogID     : Out   AlertLogIDType\n  ) is\n  begin\n    TransactionRec(Index).Operation     <= GET_ALERTLOG_ID ;\n    AddressBusArrayRequestTransaction(TransactionRec => TransactionRec, Index => Index) ;\n\n    -- Return AlertLogID\n    AlertLogID := AlertLogIDType(TransactionRec(Index).IntFromModel) ;\n  end procedure GetAlertLogID ;\n\n  ------------------------------------------------------------\n  procedure GetErrorCount (\n  -- Error reporting for testbenches that do not use AlertLogPkg\n  -- Returns error count.  If an error count /= 0, also print it\n  ------------------------------------------------------------\n    signal   TransactionRec : InOut AddressBusRecArrayType ;\n    constant Index          : In    integer  ;\n    variable ErrorCount     : Out   natural\n  ) is\n    variable ModelID : AlertLogIDType ;\n  begin\n    GetAlertLogID(TransactionRec, Index, ModelID) ;\n--    ReportNonZeroAlerts(AlertLogID => ModelID) ;\n    ErrorCount := GetAlertCount(AlertLogID => ModelID) ;\n  end procedure GetErrorCount ;\n\n  -- ========================================================\n  --  Set and Get Burst Mode   \n  --  Set Burst Mode for models that do bursting.\n  -- ========================================================\n  ------------------------------------------------------------\n  procedure SetBurstMode (\n  ------------------------------------------------------------\n    signal   TransactionRec : InOut AddressBusRecArrayType ;\n    constant Index          : In    integer  ;\n    constant OptVal         : In    AddressBusFifoBurstModeType\n  ) is\n  begin\n    TransactionRec(Index).Operation     <= SET_BURST_MODE ;\n    TransactionRec(Index).IntToModel    <= OptVal ;\n    AddressBusArrayRequestTransaction(TransactionRec => TransactionRec, Index => Index) ;\n  end procedure SetBurstMode ;\n\n  ------------------------------------------------------------\n  procedure GetBurstMode (\n  ------------------------------------------------------------\n    signal   TransactionRec : InOut AddressBusRecArrayType ;\n    constant Index          : In    integer  ;\n    variable OptVal         : Out   AddressBusFifoBurstModeType\n  ) is\n  begin\n    TransactionRec(Index).Operation     <= GET_BURST_MODE ;\n    AddressBusArrayRequestTransaction(TransactionRec => TransactionRec, Index => Index) ;\n    OptVal := TransactionRec(Index).IntFromModel ; \n  end procedure GetBurstMode ;\n\n  --\n  --  Extensions to support model customizations\n  -- \n  ------------------------------------------------------------\n  procedure SetModelOptions (\n  ------------------------------------------------------------\n    signal   TransactionRec : InOut AddressBusRecArrayType ;\n    constant Index          : In    integer  ;\n    constant Option         : In    integer ;\n    constant OptVal         : In    boolean\n  ) is\n  begin\n    TransactionRec(Index).Operation     <= SET_MODEL_OPTIONS ;\n    TransactionRec(Index).Options       <= Option ;\n    TransactionRec(Index).BoolToModel   <= OptVal ;\n    AddressBusArrayRequestTransaction(TransactionRec => TransactionRec, Index => Index) ;\n  end procedure SetModelOptions ;\n\n  ------------------------------------------------------------\n  procedure SetModelOptions (\n  ------------------------------------------------------------\n    signal   TransactionRec : InOut AddressBusRecArrayType ;\n    constant Index          : In    integer  ;\n    constant Option         : In    integer ;\n    constant OptVal         : In    integer\n  ) is\n  begin\n    TransactionRec(Index).Operation     <= SET_MODEL_OPTIONS ;\n    TransactionRec(Index).Options       <= Option ;\n    TransactionRec(Index).IntToModel    <= OptVal ;\n    AddressBusArrayRequestTransaction(TransactionRec => TransactionRec, Index => Index) ;\n  end procedure SetModelOptions ;\n\n  ------------------------------------------------------------\n  procedure SetModelOptions (\n  ------------------------------------------------------------\n    signal   TransactionRec : InOut AddressBusRecArrayType ;\n    constant Index          : In    integer  ;\n    constant Option         : In    integer ;\n    constant OptVal         : In    std_logic_vector\n  ) is\n  begin\n    TransactionRec(Index).Operation     <= SET_MODEL_OPTIONS ;\n    TransactionRec(Index).Options       <= Option ;\n    TransactionRec(Index).IntToModel    <= to_integer(OptVal) ;\n    AddressBusArrayRequestTransaction(TransactionRec => TransactionRec, Index => Index) ;\n  end procedure SetModelOptions ;\n  \n  ------------------------------------------------------------\n  procedure GetModelOptions (\n  ------------------------------------------------------------\n    signal   TransactionRec : InOut AddressBusRecArrayType ;\n    constant Index          : In    integer  ;\n    constant Option         : In    integer ;\n    variable OptVal         : Out   boolean\n  ) is\n  begin\n    TransactionRec(Index).Operation     <= GET_MODEL_OPTIONS ;\n    TransactionRec(Index).Options       <= Option ;\n    AddressBusArrayRequestTransaction(TransactionRec => TransactionRec, Index => Index) ;\n    OptVal := TransactionRec(Index).BoolFromModel    ;\n  end procedure GetModelOptions ;\n\n  ------------------------------------------------------------\n  procedure GetModelOptions (\n  ------------------------------------------------------------\n    signal   TransactionRec : InOut AddressBusRecArrayType ;\n    constant Index          : In    integer  ;\n    constant Option         : In    integer ;\n    variable OptVal         : Out   integer\n  ) is\n  begin\n    TransactionRec(Index).Operation     <= GET_MODEL_OPTIONS ;\n    TransactionRec(Index).Options       <= Option ;\n    AddressBusArrayRequestTransaction(TransactionRec => TransactionRec, Index => Index) ;\n    OptVal := TransactionRec(Index).IntFromModel ; \n  end procedure GetModelOptions ;\n\n  ------------------------------------------------------------\n  procedure GetModelOptions (\n  ------------------------------------------------------------\n    signal   TransactionRec : InOut AddressBusRecArrayType ;\n    constant Index          : In    integer  ;\n    constant Option         : In    integer ;\n    variable OptVal         : Out   std_logic_vector\n  ) is\n  begin\n    TransactionRec(Index).Operation     <= GET_MODEL_OPTIONS ;\n    TransactionRec(Index).Options       <= Option ;\n    AddressBusArrayRequestTransaction(TransactionRec => TransactionRec, Index => Index) ;\n    OptVal := to_slv(TransactionRec(Index).IntFromModel, OptVal'length) ; \n  end procedure GetModelOptions ;\n\n  ------------------------------------------------------------\n  procedure InterruptReturn (\n  ------------------------------------------------------------\n    signal   TransactionRec : InOut AddressBusRecArrayType ;\n    constant Index          : In    integer  \n  ) is\n  begin\n    TransactionRec(Index).Operation     <= INTERRUPT_RETURN ;\n    AddressBusArrayRequestTransaction(TransactionRec => TransactionRec, Index => Index) ;\n  end procedure InterruptReturn ;\n\n  ------------------------------------------------------------\n  procedure Write (\n  -- do CPU Write Cycle\n  ------------------------------------------------------------\n    signal   TransactionRec : InOut AddressBusRecArrayType ;\n    constant Index          : In    integer  ;\n             iAddr          : In    std_logic_vector ;\n             iData          : In    std_logic_vector ;\n             StatusMsgOn    : In    boolean := false\n  ) is\n  begin\n    -- Put values in record\n    TransactionRec(Index).Operation     <= WRITE_OP ;\n    TransactionRec(Index).Address       <= SafeResize(iAddr, TransactionRec(Index).Address'length) ;\n    TransactionRec(Index).AddrWidth     <= iAddr'length ;\n    TransactionRec(Index).DataToModel   <= SafeResize(iData, TransactionRec(Index).DataToModel'length) ;\n    TransactionRec(Index).DataWidth     <= iData'length ;\n    TransactionRec(Index).StatusMsgOn   <= StatusMsgOn ;\n    -- Start Transaction\n    AddressBusArrayRequestTransaction(TransactionRec => TransactionRec, Index => Index) ;\n  end procedure Write ;\n\n  ------------------------------------------------------------\n  procedure WriteAsync (\n  -- dispatch CPU Write Cycle\n  ------------------------------------------------------------\n    signal   TransactionRec : InOut AddressBusRecArrayType ;\n    constant Index          : In    integer  ;\n             iAddr          : In    std_logic_vector ;\n             iData          : In    std_logic_vector ;\n             StatusMsgOn    : In    boolean := false\n  ) is\n  begin\n    -- Put values in record\n    TransactionRec(Index).Operation     <= ASYNC_WRITE ;\n    TransactionRec(Index).Address       <= SafeResize(iAddr, TransactionRec(Index).Address'length) ;\n    TransactionRec(Index).AddrWidth     <= iAddr'length ;\n    TransactionRec(Index).DataToModel   <= SafeResize(iData, TransactionRec(Index).DataToModel'length) ;\n    TransactionRec(Index).DataWidth     <= iData'length ;\n    TransactionRec(Index).StatusMsgOn   <= StatusMsgOn ;\n    -- Start Transaction\n    AddressBusArrayRequestTransaction(TransactionRec => TransactionRec, Index => Index) ;\n  end procedure WriteAsync ;\n\n  ------------------------------------------------------------\n  procedure WriteAddressAsync (\n  -- dispatch CPU Write Address Cycle\n  ------------------------------------------------------------\n    signal   TransactionRec : InOut AddressBusRecArrayType ;\n    constant Index          : In    integer  ;\n             iAddr          : In    std_logic_vector ;\n             StatusMsgOn    : In    boolean := false\n  ) is\n  begin\n    -- Put values in record\n    TransactionRec(Index).Operation     <= ASYNC_WRITE_ADDRESS ;\n    TransactionRec(Index).Address       <= SafeResize(iAddr, TransactionRec(Index).Address'length) ;\n    TransactionRec(Index).AddrWidth     <= iAddr'length ;\n    TransactionRec(Index).DataWidth     <= 0 ;\n    TransactionRec(Index).StatusMsgOn   <= StatusMsgOn ;\n    -- Start Transaction\n    AddressBusArrayRequestTransaction(TransactionRec => TransactionRec, Index => Index) ;\n  end procedure WriteAddressAsync ;\n\n  ------------------------------------------------------------\n  procedure WriteDataAsync (\n  -- dispatch CPU Write Data Cycle\n  ------------------------------------------------------------\n    signal   TransactionRec : InOut AddressBusRecArrayType ;\n    constant Index          : In    integer  ;\n             iAddr          : In    std_logic_vector ;\n             iData          : In    std_logic_vector ;\n             StatusMsgOn    : In    boolean := false\n  ) is\n  begin\n    -- Put values in record\n    TransactionRec(Index).Operation     <= ASYNC_WRITE_DATA ;\n    TransactionRec(Index).Address       <= SafeResize(iAddr, TransactionRec(Index).Address'length) ;\n    TransactionRec(Index).AddrWidth     <= iAddr'length ;\n    TransactionRec(Index).DataToModel   <= SafeResize(iData, TransactionRec(Index).DataToModel'length) ;\n    TransactionRec(Index).DataWidth     <= iData'length ;\n    TransactionRec(Index).StatusMsgOn   <= StatusMsgOn ;\n    -- Start Transaction\n    AddressBusArrayRequestTransaction(TransactionRec => TransactionRec, Index => Index) ;\n  end procedure WriteDataAsync ;\n  \n  ------------------------------------------------------------\n  procedure WriteDataAsync (\n  ------------------------------------------------------------\n    signal   TransactionRec : InOut AddressBusRecArrayType ;\n    constant Index          : In    integer  ;\n             iData          : In    std_logic_vector ;\n             StatusMsgOn    : In    boolean := false\n  ) is\n  begin\n    WriteDataAsync(TransactionRec, Index, X\"00\", iData, StatusMsgOn) ;\n  end procedure WriteDataAsync ;\n\n  ------------------------------------------------------------\n  procedure Read (\n  -- do CPU Read Cycle and return data\n  ------------------------------------------------------------\n    signal   TransactionRec : InOut AddressBusRecArrayType ;\n    constant Index          : In    integer  ;\n             iAddr          : In    std_logic_vector ;\n    variable oData          : Out   std_logic_vector ;\n             StatusMsgOn    : In    boolean := false\n  ) is\n  begin\n    -- Put values in record\n    TransactionRec(Index).Operation     <= READ_OP ;\n    TransactionRec(Index).Address       <= SafeResize(iAddr, TransactionRec(Index).Address'length) ;\n    TransactionRec(Index).AddrWidth     <= iAddr'length ;\n    TransactionRec(Index).DataWidth     <= oData'length ;\n    TransactionRec(Index).StatusMsgOn   <= StatusMsgOn ;\n    -- Start Transaction\n    AddressBusArrayRequestTransaction(TransactionRec => TransactionRec, Index => Index) ;\n    -- Return Results\n    oData  := SafeResize(TransactionRec(Index).DataFromModel, oData'length) ;\n  end procedure Read ;\n\n  ------------------------------------------------------------\n  procedure ReadCheck (\n  -- do CPU Read Cycle and check supplied data\n  ------------------------------------------------------------\n    signal   TransactionRec : InOut AddressBusRecArrayType ;\n    constant Index          : In    integer  ;\n             iAddr          : In    std_logic_vector ;\n             iData          : In    std_logic_vector ;\n             StatusMsgOn    : In    boolean := false\n  ) is\n  begin\n    -- Put values in record\n    TransactionRec(Index).Operation     <= READ_CHECK ;\n    TransactionRec(Index).Address       <= SafeResize(iAddr, TransactionRec(Index).Address'length) ;\n    TransactionRec(Index).AddrWidth     <= iAddr'length ;\n    TransactionRec(Index).DataToModel   <= SafeResize(iData, TransactionRec(Index).DataToModel'length) ;\n    TransactionRec(Index).DataWidth     <= iData'length ;\n    TransactionRec(Index).StatusMsgOn   <= StatusMsgOn ;\n    -- Start Transaction\n    AddressBusArrayRequestTransaction(TransactionRec => TransactionRec, Index => Index) ;\n  end procedure ReadCheck ;\n\n  ------------------------------------------------------------\n  procedure ReadAddressAsync (\n  -- dispatch CPU Read Address Cycle\n  ------------------------------------------------------------\n    signal   TransactionRec : InOut AddressBusRecArrayType ;\n    constant Index          : In    integer  ;\n             iAddr          : In    std_logic_vector ;\n             StatusMsgOn    : In    boolean := false\n  ) is\n  begin\n    -- Put values in record\n    TransactionRec(Index).Operation     <= ASYNC_READ_ADDRESS ;\n    TransactionRec(Index).Address       <= SafeResize(iAddr, TransactionRec(Index).Address'length) ;\n    TransactionRec(Index).AddrWidth     <= iAddr'length ;\n    TransactionRec(Index).DataToModel   <= (TransactionRec(Index).DataToModel'range => 'X') ;\n    TransactionRec(Index).DataWidth     <= 0 ;\n    TransactionRec(Index).StatusMsgOn   <= StatusMsgOn ;\n    -- Start Transaction\n    AddressBusArrayRequestTransaction(TransactionRec => TransactionRec, Index => Index) ;\n  end procedure ReadAddressAsync ;\n\n  ------------------------------------------------------------\n  procedure ReadData (\n  -- Do CPU Read Data Cycle\n  ------------------------------------------------------------\n    signal   TransactionRec : InOut AddressBusRecArrayType ;\n    constant Index          : In    integer  ;\n    variable oData          : Out   std_logic_vector ;\n             StatusMsgOn    : In    boolean := false\n  ) is\n  begin\n    -- Put values in record\n    TransactionRec(Index).Operation     <= READ_DATA ;\n    TransactionRec(Index).Address       <= (TransactionRec(Index).Address'range => 'X') ;\n    TransactionRec(Index).DataWidth     <= oData'length ;\n    TransactionRec(Index).StatusMsgOn   <= StatusMsgOn ;\n    -- Start Transaction\n    AddressBusArrayRequestTransaction(TransactionRec => TransactionRec, Index => Index) ;\n    -- Return Results\n    oData  := SafeResize(TransactionRec(Index).DataFromModel, oData'length) ;\n  end procedure ReadData ;\n\n  ------------------------------------------------------------\n  procedure ReadCheckData (\n  -- Do CPU Read Data Cycle and check received Data\n  ------------------------------------------------------------\n    signal   TransactionRec : InOut AddressBusRecArrayType ;\n    constant Index          : In    integer  ;\n             iData          : In    std_logic_vector ;\n             StatusMsgOn    : In    boolean := false\n  ) is\n  begin\n    -- Put values in record\n    TransactionRec(Index).Operation     <= READ_DATA_CHECK ;\n    TransactionRec(Index).Address       <= (TransactionRec(Index).Address'range => 'X') ;\n    TransactionRec(Index).DataToModel   <= SafeResize(iData, TransactionRec(Index).DataToModel'length) ;\n    TransactionRec(Index).DataWidth     <= iData'length ;\n    TransactionRec(Index).StatusMsgOn   <= StatusMsgOn ;\n    -- Start Transaction\n    AddressBusArrayRequestTransaction(TransactionRec => TransactionRec, Index => Index) ;\n  end procedure ReadCheckData ;\n\n  ------------------------------------------------------------\n  procedure TryReadData (\n  -- Try to Get CPU Read Data Cycle\n  -- If data is available, get it and return available TRUE.\n  -- Otherwise Return Available FALSE.\n  ------------------------------------------------------------\n    signal   TransactionRec : InOut AddressBusRecArrayType ;\n    constant Index          : In    integer  ;\n    variable oData          : Out   std_logic_vector ;\n    variable Available      : Out   boolean ;\n             StatusMsgOn    : In    boolean := false\n  ) is\n  begin\n    -- Put values in record\n    TransactionRec(Index).Operation     <= ASYNC_READ_DATA ;\n    TransactionRec(Index).Address       <= (TransactionRec(Index).Address'range => 'X') ;\n    TransactionRec(Index).DataWidth     <= oData'length ;\n    TransactionRec(Index).StatusMsgOn   <= StatusMsgOn ;\n    -- Start Transaction\n    AddressBusArrayRequestTransaction(TransactionRec => TransactionRec, Index => Index) ;\n    -- Return Results\n    oData  := SafeResize(TransactionRec(Index).DataFromModel, oData'length) ;\n    Available := TransactionRec(Index).BoolFromModel ;\n  end procedure TryReadData ;\n\n  ------------------------------------------------------------\n  procedure TryReadCheckData (\n  -- Try to Get CPU Read Data Cycle\n  -- If data is available, check it and return available TRUE.\n  -- Otherwise Return Available FALSE.\n  ------------------------------------------------------------\n    signal   TransactionRec : InOut AddressBusRecArrayType ;\n    constant Index          : In    integer  ;\n             iData          : In    std_logic_vector ;\n    variable Available      : Out   boolean ;\n             StatusMsgOn    : In    boolean := false\n  ) is\n  begin\n    -- Put values in record\n    TransactionRec(Index).Operation     <= ASYNC_READ_DATA_CHECK ;\n    TransactionRec(Index).Address       <= (TransactionRec(Index).Address'range => 'X') ;\n    TransactionRec(Index).DataToModel   <= SafeResize(iData, TransactionRec(Index).DataToModel'length) ;\n    TransactionRec(Index).DataWidth     <= iData'length ;\n    TransactionRec(Index).StatusMsgOn   <= StatusMsgOn ;\n    -- Start Transaction\n    AddressBusArrayRequestTransaction(TransactionRec => TransactionRec, Index => Index) ;\n    Available := TransactionRec(Index).BoolFromModel ;\n  end procedure TryReadCheckData ;\n\n  ------------------------------------------------------------\n  procedure ReadPoll (\n  -- Read location (iAddr) until Data(IndexI) = ValueI\n  ------------------------------------------------------------\n    signal   TransactionRec : InOut AddressBusRecArrayType ;\n    constant Index          : In    integer  ;\n             iAddr          : In    std_logic_vector ;\n    variable oData          : Out   std_logic_vector ;\n             RegIndex       : In    Integer ;\n             BitValue       : In    std_logic ;\n             StatusMsgOn    : In    boolean := false ;\n             WaitTime       : In    natural := 10\n  ) is\n    variable vData    : std_logic_vector(oData'length-1 downto 0) ;\n    variable ModelID  : AlertLogIDType ;\n  begin\n    loop\n      WaitForClock(TransactionRec, Index, WaitTime) ;\n      Read (TransactionRec, Index, iAddr, vData) ;\n      exit when vData(RegIndex) = BitValue ;\n    end loop ;\n\n    GetAlertLogID(TransactionRec, Index, ModelID) ;\n    Log(ModelID, \"CpuPoll: address\" & to_hstring(iAddr) &\n      \"  Data: \" & to_hstring(vData), INFO, StatusMsgOn) ;\n    oData := vData ;\n  end procedure ReadPoll ;\n\n  ------------------------------------------------------------\n  procedure ReadPoll (\n  -- Read location (iAddr) until Data(IndexI) = ValueI\n  ------------------------------------------------------------\n    signal   TransactionRec : InOut AddressBusRecArrayType ;\n    constant Index          : In    integer  ;\n             iAddr          : In    std_logic_vector ;\n             RegIndex       : In    Integer ;\n             BitValue       : In    std_logic ;\n             StatusMsgOn    : In    boolean := false ;\n             WaitTime       : In    natural := 10\n  ) is\n    variable vData    : std_logic_vector(TransactionRec(Index).DataFromModel'range) ;\n  begin\n    ReadPoll(TransactionRec, Index, iAddr, vData, RegIndex, BitValue, StatusMsgOn, WaitTime) ;\n  end procedure ReadPoll ;\n\n  ------------------------------------------------------------\n  procedure WriteAndRead (\n  -- Write and Read Cycle that use same address and are dispatched together\n  ------------------------------------------------------------\n    signal   TransactionRec : InOut AddressBusRecArrayType ;\n    constant Index          : In    integer  ;\n             iAddr          : In    std_logic_vector ;\n             iData          : In    std_logic_vector ;\n    variable oData          : Out   std_logic_vector ;\n             StatusMsgOn    : In    boolean := false\n  ) is\n  begin\n    -- Put values in record\n    TransactionRec(Index).Operation     <= WRITE_AND_READ ;\n    TransactionRec(Index).Address       <= SafeResize(iAddr, TransactionRec(Index).Address'length) ;\n    TransactionRec(Index).AddrWidth     <= iAddr'length ;\n    TransactionRec(Index).DataToModel   <= SafeResize(iData, TransactionRec(Index).DataToModel'length) ;\n    TransactionRec(Index).DataWidth     <= iData'length ;\n    TransactionRec(Index).StatusMsgOn   <= StatusMsgOn ;\n    -- Start Transaction\n    AddressBusArrayRequestTransaction(TransactionRec => TransactionRec, Index => Index) ;\n    -- Return Results\n    oData  := SafeResize(TransactionRec(Index).DataFromModel, oData'length) ;  \n  end procedure WriteAndRead ;\n\n  ------------------------------------------------------------\n  procedure WriteAndReadAsync (\n  -- Dispatch Write Address and Data.  Do not wait for completion\n  -- Dispatch Read Address.  Do not wait for Read Data.  \n  -- Retrieve read data with ReadData or TryReadData\n  ------------------------------------------------------------\n    signal   TransactionRec : InOut AddressBusRecArrayType ;\n    constant Index          : In    integer  ;\n             iAddr          : In    std_logic_vector ;\n             iData          : In    std_logic_vector ;\n             StatusMsgOn    : In    boolean := false\n  ) is\n  begin\n    -- Put values in record\n    TransactionRec(Index).Operation     <= ASYNC_WRITE_AND_READ ;\n    TransactionRec(Index).Address       <= SafeResize(iAddr, TransactionRec(Index).Address'length) ;\n    TransactionRec(Index).AddrWidth     <= iAddr'length ;\n    TransactionRec(Index).DataToModel   <= SafeResize(iData, TransactionRec(Index).DataToModel'length) ;\n    TransactionRec(Index).DataWidth     <= iData'length ;\n    TransactionRec(Index).StatusMsgOn   <= StatusMsgOn ;\n    -- Start Transaction\n    AddressBusArrayRequestTransaction(TransactionRec => TransactionRec, Index => Index) ;\n  end procedure WriteAndReadAsync ;\n  \n  -- ========================================================\n  --  Burst Transactions\n  -- ========================================================\n\n  ------------------------------------------------------------\n  procedure WriteBurst (\n  -- do CPU Write Cycle\n  ------------------------------------------------------------\n    signal   TransactionRec : InOut AddressBusRecArrayType ;\n    constant Index          : In    integer  ;\n             iAddr          : In    std_logic_vector ;\n             NumFifoWords   : In    integer ;\n             StatusMsgOn    : In    boolean := false\n  ) is\n  begin\n    -- Put values in record\n    TransactionRec(Index).Operation     <= WRITE_BURST ;\n    TransactionRec(Index).Address       <= SafeResize(iAddr, TransactionRec(Index).Address'length) ;\n    TransactionRec(Index).AddrWidth     <= iAddr'length ;\n--    TransactionRec(Index).DataToModel   <= (TransactionRec(Index).DataToModel'range => 'X') ;\n    TransactionRec(Index).DataWidth     <= NumFifoWords ;\n    TransactionRec(Index).StatusMsgOn   <= StatusMsgOn ;\n    -- Start Transaction\n    AddressBusArrayRequestTransaction(TransactionRec => TransactionRec, Index => Index) ;\n  end procedure WriteBurst ;\n  \n  ------------------------------------------------------------\n  procedure WriteBurstVector (\n  ------------------------------------------------------------\n    signal   TransactionRec : InOut AddressBusRecArrayType ;\n    constant Index          : In    integer  ;\n             iAddr          : In    std_logic_vector ;\n             VectorOfWords  : In    slv_vector ;\n             StatusMsgOn    : In    boolean := false\n  ) is\n  begin\n    PushBurstVector(TransactionRec(Index).WriteBurstFifo, VectorOfWords) ; \n    WriteBurst(TransactionRec, Index, iAddr, VectorOfWords'length, StatusMsgOn) ; \n  end procedure WriteBurstVector ;\n  \n  ------------------------------------------------------------\n  procedure WriteBurstIncrement (\n  ------------------------------------------------------------\n    signal   TransactionRec : InOut AddressBusRecArrayType ;\n    constant Index          : In    integer  ;\n             iAddr          : In    std_logic_vector ;\n             FirstWord      : In    std_logic_vector ;\n             NumFifoWords   : In    integer ;\n             StatusMsgOn    : In    boolean := false\n  ) is\n  begin\n    PushBurstIncrement(TransactionRec(Index).WriteBurstFifo, FirstWord, NumFifoWords) ; \n    WriteBurst(TransactionRec, Index, iAddr, NumFifoWords, StatusMsgOn) ; \n  end procedure WriteBurstIncrement ;\n\n  ------------------------------------------------------------\n  procedure WriteBurstRandom (\n  ------------------------------------------------------------\n    signal   TransactionRec : InOut AddressBusRecArrayType ;\n    constant Index          : In    integer  ;\n             iAddr          : In    std_logic_vector ;\n             FirstWord      : In    std_logic_vector ;\n             NumFifoWords   : In    integer ;\n             StatusMsgOn    : In    boolean := false\n  ) is\n  begin\n    PushBurstRandom(TransactionRec(Index).WriteBurstFifo, FirstWord, NumFifoWords) ; \n    WriteBurst(TransactionRec, Index, iAddr, NumFifoWords, StatusMsgOn) ; \n  end procedure WriteBurstRandom ;\n\n  ------------------------------------------------------------\n  procedure WriteBurstRandom (\n  ------------------------------------------------------------\n    signal   TransactionRec : InOut AddressBusRecArrayType ;\n    constant Index          : In    integer  ;\n             iAddr          : In    std_logic_vector ;\n             CoverID        : In    CoverageIDType ;\n             NumFifoWords   : In    integer ;\n             FifoWidth      : In    integer ;\n             StatusMsgOn    : In    boolean := false\n  ) is\n  begin\n    PushBurstRandom(TransactionRec(Index).WriteBurstFifo, CoverID, NumFifoWords, FifoWidth) ; \n    WriteBurst(TransactionRec, Index, iAddr, NumFifoWords, StatusMsgOn) ; \n  end procedure WriteBurstRandom ;\n\n  ------------------------------------------------------------\n  procedure WriteBurstAsync (\n  -- dispatch CPU Write Cycle\n  ------------------------------------------------------------\n    signal   TransactionRec : InOut AddressBusRecArrayType ;\n    constant Index          : In    integer  ;\n             iAddr          : In    std_logic_vector ;\n             NumFifoWords   : In    integer ;\n             StatusMsgOn    : In    boolean := false\n  ) is\n  begin\n    -- Put values in record\n    TransactionRec(Index).Operation     <= ASYNC_WRITE_BURST ;\n    TransactionRec(Index).Address       <= SafeResize(iAddr, TransactionRec(Index).Address'length) ;\n    TransactionRec(Index).AddrWidth     <= iAddr'length ;\n--    TransactionRec(Index).DataToModel   <= (TransactionRec(Index).DataToModel'range => 'X') ;\n    TransactionRec(Index).DataWidth     <= NumFifoWords ;\n    TransactionRec(Index).StatusMsgOn   <= StatusMsgOn ;\n    -- Start Transaction\n    AddressBusArrayRequestTransaction(TransactionRec => TransactionRec, Index => Index) ;\n  end procedure WriteBurstAsync ;\n  \n  ------------------------------------------------------------\n  procedure WriteBurstVectorAsync (\n  ------------------------------------------------------------\n    signal   TransactionRec : InOut AddressBusRecArrayType ;\n    constant Index          : In    integer  ;\n             iAddr          : In    std_logic_vector ;\n             VectorOfWords  : In    slv_vector ;\n             StatusMsgOn    : In    boolean := false\n  ) is\n  begin\n    PushBurstVector(TransactionRec(Index).WriteBurstFifo, VectorOfWords) ; \n    WriteBurstAsync(TransactionRec, Index, iAddr, VectorOfWords'length, StatusMsgOn) ; \n  end procedure WriteBurstVectorAsync ;\n  \n  ------------------------------------------------------------\n  procedure WriteBurstIncrementAsync (\n  ------------------------------------------------------------\n    signal   TransactionRec : InOut AddressBusRecArrayType ;\n    constant Index          : In    integer  ;\n             iAddr          : In    std_logic_vector ;\n             FirstWord      : In    std_logic_vector ;\n             NumFifoWords   : In    integer ;\n             StatusMsgOn    : In    boolean := false\n  ) is\n  begin\n    PushBurstIncrement(TransactionRec(Index).WriteBurstFifo, FirstWord, NumFifoWords) ; \n    WriteBurstAsync(TransactionRec, Index, iAddr, NumFifoWords, StatusMsgOn) ; \n  end procedure WriteBurstIncrementAsync ;\n\n  ------------------------------------------------------------\n  procedure WriteBurstRandomAsync (\n  ------------------------------------------------------------\n    signal   TransactionRec : InOut AddressBusRecArrayType ;\n    constant Index          : In    integer  ;\n             iAddr          : In    std_logic_vector ;\n             FirstWord      : In    std_logic_vector ;\n             NumFifoWords   : In    integer ;\n             StatusMsgOn    : In    boolean := false\n  ) is\n  begin\n    PushBurstRandom(TransactionRec(Index).WriteBurstFifo, FirstWord, NumFifoWords) ; \n    WriteBurstAsync(TransactionRec, Index, iAddr, NumFifoWords, StatusMsgOn) ; \n  end procedure WriteBurstRandomAsync ;  \n  \n  ------------------------------------------------------------\n  procedure WriteBurstRandomAsync (\n  ------------------------------------------------------------\n    signal   TransactionRec : InOut AddressBusRecArrayType ;\n    constant Index          : In    integer  ;\n             iAddr          : In    std_logic_vector ;\n             CoverID        : In    CoverageIDType ;\n             NumFifoWords   : In    integer ;\n             FifoWidth      : In    integer ;\n             StatusMsgOn    : In    boolean := false\n  ) is\n  begin\n    PushBurstRandom(TransactionRec(Index).WriteBurstFifo, CoverID, NumFifoWords, FifoWidth) ; \n    WriteBurstAsync(TransactionRec, Index, iAddr, NumFifoWords, StatusMsgOn) ; \n  end procedure WriteBurstRandomAsync ;\n\n  ------------------------------------------------------------\n  procedure ReadBurst (\n  -- do CPU Read Cycle and return data\n  ------------------------------------------------------------\n    signal   TransactionRec : InOut AddressBusRecArrayType ;\n    constant Index          : In    integer  ;\n             iAddr          : In    std_logic_vector ;\n             NumFifoWords   : In    integer ;\n             StatusMsgOn    : In    boolean := false\n  ) is\n  begin\n    -- Put values in record\n    TransactionRec(Index).Operation     <= READ_BURST ;\n    TransactionRec(Index).Address       <= SafeResize(iAddr, TransactionRec(Index).Address'length) ;\n    TransactionRec(Index).AddrWidth     <= iAddr'length ;\n    TransactionRec(Index).DataWidth     <= NumFifoWords ;\n--??    TransactionRec(Index).DataWidth     <= 0 ;\n    TransactionRec(Index).StatusMsgOn   <= StatusMsgOn ;\n    -- Start Transaction\n    AddressBusArrayRequestTransaction(TransactionRec => TransactionRec, Index => Index) ;\n--??    -- Return Results\n--??    NumFifoWords := TransactionRec(Index).IntFromModel ;\n  end procedure ReadBurst ;\n  \n  ------------------------------------------------------------\n  procedure ReadCheckBurstVector (\n  ------------------------------------------------------------\n    signal   TransactionRec : InOut AddressBusRecArrayType ;\n    constant Index          : In    integer  ;\n             iAddr          : In    std_logic_vector ;\n             VectorOfWords  : In    slv_vector ;\n             StatusMsgOn    : In    boolean := false\n  ) is\n  begin\n    ReadBurst(TransactionRec, Index, iAddr, VectorOfWords'length, StatusMsgOn) ; \n    CheckBurstVector(TransactionRec(Index).ReadBurstFifo, VectorOfWords) ;\n  end procedure ReadCheckBurstVector ;\n  \n  ------------------------------------------------------------\n  procedure ReadCheckBurstIncrement (\n  ------------------------------------------------------------\n    signal   TransactionRec : InOut AddressBusRecArrayType ;\n    constant Index          : In    integer  ;\n             iAddr          : In    std_logic_vector ;\n             FirstWord      : In    std_logic_vector ;\n             NumFifoWords   : In    integer ;\n             StatusMsgOn    : In    boolean := false\n  ) is\n  begin\n    ReadBurst(TransactionRec, Index, iAddr, NumFifoWords, StatusMsgOn) ; \n    CheckBurstIncrement(TransactionRec(Index).ReadBurstFifo, FirstWord, NumFifoWords) ; \n  end procedure ReadCheckBurstIncrement ;\n\n  ------------------------------------------------------------\n  procedure ReadCheckBurstRandom (\n  ------------------------------------------------------------\n    signal   TransactionRec : InOut AddressBusRecArrayType ;\n    constant Index          : In    integer  ;\n             iAddr          : In    std_logic_vector ;\n             FirstWord      : In    std_logic_vector ;\n             NumFifoWords   : In    integer ;\n             StatusMsgOn    : In    boolean := false\n  ) is\n  begin\n    ReadBurst(TransactionRec, Index, iAddr, NumFifoWords, StatusMsgOn) ; \n    CheckBurstRandom(TransactionRec(Index).ReadBurstFifo, FirstWord, NumFifoWords) ; \n  end procedure ReadCheckBurstRandom ;\n\n  ------------------------------------------------------------\n  procedure ReadCheckBurstRandom (\n  ------------------------------------------------------------\n    signal   TransactionRec : InOut AddressBusRecArrayType ;\n    constant Index          : In    integer  ;\n             iAddr          : In    std_logic_vector ;\n             CoverID        : In    CoverageIDType ;\n             NumFifoWords   : In    integer ;\n             FifoWidth      : In    integer ;\n             StatusMsgOn    : In    boolean := false\n  ) is\n  begin\n    ReadBurst(TransactionRec, Index, iAddr, NumFifoWords, StatusMsgOn) ; \n    CheckBurstRandom(TransactionRec(Index).ReadBurstFifo, CoverID, NumFifoWords, FifoWidth) ; \n  end procedure ReadCheckBurstRandom ;\n\n  -- ========================================================\n  --  Pseudo Transactions\n  --  Interact with the record only.\n  -- ========================================================\n  ------------------------------------------------------------\n  procedure ReleaseTransactionRecord (\n  --  Must run on same delta cycle as AcquireTransactionRecord\n  ------------------------------------------------------------\n    signal   TransactionRec : InOut AddressBusRecArrayType ;\n    constant Index          : In    integer  \n  ) is\n  begin\n    -- Set everything driven by TestCtrl to type'left (except Rdy)\n    TransactionRec(Index).Rdy           <= RdyType'left ;   \n    TransactionRec(Index).Operation     <= NOT_DRIVEN ;\n    TransactionRec(Index).Address       <= (TransactionRec(Index).Address'range => 'U') ;\n    TransactionRec(Index).AddrWidth     <= integer'left ; \n    TransactionRec(Index).DataToModel   <= (TransactionRec(Index).DataToModel'range => 'U') ;\n    TransactionRec(Index).DataWidth     <= integer'left ; \n    TransactionRec(Index).StatusMsgOn   <= boolean'left ; \n    TransactionRec(Index).IntToModel    <= integer'left ; \n    TransactionRec(Index).BoolToModel   <= boolean'left ;  \n    TransactionRec(Index).Options       <= integer'left ;    \n  end procedure ReleaseTransactionRecord ; \n  \n  ------------------------------------------------------------\n  procedure AcquireTransactionRecord (\n  --  Must run on same delta cycle as ReleaseTransactionRecord\n  ------------------------------------------------------------\n    signal   TransactionRec : InOut AddressBusRecArrayType ;\n    constant Index          : In    integer  \n  ) is\n  begin\n    -- Start Driving Rdy on next delta cycle with the current value.  \n    TransactionRec(Index).Rdy <= TransactionRec(Index).Rdy ; \n  end procedure AcquireTransactionRecord ; \n    \n\nend package body AddressBusTransactionArrayPkg ;","lang":"vhdl"};
processSrcData(g_data);
var g_data = {"name":"C:/SynthWorks/Dev/_osvvm/OsvvmLibraries/AXI4/AxiStream/testbench/TbStream.vhd","src":"--\n--  File Name:         TbStream.vhd\n--  Design Unit Name:  TbStream\n--  Revision:          OSVVM MODELS STANDARD VERSION\n--\n--  Maintainer:        Jim Lewis      email:  jim@synthworks.com\n--  Contributor(s):\n--     Jim Lewis      jim@synthworks.com\n--\n--\n--  Description:\n--      Top level testbench for AxiStreamTransmitter and AxiStreamReceiver\n--\n--\n--  Developed by:\n--        SynthWorks Design Inc.\n--        VHDL Training Classes\n--        http://www.SynthWorks.com\n--\n--  Revision History:\n--    Date      Version    Description\n--    01/2023   2023.01    Added DUT (pass thru)\n--    10/2020   2020.10    Updated name to be TbStream.vhd in conjunction with Model Indepenedent Transactions\n--    01/2020   2020.01    Updated license notice\n--    05/2018   2018.05    Initial revision\n--\n--\n--  This file is part of OSVVM.\n--  \n--  Copyright (c) 2018 - 2020 by SynthWorks Design Inc.  \n--  \n--  Licensed under the Apache License, Version 2.0 (the \"License\");\n--  you may not use this file except in compliance with the License.\n--  You may obtain a copy of the License at\n--  \n--      https://www.apache.org/licenses/LICENSE-2.0\n--  \n--  Unless required by applicable law or agreed to in writing, software\n--  distributed under the License is distributed on an \"AS IS\" BASIS,\n--  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n--  See the License for the specific language governing permissions and\n--  limitations under the License.\n--  \nlibrary ieee ;\n  use ieee.std_logic_1164.all ;\n  use ieee.numeric_std.all ;\n  use ieee.numeric_std_unsigned.all ;\n\nlibrary osvvm ;\n    context osvvm.OsvvmContext ;\n    \nlibrary osvvm_AXI4 ;\n    context osvvm_AXI4.AxiStreamContext ;\n    \nentity TbStream is\nend entity TbStream ; \narchitecture TestHarness of TbStream is\n\n  constant tperiod_Clk : time := 10 ns ; \n  constant tpd         : time := 2 ns ; \n\n  signal Clk       : std_logic ;\n  signal nReset    : std_logic ;\n  \n  constant AXI_DATA_WIDTH   : integer := 32 ;\n  constant AXI_BYTE_WIDTH   : integer := AXI_DATA_WIDTH/8 ; \n  constant TID_MAX_WIDTH    : integer := 8 ;\n  constant TDEST_MAX_WIDTH  : integer := 4 ;\n  constant TUSER_MAX_WIDTH  : integer := 4 ;\n\n  constant INIT_ID     : std_logic_vector(TID_MAX_WIDTH-1 downto 0)   := (others => '0') ; \n  constant INIT_DEST   : std_logic_vector(TDEST_MAX_WIDTH-1 downto 0) := (others => '0') ; \n  constant INIT_USER   : std_logic_vector(TUSER_MAX_WIDTH-1 downto 0) := (others => '0') ; \n  \n  signal TxTValid, RxTValid    : std_logic ;\n  signal TxTReady, RxTReady    : std_logic ; \n  signal TxTID   , RxTID       : std_logic_vector(TID_MAX_WIDTH-1 downto 0) ; \n  signal TxTDest , RxTDest     : std_logic_vector(TDEST_MAX_WIDTH-1 downto 0) ; \n  signal TxTUser , RxTUser     : std_logic_vector(TUSER_MAX_WIDTH-1 downto 0) ; \n  signal TxTData , RxTData     : std_logic_vector(AXI_DATA_WIDTH-1 downto 0) ; \n  signal TxTStrb , RxTStrb     : std_logic_vector(AXI_BYTE_WIDTH-1 downto 0) ; \n  signal TxTKeep , RxTKeep     : std_logic_vector(AXI_BYTE_WIDTH-1 downto 0) ; \n  signal TxTLast , RxTLast     : std_logic ; \n  \n  constant AXI_PARAM_WIDTH : integer := TID_MAX_WIDTH + TDEST_MAX_WIDTH + TUSER_MAX_WIDTH + 1 ;\n\n  signal StreamTxRec, StreamRxRec : StreamRecType(\n      DataToModel   (AXI_DATA_WIDTH-1  downto 0),\n      DataFromModel (AXI_DATA_WIDTH-1  downto 0),\n      ParamToModel  (AXI_PARAM_WIDTH-1 downto 0),\n      ParamFromModel(AXI_PARAM_WIDTH-1 downto 0)\n    ) ;  \n  \n\n  component TestCtrl is\n    generic ( \n      ID_LEN       : integer ;\n      DEST_LEN     : integer ;\n      USER_LEN     : integer \n    ) ;\n    port (\n      -- Global Signal Interface\n      nReset          : In    std_logic ;\n\n      -- Transaction Interfaces\n      StreamTxRec     : inout StreamRecType ;\n      StreamRxRec     : inout StreamRecType \n    ) ;\n  end component TestCtrl ;\n\n  \nbegin\n\n  DUT : entity work.AxiStreamDut \n    port map (\n      -- AXI Transmitter Functional Interface\n      TxTValid    =>   TxTValid,\n      TxTReady    =>   TxTReady,\n      TxTID       =>   TxTID   ,\n      TxTDest     =>   TxTDest ,\n      TxTUser     =>   TxTUser ,\n      TxTData     =>   TxTData ,\n      TxTStrb     =>   TxTStrb ,\n      TxTKeep     =>   TxTKeep ,\n      TxTLast     =>   TxTLast ,\n\n      -- AXI Receiver Functional Interface\n      RxTValid    =>   RxTValid,\n      RxTReady    =>   RxTReady,\n      RxTID       =>   RxTID   ,\n      RxTDest     =>   RxTDest ,\n      RxTUser     =>   RxTUser ,\n      RxTData     =>   RxTData ,\n      RxTStrb     =>   RxTStrb ,\n      RxTKeep     =>   RxTKeep ,\n      RxTLast     =>   RxTLast \n    ) ;\n\n  -- create Clock \n  Osvvm.TbUtilPkg.CreateClock ( \n    Clk        => Clk, \n    Period     => Tperiod_Clk \n  )  ; \n  \n  -- create nReset \n  Osvvm.TbUtilPkg.CreateReset ( \n    Reset       => nReset,\n    ResetActive => '0',\n    Clk         => Clk,\n    Period      => 7 * tperiod_Clk,\n    tpd         => tpd\n  ) ;\n  \n  Transmitter_1 : AxiStreamTransmitter \n    generic map (\n      INIT_ID        => INIT_ID  , \n      INIT_DEST      => INIT_DEST, \n      INIT_USER      => INIT_USER, \n      INIT_LAST      => 0,\n\n      tperiod_Clk    => tperiod_Clk,\n\n      tpd_Clk_TValid => tpd, \n      tpd_Clk_TID    => tpd, \n      tpd_Clk_TDest  => tpd, \n      tpd_Clk_TUser  => tpd, \n      tpd_Clk_TData  => tpd, \n      tpd_Clk_TStrb  => tpd, \n      tpd_Clk_TKeep  => tpd, \n      tpd_Clk_TLast  => tpd \n    ) \n    port map (\n      -- Globals\n      Clk       => Clk,\n      nReset    => nReset,\n      \n      -- AXI Stream Interface\n      -- From TB Transmitter to DUT Receiver\n      TValid    => RxTValid,\n      TReady    => RxTReady,\n      TID       => RxTID   ,\n      TDest     => RxTDest ,\n      TUser     => RxTUser ,\n      TData     => RxTData ,\n      TStrb     => RxTStrb ,\n      TKeep     => RxTKeep ,\n      TLast     => RxTLast ,\n\n      -- Testbench Transaction Interface\n      TransRec  => StreamTxRec\n    ) ;\n  \n  Receiver_1 : AxiStreamReceiver\n    generic map (\n      tperiod_Clk    => tperiod_Clk,\n      INIT_ID        => INIT_ID  , \n      INIT_DEST      => INIT_DEST, \n      INIT_USER      => INIT_USER, \n      INIT_LAST      => 0,\n\n      tpd_Clk_TReady => tpd  \n    ) \n    port map (\n      -- Globals\n      Clk       => Clk,\n      nReset    => nReset,\n      \n      -- AXI Stream Interface\n      -- From TB Receiver to DUT Transmitter\n      TValid    => TxTValid,\n      TReady    => TxTReady,\n      TID       => TxTID   ,\n      TDest     => TxTDest ,\n      TUser     => TxTUser ,\n      TData     => TxTData ,\n      TStrb     => TxTStrb ,\n      TKeep     => TxTKeep ,\n      TLast     => TxTLast ,\n\n      -- Testbench Transaction Interface\n      TransRec  => StreamRxRec\n    ) ;\n  \n  \n  TestCtrl_1 : TestCtrl\n  generic map ( \n    ID_LEN       => TxTID'length,\n    DEST_LEN     => TxTDest'length,\n    USER_LEN     => TxTUser'length\n  ) \n  port map ( \n    -- Globals\n    nReset       => nReset,\n    \n    -- Testbench Transaction Interfaces\n    StreamTxRec  => StreamTxRec, \n    StreamRxRec  => StreamRxRec  \n  ) ; \n\nend architecture TestHarness ;","lang":"vhdl"};
processSrcData(g_data);
var g_data = {"name":"C:/SynthWorks/Dev/_osvvm/OsvvmLibraries/osvvm/RandomProcedurePkg.vhd","src":"--\n--  File Name :         RandomProcedurePkg.vhd\n--  Design Unit Name :  RandomProcedurePkg\n--  Revision :          STANDARD VERSION\n--\n--  Maintainer :        Jim Lewis      email :  jim@synthworks.com\n--  Contributor(s) :\n--     Jim Lewis      email:  jim@synthworks.com\n--     Lars Asplund   email:  lars.anders.asplund@gmail.com - RandBool, RandSl, RandBit, DistBool, DistSl, DistBit\n--     *\n--\n--   * In writing procedures normal, poisson, the following sources were referenced :\n--     Wikipedia\n--     package rnd2 written by John Breen and Ken Christensen\n--     package RNG written by Gnanasekaran Swaminathan\n--\n--\n--  Description :\n--    A minimal randomization package using procedures that\n--    supports CoveragePkg.vhd.\n--    Does not use protected types.   \n--    Does not use VHDL-2019.     \n--\n--  Developed for :\n--        SynthWorks Design Inc.\n--        VHDL Training Classes\n--        11898 SW 128th Ave.  Tigard, Or  97223\n--        http ://www.SynthWorks.com\n--\n--  Revision History :\n--    Date       Version    Description\n--    05/2021    2021/05    Refactored from RandomPkg.vhd\n--                          Needed minimal set of procedures to support randomization in CoveragePkg\n--\n--\n--  This file is part of OSVVM.\n--  \n--  Copyright (c) 2006 - 2021 by SynthWorks Design Inc.  \n--  Copyright (C) 2021 by OSVVM Authors   \n--  \n--  Licensed under the Apache License, Version 2.0 (the \"License\");\n--  you may not use this file except in compliance with the License.\n--  You may obtain a copy of the License at\n--  \n--      https://www.apache.org/licenses/LICENSE-2.0\n--  \n--  Unless required by applicable law or agreed to in writing, software\n--  distributed under the License is distributed on an \"AS IS\" BASIS,\n--  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n--  See the License for the specific language governing permissions and\n--  limitations under the License.\n--  \n\nuse work.OsvvmGlobalPkg.all ; \nuse work.AlertLogPkg.all ; \nuse work.RandomBasePkg.all ;\nuse work.SortListPkg_int.all ;\n\nuse std.textio.all ;\n\nlibrary ieee ;\nuse ieee.std_logic_1164.all ;\nuse ieee.numeric_std.all ;\nuse ieee.numeric_std_unsigned.all ;\nuse ieee.math_real.all ;\n\n\npackage RandomProcedurePkg is\n  ------------------------------------------------------------\n  --\n  -- Uniform\n  -- Generate a random number with a Uniform distribution\n  --\n  ------------------------------------------------------------\n  procedure Uniform (RandomSeed : inout RandomSeedType; R : out integer; Min, Max : integer) ;\n  procedure Uniform (RandomSeed : inout RandomSeedType; R : out integer; Min, Max : integer ; Exclude : integer_vector) ;\n  alias RandInt is Uniform [RandomSeedType, integer, integer, integer] ;\n  alias RandInt is Uniform [RandomSeedType, integer, integer, integer, integer_vector] ;\n\n  --- ///////////////////////////////////////////////////////////////////////////\n  --\n  --  Basic Discrete Distributions\n  --    Always uses Uniform\n  --\n  --- ///////////////////////////////////////////////////////////////////////////\n  -----------------------------------------------------------------\n  procedure DistInt (RandomSeed : inout RandomSeedType; R : out integer; Weight : integer_vector) ;\n\n\nend RandomProcedurePkg ;\n\n--- ///////////////////////////////////////////////////////////////////////////\n--- ///////////////////////////////////////////////////////////////////////////\n--- ///////////////////////////////////////////////////////////////////////////\n\npackage body RandomProcedurePkg is\n  ------------------------------------------------------------\n  --\n  -- Uniform\n  -- Generate a random number with a Uniform distribution\n  --\n  ------------------------------------------------------------\n  procedure Uniform (RandomSeed : inout RandomSeedType; R : out integer; Min, Max : integer) is\n  ------------------------------------------------------------\n    variable rRandomVal : real ;\n  begin\n-- Checks done in CoveragePkg\n--    AlertIf (OSVVM_RANDOM_ALERTLOG_ID, Max < Min, \"RandomPkg.Uniform: Max < Min\", FAILURE) ;\n    Uniform(rRandomVal, RandomSeed) ;\n    R := scale(rRandomVal, Min, Max) ;\n  end procedure Uniform ;\n\n  ------------------------------------------------------------\n  procedure Uniform (RandomSeed : inout RandomSeedType; R : out integer; Min, Max : integer ; Exclude : integer_vector) is\n  ------------------------------------------------------------\n    variable iRandomVal : integer ;\n    variable ExcludeList : SortListPType ;\n    variable count : integer ;\n  begin\n    ExcludeList.add(Exclude, Min, Max) ;\n    count := ExcludeList.count ;\n    Uniform(RandomSeed, iRandomVal, Min, Max - count) ;\n    -- adjust count, note iRandomVal changes while checking.\n    for i in 1 to count loop\n      exit when iRandomVal < ExcludeList.Get(i) ;\n      iRandomVal := iRandomVal + 1 ;\n    end loop ;\n    ExcludeList.erase ;\n    R := iRandomVal ;\n  end procedure Uniform ;\n\n\n  --- ///////////////////////////////////////////////////////////////////////////\n  --\n  --  Basic Discrete Distributions\n  --    Always uses Uniform\n  --\n  --- ///////////////////////////////////////////////////////////////////////////\n  -----------------------------------------------------------------\n  procedure DistInt (RandomSeed : inout RandomSeedType; R : out integer; Weight : integer_vector) is\n  -----------------------------------------------------------------\n    variable DistArray : integer_vector(weight'range) ;\n    variable sum : integer ;\n    variable iRandomVal : integer ;\n  begin\n    DistArray := Weight ;\n    sum := 0 ;\n    for i in DistArray'range loop\n      DistArray(i) := DistArray(i) + sum ;\n      if DistArray(i) < sum then\n        Alert(OSVVM_RANDOM_ALERTLOG_ID, \"RandomPkg.DistInt: negative weight or sum > 31 bits\", FAILURE) ;\n        R := DistArray'low ; -- allows debugging vs integer'left, out of range\n      end if ;\n      sum := DistArray(i) ;\n    end loop ;\n    if sum >= 1 then\n      Uniform(RandomSeed, iRandomVal, 1, sum) ;\n      for i in DistArray'range loop\n        if iRandomVal <= DistArray(i) then\n          R := i ;\n          return ; \n        end if ;\n      end loop ;\n      Alert(OSVVM_RANDOM_ALERTLOG_ID, \"RandomPkg.DistInt: randomization failed\", FAILURE) ;\n    else\n      Alert(OSVVM_RANDOM_ALERTLOG_ID, \"RandomPkg.DistInt: No randomization weights\", FAILURE) ;\n    end if ;\n    R := DistArray'low ; -- allows debugging vs integer'left, out of range\n  end procedure DistInt ;\n\nend RandomProcedurePkg ;\n","lang":"vhdl"};
processSrcData(g_data);
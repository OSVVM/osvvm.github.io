var g_data = {"name":"C:/SynthWorks/Dev/_osvvm/OsvvmLibraries/osvvm/ReportPkg.vhd","src":"--\n--  File Name:         ReportPkg.vhd\n--  Design Unit Name:  ReportPkg\n--  Revision:          STANDARD VERSION\n--\n--  Maintainer:        Jim Lewis      email:  jim@synthworks.com\n--  Contributor(s):\n--     Jim Lewis      jim@synthworks.com\n--\n--  Description:\n--        Generate Final Reports\n--        Elements of these reports come from AlertLogPkg, CoveragePkg, and \n--        the ScoreboardGenericPkg instances of ScoreboardPkg_int and ScoreboardPkg_slv\n--\n--  Developed for:\n--        SynthWorks Design Inc.\n--        VHDL Training Classes\n--        11898 SW 128th Ave.  Tigard, Or  97223\n--        http://www.SynthWorks.com\n--\n--  Revision History:\n--    Date      Version    Description\n--    07/2023   2023.07    Added call to WriteRequirementsYaml.\n--    04/2023   2023.04    Added TranscriptOpen without parameters \n--    01/2023   2023.01    OSVVM_OUTPUT_DIRECTORY replaced REPORTS_DIRECTORY \n--                         Added simple TranscriptOpen that uses GetTestName\n--    06/2022   2022.06    Minor reordering of EndOfTestReports\n--    02/2022   2022.02    EndOfTestReports now calls WriteScoreboardYaml\n--    10/2021   2021.10    Initial revision\n--\n--  This file is part of OSVVM.\n--\n--  Copyright (c) 2021-2023 by SynthWorks Design Inc.\n--\n--  Licensed under the Apache License, Version 2.0 (the \"License\");\n--  you may not use this file except in compliance with the License.\n--  You may obtain a copy of the License at\n--\n--      https://www.apache.org/licenses/LICENSE-2.0\n--\n--  Unless required by applicable law or agreed to in writing, software\n--  distributed under the License is distributed on an \"AS IS\" BASIS,\n--  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n--  See the License for the specific language governing permissions and\n--  limitations under the License.\n--\n\nuse std.textio.all ;\n\nuse work.OsvvmScriptSettingsPkg.all ;\nuse work.TranscriptPkg.all ; \nuse work.AlertLogPkg.all ;\nuse work.CoveragePkg.all ;\nuse work.ScoreboardPkg_slv.all ;\nuse work.ScoreboardPkg_int.all ;\n\n\npackage ReportPkg is\n\n  impure function EndOfTestReports (\n    ReportAll      : boolean        := FALSE ;\n    ExternalErrors : AlertCountType := (0,0,0) \n  ) return integer ;\n\n  procedure EndOfTestReports (\n    ReportAll      : boolean        := FALSE ;\n    ExternalErrors : AlertCountType := (0,0,0) ;\n    Stop           : boolean        := FALSE\n  ) ;\n  \n  procedure TranscriptOpen (OpenKind: WRITE_APPEND_OPEN_KIND := WRITE_MODE) ;\n  procedure TranscriptOpen (Status: InOut FILE_OPEN_STATUS; OpenKind: WRITE_APPEND_OPEN_KIND := WRITE_MODE) ;\n\n  alias EndOfTestSummary is EndOfTestReports[boolean, AlertCountType return integer] ;\n  alias EndOfTestSummary is EndOfTestReports[boolean, AlertCountType, boolean] ;\n\nend ReportPkg ;\n\n--- ///////////////////////////////////////////////////////////////////////////\n--- ///////////////////////////////////////////////////////////////////////////\n--- ///////////////////////////////////////////////////////////////////////////\n\npackage body ReportPkg is\n\n  ------------------------------------------------------------\n  procedure WriteCovSummaryYaml (FileName : string ) is\n  ------------------------------------------------------------\n    file OsvvmYamlFile : text open APPEND_MODE is FileName ;\n    variable buf : line ;\n  begin\n    if GotCoverage then \n      swrite(buf, \"        FunctionalCoverage: \" & to_string(GetCov, 2)) ; \n    else\n      swrite(buf, \"        FunctionalCoverage:  \") ; \n    end if ; \n    writeline(OsvvmYamlFile, buf) ; \n    file_close(OsvvmYamlFile) ;\n  end procedure WriteCovSummaryYaml ;\n\n  ------------------------------------------------------------\n  impure function EndOfTestReports (\n  ------------------------------------------------------------\n    ReportAll      : boolean        := FALSE ;\n    ExternalErrors : AlertCountType := (0,0,0) \n  ) return integer is\n  begin\n    ReportAlerts(ExternalErrors => ExternalErrors, ReportAll => ReportAll) ; \n    \n    if GotCoverage then \n      WriteCovYaml (\n        FileName      => OSVVM_OUTPUT_DIRECTORY &  GetTestName & \"_cov.yml\"\n      ) ;\n    end if ; \n    \n    if work.ScoreboardPkg_slv.GotScoreboards then \n      work.ScoreboardPkg_slv.WriteScoreboardYaml (\n        FileName     => OSVVM_OUTPUT_DIRECTORY &  GetTestName & \"_sb_slv.yml\"\n      ) ;\n    end if ; \n    \n    if work.ScoreboardPkg_int.GotScoreboards then \n      work.ScoreboardPkg_int.WriteScoreboardYaml (\n        FileName     => OSVVM_OUTPUT_DIRECTORY &  GetTestName & \"_sb_int.yml\"\n      ) ;\n    end if ; \n\n    if GotRequirements then \n      WriteRequirementsYaml (\n        FileName      => OSVVM_OUTPUT_DIRECTORY &  GetTestName & \"_req.yml\"\n      ) ;\n    end if ; \n    \n    -- Summarize Alerts Last to allow previous steps to update Alerts\n    WriteAlertSummaryYaml(\n      FileName        => OSVVM_BUILD_YAML_FILE, \n      ExternalErrors  => ExternalErrors\n    ) ; \n    WriteCovSummaryYaml (\n      FileName        => OSVVM_BUILD_YAML_FILE\n    ) ;\n    WriteAlertYaml (\n      FileName        => OSVVM_OUTPUT_DIRECTORY &  GetTestName & \"_alerts.yml\", \n      ExternalErrors  => ExternalErrors\n    ) ; \n\n    return SumAlertCount(GetAlertCount + ExternalErrors) ;\n  end function EndOfTestReports ;\n\n  ------------------------------------------------------------\n  procedure EndOfTestReports (\n  ------------------------------------------------------------\n    ReportAll      : boolean        := FALSE ;\n    ExternalErrors : AlertCountType := (0,0,0) ;\n    Stop           : boolean        := FALSE\n  ) is\n    variable ErrorCount : integer ; \n  begin\n    ErrorCount := EndOfTestReports(ReportAll, ExternalErrors) ;\n    if Stop then \n      std.env.stop ; \n    end if ;\n  end procedure EndOfTestReports ;\n\n  ------------------------------------------------------------\n  procedure TranscriptOpen (OpenKind: WRITE_APPEND_OPEN_KIND := WRITE_MODE) is\n  ------------------------------------------------------------\n    variable Status : FILE_OPEN_STATUS ; \n  begin\n    TranscriptOpen(Status, OSVVM_OUTPUT_DIRECTORY & GetTranscriptName, OpenKind) ;\n  end procedure TranscriptOpen ; \n\n  ------------------------------------------------------------\n  procedure TranscriptOpen (Status: InOut FILE_OPEN_STATUS; OpenKind: WRITE_APPEND_OPEN_KIND := WRITE_MODE) is\n  ------------------------------------------------------------\n  begin\n    TranscriptOpen(Status, OSVVM_OUTPUT_DIRECTORY & GetTranscriptName, OpenKind) ;\n  end procedure TranscriptOpen ; \n  \n\n\nend package body ReportPkg ;","lang":"vhdl"};
processSrcData(g_data);
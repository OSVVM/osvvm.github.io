var g_data = {"name":"C:/SynthWorks/Dev/_osvvm/OsvvmLibraries/DpRam/testbench/TbDpRam.vhd","src":"--\n--  File Name:         TbDpRam.vhd\n--  Design Unit Name:  TbDpRam\n--  Revision:          OSVVM MODELS STANDARD VERSION\n--\n--  Maintainer:        Jim Lewis      email:  jim@synthworks.com\n--  Contributor(s):\n--     Jim Lewis      jim@synthworks.com\n--\n--\n--  Description:\n--      Simple AXI Lite Manager Model\n--\n--\n--  Developed by:\n--        SynthWorks Design Inc.\n--        VHDL Training Classes\n--        http://www.SynthWorks.com\n--\n--  Revision History:\n--    Date      Version    Description\n--    04/2018   2018       Initial revision\n--    01/2020   2020.01    Updated license notice\n--    12/2020   2020.12    Updated signal and port names\n--\n--\n--  This file is part of OSVVM.\n--\n--  Copyright (c) 2018 - 2020 by SynthWorks Design Inc.\n--\n--  Licensed under the Apache License, Version 2.0 (the \"License\");\n--  you may not use this file except in compliance with the License.\n--  You may obtain a copy of the License at\n--\n--      https://www.apache.org/licenses/LICENSE-2.0\n--\n--  Unless required by applicable law or agreed to in writing, software\n--  distributed under the License is distributed on an \"AS IS\" BASIS,\n--  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n--  See the License for the specific language governing permissions and\n--  limitations under the License.\n--\n\nlibrary ieee ;\n  use ieee.std_logic_1164.all ;\n  use ieee.numeric_std.all ;\n  use ieee.numeric_std_unsigned.all ;\n\nlibrary osvvm ;\n  context osvvm.OsvvmContext ;\n\nlibrary OSVVM_DPRAM ;\n  context OSVVM_DpRam.DPRamContext ; \n\nentity TbDpRam is\nend entity TbDpRam ;\narchitecture TestHarness of TbDpRam is\n  constant ADDR_WIDTH : integer := 24 ;\n  constant DATA_WIDTH : integer := 16 ;\n\n  constant tperiod_Clk : time := 10 ns ;\n  constant tpd         : time := 2 ns ;\n\n  signal Clk         : std_logic ;\n  signal nReset      : std_logic ;\n\n  signal AddrA      : std_logic_vector(ADDR_WIDTH-1 downto 0) ; \n  signal WriteA     : std_logic ; \n  signal DataInA    : std_logic_vector(DATA_WIDTH-1 downto 0) ; \n  signal DataOutA   : std_logic_vector(DATA_WIDTH-1 downto 0) ; \n\n  signal AddrB      : std_logic_vector(ADDR_WIDTH-1 downto 0) ; \n  signal WriteB     : std_logic ; \n  signal DataInB    : std_logic_vector(DATA_WIDTH-1 downto 0) ; \n  signal DataOutB   : std_logic_vector(DATA_WIDTH-1 downto 0) ; \n\n  signal Manager1Rec, Manager2Rec  : AddressBusRecType (\n          Address(ADDR_WIDTH-1 downto 0),\n          DataToModel(DATA_WIDTH-1 downto 0),\n          DataFromModel(DATA_WIDTH-1 downto 0)\n        ) ;\n\n  component TestCtrl is\n    port (\n      -- Global Signal Interface\n      nReset         : In    std_logic ;\n\n      -- Transaction Interfaces\n      Manager1Rec    : inout AddressBusRecType ;\n      Manager2Rec    : inout AddressBusRecType\n    ) ;\n  end component TestCtrl ;\n\nbegin\n\n  -- create Clock\n  Osvvm.TbUtilPkg.CreateClock (\n    Clk        => Clk,\n    Period     => Tperiod_Clk\n  )  ;\n\n  -- create nReset\n  Osvvm.TbUtilPkg.CreateReset (\n    Reset       => nReset,\n    ResetActive => '0',\n    Clk         => Clk,\n    Period      => 7 * tperiod_Clk,\n    tpd         => tpd\n  ) ;\n\n  ------------------------------------------------------------\n   DpRam_1 : DpRam\n  ------------------------------------------------------------\n    generic map ( \n      ADDR_WIDTH   => ADDR_WIDTH,\n      DATA_WIDTH   => DATA_WIDTH,\n      REGA_OUT     => FALSE, \n      REGB_OUT     => FALSE,\n      MEMORY_NAME  => \"DpRam_1\"\n    )\n    port map (\n      ClkA         => Clk     ,\n      AddrA        => AddrA   ,\n      WriteA       => WriteA  ,\n      DataInA      => DataInA ,\n      DataOutA     => DataOutA,\n      \n      ClkB         => Clk     ,\n      AddrB        => AddrB   ,\n      WriteB       => WriteB  ,\n      DataInB      => DataInB ,\n      DataOutB     => DataOutB\n    ) ; \n\n\n\n  ------------------------------------------------------------\n  DpRamController_1 : DpRamController \n  ------------------------------------------------------------\n  port map (\n    -- Globals\n    Clk         => Clk   ,\n    nReset      => nReset,\n\n    -- AXI Manager Functional Interface\n    Address     => AddrA   , \n    Write       => WriteA  , \n    oData       => DataInA , \n    iData       => DataOutA, \n\n    -- Testbench Transaction Interface\n    TransRec    => Manager1Rec \n  ) ;\n  \n  ------------------------------------------------------------\n  DpRamController_2 : DpRamController \n  ------------------------------------------------------------\n  port map (\n    -- Globals\n    Clk         => Clk   ,\n    nReset      => nReset,\n\n    -- AXI Manager Functional Interface\n    Address     => AddrB   , \n    Write       => WriteB  , \n    oData       => DataInB , \n    iData       => DataOutB, \n\n    -- Testbench Transaction Interface\n    TransRec    =>  Manager2Rec\n  ) ;\n  \n  \n  TestCtrl_1 : TestCtrl\n  port map (\n    -- Global Signal Interface\n    nReset        => nReset,\n\n    -- Transaction Interfaces\n    Manager1Rec   => Manager1Rec,\n    Manager2Rec   => Manager2Rec\n  ) ;\n\nend architecture TestHarness ;","lang":"vhdl"};
processSrcData(g_data);
var g_data = {"name":"C:/OsvvmLibraries/osvvm/CoveragePkg.vhd","src":"--\n--  File Name:         CoveragePkg.vhd\n--  Design Unit Name:  CoveragePkg\n--  Revision:          STANDARD VERSION\n--\n--  Maintainer:        Jim Lewis      email:  jim@synthworks.com\n--  Contributor(s):\n--     Jim Lewis          SynthWorks\n--     Matthias Alles     Creonic.    Inspired GetMinBinVal, GetMinPoint, GetCov\n--     Jerry Kaczynski    Aldec.      Inspired GetBin function\n--     Sebastian Dunst                Inspired GetBinName function\n--     ...                Aldec       Worked on VendorCov functional coverage interface\n--\n--  Package Defines\n--      Functional coverage modeling utilities and data structure\n--\n--  Developed by/for:\n--        SynthWorks Design Inc.\n--        VHDL Training Classes\n--        11898 SW 128th Ave.  Tigard, Or  97223\n--        http://www.SynthWorks.com\n--\n--  Revision History:\n--    Date      Version    Description\n--    03/2024   2024.03    Default values for settings are now constants in OsvvmSettingsPkg. \n--                         Allows setting constants for all tests rather than using SetReportOptions.  \n--    05/2023   2023.05    Updated InitSeed call in NewID to ensure a unique seed \n--    01/2023   2023.01    OSVVM_RAW_OUTPUT_DIRECTORY replaced REPORTS_DIRECTORY \n--    11/2022   2022.11    Updated default search to PRIVATE_NAME\n--    06/2022   2022.06    Add AlertIfNotCovered.  Settings for YAML output.\n--    02/2022   2022.02    Updated NewID with ParentID, ReportMode, Search, PrintParent.\n--                         Supports searching for coverage models.\n--    01/2022   2022.01    Added DeallocateBins and TCover\n--                         Updated AddBins and AddCross s.t. can set AtLeast and Weight to 0\n--                             GenBin defaults AtLeast and Weight to 0.  AddBins and AddCross to 1.\n--    12/2021   2021.12    Added ReadCovYaml\n--    11/2021   2021.11    Updated WriteCovYaml to write CovWeight first.\n--                         Updated GetCov calculation with PercentCov.\n--    10/2021   2021.10    Added WriteCovYaml to write out coverage as a YAML file\n--    08/2021   2021.08    Removed SetAlertLogID from singleton public interface - set instead by NewID\n--                         Moved SetName, SetMessage to deprecated\n--                         Moved AddBins, AddCross, GenBin, and GenCross with weight parameter to deprecated\n--    07/2021   2021.07    Updated for new data structure\n--    07/2020   2020.07    Adjusted NextPointModeType:  Changed MIN to MODE_MINIMUM.\n--                         The preferred MINIMUM will not work in some tools\n--                         Added GetNext{Index, BinVal, Point}[(Mode => {RANDOM|INCREMENT|MODE_MINIMUM})]\n--                         Added NextPointModeType = (RANDOM, INCREMENT, MODE_MINIMUM)\n--                         Added SetNextPointMode[(Mode => {RANDOM|INCREMENT|MODE_MINIMUM})\n--    05/2020   2020.05    Updated LastIndex to also be set during ICover.\n--                         Updated deallocate to set all variables to their initial value\n--                         Added GetInc{Index, BinVal, Point}\n--                         Added GetNext{Index, BinVal, Point}[(Mode => {RANDOM|INCREMENT|MIN})]\n--                         Added NextPointModeType = (RANDOM, INCREMENT, MODE_MINIMUM)\n--                         Added SetNextPointMode[(Mode => {RANDOM|INCREMENT|MODE_MINIMUM})\n--                         Added to_std_logic(integer), to_boolean(integer) + vector forms\n--                         RandCov{Point|BinVal} is deprecated, renamed to GetRand{Point|BinVal}\n--    01/2020   2020.01    Updated Licenses to Apache\n--    04/2018   2018.04    Updated PercentCov calculation so AtLeast of <= 0 is correct\n--                         String' Fix for GHDL\n--                         Removed Deprecated procedure Increment - see TbUtilPkg as it moved there\n--    05/2017   2017.05    Updated WriteBin name printing\n--                         ClearCov (deprecates SetCovZero)\n--    11/2016   2016.11    Added VendorCovApiPkg and calls to bind it in.\n--    03/2016   2016.03    Added GetBinName(Index) to retrieve a bin's name\n--    01/2016   2016.01    Fixes for pure functions.  Added bounds checking on ICover\n--    06/2015   2015.06    AddCross[CovMatrix?Type], Mirroring for WriteBin\n--    01/2015   2015.01    Use AlertLogPkg to count assertions and filter log messages\n--    12/2014   2014.07a   Fix memory leak in deallocate. Removed initialied pointers which can lead to leaks.\n--    7/2014    2014.07    Bin Naming (for requirements tracking), WriteBin with Pass/Fail, GenBin[integer_vector]\n--    1/2014    2014.01    Merging of Cov Models, LastIndex\n--    5/2013    2013.05    Release with updated RandomPkg.  Minimal changes.\n--    04/2013:  2013.04    Thresholding, CovTarget, Merging off by default,\n--    01/2012:  2.4        Added Merging of bins\n--    01/2012:  2.3        Added Function GetBin from Jerry K.  Made write for RangeArrayType visible\n--    12/2011:  2.2b       Fixed minor inconsistencies on interface declarations.\n--    11/2011:  2.2a       Changed constants ALL_RANGE, ZERO_BIN, and ONE_BIN to have a 1 index\n--    07/2011:  2.2        Added randomization with coverage goals (AtLeast), weight, and percentage thresholds\n--    06/2011:  2.1        Removed signal based coverage modeling\n--    04/2011:  2.0        Added protected type based data structure:  CovPType\n--    02/2011:  1.1        Added GetMinCov, GetMaxCov, CountCovHoles, GetCovHole\n--    02/2011:  1.0        Changed CoverBinType to facilitage long term support of cross coverage\n--    09/2010              Release in SynthWorks' VHDL Testbenches and Verification classes\n--    06/2010:  0.1        Initial revision\n--\n--\n--  Development Notes:\n--      The coverage procedures are named ICover to avoid conflicts with\n--      future language changes which may add cover as a keyword\n--      Procedure WriteBin writes each CovBin on a separate line, as such\n--      it was inappropriate to overload either textio write or to_string\n--      In the notes VHDL-2008 notes refers to\n--      composites with unconstrained elements\n--\n--\n--  This file is part of OSVVM.\n--\n--  Copyright (c) 2010 - 2024 by SynthWorks Design Inc.\n--\n--  Licensed under the Apache License, Version 2.0 (the \"License\");\n--  you may not use this file except in compliance with the License.\n--  You may obtain a copy of the License at\n--\n--      https://www.apache.org/licenses/LICENSE-2.0\n--\n--  Unless required by applicable law or agreed to in writing, software\n--  distributed under the License is distributed on an \"AS IS\" BASIS,\n--  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n--  See the License for the specific language governing permissions and\n--  limitations under the License.\n--\n\n\nlibrary ieee ;\nuse ieee.std_logic_1164.all ;\nuse ieee.numeric_std.all ;\nuse ieee.math_real.all ;\nuse std.textio.all ;\n\nuse work.IfElsePkg.all ;\nuse work.OsvvmScriptSettingsPkg.all ;\nuse work.OsvvmSettingsPkg.all ;\nuse work.TextUtilPkg.all ;\nuse work.ResolutionPkg.all ;\nuse work.TranscriptPkg.all ;\nuse work.AlertLogPkg.all ;\nuse work.RandomBasePkg.all ;\nuse work.RandomProcedurePkg.all ;\nuse work.RandomPkg.all ;\nuse work.NamePkg.all ;\nuse work.NameStorePkg.all ;\nuse work.MessageListPkg.all ;\nuse work.OsvvmGlobalPkg.all ;\nuse work.VendorCovApiPkg.all ;\n\npackage CoveragePkg is\n\n  type CoverageIDType is record\n    ID : integer_max ;\n  end record CoverageIDType ;\n\n  type CoverageIDArrayType is array (integer range <>) of CoverageIDType ;\n\n  constant OSVVM_COVERAGE_ALERTLOG_ID : AlertLogIDType := OSVVM_ALERTLOG_ID ;\n\n  -- CovPType allocates bins that are multiples of MIN_NUM_BINS\n  constant MIN_NUM_BINS : integer := 2**7 ;  -- power of 2\n\n  type RangeType is record\n    min : integer ;\n    max : integer ;\n  end record ;\n  type RangeArrayType is array (integer range <>) of RangeType ;\n  constant ALL_RANGE : RangeArrayType := (1=>(Integer'left, Integer'right)) ;\n\n  procedure write ( file f :  text ;  BinVal : RangeArrayType ) ;\n  procedure write ( variable buf : inout line ; constant BinVal : in RangeArrayType) ;\n\n  -- CovBinBaseType.action values.\n  -- Note that coverage counting depends on these values\n  constant COV_COUNT   : integer := 1 ;\n  constant COV_IGNORE  : integer := 0 ;\n  constant COV_ILLEGAL : integer := -1 ;\n\n--  -- type OsvvmOptionsType is (OPT_DEFAULT, FALSE, TRUE) ;\n--  alias OsvvmOptionsType is work.OsvvmGlobalPkg.OsvvmOptionsType ;\n  constant COV_OPT_INIT_PARM_DETECT : OsvvmOptionsType := OPT_INIT_PARM_DETECT ;\n--  -- For backward compatibility.  Don't add to other packages.\n--  alias DISABLED is work.OsvvmGlobalPkg.DISABLED [return work.OsvvmGlobalPkg.OsvvmOptionsType ];\n--  alias ENABLED  is work.OsvvmGlobalPkg.ENABLED  [return work.OsvvmGlobalPkg.OsvvmOptionsType ];\n\n-- Deprecated\n  -- Used for easy manual entry.  Order: min, max, action\n  -- Intentionally did not use a record to allow other input\n  -- formats in the future with VHDL-2008 unconstrained arrays\n  -- of unconstrained elements\n  --  type CovBinManualType is array (natural range <>) of integer_vector(0 to 2) ;\n\n  type CovBinBaseType is record\n    BinVal    : RangeArrayType(1 to 1) ;\n    Action    : integer ;\n    Count     : integer ;\n    AtLeast   : integer ;\n    Weight    : integer ;\n  end record ;\n  type CovBinType is array (natural range <>) of CovBinBaseType ;\n\n  constant ALL_BIN     : CovBinType := (0 => ( BinVal => ALL_RANGE,  Action => COV_COUNT,   Count => 0, AtLeast => 1, Weight => 1 )) ;\n  constant ALL_COUNT   : CovBinType := (0 => ( BinVal => ALL_RANGE,  Action => COV_COUNT,   Count => 0, AtLeast => 1, Weight => 1 )) ;\n  constant ALL_ILLEGAL : CovBinType := (0 => ( BinVal => ALL_RANGE,  Action => COV_ILLEGAL, Count => 0, AtLeast => 0, Weight => 0 )) ;\n  constant ALL_IGNORE  : CovBinType := (0 => ( BinVal => ALL_RANGE,  Action => COV_IGNORE,  Count => 0, AtLeast => 0, Weight => 0 )) ;\n  constant ZERO_BIN    : CovBinType := (0 => ( BinVal => (1=>(0,0)), Action => COV_COUNT,   Count => 0, AtLeast => 1, Weight => 1 )) ;\n  constant ONE_BIN     : CovBinType := (0 => ( BinVal => (1=>(1,1)), Action => COV_COUNT,   Count => 0, AtLeast => 1, Weight => 1 )) ;\n  constant NULL_BIN    : CovBinType(work.RandomBasePkg.NULL_RANGE_TYPE) := (others => ( BinVal => ALL_RANGE,  Action => integer'high, Count => 0, AtLeast => integer'high, Weight => integer'high )) ;\n\n  type NextPointModeType is (RANDOM, INCREMENT, MODE_MINIMUM) ;\n\n  type CountModeType   is (COUNT_FIRST, COUNT_ALL) ;\n  type IllegalModeType is (ILLEGAL_ON, ILLEGAL_FAILURE, ILLEGAL_OFF) ;\n  -- WeightModeType other than AT_LEAST or REMAIN is deprecated\n  type WeightModeType  is (AT_LEAST, REMAIN, WEIGHT, REMAIN_EXP, REMAIN_SCALED, REMAIN_WEIGHT ) ;\n\n\n  -- In VHDL-2008 CovMatrix?BaseType and CovMatrix?Type will be subsumed\n  -- by CovBinBaseType and CovBinType with RangeArrayType as an unconstrained array.\n  type CovMatrix2BaseType is record\n    BinVal    : RangeArrayType(1 to 2) ;\n    Action    : integer ;\n    Count     : integer ;\n    AtLeast   : integer ;\n    Weight    : integer ;\n  end record ;\n  type CovMatrix2Type is array (natural range <>) of CovMatrix2BaseType ;\n\n  type CovMatrix3BaseType is record\n    BinVal    : RangeArrayType(1 to 3) ;\n    Action    : integer ;\n    Count     : integer ;\n    AtLeast   : integer ;\n    Weight    : integer ;\n  end record ;\n  type CovMatrix3Type is array (natural range <>) of CovMatrix3BaseType ;\n\n  type CovMatrix4BaseType is record\n    BinVal    : RangeArrayType(1 to 4) ;\n    Action    : integer ;\n    Count     : integer ;\n    AtLeast   : integer ;\n    Weight    : integer ;\n  end record ;\n  type CovMatrix4Type is array (natural range <>) of CovMatrix4BaseType ;\n\n  type CovMatrix5BaseType is record\n    BinVal    : RangeArrayType(1 to 5) ;\n    Action    : integer ;\n    Count     : integer ;\n    AtLeast   : integer ;\n    Weight    : integer ;\n  end record ;\n  type CovMatrix5Type is array (natural range <>) of CovMatrix5BaseType ;\n\n  type CovMatrix6BaseType is record\n    BinVal    : RangeArrayType(1 to 6) ;\n    Action    : integer ;\n    Count     : integer ;\n    AtLeast   : integer ;\n    Weight    : integer ;\n  end record ;\n  type CovMatrix6Type is array (natural range <>) of CovMatrix6BaseType ;\n\n  type CovMatrix7BaseType is record\n    BinVal    : RangeArrayType(1 to 7) ;\n    Action    : integer ;\n    Count     : integer ;\n    AtLeast   : integer ;\n    Weight    : integer ;\n  end record ;\n  type CovMatrix7Type is array (natural range <>) of CovMatrix7BaseType ;\n\n  type CovMatrix8BaseType is record\n    BinVal    : RangeArrayType(1 to 8) ;\n    Action    : integer ;\n    Count     : integer ;\n    AtLeast   : integer ;\n    Weight    : integer ;\n  end record ;\n  type CovMatrix8Type is array (natural range <>) of CovMatrix8BaseType ;\n\n  type CovMatrix9BaseType is record\n    BinVal    : RangeArrayType(1 to 9) ;\n    Action    : integer ;\n    Count     : integer ;\n    AtLeast   : integer ;\n    Weight    : integer ;\n  end record ;\n  type CovMatrix9Type is array (natural range <>) of CovMatrix9BaseType ;\n\n  ------------------------------------------------------------  VendorCov\n  -- VendorCov Conversion for Vendor supported functional coverage modeling\n  function ToVendorCovBinVal (BinVal : RangeArrayType) return VendorCovRangeArrayType ;\n\n  ------------------------------------------------------------\n  function ToMinPoint (A : RangeArrayType) return integer ;\n  function ToMinPoint (A : RangeArrayType) return integer_vector ;\n  -- BinVal to Minimum Point\n\n  ------------------------------------------------------------\n  procedure ToRandPoint(\n  -- BinVal to Random Point\n  -- better as a function, however, inout not supported on functions\n  ------------------------------------------------------------\n    variable RV       : inout RandomPType ;\n    constant BinVal   : in    RangeArrayType ;\n    variable result   : out   integer\n  ) ;\n\n  ------------------------------------------------------------\n  procedure ToRandPoint(\n  -- BinVal to Random Point\n  ------------------------------------------------------------\n    variable RV       : inout RandomPType ;\n    constant BinVal   : in    RangeArrayType ;\n    variable result   : out   integer_vector\n  ) ;\n\n  ------------------------------------------------------------\n  impure function NewID (\n    Name                : String ;\n    ParentID            : AlertLogIDType          := OSVVM_COVERAGE_ALERTLOG_ID ;\n    ReportMode          : AlertLogReportModeType  := ENABLED ;\n    Search              : NameSearchType          := PRIVATE_NAME ;\n    PrintParent         : AlertLogPrintParentType := PRINT_NAME_AND_PARENT\n  ) return CoverageIDType ;\n\n  ------------------------------------------------------------\n  -- /////////////////////////////////////////\n  --  Coverage Global Settings Common to All Coverage Models\n  -- /////////////////////////////////////////\n  ------------------------------------------------------------\n  procedure FileOpenWriteBin (FileName : string; OpenKind : File_Open_Kind ) ;\n  procedure FileCloseWriteBin  ;\n--  procedure WriteToCovFile (variable buf : inout line) ;\n  procedure PrintToCovFile(S : string) ;\n\n  ------------------------------------------------------------\n  procedure SetReportOptions (\n  ------------------------------------------------------------\n    WritePassFail   : OsvvmOptionsType := COV_OPT_INIT_PARM_DETECT ;\n    WriteBinInfo    : OsvvmOptionsType := COV_OPT_INIT_PARM_DETECT ;\n    WriteCount      : OsvvmOptionsType := COV_OPT_INIT_PARM_DETECT ;\n    WriteAnyIllegal : OsvvmOptionsType := COV_OPT_INIT_PARM_DETECT ;\n    WritePrefix     : string := OSVVM_STRING_INIT_PARM_DETECT ;\n    PassName        : string := OSVVM_STRING_INIT_PARM_DETECT ;\n    FailName        : string := OSVVM_STRING_INIT_PARM_DETECT\n  ) ;\n  procedure ResetReportOptions ;\n\n  ------------------------------------------------------------\n  -- /////////////////////////////////////////\n  --  Coverage Model Settings\n  -- /////////////////////////////////////////\n  ------------------------------------------------------------\n-- AlertLogID set by NewID\n--  procedure       SetAlertLogID (ID : CoverageIDType; A : AlertLogIDType) ;\n--  procedure       SetAlertLogID (ID : CoverageIDType; Name : string ; ParentID : AlertLogIDType := ALERTLOG_BASE_ID ; CreateHierarchy : Boolean := TRUE) ;\n  impure function GetAlertLogID (ID : CoverageIDType) return AlertLogIDType ;\n\n  ------------------------------------------------------------\n-- Name set by NewID\n  impure function GetName         (ID : CoverageIDType) return String ;\n  impure function GetCovModelName (ID : CoverageIDType) return String ;\n  impure function GetNamePlus     (ID : CoverageIDType; prefix, suffix : string) return String ;\n  procedure SetItemBinNames (\n    ID         : CoverageIDType ;\n    Name1      : String ;\n            Name2,  Name3,  Name4,  Name5,\n    Name6,  Name7,  Name8,  Name9,  Name10,\n    Name11, Name12, Name13, Name14, Name15,\n    Name16, Name17, Name18, Name19, Name20 : string := \"\"\n  ) ;\n  alias SetFieldName is SetItemBinNames [CoverageIDType,\n    string, string, string, string, string, string, string, string, string, string,\n    string, string, string, string, string, string, string, string, string, string] ;\n\n  procedure       SetCovTarget       (ID : CoverageIDType; Percent : real) ;\n  impure function GetCovTarget       (ID : CoverageIDType) return real ;\n  procedure       SetThresholding    (ID : CoverageIDType; A : boolean := TRUE ) ;\n  procedure       SetCovThreshold    (ID : CoverageIDType; Percent : real) ;\n  procedure       SetMerging         (ID : CoverageIDType; A : boolean := TRUE ) ;\n  procedure       SetCountMode       (ID : CoverageIDType; A : CountModeType) ;\n  procedure       SetIllegalMode     (ID : CoverageIDType; A : IllegalModeType) ;\n  procedure       SetNextPointMode   (ID : CoverageIDType; A : NextPointModeType) ;\n  --\n  -- SetWeightMode with a WeightMode other than AT_LEAST or REMAIN is deprecated\n  -- SetWeightMode with a WeightScale parameter is deprecated\n  procedure       SetWeightMode      (ID : CoverageIDType; WeightMode : WeightModeType;  WeightScale : real := 1.0) ;\n  procedure       SetCovWeight       (ID : CoverageIDType; Weight : integer) ;\n  impure function GetCovWeight       (ID : CoverageIDType) return integer ;\n\n  ------------------------------------------------------------\n  -- Seeds are initialized by NewID.\n  procedure       InitSeed      (ID : CoverageIDType; S : string;  UseNewSeedMethods : boolean := COVERAGE_USE_NEW_SEED_METHODS) ;\n  impure function InitSeed      (ID : CoverageIDType; S : string;  UseNewSeedMethods : boolean := COVERAGE_USE_NEW_SEED_METHODS ) return string ;\n  procedure       InitSeed      (ID : CoverageIDType; I : integer; UseNewSeedMethods : boolean := COVERAGE_USE_NEW_SEED_METHODS ) ;\n\n  ------------------------------------------------------------\n  procedure       SetSeed (ID : CoverageIDType; RandomSeedIn : RandomSeedType ) ;\n  impure function GetSeed (ID : CoverageIDType) return RandomSeedType ;\n\n\n  ------------------------------------------------------------\n  -- /////////////////////////////////////////\n  --  Item / Cross Bin Creation and Destruction\n  -- /////////////////////////////////////////\n  ------------------------------------------------------------\n  procedure SetBinSize (ID : CoverageIDType; NewNumBins : integer) ;\n  procedure Deallocate (ID : CoverageIDType) ;\n  procedure DeallocateBins (CoverID : CoverageIDType) ;\n\n  ------------------------------------------------------------\n  procedure AddBins (\n  ------------------------------------------------------------\n    ID      : CoverageIDType ;\n    Name    : String ;\n    AtLeast : integer ;\n    CovBin  : CovBinType\n  ) ;\n  procedure AddBins (ID : CoverageIDType; Name : String ;  CovBin : CovBinType) ;\n  procedure AddBins (ID : CoverageIDType; AtLeast : integer ; CovBin : CovBinType ) ;\n  procedure AddBins (ID : CoverageIDType; CovBin : CovBinType  ) ;\n\n\n  ------------------------------------------------------------\n  procedure AddCross(\n  ------------------------------------------------------------\n    ID         : CoverageIDType ;\n    Name       : string ;\n    AtLeast    : integer ;\n    Bin1, Bin2 : CovBinType ;\n    Bin3, Bin4, Bin5, Bin6, Bin7, Bin8, Bin9, Bin10, Bin11, Bin12, Bin13,\n    Bin14, Bin15, Bin16, Bin17, Bin18, Bin19, Bin20 : CovBinType := NULL_BIN\n  ) ;\n\n  ------------------------------------------------------------\n  procedure AddCross(\n  ------------------------------------------------------------\n    ID         : CoverageIDType ;\n    Name       : string ;\n    Bin1, Bin2 : CovBinType ;\n    Bin3, Bin4, Bin5, Bin6, Bin7, Bin8, Bin9, Bin10, Bin11, Bin12, Bin13,\n    Bin14, Bin15, Bin16, Bin17, Bin18, Bin19, Bin20 : CovBinType := NULL_BIN\n  ) ;\n\n  ------------------------------------------------------------\n  procedure AddCross(\n  ------------------------------------------------------------\n    ID         : CoverageIDType ;\n    AtLeast    : integer ;\n    Bin1, Bin2 : CovBinType ;\n    Bin3, Bin4, Bin5, Bin6, Bin7, Bin8, Bin9, Bin10, Bin11, Bin12, Bin13,\n    Bin14, Bin15, Bin16, Bin17, Bin18, Bin19, Bin20 : CovBinType := NULL_BIN\n  ) ;\n\n  ------------------------------------------------------------\n  procedure AddCross(\n  ------------------------------------------------------------\n    ID         : CoverageIDType ;\n    Bin1, Bin2 : CovBinType ;\n    Bin3, Bin4, Bin5, Bin6, Bin7, Bin8, Bin9, Bin10, Bin11, Bin12, Bin13,\n    Bin14, Bin15, Bin16, Bin17, Bin18, Bin19, Bin20 : CovBinType := NULL_BIN\n  ) ;\n\n  ------------------------------------------------------------\n  -- AddCross for usage with constants created by GenCross\n  ------------------------------------------------------------\n  procedure AddCross (ID : CoverageIDType; CovBin : CovMatrix2Type ; Name : String := \"\") ;\n  procedure AddCross (ID : CoverageIDType; CovBin : CovMatrix3Type ; Name : String := \"\") ;\n  procedure AddCross (ID : CoverageIDType; CovBin : CovMatrix4Type ; Name : String := \"\") ;\n  procedure AddCross (ID : CoverageIDType; CovBin : CovMatrix5Type ; Name : String := \"\") ;\n  procedure AddCross (ID : CoverageIDType; CovBin : CovMatrix6Type ; Name : String := \"\") ;\n  procedure AddCross (ID : CoverageIDType; CovBin : CovMatrix7Type ; Name : String := \"\") ;\n  procedure AddCross (ID : CoverageIDType; CovBin : CovMatrix8Type ; Name : String := \"\") ;\n  procedure AddCross (ID : CoverageIDType; CovBin : CovMatrix9Type ; Name : String := \"\") ;\n\n  ------------------------------------------------------------\n  -- /////////////////////////////////////////\n  --  Recording and Clearing Coverage\n  -- /////////////////////////////////////////\n  ------------------------------------------------------------\n  ------------------------------------------------------------\n  procedure ICoverLast (ID : CoverageIDType) ;\n  procedure ICover     (ID : CoverageIDType; CovPoint : integer_vector) ;\n  procedure ICover     (ID : CoverageIDType; CovPoint : integer) ;\n  procedure TCover     (ID : CoverageIDType; A : integer) ;\n\n  procedure ClearCov (ID : CoverageIDType) ;\n\n  ------------------------------------------------------------\n  -- /////////////////////////////////////////\n  --  Coverage Information and Statistics\n  -- /////////////////////////////////////////\n  ------------------------------------------------------------\n  ------------------------------------------------------------\n  impure function IsCovered     (ID : CoverageIDType; PercentCov : real ) return boolean ;\n  impure function IsCovered     (ID : CoverageIDType) return boolean ;\n  impure function IsNotCovered  (ID : CoverageIDType; PercentCov : real ) return boolean ;\n  impure function IsNotCovered  (ID : CoverageIDType) return boolean ;\n\n  impure function IsInitialized (ID : CoverageIDType) return boolean ;\n\n  ------------------------------------------------------------\n  impure function GetItemCount    (ID : CoverageIDType) return integer ;\n  impure function GetCov          (ID : CoverageIDType; PercentCov : real ) return real ;\n  impure function GetCov          (ID : CoverageIDType) return real ;\n  impure function GetTotalCovCount(ID : CoverageIDType; PercentCov : real ) return integer ;\n  impure function GetTotalCovCount(ID : CoverageIDType) return integer ;\n  impure function GetTotalCovGoal (ID : CoverageIDType; PercentCov : real ) return integer ;\n  impure function GetTotalCovGoal (ID : CoverageIDType) return integer ;\n\n  ------------------------------------------------------------\n  impure function GetMinCov   (ID : CoverageIDType) return real ;\n  impure function GetMinCount (ID : CoverageIDType) return integer ;\n  impure function GetMaxCov   (ID : CoverageIDType) return real ;\n  impure function GetMaxCount (ID : CoverageIDType) return integer ;\n\n  ------------------------------------------------------------\n  impure function CountCovHoles (ID : CoverageIDType; PercentCov : real ) return integer ;\n  impure function CountCovHoles (ID : CoverageIDType) return integer ;\n\n  ------------------------------------------------------------\n  -- /////////////////////////////////////////\n  --  Generating Coverage Points, BinValues, and Indices\n  -- /////////////////////////////////////////\n  ------------------------------------------------------------\n  -- Return Points\n  ------------------------------------------------------------\n  -- to be replaced in VHDL-2019 by version that uses RandomSeed as an inout\n  impure function ToRandPoint   (ID : CoverageIDType; BinVal : RangeArrayType ) return integer ;\n  impure function ToRandPoint   (ID : CoverageIDType; BinVal : RangeArrayType ) return integer_vector ;\n\n  ------------------------------------------------------------\n  -- Return Points\n  impure function GetPoint     (ID : CoverageIDType; BinIndex : integer ) return integer ;\n  impure function GetPoint     (ID : CoverageIDType; BinIndex : integer ) return integer_vector ;\n  impure function GetRandPoint (ID : CoverageIDType) return integer ;\n  impure function GetRandPoint (ID : CoverageIDType; PercentCov : real ) return integer ;\n  impure function GetRandPoint (ID : CoverageIDType) return integer_vector ;\n  impure function GetRandPoint (ID : CoverageIDType; PercentCov : real ) return integer_vector ;\n  impure function GetIncPoint  (ID : CoverageIDType) return integer ;\n  impure function GetIncPoint  (ID : CoverageIDType) return integer_vector ;\n  impure function GetMinPoint  (ID : CoverageIDType) return integer ;\n  impure function GetMinPoint  (ID : CoverageIDType) return integer_vector ;\n  impure function GetMaxPoint  (ID : CoverageIDType) return integer ;\n  impure function GetMaxPoint  (ID : CoverageIDType) return integer_vector ;\n  impure function GetNextPoint (ID : CoverageIDType; Mode : NextPointModeType) return integer ;\n  impure function GetNextPoint (ID : CoverageIDType; Mode : NextPointModeType) return integer_vector ;\n  impure function GetNextPoint (ID : CoverageIDType) return integer ;\n  impure function GetNextPoint (ID : CoverageIDType) return integer_vector ;\n\n  ------------------------------------------------------------\n  -- deprecated, see GetRandPoint\n  impure function RandCovPoint (ID : CoverageIDType) return integer ;\n  impure function RandCovPoint (ID : CoverageIDType; PercentCov : real ) return integer ;\n  impure function RandCovPoint (ID : CoverageIDType) return integer_vector ;\n  impure function RandCovPoint (ID : CoverageIDType; PercentCov : real ) return integer_vector ;\n\n  ------------------------------------------------------------\n  -- Return BinVals\n  impure function GetBinVal     (ID : CoverageIDType; BinIndex : integer ) return RangeArrayType ;\n  impure function GetRandBinVal (ID : CoverageIDType; PercentCov : real ) return RangeArrayType ;\n  impure function GetRandBinVal (ID : CoverageIDType) return RangeArrayType ;\n  impure function GetLastBinVal (ID : CoverageIDType) return RangeArrayType ;\n  impure function GetIncBinVal  (ID : CoverageIDType) return RangeArrayType ;\n  impure function GetMinBinVal  (ID : CoverageIDType) return RangeArrayType ;\n  impure function GetMaxBinVal  (ID : CoverageIDType) return RangeArrayType ;\n  impure function GetNextBinVal (ID : CoverageIDType; Mode : NextPointModeType) return RangeArrayType ;\n  impure function GetNextBinVal (ID : CoverageIDType) return RangeArrayType ;\n  impure function GetHoleBinVal (ID : CoverageIDType; ReqHoleNum : integer ; PercentCov : real  ) return RangeArrayType ;\n  impure function GetHoleBinVal (ID : CoverageIDType; PercentCov : real  ) return RangeArrayType ;\n  impure function GetHoleBinVal (ID : CoverageIDType; ReqHoleNum : integer := 1 ) return RangeArrayType ;\n\n  -- deprecated RandCovBinVal, see GetRandBinVal\n  impure function RandCovBinVal (ID : CoverageIDType; PercentCov : real ) return RangeArrayType ;\n  impure function RandCovBinVal (ID : CoverageIDType) return RangeArrayType ;\n\n  -- Return Index Values\n  ------------------------------------------------------------\n  impure function GetNumBins   (ID : CoverageIDType) return integer ;\n  impure function GetRandIndex (ID : CoverageIDType; CovTargetPercent : real ) return integer ;\n  impure function GetRandIndex (ID : CoverageIDType) return integer ;\n  impure function GetLastIndex (ID : CoverageIDType) return integer ;\n  impure function GetIncIndex  (ID : CoverageIDType) return integer ;\n  impure function GetMinIndex  (ID : CoverageIDType) return integer ;\n  impure function GetMaxIndex  (ID : CoverageIDType) return integer ;\n  impure function GetNextIndex (ID : CoverageIDType; Mode : NextPointModeType) return integer ;\n  impure function GetNextIndex (ID : CoverageIDType) return integer ;\n\n  ------------------------------------------------------------\n  -- /////////////////////////////////////////\n  --  Accessing Coverage Bin Information\n  -- /////////////////////////////////////////\n  ------------------------------------------------------------\n  -- ------------------------------------------------------------\n  -- Intended as a stand in until we get a more general GetBin\n  impure function GetBinInfo (ID : CoverageIDType; BinIndex : integer ) return CovBinBaseType ;\n\n  -- ------------------------------------------------------------\n  -- Intended as a stand in until we get a more general GetBin\n  impure function GetBinValLength (ID : CoverageIDType) return integer ;\n\n  -- ------------------------------------------------------------\n  -- Eventually the multiple GetBin functions will be replaced by a\n  -- a single GetBin that returns CovBinBaseType with BinVal as an\n  -- unconstrained element\n  impure function GetBin (ID : CoverageIDType; BinIndex : integer ) return CovBinBaseType ;\n  impure function GetBin (ID : CoverageIDType; BinIndex : integer ) return CovMatrix2BaseType ;\n  impure function GetBin (ID : CoverageIDType; BinIndex : integer ) return CovMatrix3BaseType ;\n  impure function GetBin (ID : CoverageIDType; BinIndex : integer ) return CovMatrix4BaseType ;\n  impure function GetBin (ID : CoverageIDType; BinIndex : integer ) return CovMatrix5BaseType ;\n  impure function GetBin (ID : CoverageIDType; BinIndex : integer ) return CovMatrix6BaseType ;\n  impure function GetBin (ID : CoverageIDType; BinIndex : integer ) return CovMatrix7BaseType ;\n  impure function GetBin (ID : CoverageIDType; BinIndex : integer ) return CovMatrix8BaseType ;\n  impure function GetBin (ID : CoverageIDType; BinIndex : integer ) return CovMatrix9BaseType ;\n\n  -- ------------------------------------------------------------\n  impure function GetBinName (ID : CoverageIDType; BinIndex : integer; DefaultName : string := \"\" ) return string ;\n\n  ------------------------------------------------------------\n  impure function GetErrorCount (ID : CoverageIDType) return integer ;\n\n  ------------------------------------------------------------\n  -- /////////////////////////////////////////\n  --  Printing Coverage Bin Information\n  -- /////////////////////////////////////////\n  ------------------------------------------------------------\n  -- To specify the following, see SetReportOptions\n  --   WritePassFail, WriteBinInfo, WriteCount, WriteAnyIllegal\n  --   WritePrefix, PassName, FailName\n  ------------------------------------------------------------\n  procedure WriteBin (ID : CoverageIDType) ;\n  procedure WriteBin (ID : CoverageIDType; LogLevel : LogType ) ;  -- With LogLevel\n  procedure WriteBin (ID : CoverageIDType; FileName : string;  OpenKind : File_Open_Kind := APPEND_MODE) ;\n  procedure WriteBin (ID : CoverageIDType; LogLevel : LogType; FileName : string; OpenKind : File_Open_Kind := APPEND_MODE) ;\n\n  ------------------------------------------------------------\n  procedure WriteCovHoles (ID : CoverageIDType; LogLevel : LogType := ALWAYS ) ;\n  procedure WriteCovHoles (ID : CoverageIDType; PercentCov : real ) ;\n  procedure WriteCovHoles (ID : CoverageIDType; LogLevel : LogType;  PercentCov : real ) ;\n  procedure WriteCovHoles (ID : CoverageIDType; FileName : string;   OpenKind : File_Open_Kind := APPEND_MODE ) ;\n  procedure WriteCovHoles (ID : CoverageIDType; LogLevel : LogType;  FileName : string;  OpenKind : File_Open_Kind := APPEND_MODE ) ;\n  procedure WriteCovHoles (ID : CoverageIDType; FileName : string;   PercentCov : real ; OpenKind : File_Open_Kind := APPEND_MODE ) ;\n  procedure WriteCovHoles (ID : CoverageIDType; LogLevel : LogType;  FileName : string;  PercentCov : real ; OpenKind : File_Open_Kind := APPEND_MODE ) ;\n\n  ------------------------------------------------------------\n  -- /////////////////////////////////////////\n  --  Writing Out RAW Coverage Bin Information\n  --  Note that read supports merging of coverage models\n  -- /////////////////////////////////////////\n  ------------------------------------------------------------\n  procedure ReadCovDb  (ID : CoverageIDType; FileName : string; Merge : boolean := FALSE) ;\n  procedure WriteCovDb (ID : CoverageIDType; FileName : string; OpenKind : File_Open_Kind := WRITE_MODE ) ;\n  --     procedure WriteCovDb (ID : CoverageIDType) ;\n--  procedure WriteCovYaml (ID : CoverageIDType; FileName : string; OpenKind : File_Open_Kind := WRITE_MODE ) ;\n\n  ------------------------------------------------------------\n  -- /////////////////////////////////////////\n  --  Operations across all coverage models\n  -- /////////////////////////////////////////\n  ------------------------------------------------------------\n  procedure WriteCovYaml (FileName : string := \"\"; OpenKind : File_Open_Kind := WRITE_MODE) ;\n  procedure ReadCovYaml  (FileName : string := \"\"; Merge : boolean := FALSE) ;\n  impure function GotCoverage return boolean ;\n  impure function GetCov (PercentCov : real ) return real ;\n  impure function GetCov return real ;\n  procedure AffirmIfCovered ; \n  procedure AlertIfNotCovered (Level : AlertType := ERROR) ; \n\n  ------------------------------------------------------------\n  -- Experimental.  Intended primarily for development.\n  procedure CompareBins (\n  ------------------------------------------------------------\n    constant Bin1       : in    CoverageIDType ;\n    constant Bin2       : in    CoverageIDType ;\n    variable Valid      : out   Boolean\n  ) ;\n\n  ------------------------------------------------------------\n  -- Experimental.  Intended primarily for development.\n  procedure CompareBins (\n  ------------------------------------------------------------\n    constant Bin1       : in    CoverageIDType ;\n    constant Bin2       : in    CoverageIDType\n  ) ;\n\n  --\n  --  Support for AddBins and AddCross\n  --\n  ------------------------------------------------------------\n  function GenBin(\n  ------------------------------------------------------------\n    AtLeast       : integer ;\n    Min, Max      : integer ;\n    NumBin        : integer\n  ) return CovBinType ;\n\n  -- Each item in range in a separate CovBin\n  function GenBin(Min, Max, NumBin : integer ) return CovBinType ;\n  function GenBin(Min, Max : integer) return CovBinType ;\n  function GenBin(A : integer) return CovBinType ;\n\n  ------------------------------------------------------------\n  function GenBin(\n  ------------------------------------------------------------\n    AtLeast       : integer ;\n    A             : integer_vector\n  ) return CovBinType ;\n\n  function GenBin ( A : integer_vector ) return CovBinType ;\n\n  ------------------------------------------------------------\n  function IllegalBin ( Min, Max, NumBin : integer ) return CovBinType ;\n  ------------------------------------------------------------\n\n  -- All items in range in a single CovBin\n  function IllegalBin ( Min, Max : integer ) return CovBinType ;\n  function IllegalBin ( A : integer ) return CovBinType ;\n\n\n-- IgnoreBin should never have an AtLeast parameter\n  ------------------------------------------------------------\n  function IgnoreBin (Min, Max, NumBin : integer) return CovBinType ;\n  ------------------------------------------------------------\n  function IgnoreBin (Min, Max : integer) return CovBinType ;  -- All items in range in a single CovBin\n  function IgnoreBin (A : integer) return CovBinType ;\n\n\n  -- With VHDL-2008, there will be one GenCross that returns CovBinType\n  -- and has inputs initialized to NULL_BIN - see AddCross\n  ------------------------------------------------------------\n  function GenCross(  -- 2\n  -- Cross existing bins\n  -- Use AddCross for adding values directly to coverage database\n  -- Use GenCross for constants\n  ------------------------------------------------------------\n    AtLeast     : integer ;\n    Bin1, Bin2  : CovBinType\n  ) return CovMatrix2Type ;\n\n  function GenCross(Bin1, Bin2 : CovBinType) return CovMatrix2Type ;\n\n  ------------------------------------------------------------\n  function GenCross(  -- 3\n  ------------------------------------------------------------\n    AtLeast           : integer ;\n    Bin1, Bin2, Bin3  : CovBinType\n  ) return CovMatrix3Type ;\n\n  function GenCross( Bin1, Bin2, Bin3 : CovBinType ) return CovMatrix3Type ;\n\n  ------------------------------------------------------------\n  function GenCross(  -- 4\n  ------------------------------------------------------------\n    AtLeast                 : integer ;\n    Bin1, Bin2, Bin3, Bin4  : CovBinType\n  ) return CovMatrix4Type ;\n\n  function GenCross( Bin1, Bin2, Bin3, Bin4 : CovBinType ) return CovMatrix4Type ;\n\n  ------------------------------------------------------------\n  function GenCross(  -- 5\n  ------------------------------------------------------------\n    AtLeast                       : integer ;\n    Bin1, Bin2, Bin3, Bin4, Bin5  : CovBinType\n  ) return CovMatrix5Type ;\n\n  function GenCross( Bin1, Bin2, Bin3, Bin4, Bin5 : CovBinType ) return CovMatrix5Type ;\n\n  ------------------------------------------------------------\n  function GenCross(  -- 6\n  ------------------------------------------------------------\n    AtLeast                             : integer ;\n    Bin1, Bin2, Bin3, Bin4, Bin5, Bin6  : CovBinType\n  ) return CovMatrix6Type ;\n\n  function GenCross( Bin1, Bin2, Bin3, Bin4, Bin5, Bin6 : CovBinType ) return CovMatrix6Type ;\n\n  ------------------------------------------------------------\n  function GenCross(  -- 7\n  ------------------------------------------------------------\n    AtLeast                                   : integer ;\n    Bin1, Bin2, Bin3, Bin4, Bin5, Bin6, Bin7  : CovBinType\n  ) return CovMatrix7Type ;\n\n  function GenCross( Bin1, Bin2, Bin3, Bin4, Bin5, Bin6, Bin7 : CovBinType ) return CovMatrix7Type ;\n\n  ------------------------------------------------------------\n  function GenCross(  -- 8\n  ------------------------------------------------------------\n    AtLeast                                         : integer ;\n    Bin1, Bin2, Bin3, Bin4, Bin5, Bin6, Bin7, Bin8  : CovBinType\n  ) return CovMatrix8Type ;\n\n  function GenCross( Bin1, Bin2, Bin3, Bin4, Bin5, Bin6, Bin7, Bin8 : CovBinType ) return CovMatrix8Type ;\n\n  ------------------------------------------------------------\n  function GenCross(  -- 9\n  ------------------------------------------------------------\n    AtLeast                                               : integer ;\n    Bin1, Bin2, Bin3, Bin4, Bin5, Bin6, Bin7, Bin8, Bin9  : CovBinType\n  ) return CovMatrix9Type ;\n\n  function GenCross( Bin1, Bin2, Bin3, Bin4, Bin5, Bin6, Bin7, Bin8, Bin9 : CovBinType ) return CovMatrix9Type ;\n\n  ------------------------------------------------------------\n  -- Utilities.  Remove if added to std.standard\n  function to_integer   ( B : boolean    ) return integer ;\n  function to_boolean   ( I : integer    ) return boolean ;\n  function to_integer   ( SL : std_logic ) return integer ;\n  function to_std_logic ( I : integer    ) return std_logic ;\n  function to_integer_vector   ( BV : boolean_vector    ) return integer_vector ;\n  function to_boolean_vector   ( IV : integer_vector    ) return boolean_vector ;\n  function to_integer_vector   ( SLV : std_logic_vector ) return integer_vector ;\n  function to_std_logic_vector ( IV : integer_vector    ) return std_logic_vector ;\n  alias to_slv is to_std_logic_vector[integer_vector return std_logic_vector] ;\n\n\n  ------------------------------------------------------------------------------------------\n  --  XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX  CovPType  XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n  --  XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX  CovPType  XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n  --  XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX  CovPType  XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n  ------------------------------------------------------------------------------------------\n  type CovPType is protected\n    ------------------------------------------------------------\n    impure function NewID (\n      Name                : String ;\n      ParentID            : AlertLogIDType          := OSVVM_COVERAGE_ALERTLOG_ID ;\n      ReportMode          : AlertLogReportModeType  := ENABLED ;\n      Search              : NameSearchType          := PRIVATE_NAME ;\n      PrintParent         : AlertLogPrintParentType := PRINT_NAME_AND_PARENT\n    ) return CoverageIDType ;\n    impure function GetNumIDs return integer ;\n\n    ------------------------------------------------------------\n    -- /////////////////////////////////////////\n    --  Coverage Global Settings Common to All Coverage Models\n    -- /////////////////////////////////////////\n    ------------------------------------------------------------\n    procedure FileOpenWriteBin (FileName : string; OpenKind : File_Open_Kind ) ;\n    procedure FileCloseWriteBin  ;\n--    procedure WriteToCovFile (variable buf : inout line) ;\n    procedure PrintToCovFile(S : string) ;\n\n    ------------------------------------------------------------\n    procedure SetReportOptions (\n    ------------------------------------------------------------\n      WritePassFail   : OsvvmOptionsType := COV_OPT_INIT_PARM_DETECT ;\n      WriteBinInfo    : OsvvmOptionsType := COV_OPT_INIT_PARM_DETECT ;\n      WriteCount      : OsvvmOptionsType := COV_OPT_INIT_PARM_DETECT ;\n      WriteAnyIllegal : OsvvmOptionsType := COV_OPT_INIT_PARM_DETECT ;\n      WritePrefix     : string := OSVVM_STRING_INIT_PARM_DETECT ;\n      PassName        : string := OSVVM_STRING_INIT_PARM_DETECT ;\n      FailName        : string := OSVVM_STRING_INIT_PARM_DETECT\n    ) ;\n    procedure ResetReportOptions ;\n\n    ------------------------------------------------------------\n    -- /////////////////////////////////////////\n    --  Coverage Model Settings\n    -- /////////////////////////////////////////\n    ------------------------------------------------------------\n    procedure       SetName         (ID : CoverageIDType; Name : String) ;\n    impure function SetName         (ID : CoverageIDType; Name : String) return string ;\n    procedure       DeallocateName  (ID : CoverageIDType) ;\n    impure function GetName         (ID : CoverageIDType) return String ;\n    impure function GetCovModelName (ID : CoverageIDType) return String ;\n    impure function GetNamePlus     (ID : CoverageIDType; prefix, suffix : string) return String ;\n    procedure SetItemBinNames (\n      ID         : CoverageIDType ;\n      Name1      : String ;\n              Name2,  Name3,  Name4,  Name5,\n      Name6,  Name7,  Name8,  Name9,  Name10,\n      Name11, Name12, Name13, Name14, Name15,\n      Name16, Name17, Name18, Name19, Name20 : string := \"\"\n    ) ;\n\n    ------------------------------------------------------------\n    procedure       SetMessage         (ID : CoverageIDType; Message : String) ;\n    procedure       DeallocateMessage  (ID : CoverageIDType) ;\n\n    procedure       SetCovTarget       (ID : CoverageIDType; Percent : real) ;\n    impure function GetCovTarget       (ID : CoverageIDType) return real ;\n    procedure       SetThresholding    (ID : CoverageIDType; A : boolean := TRUE ) ;\n    procedure       SetCovThreshold    (ID : CoverageIDType; Percent : real) ;\n    procedure       SetMerging         (ID : CoverageIDType; A : boolean := TRUE ) ;\n    procedure       SetCountMode       (ID : CoverageIDType; A : CountModeType) ;\n    procedure       SetIllegalMode     (ID : CoverageIDType; A : IllegalModeType) ;\n    procedure       SetWeightMode      (ID : CoverageIDType; WeightMode : WeightModeType;  WeightScale : real := 1.0) ;\n    procedure       SetNextPointMode   (ID : CoverageIDType; A : NextPointModeType) ;\n    procedure       SetCovWeight       (ID : CoverageIDType; Weight : integer) ;\n    impure function GetCovWeight       (ID : CoverageIDType) return integer ;\n\n    ------------------------------------------------------------\n    procedure       SetAlertLogID (ID : CoverageIDType; A : AlertLogIDType) ;\n    procedure       SetAlertLogID (ID : CoverageIDType; Name : string ; ParentID : AlertLogIDType := ALERTLOG_BASE_ID ; CreateHierarchy : Boolean := TRUE) ;\n    impure function GetAlertLogID (ID : CoverageIDType) return AlertLogIDType ;\n\n    ------------------------------------------------------------\n    procedure       InitSeed      (ID : CoverageIDType; S : string;  UseNewSeedMethods : boolean := COVERAGE_USE_NEW_SEED_METHODS) ;\n    impure function InitSeed      (ID : CoverageIDType; S : string;  UseNewSeedMethods : boolean := COVERAGE_USE_NEW_SEED_METHODS ) return string ;\n    procedure       InitSeed      (ID : CoverageIDType; I : integer; UseNewSeedMethods : boolean := COVERAGE_USE_NEW_SEED_METHODS ) ;\n\n    ------------------------------------------------------------\n    procedure       SetSeed (ID : CoverageIDType; RandomSeedIn : RandomSeedType ) ;\n    impure function GetSeed (ID : CoverageIDType) return RandomSeedType ;\n\n    ------------------------------------------------------------\n    -- /////////////////////////////////////////\n    --  Item / Cross Bin Creation and Destruction\n    -- /////////////////////////////////////////\n    ------------------------------------------------------------\n    procedure SetBinSize (ID : CoverageIDType; NewNumBins : integer) ;\n    procedure Deallocate (ID : CoverageIDType) ;\n    procedure DeallocateBins (CoverID : CoverageIDType) ;\n\n    ------------------------------------------------------------\n    -- Weight Deprecated\n    procedure AddBins (\n    ------------------------------------------------------------\n      ID      : CoverageIDType ;\n      Name    : String ;\n      AtLeast : integer ;\n      Weight  : integer ;\n      CovBin  : CovBinType\n    ) ;\n    procedure AddBins (ID : CoverageIDType; Name : String ; AtLeast : integer ; CovBin : CovBinType ) ;\n    procedure AddBins (ID : CoverageIDType; Name : String ;  CovBin : CovBinType) ;\n    procedure AddBins (ID : CoverageIDType; AtLeast : integer ; Weight  : integer ; CovBin : CovBinType ) ;     -- Weight Deprecated\n    procedure AddBins (ID : CoverageIDType; AtLeast : integer ; CovBin : CovBinType ) ;\n    procedure AddBins (ID : CoverageIDType; CovBin : CovBinType  ) ;\n\n    ------------------------------------------------------------\n    -- Weight Deprecated\n    procedure AddCross(\n    ------------------------------------------------------------\n      ID         : CoverageIDType ;\n      Name       : string ;\n      AtLeast    : integer ;\n      Weight     : integer ;\n      Bin1, Bin2 : CovBinType ;\n      Bin3, Bin4, Bin5, Bin6, Bin7, Bin8, Bin9, Bin10, Bin11, Bin12, Bin13,\n      Bin14, Bin15, Bin16, Bin17, Bin18, Bin19, Bin20 : CovBinType := NULL_BIN\n    ) ;\n\n    ------------------------------------------------------------\n    procedure AddCross(\n    ------------------------------------------------------------\n      ID         : CoverageIDType ;\n      Name       : string ;\n      AtLeast    : integer ;\n      Bin1, Bin2 : CovBinType ;\n      Bin3, Bin4, Bin5, Bin6, Bin7, Bin8, Bin9, Bin10, Bin11, Bin12, Bin13,\n      Bin14, Bin15, Bin16, Bin17, Bin18, Bin19, Bin20 : CovBinType := NULL_BIN\n    ) ;\n\n    ------------------------------------------------------------\n    procedure AddCross(\n    ------------------------------------------------------------\n      ID         : CoverageIDType ;\n      Name       : string ;\n      Bin1, Bin2 : CovBinType ;\n      Bin3, Bin4, Bin5, Bin6, Bin7, Bin8, Bin9, Bin10, Bin11, Bin12, Bin13,\n      Bin14, Bin15, Bin16, Bin17, Bin18, Bin19, Bin20 : CovBinType := NULL_BIN\n    ) ;\n\n    ------------------------------------------------------------\n    -- Weight Deprecated\n    procedure AddCross(\n    ------------------------------------------------------------\n      ID         : CoverageIDType ;\n      AtLeast    : integer ;\n      Weight     : integer ;\n      Bin1, Bin2 : CovBinType ;\n      Bin3, Bin4, Bin5, Bin6, Bin7, Bin8, Bin9, Bin10, Bin11, Bin12, Bin13,\n      Bin14, Bin15, Bin16, Bin17, Bin18, Bin19, Bin20 : CovBinType := NULL_BIN\n    ) ;\n\n    ------------------------------------------------------------\n    procedure AddCross(\n    ------------------------------------------------------------\n      ID         : CoverageIDType ;\n      AtLeast    : integer ;\n      Bin1, Bin2 : CovBinType ;\n      Bin3, Bin4, Bin5, Bin6, Bin7, Bin8, Bin9, Bin10, Bin11, Bin12, Bin13,\n      Bin14, Bin15, Bin16, Bin17, Bin18, Bin19, Bin20 : CovBinType := NULL_BIN\n    ) ;\n\n    ------------------------------------------------------------\n    procedure AddCross(\n    ------------------------------------------------------------\n      ID         : CoverageIDType ;\n      Bin1, Bin2 : CovBinType ;\n      Bin3, Bin4, Bin5, Bin6, Bin7, Bin8, Bin9, Bin10, Bin11, Bin12, Bin13,\n      Bin14, Bin15, Bin16, Bin17, Bin18, Bin19, Bin20 : CovBinType := NULL_BIN\n    ) ;\n\n    ------------------------------------------------------------\n    -- AddCross for usage with constants created by GenCross\n    ------------------------------------------------------------\n    procedure AddCross (ID : CoverageIDType; CovBin : CovMatrix2Type ; Name : String := \"\") ;\n    procedure AddCross (ID : CoverageIDType; CovBin : CovMatrix3Type ; Name : String := \"\") ;\n    procedure AddCross (ID : CoverageIDType; CovBin : CovMatrix4Type ; Name : String := \"\") ;\n    procedure AddCross (ID : CoverageIDType; CovBin : CovMatrix5Type ; Name : String := \"\") ;\n    procedure AddCross (ID : CoverageIDType; CovBin : CovMatrix6Type ; Name : String := \"\") ;\n    procedure AddCross (ID : CoverageIDType; CovBin : CovMatrix7Type ; Name : String := \"\") ;\n    procedure AddCross (ID : CoverageIDType; CovBin : CovMatrix8Type ; Name : String := \"\") ;\n    procedure AddCross (ID : CoverageIDType; CovBin : CovMatrix9Type ; Name : String := \"\") ;\n\n    ------------------------------------------------------------\n    -- /////////////////////////////////////////\n    --  Recording and Clearing Coverage\n    -- /////////////////////////////////////////\n    ------------------------------------------------------------\n    ------------------------------------------------------------\n    procedure ICoverLast (ID : CoverageIDType) ;\n    procedure ICover     (ID : CoverageIDType; CovPoint : integer_vector) ;\n    procedure ICover     (ID : CoverageIDType; CovPoint : integer) ;\n    procedure TCover     (ID : CoverageIDType; A : integer) ;\n\n    procedure ClearCov (ID : CoverageIDType) ;\n\n    ------------------------------------------------------------\n    -- /////////////////////////////////////////\n    --  Coverage Information and Statistics\n    -- /////////////////////////////////////////\n    ------------------------------------------------------------\n    ------------------------------------------------------------\n    impure function IsCovered     (ID : CoverageIDType; PercentCov : real ) return boolean ;\n    impure function IsCovered     (ID : CoverageIDType) return boolean ;\n\n    impure function IsInitialized (ID : CoverageIDType) return boolean ;\n\n    ------------------------------------------------------------\n    impure function GetItemCount    (ID : CoverageIDType) return integer ;\n    procedure GetTotalCovCountAndGoal     (ID : CoverageIDType; PercentCov : real; TotalCovCount : out integer; TotalCovGoal : out integer ) ;\n    procedure GetTotalCovCountAndGoal     (ID : CoverageIDType; TotalCovCount : out integer; TotalCovGoal : out integer ) ;\n    impure function GetCov          (ID : CoverageIDType; PercentCov : real ) return real ;\n    impure function GetCov          (ID : CoverageIDType) return real ;\n    impure function GetTotalCovCount(ID : CoverageIDType; PercentCov : real ) return integer ;\n    impure function GetTotalCovCount(ID : CoverageIDType) return integer ;\n    impure function GetTotalCovGoal (ID : CoverageIDType; PercentCov : real ) return integer ;\n    impure function GetTotalCovGoal (ID : CoverageIDType) return integer ;\n\n    ------------------------------------------------------------\n    impure function GetMinCov   (ID : CoverageIDType) return real ;\n    impure function GetMinCount (ID : CoverageIDType) return integer ;\n    impure function GetMaxCov   (ID : CoverageIDType) return real ;\n    impure function GetMaxCount (ID : CoverageIDType) return integer ;\n\n    ------------------------------------------------------------\n    impure function CountCovHoles (ID : CoverageIDType; PercentCov : real ) return integer ;\n    impure function CountCovHoles (ID : CoverageIDType) return integer ;\n\n    ------------------------------------------------------------\n    -- /////////////////////////////////////////\n    --  Generating Coverage Points, BinValues, and Indices\n    -- /////////////////////////////////////////\n    ------------------------------------------------------------\n    -- Return Points\n    ------------------------------------------------------------\n    -- to be replaced in VHDL-2019 by version that uses RandomSeed as an inout\n    impure function ToRandPoint   (ID : CoverageIDType; BinVal : RangeArrayType ) return integer ;\n    impure function ToRandPoint   (ID : CoverageIDType; BinVal : RangeArrayType ) return integer_vector ;\n\n    ------------------------------------------------------------\n    -- Return Points\n    impure function GetPoint     (ID : CoverageIDType; BinIndex : integer ) return integer ;\n    impure function GetPoint     (ID : CoverageIDType; BinIndex : integer ) return integer_vector ;\n    impure function GetRandPoint (ID : CoverageIDType) return integer ;\n    impure function GetRandPoint (ID : CoverageIDType; PercentCov : real ) return integer ;\n    impure function GetRandPoint (ID : CoverageIDType) return integer_vector ;\n    impure function GetRandPoint (ID : CoverageIDType; PercentCov : real ) return integer_vector ;\n    impure function GetIncPoint  (ID : CoverageIDType) return integer ;\n    impure function GetIncPoint  (ID : CoverageIDType) return integer_vector ;\n    impure function GetMinPoint  (ID : CoverageIDType) return integer ;\n    impure function GetMinPoint  (ID : CoverageIDType) return integer_vector ;\n    impure function GetMaxPoint  (ID : CoverageIDType) return integer ;\n    impure function GetMaxPoint  (ID : CoverageIDType) return integer_vector ;\n    impure function GetNextPoint (ID : CoverageIDType; Mode : NextPointModeType) return integer ;\n    impure function GetNextPoint (ID : CoverageIDType; Mode : NextPointModeType) return integer_vector ;\n    impure function GetNextPoint (ID : CoverageIDType) return integer ;\n    impure function GetNextPoint (ID : CoverageIDType) return integer_vector ;\n\n    ------------------------------------------------------------\n    -- deprecated, see GetRandPoint\n    impure function RandCovPoint (ID : CoverageIDType) return integer ;\n    impure function RandCovPoint (ID : CoverageIDType; PercentCov : real ) return integer ;\n    impure function RandCovPoint (ID : CoverageIDType) return integer_vector ;\n    impure function RandCovPoint (ID : CoverageIDType; PercentCov : real ) return integer_vector ;\n\n    ------------------------------------------------------------\n    -- Return BinVals\n    impure function GetBinVal     (ID : CoverageIDType; BinIndex : integer ) return RangeArrayType ;\n    impure function GetRandBinVal (ID : CoverageIDType; PercentCov : real ) return RangeArrayType ;\n    impure function GetRandBinVal (ID : CoverageIDType) return RangeArrayType ;\n    impure function GetLastBinVal (ID : CoverageIDType) return RangeArrayType ;\n    impure function GetIncBinVal  (ID : CoverageIDType) return RangeArrayType ;\n    impure function GetMinBinVal  (ID : CoverageIDType) return RangeArrayType ;\n    impure function GetMaxBinVal  (ID : CoverageIDType) return RangeArrayType ;\n    impure function GetNextBinVal (ID : CoverageIDType; Mode : NextPointModeType) return RangeArrayType ;\n    impure function GetNextBinVal (ID : CoverageIDType) return RangeArrayType ;\n    impure function GetHoleBinVal (ID : CoverageIDType; ReqHoleNum : integer ; PercentCov : real  ) return RangeArrayType ;\n    impure function GetHoleBinVal (ID : CoverageIDType; PercentCov : real  ) return RangeArrayType ;\n    impure function GetHoleBinVal (ID : CoverageIDType; ReqHoleNum : integer := 1 ) return RangeArrayType ;\n\n    -- deprecated RandCovBinVal, see GetRandBinVal\n    impure function RandCovBinVal (ID : CoverageIDType; PercentCov : real ) return RangeArrayType ;\n    impure function RandCovBinVal (ID : CoverageIDType) return RangeArrayType ;\n\n    -- Return Index Values\n    ------------------------------------------------------------\n    impure function GetNumBins   (ID : CoverageIDType) return integer ;\n    impure function GetRandIndex (ID : CoverageIDType; CovTargetPercent : real ) return integer ;\n    impure function GetRandIndex (ID : CoverageIDType) return integer ;\n    impure function GetLastIndex (ID : CoverageIDType) return integer ;\n    impure function GetIncIndex  (ID : CoverageIDType) return integer ;\n    impure function GetMinIndex  (ID : CoverageIDType) return integer ;\n    impure function GetMaxIndex  (ID : CoverageIDType) return integer ;\n    impure function GetNextIndex (ID : CoverageIDType; Mode : NextPointModeType) return integer ;\n    impure function GetNextIndex (ID : CoverageIDType) return integer ;\n\n    ------------------------------------------------------------\n    -- /////////////////////////////////////////\n    --  Accessing Coverage Bin Information\n    -- /////////////////////////////////////////\n    ------------------------------------------------------------\n    -- ------------------------------------------------------------\n    -- Intended as a stand in until we get a more general GetBin\n    impure function GetBinInfo (ID : CoverageIDType; BinIndex : integer ) return CovBinBaseType ;\n\n    -- ------------------------------------------------------------\n    -- Intended as a stand in until we get a more general GetBin\n    impure function GetBinValLength (ID : CoverageIDType) return integer ;\n\n    -- ------------------------------------------------------------\n    -- Eventually the multiple GetBin functions will be replaced by a\n    -- a single GetBin that returns CovBinBaseType with BinVal as an\n    -- unconstrained element\n    impure function GetBin (ID : CoverageIDType; BinIndex : integer ) return CovBinBaseType ;\n    impure function GetBin (ID : CoverageIDType; BinIndex : integer ) return CovMatrix2BaseType ;\n    impure function GetBin (ID : CoverageIDType; BinIndex : integer ) return CovMatrix3BaseType ;\n    impure function GetBin (ID : CoverageIDType; BinIndex : integer ) return CovMatrix4BaseType ;\n    impure function GetBin (ID : CoverageIDType; BinIndex : integer ) return CovMatrix5BaseType ;\n    impure function GetBin (ID : CoverageIDType; BinIndex : integer ) return CovMatrix6BaseType ;\n    impure function GetBin (ID : CoverageIDType; BinIndex : integer ) return CovMatrix7BaseType ;\n    impure function GetBin (ID : CoverageIDType; BinIndex : integer ) return CovMatrix8BaseType ;\n    impure function GetBin (ID : CoverageIDType; BinIndex : integer ) return CovMatrix9BaseType ;\n\n    -- ------------------------------------------------------------\n    impure function GetBinName (ID : CoverageIDType; BinIndex : integer; DefaultName : string := \"\" ) return string ;\n\n    ------------------------------------------------------------\n    impure function GetErrorCount (ID : CoverageIDType) return integer ;\n\n    ------------------------------------------------------------\n    -- /////////////////////////////////////////\n    --  Printing Coverage Bin Information\n    -- /////////////////////////////////////////\n    ------------------------------------------------------------\n    -- To specify the following, see SetReportOptions\n    --   WritePassFail, WriteBinInfo, WriteCount, WriteAnyIllegal\n    --   WritePrefix, PassName, FailName\n    ------------------------------------------------------------\n    procedure WriteBin (ID : CoverageIDType) ;\n    procedure WriteBin (ID : CoverageIDType; LogLevel : LogType ) ;  -- With LogLevel\n    procedure WriteBin (ID : CoverageIDType; FileName : string;  OpenKind : File_Open_Kind := APPEND_MODE) ;\n    procedure WriteBin (ID : CoverageIDType; LogLevel : LogType; FileName : string; OpenKind : File_Open_Kind := APPEND_MODE) ;\n\n    ------------------------------------------------------------\n    procedure DumpBin (ID : CoverageIDType; LogLevel : LogType := DEBUG) ;\n\n    ------------------------------------------------------------\n    procedure WriteCovHoles (ID : CoverageIDType; LogLevel : LogType := ALWAYS ) ;\n    procedure WriteCovHoles (ID : CoverageIDType; PercentCov : real ) ;\n    procedure WriteCovHoles (ID : CoverageIDType; LogLevel : LogType;  PercentCov : real ) ;\n    procedure WriteCovHoles (ID : CoverageIDType; FileName : string;   OpenKind : File_Open_Kind := APPEND_MODE ) ;\n    procedure WriteCovHoles (ID : CoverageIDType; LogLevel : LogType;  FileName : string;  OpenKind : File_Open_Kind := APPEND_MODE ) ;\n    procedure WriteCovHoles (ID : CoverageIDType; FileName : string;   PercentCov : real ; OpenKind : File_Open_Kind := APPEND_MODE ) ;\n    procedure WriteCovHoles (ID : CoverageIDType; LogLevel : LogType;  FileName : string;  PercentCov : real ; OpenKind : File_Open_Kind := APPEND_MODE ) ;\n\n    ------------------------------------------------------------\n    -- /////////////////////////////////////////\n    --  Writing Out RAW Coverage Bin Information\n    --  Note that read supports merging of coverage models\n    -- /////////////////////////////////////////\n    ------------------------------------------------------------\n    procedure ReadCovDb  (ID : CoverageIDType; FileName : string; Merge : boolean := FALSE) ;\n    procedure WriteCovDb (ID : CoverageIDType; FileName : string; OpenKind : File_Open_Kind := WRITE_MODE ) ;\n    --     procedure WriteCovDb (ID : CoverageIDType) ;\n--    procedure WriteCovYaml (ID : CoverageIDType; FileName : string; OpenKind : File_Open_Kind := WRITE_MODE ) ;\n    procedure WriteCovYaml (FileName : string := \"\"; Coverage : real ; OpenKind : File_Open_Kind := WRITE_MODE) ;\n    procedure ReadCovYaml  (FileName : string := \"\"; Merge : boolean := FALSE) ;\n    impure function GotCoverage return boolean ;\n    procedure SetErrorIfNotCovered(Checked : boolean := FALSE) ; \n\n\n  ------------------------------------------------------------\n  -- /////////////////////////////////////////\n  -- /////////////////////////////////////////\n  -- Compatibility Methods - Allows CoveragePkg to Work as a PT still\n  -- /////////////////////////////////////////\n  -- /////////////////////////////////////////\n  ------------------------------------------------------------\n    procedure       SetName    (Name : String) ;\n    impure function SetName    (Name : String) return string ;\n    procedure       DeallocateName ;    -- clear name\n    impure function GetName return String ;\n    impure function GetCovModelName return String ;\n\n    ------------------------------------------------------------\n    procedure       SetMessage (Message : String) ;\n    procedure       DeallocateMessage ; -- clear message\n\n    procedure       SetCovTarget     (Percent : real) ;       -- 2.5\n    impure function GetCovTarget return real ;          -- 2.5\n    procedure       SetThresholding  (A : boolean := TRUE ) ; -- 2.5\n    procedure       SetCovThreshold  (Percent : real) ;\n    procedure       SetMerging       (A : boolean := TRUE ) ; -- 2.5\n    procedure       SetCountMode     (A : CountModeType) ;\n    procedure       SetIllegalMode   (A : IllegalModeType) ;\n    procedure       SetWeightMode    (A : WeightModeType;  Scale : real := 1.0) ;\n    procedure       SetNextPointMode (A : NextPointModeType) ;\n\n    ------------------------------------------------------------\n    procedure       SetAlertLogID (A : AlertLogIDType) ;\n    procedure       SetAlertLogID (Name : string ; ParentID : AlertLogIDType := ALERTLOG_BASE_ID ; CreateHierarchy : Boolean := TRUE) ;\n    impure function GetAlertLogID return AlertLogIDType ;\n\n    ------------------------------------------------------------\n    procedure       InitSeed   (S  : string;   UseNewSeedMethods : boolean := COVERAGE_USE_NEW_SEED_METHODS) ;\n    impure function InitSeed   (S  : string;   UseNewSeedMethods : boolean := COVERAGE_USE_NEW_SEED_METHODS) return string ;\n    procedure       InitSeed   (I  : integer;  UseNewSeedMethods : boolean := COVERAGE_USE_NEW_SEED_METHODS) ;\n\n    ------------------------------------------------------------\n    procedure       SetSeed    (RandomSeedIn : RandomSeedType ) ;\n    impure function GetSeed return RandomSeedType ;\n\n    ------------------------------------------------------------\n    procedure SetBinSize (NewNumBins : integer) ;\n    procedure Deallocate ;\n\n    ------------------------------------------------------------\n    -- Weight Deprecated\n    procedure AddBins (\n    ------------------------------------------------------------\n      Name    : String ;\n      AtLeast : integer ;\n      Weight  : integer ;\n      CovBin  : CovBinType\n    ) ;\n    procedure AddBins ( Name : String ; AtLeast : integer ; CovBin : CovBinType ) ;\n    procedure AddBins ( Name : String ;  CovBin : CovBinType) ;\n    procedure AddBins ( AtLeast : integer ; Weight  : integer ; CovBin : CovBinType ) ;\n    procedure AddBins ( AtLeast : integer ; CovBin : CovBinType ) ;\n    procedure AddBins ( CovBin : CovBinType ) ;\n\n    ------------------------------------------------------------\n    procedure AddCross(\n    ------------------------------------------------------------\n      Name       : string ;\n      AtLeast    : integer ;\n      Weight     : integer ;\n      Bin1, Bin2 : CovBinType ;\n      Bin3, Bin4, Bin5, Bin6, Bin7, Bin8, Bin9, Bin10, Bin11, Bin12, Bin13,\n      Bin14, Bin15, Bin16, Bin17, Bin18, Bin19, Bin20 : CovBinType := NULL_BIN\n    ) ;\n\n    ------------------------------------------------------------\n    procedure AddCross(\n      Name       : string ;\n      AtLeast    : integer ;\n      Bin1, Bin2 : CovBinType ;\n      Bin3, Bin4, Bin5, Bin6, Bin7, Bin8, Bin9, Bin10, Bin11, Bin12, Bin13,\n      Bin14, Bin15, Bin16, Bin17, Bin18, Bin19, Bin20 : CovBinType := NULL_BIN\n    ) ;\n\n    ------------------------------------------------------------\n    procedure AddCross(\n      Name       : string ;\n      Bin1, Bin2 : CovBinType ;\n      Bin3, Bin4, Bin5, Bin6, Bin7, Bin8, Bin9, Bin10, Bin11, Bin12, Bin13,\n      Bin14, Bin15, Bin16, Bin17, Bin18, Bin19, Bin20 : CovBinType := NULL_BIN\n    ) ;\n\n    ------------------------------------------------------------\n    procedure AddCross(\n      AtLeast    : integer ;\n      Weight     : integer ;\n      Bin1, Bin2 : CovBinType ;\n      Bin3, Bin4, Bin5, Bin6, Bin7, Bin8, Bin9, Bin10, Bin11, Bin12, Bin13,\n      Bin14, Bin15, Bin16, Bin17, Bin18, Bin19, Bin20 : CovBinType := NULL_BIN\n    ) ;\n\n    ------------------------------------------------------------\n    procedure AddCross(\n      AtLeast    : integer ;\n      Bin1, Bin2 : CovBinType ;\n      Bin3, Bin4, Bin5, Bin6, Bin7, Bin8, Bin9, Bin10, Bin11, Bin12, Bin13,\n      Bin14, Bin15, Bin16, Bin17, Bin18, Bin19, Bin20 : CovBinType := NULL_BIN\n    ) ;\n\n    ------------------------------------------------------------\n    procedure AddCross(\n      Bin1, Bin2 : CovBinType ;\n      Bin3, Bin4, Bin5, Bin6, Bin7, Bin8, Bin9, Bin10, Bin11, Bin12, Bin13,\n      Bin14, Bin15, Bin16, Bin17, Bin18, Bin19, Bin20 : CovBinType := NULL_BIN\n    ) ;\n\n    ------------------------------------------------------------\n    -- AddCross for usage with constants created by GenCross\n    procedure AddCross (CovBin : CovMatrix2Type ; Name : String := \"\") ;\n    procedure AddCross (CovBin : CovMatrix3Type ; Name : String := \"\") ;\n    procedure AddCross (CovBin : CovMatrix4Type ; Name : String := \"\") ;\n    procedure AddCross (CovBin : CovMatrix5Type ; Name : String := \"\") ;\n    procedure AddCross (CovBin : CovMatrix6Type ; Name : String := \"\") ;\n    procedure AddCross (CovBin : CovMatrix7Type ; Name : String := \"\") ;\n    procedure AddCross (CovBin : CovMatrix8Type ; Name : String := \"\") ;\n    procedure AddCross (CovBin : CovMatrix9Type ; Name : String := \"\") ;\n\n    ------------------------------------------------------------\n    --  Recording and Clearing Coverage\n    procedure ICoverLast ;\n    procedure ICover( CovPoint : integer) ;\n    procedure ICover( CovPoint : integer_vector) ;\n    procedure TCover( A : integer) ;\n\n    procedure ClearCov ;\n    procedure SetCovZero ;  -- Deprecated\n\n    ------------------------------------------------------------\n    --  Coverage Information and Statistics\n    impure function IsCovered return boolean ;\n    impure function IsCovered ( PercentCov : real ) return boolean ;\n    impure function IsInitialized return boolean ;\n\n    ------------------------------------------------------------\n    impure function GetItemCount return integer ;\n    impure function GetCov ( PercentCov : real ) return real ;\n    impure function GetCov return real ; -- PercentCov of entire model/all bins\n    impure function GetTotalCovCount ( PercentCov : real ) return integer ;\n    impure function GetTotalCovCount return integer ;\n    impure function GetTotalCovGoal ( PercentCov : real ) return integer ;\n    impure function GetTotalCovGoal return integer ;\n\n    ------------------------------------------------------------\n    impure function GetMinCov return real ;       -- PercentCov\n    impure function GetMinCount return integer ;  -- Count\n    impure function GetMaxCov return real ;       -- PercentCov\n    impure function GetMaxCount return integer ;  -- Count\n\n    ------------------------------------------------------------\n    impure function CountCovHoles ( PercentCov : real ) return integer ;\n    impure function CountCovHoles return integer ;\n\n    ------------------------------------------------------------\n    -- Return Points\n    impure function GetPoint     ( BinIndex : integer ) return integer ;\n    impure function GetPoint     ( BinIndex : integer ) return integer_vector ;\n    impure function GetRandPoint return integer ;\n    impure function GetRandPoint ( PercentCov : real ) return integer ;\n    impure function GetRandPoint return integer_vector ;\n    impure function GetRandPoint ( PercentCov : real ) return integer_vector ;\n    impure function GetIncPoint return integer ;\n    impure function GetIncPoint return integer_vector ;\n    impure function GetMinPoint return integer ;\n    impure function GetMinPoint return integer_vector ;\n    impure function GetMaxPoint return integer ;\n    impure function GetMaxPoint return integer_vector ;\n    impure function GetNextPoint  return integer ;\n    impure function GetNextPoint  return integer_vector ;\n    impure function GetNextPoint(Mode : NextPointModeType)  return integer ;\n    impure function GetNextPoint(Mode : NextPointModeType)  return integer_vector ;\n\n    -- RandCovPoint is deprecated, renamed to GetRandPoint\n    impure function RandCovPoint return integer ;\n    impure function RandCovPoint ( PercentCov : real ) return integer ;\n    impure function RandCovPoint return integer_vector ;\n    impure function RandCovPoint ( PercentCov : real ) return integer_vector ;\n\n    ------------------------------------------------------------\n    -- Return BinVals\n    impure function GetBinVal ( BinIndex : integer ) return RangeArrayType ;\n    impure function GetRandBinVal return RangeArrayType ;\n    impure function GetRandBinVal ( PercentCov : real ) return RangeArrayType ;\n    impure function GetLastBinVal return RangeArrayType ;\n    impure function GetIncBinVal  return RangeArrayType ;\n    impure function GetMinBinVal  return RangeArrayType ;\n    impure function GetMaxBinVal  return RangeArrayType ;\n    impure function GetNextBinVal  return RangeArrayType ;\n    impure function GetNextBinVal(Mode : NextPointModeType)  return RangeArrayType ;\n    impure function GetHoleBinVal ( ReqHoleNum : integer ; PercentCov : real  ) return RangeArrayType ;\n    impure function GetHoleBinVal ( PercentCov : real ) return RangeArrayType ;\n    impure function GetHoleBinVal ( ReqHoleNum : integer := 1 ) return RangeArrayType ;\n\n    -- RandCovBinVal is deprecated, renamed to GetRandBinVal\n    impure function RandCovBinVal return RangeArrayType ;\n    impure function RandCovBinVal ( PercentCov : real ) return RangeArrayType ; -- deprecated,  see GetRandBinVal\n\n    ------------------------------------------------------------\n    -- Return Index\n    impure function GetNumBins return integer ;\n    impure function GetRandIndex return integer ;\n    impure function GetRandIndex ( CovTargetPercent : real ) return integer ;\n    impure function GetLastIndex return integer ;\n    impure function GetIncIndex return integer ;\n    impure function GetMinIndex return integer ;\n    impure function GetMaxIndex return integer ;\n    impure function GetNextIndex  return integer ;\n    impure function GetNextIndex(Mode : NextPointModeType)  return integer ;\n\n    -- GetBin returns an internal value of the coverage data structure\n    -- The return value may change as the package evolves\n    -- Use it only for debugging.\n    -- GetBinInfo is a for development only.\n    impure function GetBinInfo ( BinIndex : integer ) return CovBinBaseType ;\n    impure function GetBinValLength return integer ;\n    impure function GetBin ( BinIndex : integer ) return CovBinBaseType ;\n    impure function GetBin ( BinIndex : integer ) return CovMatrix2BaseType  ;\n    impure function GetBin ( BinIndex : integer ) return CovMatrix3BaseType ;\n    impure function GetBin ( BinIndex : integer ) return CovMatrix4BaseType ;\n    impure function GetBin ( BinIndex : integer ) return CovMatrix5BaseType ;\n    impure function GetBin ( BinIndex : integer ) return CovMatrix6BaseType ;\n    impure function GetBin ( BinIndex : integer ) return CovMatrix7BaseType ;\n    impure function GetBin ( BinIndex : integer ) return CovMatrix8BaseType ;\n    impure function GetBin ( BinIndex : integer ) return CovMatrix9BaseType ;\n    impure function GetBinName ( BinIndex : integer; DefaultName : string := \"\" ) return string ;\n    impure function GetErrorCount return integer ;\n\n    ------------------------------------------------------------\n    procedure WriteBin (\n      WritePassFail   : OsvvmOptionsType := COV_OPT_INIT_PARM_DETECT ;\n      WriteBinInfo    : OsvvmOptionsType := COV_OPT_INIT_PARM_DETECT ;\n      WriteCount      : OsvvmOptionsType := COV_OPT_INIT_PARM_DETECT ;\n      WriteAnyIllegal : OsvvmOptionsType := COV_OPT_INIT_PARM_DETECT ;\n      WritePrefix     : string := OSVVM_STRING_INIT_PARM_DETECT ;\n      PassName        : string := OSVVM_STRING_INIT_PARM_DETECT ;\n      FailName        : string := OSVVM_STRING_INIT_PARM_DETECT\n    ) ;\n\n    ------------------------------------------------------------\n    procedure WriteBin (  -- With LogLevel\n      LogLevel        : LogType ;\n      WritePassFail   : OsvvmOptionsType := COV_OPT_INIT_PARM_DETECT ;\n      WriteBinInfo    : OsvvmOptionsType := COV_OPT_INIT_PARM_DETECT ;\n      WriteCount      : OsvvmOptionsType := COV_OPT_INIT_PARM_DETECT ;\n      WriteAnyIllegal : OsvvmOptionsType := COV_OPT_INIT_PARM_DETECT ;\n      WritePrefix     : string := OSVVM_STRING_INIT_PARM_DETECT ;\n      PassName        : string := OSVVM_STRING_INIT_PARM_DETECT ;\n      FailName        : string := OSVVM_STRING_INIT_PARM_DETECT\n    ) ;\n\n    ------------------------------------------------------------\n    procedure WriteBin (\n      FileName        : string;\n      OpenKind        : File_Open_Kind := APPEND_MODE ;\n      WritePassFail   : OsvvmOptionsType := COV_OPT_INIT_PARM_DETECT ;\n      WriteBinInfo    : OsvvmOptionsType := COV_OPT_INIT_PARM_DETECT ;\n      WriteCount      : OsvvmOptionsType := COV_OPT_INIT_PARM_DETECT ;\n      WriteAnyIllegal : OsvvmOptionsType := COV_OPT_INIT_PARM_DETECT ;\n      WritePrefix     : string := OSVVM_STRING_INIT_PARM_DETECT ;\n      PassName        : string := OSVVM_STRING_INIT_PARM_DETECT ;\n      FailName        : string := OSVVM_STRING_INIT_PARM_DETECT\n    ) ;\n\n    ------------------------------------------------------------\n    procedure WriteBin (  -- With LogLevel\n      LogLevel        : LogType ;\n      FileName        : string;\n      OpenKind        : File_Open_Kind := APPEND_MODE ;\n      WritePassFail   : OsvvmOptionsType := COV_OPT_INIT_PARM_DETECT ;\n      WriteBinInfo    : OsvvmOptionsType := COV_OPT_INIT_PARM_DETECT ;\n      WriteCount      : OsvvmOptionsType := COV_OPT_INIT_PARM_DETECT ;\n      WriteAnyIllegal : OsvvmOptionsType := COV_OPT_INIT_PARM_DETECT ;\n      WritePrefix     : string := OSVVM_STRING_INIT_PARM_DETECT ;\n      PassName        : string := OSVVM_STRING_INIT_PARM_DETECT ;\n      FailName        : string := OSVVM_STRING_INIT_PARM_DETECT\n    ) ;\n\n    procedure DumpBin (LogLevel : LogType := DEBUG) ;  -- Development only\n\n    procedure WriteCovHoles ( LogLevel : LogType := ALWAYS ) ;\n    procedure WriteCovHoles ( PercentCov : real ) ;\n    procedure WriteCovHoles ( LogLevel : LogType;  PercentCov : real ) ;\n    procedure WriteCovHoles ( FileName : string;   OpenKind : File_Open_Kind := APPEND_MODE ) ;\n    procedure WriteCovHoles ( LogLevel : LogType;  FileName : string;  OpenKind : File_Open_Kind := APPEND_MODE ) ;\n    procedure WriteCovHoles ( FileName : string;   PercentCov : real ; OpenKind : File_Open_Kind := APPEND_MODE ) ;\n    procedure WriteCovHoles ( LogLevel : LogType;  FileName : string;  PercentCov : real ; OpenKind : File_Open_Kind := APPEND_MODE ) ;\n\n    procedure ReadCovDb (FileName : string; Merge : boolean := FALSE) ;\n    procedure WriteCovDb (FileName : string; OpenKind : File_Open_Kind := WRITE_MODE ) ;\n\n\n------------------------------------------------------------\n--  Remaining are Deprecated\n--\n    -- Deprecated/Subsumed by versions with PercentCov Parameter (rather than AtLeast value)\n    impure function RandCovPoint  (AtLeast : integer ) return integer ;\n    impure function RandCovPoint  (AtLeast : integer ) return integer_vector ;\n    impure function RandCovBinVal (AtLeast : integer ) return RangeArrayType ;\n    impure function RandCovHole   (AtLeast : integer ) return RangeArrayType ;\n    impure function CountCovHoles (AtLeast : integer ) return integer ;\n    impure function IsCovered     (AtLeast : integer ) return boolean ;\n    impure function GetHoleBinVal (ReqHoleNum : integer ; AtLeast : integer ) return RangeArrayType ;\n    impure function GetCovHole    (ReqHoleNum : integer ; AtLeast : integer ) return RangeArrayType ;\n    procedure       WriteCovHoles (AtLeast : integer ) ;\n    procedure       WriteCovHoles (LogLevel : LogType;    AtLeast : integer ) ;\n    procedure       WriteCovHoles (FileName : string;     AtLeast : integer;  OpenKind : File_Open_Kind := APPEND_MODE ) ;\n    procedure       WriteCovHoles (LogLevel : LogType;    FileName : string;  AtLeast  : integer ; OpenKind : File_Open_Kind := APPEND_MODE ) ;\n\n    -- Deprecated.  Replaced by SetMessage\n    procedure       SetItemName   (ItemNameIn : String) ;  -- Replaced by SetMessage\n\n    -- Deprecated.  Replaced by GetErrorCount\n    impure function CovBinErrCnt return integer ;  -- Replaced by GetErrorCount\n\n    -- Deprecated.  Replaced by GetRandBinVal/RandCovBinVal\n    impure function RandCovHole   (PercentCov : real) return RangeArrayType ;  -- Deprecated\n    impure function RandCovHole return RangeArrayType ;  -- Deprecated\n\n    -- Deprecated.  Replaced by GetHoleBinVal\n    impure function GetCovHole    (ReqHoleNum : integer ; PercentCov : real ) return RangeArrayType ;\n    impure function GetCovHole    (PercentCov : real ) return RangeArrayType ;\n    impure function GetCovHole    (ReqHoleNum : integer := 1 ) return RangeArrayType ;\n\n    -- Deprecated.  Replaced by GetMinCount / GetMaxCount\n    impure function GetMinCov return integer ;  -- Replaced by GetMinCount\n    impure function GetMaxCov return integer ;  -- Replaced by GetMaxCount\n\n    -- Deprecated.  Replaced by AddCross.\n    procedure AddBins (CovBin : CovMatrix2Type ; Name : String := \"\") ;\n    procedure AddBins (CovBin : CovMatrix3Type ; Name : String := \"\") ;\n    procedure AddBins (CovBin : CovMatrix4Type ; Name : String := \"\") ;\n    procedure AddBins (CovBin : CovMatrix5Type ; Name : String := \"\") ;\n    procedure AddBins (CovBin : CovMatrix6Type ; Name : String := \"\") ;\n    procedure AddBins (CovBin : CovMatrix7Type ; Name : String := \"\") ;\n    procedure AddBins (CovBin : CovMatrix8Type ; Name : String := \"\") ;\n    procedure AddBins (CovBin : CovMatrix9Type ; Name : String := \"\") ;\n\n  end protected CovPType ;\n  ------------------------------------------------------------------------------------------\n  --  XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX  CovPType  XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n  --  XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX  CovPType  XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n  ------------------------------------------------------------------------------------------\n\n  ------------------------------------------------------------\n  -- Experimental.  Intended primarily for development.\n  procedure CompareBins (\n  ------------------------------------------------------------\n    variable Bin1       : inout CovPType ;\n    variable Bin2       : inout CovPType ;\n    variable ErrorCount : inout integer\n  ) ;\n\n  ------------------------------------------------------------\n  -- Experimental.  Intended primarily for development.\n  procedure CompareBins (\n  ------------------------------------------------------------\n    variable Bin1       : inout CovPType ;\n    variable Bin2       : inout CovPType\n  ) ;\n\n  ------------------------------------------------------------\n  -- Deprecated items\n  -- The following will be removed from the package in the future.\n  --\n\n  ------------------------------------------------------------\n  -- SetName is deprecated, see NewID\n  procedure       SetName         (ID : CoverageIDType; Name : String) ;\n  impure function SetName         (ID : CoverageIDType; Name : String) return string ;\n  procedure       DeallocateName  (ID : CoverageIDType) ;\n\n  ------------------------------------------------------------\n  -- SetMessage is deprecated, see PrintToCovFile\n  procedure       SetMessage         (ID : CoverageIDType; Message : String) ;\n  procedure       DeallocateMessage  (ID : CoverageIDType) ;\n\n  ------------------------------------------------------------\n  -- DumpBin is deprecated\n  procedure DumpBin (ID : CoverageIDType; LogLevel : LogType := DEBUG) ;\n\n  ------------------------------------------------------------\n  -- Weight Deprecated\n  procedure AddBins (\n  ------------------------------------------------------------\n    ID      : CoverageIDType ;\n    Name    : String ;\n    AtLeast : integer ;\n    Weight  : integer ;\n    CovBin  : CovBinType\n  ) ;\n  procedure AddBins (ID : CoverageIDType; AtLeast : integer ; Weight  : integer ; CovBin : CovBinType ) ;     -- Weight Deprecated\n\n  ------------------------------------------------------------\n  -- Weight Deprecated\n  procedure AddCross(\n  ------------------------------------------------------------\n    ID         : CoverageIDType ;\n    Name       : string ;\n    AtLeast    : integer ;\n    Weight     : integer ;\n    Bin1, Bin2 : CovBinType ;\n    Bin3, Bin4, Bin5, Bin6, Bin7, Bin8, Bin9, Bin10, Bin11, Bin12, Bin13,\n    Bin14, Bin15, Bin16, Bin17, Bin18, Bin19, Bin20 : CovBinType := NULL_BIN\n  ) ;\n\n  ------------------------------------------------------------\n  -- Weight Deprecated\n  procedure AddCross(\n  ------------------------------------------------------------\n    ID         : CoverageIDType ;\n    AtLeast    : integer ;\n    Weight     : integer ;\n    Bin1, Bin2 : CovBinType ;\n    Bin3, Bin4, Bin5, Bin6, Bin7, Bin8, Bin9, Bin10, Bin11, Bin12, Bin13,\n    Bin14, Bin15, Bin16, Bin17, Bin18, Bin19, Bin20 : CovBinType := NULL_BIN\n  ) ;\n\n  ------------------------------------------------------------\n  -- Weight Parameter is deprecated\n  function GenBin(\n  ------------------------------------------------------------\n    AtLeast       : integer ;\n    Weight        : integer ;\n    Min, Max      : integer ;\n    NumBin        : integer\n  ) return CovBinType ;\n\n  ------------------------------------------------------------\n  -- Weight Parameter is deprecated\n  function GenBin(\n  ------------------------------------------------------------\n    AtLeast       : integer ;\n    Weight        : integer ;\n    A             : integer_vector\n  ) return CovBinType ;\n\n  ------------------------------------------------------------\n  function GenCross(  -- 2\n  -- Cross existing bins\n  -- Use AddCross for adding values directly to coverage database\n  -- Use GenCross for constants\n  ------------------------------------------------------------\n    AtLeast     : integer ;\n    Weight      : integer ;\n    Bin1, Bin2  : CovBinType\n  ) return CovMatrix2Type ;\n\n  ------------------------------------------------------------\n  function GenCross(  -- 3\n  ------------------------------------------------------------\n    AtLeast           : integer ;\n    Weight            : integer ;\n    Bin1, Bin2, Bin3  : CovBinType\n  ) return CovMatrix3Type ;\n\n  ------------------------------------------------------------\n  function GenCross(  -- 4\n  ------------------------------------------------------------\n    AtLeast                 : integer ;\n    Weight                  : integer ;\n    Bin1, Bin2, Bin3, Bin4  : CovBinType\n  ) return CovMatrix4Type ;\n\n  ------------------------------------------------------------\n  function GenCross(  -- 5\n  ------------------------------------------------------------\n    AtLeast                       : integer ;\n    Weight                        : integer ;\n    Bin1, Bin2, Bin3, Bin4, Bin5  : CovBinType\n  ) return CovMatrix5Type ;\n\n  ------------------------------------------------------------\n  function GenCross(  -- 6\n  ------------------------------------------------------------\n    AtLeast                             : integer ;\n    Weight                              : integer ;\n    Bin1, Bin2, Bin3, Bin4, Bin5, Bin6  : CovBinType\n  ) return CovMatrix6Type ;\n\n  ------------------------------------------------------------\n  function GenCross(  -- 7\n  ------------------------------------------------------------\n    AtLeast                                   : integer ;\n    Weight                                    : integer ;\n    Bin1, Bin2, Bin3, Bin4, Bin5, Bin6, Bin7  : CovBinType\n  ) return CovMatrix7Type ;\n\n  ------------------------------------------------------------\n  function GenCross(  -- 8\n  ------------------------------------------------------------\n    AtLeast                                         : integer ;\n    Weight                                          : integer ;\n    Bin1, Bin2, Bin3, Bin4, Bin5, Bin6, Bin7, Bin8  : CovBinType\n  ) return CovMatrix8Type ;\n\n  ------------------------------------------------------------\n  function GenCross(  -- 9\n  ------------------------------------------------------------\n    AtLeast                                               : integer ;\n    Weight                                                : integer ;\n    Bin1, Bin2, Bin3, Bin4, Bin5, Bin6, Bin7, Bin8, Bin9  : CovBinType\n  ) return CovMatrix9Type ;\n\n\nend package CoveragePkg ;\n\n--- ///////////////////////////////////////////////////////////////////////////\n--- ///////////////////////////////////////////////////////////////////////////\n--- ///////////////////////////////////////////////////////////////////////////\n\npackage body CoveragePkg is\n\n  constant DEFAULT_WEIGHT_MODE : WeightModeType := WeightModeType'value(COVERAGE_DEFAULT_WEIGHT_MODE) ;\n\n\n  ------------------------------------------------------------\n  --  package local\n  function ActionToName(Action : integer) return string is\n  ------------------------------------------------------------\n  begin\n    case Action is\n      when 1 =>        return \"COUNT\" ;\n      when 0 =>        return \"IGNORE\"  ;\n      when others =>   return \"ILLEGAL\" ;\n    end case ;\n  end function ActionToName ;\n\n  ------------------------------------------------------------\n  function inside (\n  -- package local\n  ------------------------------------------------------------\n    CovPoint : integer_vector ;\n    BinVal   : RangeArrayType\n  ) return boolean is\n    alias iCovPoint : integer_vector(BinVal'range) is CovPoint ;\n  begin\n    for i in BinVal'range loop\n      if not (iCovPoint(i) >= BinVal(i).min and iCovPoint(i) <= BinVal(i).max) then\n        return FALSE ;\n      end if ;\n    end loop ;\n    return TRUE ;\n  end function inside ;\n\n  ------------------------------------------------------------\n  function inside (\n  -- package local, used by InsertBin\n  -- True when BinVal1 is inside BinVal2\n  ------------------------------------------------------------\n    BinVal1  : RangeArrayType ;\n    BinVal2  : RangeArrayType\n  ) return boolean is\n    alias iBinVal2 : RangeArrayType(BinVal1'range) is BinVal2 ;\n  begin\n    for i in BinVal1'range loop\n      if not (BinVal1(i).min >= iBinVal2(i).min and BinVal1(i).max <= iBinVal2(i).max) then\n        return FALSE ;\n      end if ;\n    end loop ;\n    return TRUE ;\n  end function inside ;\n\n  ------------------------------------------------------------\n  procedure write (\n    variable buf : inout line ;\n    CovPoint     : integer_vector\n  ) is\n  -- package local.  called by ICover\n  ------------------------------------------------------------\n    alias iCovPoint : integer_vector(1 to CovPoint'length) is CovPoint ;\n  begin\n    write(buf, \"(\" & integer'image(iCovPoint(1)) ) ;\n    for i in 2 to iCovPoint'right loop\n      write(buf, \",\" & integer'image(iCovPoint(i)) ) ;\n    end loop ;\n    swrite(buf, \")\") ;\n  end procedure write ;\n\n  ------------------------------------------------------------\n  procedure write ( file f :  text ;  BinVal : RangeArrayType ) is\n  -- called by WriteBin and WriteCovHoles\n  ------------------------------------------------------------\n  begin\n    for i in BinVal'range loop\n      if BinVal(i).min = BinVal(i).max then\n        write(f, \"(\" & integer'image(BinVal(i).min) & \") \" ) ;\n      elsif  (BinVal(i).min = integer'left) and (BinVal(i).max = integer'right) then\n        write(f, \"(ALL) \" ) ;\n      else\n        write(f, \"(\" & integer'image(BinVal(i).min) & \" to \" &\n                       integer'image(BinVal(i).max) & \") \" ) ;\n      end if ;\n    end loop ;\n  end procedure write ;\n\n  ------------------------------------------------------------\n  procedure write (\n  -- called by WriteBin and WriteCovHoles\n  ------------------------------------------------------------\n    variable buf    : inout line ;\n    constant BinVal : in    RangeArrayType\n  ) is\n  ------------------------------------------------------------\n  begin\n    for i in BinVal'range loop\n      if BinVal(i).min = BinVal(i).max then\n        write(buf, \"(\" & integer'image(BinVal(i).min) & \") \" ) ;\n      elsif  (BinVal(i).min = integer'left) and (BinVal(i).max = integer'right) then\n        swrite(buf, \"(ALL) \" ) ;\n      else\n        write(buf, \"(\" & integer'image(BinVal(i).min) & \" to \" &\n                       integer'image(BinVal(i).max) & \") \" ) ;\n      end if ;\n    end loop ;\n  end procedure write ;\n\n  ------------------------------------------------------------\n  impure function to_string ( BinVal : RangeArrayType ) return string is\n  -- error handling in InsertBin\n  ------------------------------------------------------------\n    variable buf : line ; \n    impure function buf_to_string return string is\n      variable s : string(buf'range) ; \n    begin\n      s := buf.all ; \n      deallocate(buf) ;\n      return s ;\n    end function buf_to_string ; \n  begin\n    write(buf, BinVal) ; \n    return buf_to_string ; \n  end function to_string ; \n\n\n  ------------------------------------------------------------\n  procedure WriteBinVal (\n  -- package local for now\n  ------------------------------------------------------------\n    variable buf    : inout line ;\n    constant BinVal : in    RangeArrayType\n  ) is\n  begin\n    for i in BinVal'range loop\n      write(buf, BinVal(i).min) ;\n      write(buf, ' ') ;\n      write(buf, BinVal(i).max) ;\n      write(buf, ' ') ;\n    end loop ;\n  end procedure WriteBinVal ;\n\n  ------------------------------------------------------------\n  -- package local for now\n  procedure read (\n  -- if public, also create one that does not use valid flag\n  ------------------------------------------------------------\n    variable buf    : inout line ;\n    variable BinVal : out   RangeArrayType ;\n    variable Valid  : out   boolean\n  ) is\n    variable ReadValid : boolean ;\n  begin\n    for i in BinVal'range loop\n      read(buf, BinVal(i).min, ReadValid) ;\n      exit when not ReadValid ;\n      read(buf, BinVal(i).max, ReadValid) ;\n      exit when not ReadValid ;\n    end loop ;\n    Valid := ReadValid ;\n  end procedure read ;\n\n  ------------------------------------------------------------\n  function CalcPercentCov( Count : integer ; AtLeast : integer ) return real is\n  -- package local, called by MergeBin, InsertBin, ClearCov, ReadCovDbDatabase\n  ------------------------------------------------------------\n    variable PercentCov : real ;\n  begin\n    if AtLeast > 0 then\n      return real(Count)*100.0/real(AtLeast) ;\n    elsif AtLeast = 0 then\n      return 100.0 ;\n    else\n      return real'right ;\n    end if ;\n  end function CalcPercentCov ;\n\n  -- ------------------------------------------------------------\n  function BinLengths (\n  -- package local, used by AddCross, GenCross\n  -- ------------------------------------------------------------\n    Bin1, Bin2, Bin3, Bin4, Bin5, Bin6, Bin7, Bin8, Bin9, Bin10, Bin11,\n    Bin12, Bin13, Bin14, Bin15, Bin16, Bin17, Bin18, Bin19, Bin20 : CovBinType := NULL_BIN\n ) return integer_vector is\n   variable result : integer_vector(1 to 20) := (others => 0 ) ;\n   variable i : integer := result'left ;\n   variable Len : integer ;\n  begin\n    loop\n      case i is\n        when  1 =>  Len := Bin1'length ;\n        when  2 =>  Len := Bin2'length ;\n        when  3 =>  Len := Bin3'length ;\n        when  4 =>  Len := Bin4'length ;\n        when  5 =>  Len := Bin5'length ;\n        when  6 =>  Len := Bin6'length ;\n        when  7 =>  Len := Bin7'length ;\n        when  8 =>  Len := Bin8'length ;\n        when  9 =>  Len := Bin9'length ;\n        when 10 =>  Len := Bin10'length ;\n        when 11 =>  Len := Bin11'length ;\n        when 12 =>  Len := Bin12'length ;\n        when 13 =>  Len := Bin13'length ;\n        when 14 =>  Len := Bin14'length ;\n        when 15 =>  Len := Bin15'length ;\n        when 16 =>  Len := Bin16'length ;\n        when 17 =>  Len := Bin17'length ;\n        when 18 =>  Len := Bin18'length ;\n        when 19 =>  Len := Bin19'length ;\n        when 20 =>  Len := Bin20'length ;\n        when others =>  Len := 0 ;\n      end case ;\n      result(i) := Len ;\n      exit when Len = 0 ;\n      i := i + 1 ;\n      exit when i = 21 ;\n    end loop ;\n    return result(1 to (i-1)) ;\n  end function BinLengths ;\n\n  -- ------------------------------------------------------------\n  function CalcNumCrossBins ( BinLens : integer_vector ) return integer is\n  -- package local, used by AddCross\n  -- ------------------------------------------------------------\n    variable result : integer := 1 ;\n  begin\n    for i in BinLens'range loop\n      result := result * BinLens(i) ;\n    end loop ;\n    return result ;\n  end function CalcNumCrossBins ;\n\n  -- ------------------------------------------------------------\n  procedure IncBinIndex (\n  -- package local, used by AddCross\n  -- ------------------------------------------------------------\n    variable BinIndex : inout integer_vector ;\n    constant BinLens  : in    integer_vector\n  ) is\n    alias aBinIndex : integer_vector(1 to BinIndex'length) is BinIndex ;\n    alias aBinLens  : integer_vector(aBinIndex'range) is BinLens ;\n  begin\n    -- increment right most one, then if overflow, increment next\n    -- assumes bins numbered from 1 to N.  - assured by ConcatenateBins\n    for i in aBinIndex'reverse_range loop\n      aBinIndex(i) := aBinIndex(i) + 1 ;\n      exit when aBinIndex(i) <= aBinLens(i) ;\n      aBinIndex(i) := 1 ;\n    end loop ;\n  end procedure IncBinIndex ;\n\n  -- ------------------------------------------------------------\n  function ConcatenateBins (\n  -- package local, used by AddCross and GenCross\n  -- ------------------------------------------------------------\n    BinIndex : integer_vector ;\n    Bin1, Bin2, Bin3, Bin4, Bin5, Bin6, Bin7, Bin8, Bin9, Bin10, Bin11,\n    Bin12, Bin13, Bin14, Bin15, Bin16, Bin17, Bin18, Bin19, Bin20 : CovBinType := NULL_BIN\n  ) return CovBinType is\n    alias aBin1  : CovBinType (1 to Bin1'length) is Bin1 ;\n    alias aBin2  : CovBinType (1 to Bin2'length) is Bin2 ;\n    alias aBin3  : CovBinType (1 to Bin3'length) is Bin3 ;\n    alias aBin4  : CovBinType (1 to Bin4'length) is Bin4 ;\n    alias aBin5  : CovBinType (1 to Bin5'length) is Bin5 ;\n    alias aBin6  : CovBinType (1 to Bin6'length) is Bin6 ;\n    alias aBin7  : CovBinType (1 to Bin7'length) is Bin7 ;\n    alias aBin8  : CovBinType (1 to Bin8'length) is Bin8 ;\n    alias aBin9  : CovBinType (1 to Bin9'length) is Bin9 ;\n    alias aBin10 : CovBinType (1 to Bin10'length) is Bin10 ;\n    alias aBin11 : CovBinType (1 to Bin11'length) is Bin11 ;\n    alias aBin12 : CovBinType (1 to Bin12'length) is Bin12 ;\n    alias aBin13 : CovBinType (1 to Bin13'length) is Bin13 ;\n    alias aBin14 : CovBinType (1 to Bin14'length) is Bin14 ;\n    alias aBin15 : CovBinType (1 to Bin15'length) is Bin15 ;\n    alias aBin16 : CovBinType (1 to Bin16'length) is Bin16 ;\n    alias aBin17 : CovBinType (1 to Bin17'length) is Bin17 ;\n    alias aBin18 : CovBinType (1 to Bin18'length) is Bin18 ;\n    alias aBin19 : CovBinType (1 to Bin19'length) is Bin19 ;\n    alias aBin20 : CovBinType (1 to Bin20'length) is Bin20 ;\n    alias aBinIndex : integer_vector(1 to BinIndex'length) is BinIndex ;\n    variable result : CovBinType(aBinIndex'range) ;\n  begin\n    for i in aBinIndex'range loop\n      case i is\n        when  1 =>  result(i) := aBin1(aBinIndex(i)) ;\n        when  2 =>  result(i) := aBin2(aBinIndex(i)) ;\n        when  3 =>  result(i) := aBin3(aBinIndex(i)) ;\n        when  4 =>  result(i) := aBin4(aBinIndex(i)) ;\n        when  5 =>  result(i) := aBin5(aBinIndex(i)) ;\n        when  6 =>  result(i) := aBin6(aBinIndex(i)) ;\n        when  7 =>  result(i) := aBin7(aBinIndex(i)) ;\n        when  8 =>  result(i) := aBin8(aBinIndex(i)) ;\n        when  9 =>  result(i) := aBin9(aBinIndex(i)) ;\n        when 10 =>  result(i) := aBin10(aBinIndex(i)) ;\n        when 11 =>  result(i) := aBin11(aBinIndex(i)) ;\n        when 12 =>  result(i) := aBin12(aBinIndex(i)) ;\n        when 13 =>  result(i) := aBin13(aBinIndex(i)) ;\n        when 14 =>  result(i) := aBin14(aBinIndex(i)) ;\n        when 15 =>  result(i) := aBin15(aBinIndex(i)) ;\n        when 16 =>  result(i) := aBin16(aBinIndex(i)) ;\n        when 17 =>  result(i) := aBin17(aBinIndex(i)) ;\n        when 18 =>  result(i) := aBin18(aBinIndex(i)) ;\n        when 19 =>  result(i) := aBin19(aBinIndex(i)) ;\n        when 20 =>  result(i) := aBin20(aBinIndex(i)) ;\n        when others =>\n          -- pure functions cannot use alert and/or print\n          report \"CoveragePkg.AddCross: More than 20 bins not supported\"\n            severity FAILURE ;\n      end case ;\n    end loop ;\n    return result ;\n  end function ConcatenateBins ;\n\n  ------------------------------------------------------------\n  function MergeState( CrossBins : CovBinType) return integer is\n  -- package local, Used by AddCross, GenCross\n  ------------------------------------------------------------\n    variable resultState : integer ;\n  begin\n    resultState := COV_COUNT ;\n    for i in CrossBins'range loop\n      if CrossBins(i).action = COV_ILLEGAL then\n        return COV_ILLEGAL ;\n      end if ;\n      if CrossBins(i).action = COV_IGNORE then\n        resultState := COV_IGNORE ;\n      end if ;\n    end loop ;\n    return resultState ;\n  end function MergeState ;\n\n  ------------------------------------------------------------\n  function MergeBinVal( CrossBins : CovBinType) return RangeArrayType is\n  -- package local, Used by AddCross, GenCross\n  ------------------------------------------------------------\n    alias aCrossBins : CovBinType(1 to CrossBins'length) is CrossBins ;\n    variable BinVal : RangeArrayType(aCrossBins'range) ;\n  begin\n    for i in aCrossBins'range loop\n      BinVal(i to i) := aCrossBins(i).BinVal ;\n    end loop ;\n    return BinVal ;\n  end function MergeBinVal ;\n\n  ------------------------------------------------------------\n  function MergeAtLeast(\n  -- package local, Used by AddCross, GenCross\n  ------------------------------------------------------------\n    Action    : in integer ;\n    AtLeast   : in integer ;\n    CrossBins : in CovBinType\n  ) return integer is\n    variable Result : integer := AtLeast ;\n  begin\n    if Action /= COV_COUNT then\n      return 0 ;\n    end if ;\n    for i in CrossBins'range loop\n      if CrossBins(i).Action = Action then\n        Result := maximum (Result, CrossBins(i).AtLeast) ;\n      end if ;\n    end loop ;\n    return result ;\n  end function MergeAtLeast ;\n\n  ------------------------------------------------------------\n  function MergeWeight(\n  -- package local, Used by AddCross, GenCross\n  ------------------------------------------------------------\n    Action    : in integer ;\n    Weight    : in integer ;\n    CrossBins : in CovBinType\n  ) return integer is\n    variable Result : integer := Weight ;\n  begin\n    if Action /= COV_COUNT then\n      return 0 ;\n    end if ;\n    for i in CrossBins'range loop\n      if CrossBins(i).Action = Action then\n        Result := maximum (Result, CrossBins(i).Weight) ;\n      end if ;\n    end loop ;\n    return result ;\n  end function MergeWeight ;\n\n  ------------------------------------------------------------  VendorCov\n  -- VendorCov Conversion for Vendor supported functional coverage modeling\n  function ToVendorCovBinVal (BinVal : RangeArrayType) return VendorCovRangeArrayType is\n  ------------------------------------------------------------\n    variable VendorCovBinVal :  VendorCovRangeArrayType(BinVal'range);\n  begin                                                        -- VendorCov\n    for ArrIdx in BinVal'LEFT to BinVal'RIGHT loop             -- VendorCov\n      VendorCovBinVal(ArrIdx) := (min => BinVal(ArrIdx).min,   -- VendorCov\n                                  max => BinVal(ArrIdx).max) ; -- VendorCov\n    end loop;                                                  -- VendorCov\n    return VendorCovBinVal ;\n  end function ToVendorCovBinVal ;\n\n  ------------------------------------------------------------\n  function ToMinPoint (A : RangeArrayType) return integer is\n  -- Used in testing\n  ------------------------------------------------------------\n  begin\n    return A(A'left).min ;\n  end function ToMinPoint ;\n\n  ------------------------------------------------------------\n  function ToMinPoint (A : RangeArrayType) return integer_vector is\n  -- Used in testing\n  ------------------------------------------------------------\n    variable result : integer_vector(A'range) ;\n  begin\n    for i in A'range loop\n      result(i) := A(i).min ;\n    end loop ;\n    return result ;\n  end function ToMinPoint ;\n\n  ------------------------------------------------------------\n  procedure ToRandPoint(\n  ------------------------------------------------------------\n    variable RV       : inout RandomPType ;\n    constant BinVal   : in    RangeArrayType ;\n    variable result   : out   integer\n  ) is\n  begin\n    result := RV.RandInt(BinVal(BinVal'left).min, BinVal(BinVal'left).max) ;\n  end procedure ToRandPoint ;\n\n  ------------------------------------------------------------\n  procedure ToRandPoint(\n  ------------------------------------------------------------\n    variable RV       : inout RandomPType ;\n    constant BinVal   : in    RangeArrayType ;\n    variable result   : out   integer_vector\n  ) is\n    variable VectorVal : integer_vector(BinVal'range) ;\n  begin\n    for i in BinVal'range loop\n      VectorVal(i) := RV.RandInt(BinVal(i).min, BinVal(i).max) ;\n    end loop ;\n    result := VectorVal ;\n  end procedure ToRandPoint ;\n\n  ------------------------------------------------------------\n  -- Local.  Get first word from a string\n  function GetWord (Message : string) return string is\n  ------------------------------------------------------------\n    alias aMessage : string( 1 to Message'length) is Message ;\n  begin\n    for i in aMessage'range loop\n      if aMessage(i) = ' ' or aMessage(i) = HT then\n        return aMessage(1 to i-1) ;\n      end if ;\n    end loop ;\n    return aMessage ;\n  end function GetWord ;\n\n  ------------------------------------------------------------------------------------------\n  --  XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX  CovPType  XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n  --  XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX  CovPType  XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n  --  XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX  CovPType  XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n  ------------------------------------------------------------------------------------------\n  type CovPType is protected body\n    constant COV_READ_YAML_ALERT_LEVEL : AlertType := ERROR ;\n\n    ------------------------------------------------------------\n    -- Global Settings for Coverage Modeling\n    -- Local WriteBin and WriteCovHoles formatting settings, defaults determined by CoverageGlobals\n    variable WritePassFailVar   : boolean := COVERAGE_WRITE_PASS_FAIL   ;\n    variable WriteBinInfoVar    : boolean := COVERAGE_WRITE_BIN_INFO    ;\n    variable WriteCountVar      : boolean := COVERAGE_WRITE_COUNT       ;\n    variable WriteAnyIllegalVar : boolean := COVERAGE_WRITE_ANY_ILLEGAL ;\n--!!    variable WritePrefixVar     : NamePType ;\n--!!    variable PassNameVar        : NamePType ;\n--!!    variable FailNameVar        : NamePType ;\n    variable ErrorIfNotCoveredVar           : boolean := FALSE ;\n--!!    variable CheckedForErrorIfNotCoveredVar : boolean := FALSE ;\n\n    file WriteBinFile : text ;\n    variable WriteBinFileInit : boolean := FALSE ;\n--!!    variable UsingLocalFile   : boolean := FALSE ;\n\n\n    ------------------------------------------------------------\n    -- /////////////////////////////////////////\n    -- CoverageBin Data Structures\n    -- /////////////////////////////////////////\n    type RangeArrayPtrType is access RangeArrayType ;\n\n    type CovBinInternalBaseType is record\n      BinVal        : RangeArrayPtrType ;\n      Action        : integer ;\n      Count         : integer ;\n      AtLeast       : integer ;\n      Weight        : integer ;\n      PercentCov    : real ;\n      Name          : line ;\n    end record CovBinInternalBaseType ;\n    type CovBinInternalType is array (natural range <>) of CovBinInternalBaseType ;\n    type CovBinPtrType is access CovBinInternalType ;\n\n    type FieldNameArrayType is array (natural range <>) of Line ;\n    type FieldNameArrayPtrType is access FieldNameArrayType ;\n\n    type IntegerVectorPtrType is access integer_vector ;\n\n    ------------------------------------------------------------\n    -- /////////////////////////////////////////\n    -- Coverage Information and Settings Structure\n    -- /////////////////////////////////////////\n    type CovStructType is record\n      --  Coverage Bin Structure\n      CovBinPtr          : CovBinPtrType ;\n      CovName            : line ;\n      NumBins            : integer ;\n      BinValLength       : integer ;\n      FieldName          : FieldNameArrayPtrType ;\n      CovWeight          : integer ; -- Set GetCov for entire model\n\n      TCoverCount        : integer ;\n      TCoverValuePtr     : IntegerVectorPtrType ;\n\n      CovMessage         : MessageStructPtrType ;\n      VendorCovHandle    : VendorCovHandleType ;\n\n      --  Statistics and History\n      ItemCount          : integer ;  -- Count of randomizations\n      LastIndex          : integer ;  -- Index of last Stimulus Gen or Coverage Collection\n      LastStimGenIndex   : integer ;  -- Index of last stimulus gen\n\n      -- Internal Modes and Settings\n      NextPointMode      : NextPointModeType ;\n      IllegalMode        : IllegalModeType ;\n      IllegalModeLevel   : AlertType ;\n      WeightMode         : WeightModeType ;\n      WeightScale        : real ;\n\n      ThresholdingEnable : boolean ; -- thresholding disabled by default\n      CovThreshold       : real ;\n      CovTarget          : real ;\n\n      MergingEnable      : boolean ; -- merging disabled by default\n      CountMode          : CountModeType ;\n\n      -- Randomization Variable\n      RV                 : RandomSeedType ;\n      RvSeedInit         : boolean ;\n\n      AlertLogID         : AlertLogIDType ;\n    end record CovStructType ;\n\n    variable COV_STRUCT_INIT : CovStructType :=\n      (\n        --  Coverage Bin Structure\n        CovBinPtr          =>  NULL,\n        CovName            =>  NULL,\n        NumBins            =>  0,\n        BinValLength       =>  1,\n        FieldName          =>  NULL,\n        CovWeight          =>  1,\n\n        TCoverCount        =>  0,\n        TCoverValuePtr     =>  NULL,\n\n        CovMessage         =>  NULL,\n        VendorCovHandle    =>  0,\n\n        --  Statistics and History\n        ItemCount          =>  0,   -- Count of randomizations\n        LastIndex          =>  1,   -- Index of last Stimulus Gen or Coverage Collection\n        LastStimGenIndex   =>  1,   -- Index of last stimulus gen\n\n        -- Internal Modes and Settings\n        NextPointMode      =>  RANDOM,\n        IllegalMode        =>  ILLEGAL_ON,\n        IllegalModeLevel   =>  ERROR,\n        WeightMode         =>  DEFAULT_WEIGHT_MODE,\n        WeightScale        =>  1.0,\n\n        ThresholdingEnable =>  FALSE, -- thresholding disabled by default\n        CovThreshold       =>  45.0,\n        CovTarget          =>  100.0,\n\n        MergingEnable      =>  FALSE, -- merging disabled by default\n        CountMode          =>  COUNT_FIRST,\n\n        -- Randomization Variable\n        RV                 =>  (1, 7),\n        RvSeedInit         =>  FALSE,\n\n        AlertLogID         =>  OSVVM_COVERAGE_ALERTLOG_ID\n      ) ;\n\n    ------------------------------------------------------------\n    -- /////////////////////////////////////////\n    -- Adjustable Array Data Structure and Creation\n    -- /////////////////////////////////////////\n    type     ItemArrayType    is array (integer range <>) of CovStructType ;\n    type     ItemArrayPtrType is access ItemArrayType ;\n\n    variable Template : ItemArrayType(1 to 1) := (1 => COV_STRUCT_INIT) ;\n\n    constant COV_STRUCT_ID_DEFAULT : CoverageIDType := (ID => Template'left) ;\n    variable CovStructPtr          : ItemArrayPtrType := new ItemArrayType'(Template) ;\n    variable NumItems              : integer := 0 ;\n--    constant MIN_NUM_ITEMS         : integer := 4 ; -- Temporarily small for testing\n    constant MIN_NUM_ITEMS         : integer := 32 ; -- Min amount to resize array\n    variable LocalNameStore        : NameStorePType ;\n\n    ------------------------------------------------------------\n    -- Package Local\n    function NormalizeArraySize( NewNumItems, MinNumItems : integer ) return integer is\n    ------------------------------------------------------------\n      variable NormNumItems : integer := NewNumItems ;\n      variable ModNumItems  : integer := 0;\n    begin\n      ModNumItems := NewNumItems mod MinNumItems ;\n      if ModNumItems > 0 then\n        NormNumItems := NormNumItems + (MinNumItems - ModNumItems) ;\n      end if ;\n      return NormNumItems ;\n    end function NormalizeArraySize ;\n\n    ------------------------------------------------------------\n    -- Package Local\n    procedure GrowNumberItems (\n    ------------------------------------------------------------\n      variable ItemArrayPtr     : InOut ItemArrayPtrType ;\n      variable NumItems         : InOut integer ;\n      constant GrowAmount       : in integer ;\n      constant MinNumItems      : in integer\n    ) is\n      variable oldItemArrayPtr  : ItemArrayPtrType ;\n      variable NewNumItems : integer ;\n    begin\n      NewNumItems := NumItems + GrowAmount ;\n      if ItemArrayPtr = NULL then\n        ItemArrayPtr := new ItemArrayType(1 to NormalizeArraySize(NewNumItems, MinNumItems)) ;\n      elsif NewNumItems > ItemArrayPtr'length then\n        oldItemArrayPtr := ItemArrayPtr ;\n        ItemArrayPtr := new ItemArrayType(1 to NormalizeArraySize(NewNumItems, MinNumItems)) ;\n        ItemArrayPtr(1 to NumItems) := ItemArrayType'(oldItemArrayPtr(1 to NumItems)) ;\n        deallocate(oldItemArrayPtr) ;\n      end if ;\n      NumItems := NewNumItems ;\n    end procedure GrowNumberItems ;\n\n    ------------------------------------------------------------\n    impure function NewID (\n    ------------------------------------------------------------\n      Name                : String ;\n      ParentID            : AlertLogIDType          := OSVVM_COVERAGE_ALERTLOG_ID ;\n      ReportMode          : AlertLogReportModeType  := ENABLED ;\n      Search              : NameSearchType          := PRIVATE_NAME ;\n      PrintParent         : AlertLogPrintParentType := PRINT_NAME_AND_PARENT\n    ) return CoverageIDType is\n      variable NewCoverageID       : CoverageIDType ;\n      variable NameID              : integer ;\n      variable ResolvedSearch      : NameSearchType ;\n      variable ResolvedPrintParent : AlertLogPrintParentType ;\n    begin\n      ResolvedSearch      := ResolveSearch     (ParentID /= OSVVM_COVERAGE_ALERTLOG_ID, Search) ;\n      ResolvedPrintParent := ResolvePrintParent(ParentID /= OSVVM_COVERAGE_ALERTLOG_ID, PrintParent) ;\n\n      NameID := LocalNameStore.find(Name, ParentID, ResolvedSearch) ;\n\n      if NameID /= ID_NOT_FOUND.ID then\n        NewCoverageID := (ID => NameID) ;\n        SetName(NewCoverageID, Name) ; -- redundant - refactor after diverge.  Needed if deallocate\n        return NewCoverageID ;\n      else\n        -- Add New Coverage Model to Structure\n        GrowNumberItems(CovStructPtr, NumItems, 1, MIN_NUM_ITEMS) ;\n        CovStructPtr(NumItems) := CovStructType'(COV_STRUCT_INIT) ;\n        NewCoverageID := (ID => NumItems) ;\n        -- Create AlertLogID\n        CovStructPtr(NumItems).AlertLogID := NewID(Name, ParentID, ReportMode, ResolvedPrintParent, CreateHierarchy => FALSE) ;\n        -- Add item to NameStore\n        NameID := LocalNameStore.NewID(Name, ParentID, ResolvedSearch) ;\n        AlertIfNotEqual(CovStructPtr(NumItems).AlertLogID, NameID, NumItems, \"CoveragePkg: Index of LocalNameStore /= CoverageID\") ;\n--         InitSeed( NewCoverageID, Name) ; -- Replaced in 2023.05\n        -- Ensure that name to generate the seed is unique by using ParentID \n        --   Note that ParentID must be unique for each VC (take care with for generate).  \n        --   Considered adding NewCoverageID.ID, but that will result in construction order dependencies\n        InitSeed( NewCoverageID, Name & string'(GetAlertLogName(ParentID))) ;   -- & to_string(NewCoverageID.ID) \n        SetName( NewCoverageID, Name) ; -- redundant - refactor after diverge\n        return NewCoverageID ;\n      end if ;\n    end function NewID ;\n\n    ------------------------------------------------------------\n    impure function GetNumIDs return integer is\n    ------------------------------------------------------------\n    begin\n      return NumItems ;\n    end function GetNumIDs ;\n\n    ------------------------------------------------------------\n    -- /////////////////////////////////////////\n    --  Coverage Global Settings Common to All Coverage Models\n    -- /////////////////////////////////////////\n    ------------------------------------------------------------\n    procedure FileOpenWriteBin (FileName : string; OpenKind : File_Open_Kind ) is\n    ------------------------------------------------------------\n    begin\n      WriteBinFileInit := TRUE ;\n      file_open( WriteBinFile , FileName , OpenKind );\n    end procedure FileOpenWriteBin ;\n\n    ------------------------------------------------------------\n    procedure FileCloseWriteBin is\n    ------------------------------------------------------------\n    begin\n      WriteBinFileInit := FALSE ;\n      file_close( WriteBinFile) ;\n    end procedure FileCloseWriteBin ;\n\n    ------------------------------------------------------------\n    -- PT Local for now as it uses an access type\n    procedure WriteToCovFile (variable buf : inout line) is\n    ------------------------------------------------------------\n    begin\n      if buf /= NULL then\n        if WriteBinFileInit then\n          -- Write to Local WriteBinFile - Deprecated, recommend use TranscriptFile instead\n          writeline(WriteBinFile, buf) ;\n        elsif IsTranscriptEnabled then\n          if IsTranscriptMirrored then\n            -- Write to TranscriptFile and OUTPUT\n            tee(TranscriptFile, buf) ;\n          else\n            -- Write to TranscriptFile\n            writeline(TranscriptFile, buf) ;\n          end if ;\n        else\n          -- Default Write to OUTPUT\n          writeline(OUTPUT, buf) ;\n        end if ;\n      end if ;\n    end procedure WriteToCovFile ;\n\n    ------------------------------------------------------------\n    procedure PrintToCovFile(S : string) is\n    ------------------------------------------------------------\n      variable buf : line ;\n    begin\n      write(buf, S) ;\n      WriteToCovFile(buf) ;\n    end procedure PrintToCovFile ;\n\n--      ------------------------------------------------------------\n--      procedure FileOpen (FileName : string; OpenKind : File_Open_Kind ) is\n--      ------------------------------------------------------------\n--      begin\n--        WriteCovDbFileInit := TRUE ;\n--        file_open( WriteCovDbFile , FileName , OpenKind );\n--      end procedure FileOpenWriteCovDb ;\n--\n--      ------------------------------------------------------------\n--      procedure FileCloseWriteCovDb is\n--      ------------------------------------------------------------\n--      begin\n--        WriteCovDbFileInit := FALSE ;\n--        file_close( WriteCovDbFile );\n--      end procedure FileCloseWriteCovDb ;\n\n    ------------------------------------------------------------\n    procedure SetReportOptions (\n    ------------------------------------------------------------\n      WritePassFail   : OsvvmOptionsType := COV_OPT_INIT_PARM_DETECT ;\n      WriteBinInfo    : OsvvmOptionsType := COV_OPT_INIT_PARM_DETECT ;\n      WriteCount      : OsvvmOptionsType := COV_OPT_INIT_PARM_DETECT ;\n      WriteAnyIllegal : OsvvmOptionsType := COV_OPT_INIT_PARM_DETECT ;\n      WritePrefix     : string := OSVVM_STRING_INIT_PARM_DETECT ;\n      PassName        : string := OSVVM_STRING_INIT_PARM_DETECT ;\n      FailName        : string := OSVVM_STRING_INIT_PARM_DETECT\n    ) is\n    begin\n      if WritePassFail /= COV_OPT_INIT_PARM_DETECT then\n        WritePassFailVar   := IsEnabled(WritePassFail) ;\n      end if ;\n      if WriteBinInfo /= COV_OPT_INIT_PARM_DETECT then\n        WriteBinInfoVar    := IsEnabled(WriteBinInfo) ;\n      end if ;\n      if WriteCount /= COV_OPT_INIT_PARM_DETECT then\n        WriteCountVar      := IsEnabled(WriteCount) ;\n      end if ;\n      if WriteAnyIllegal /= COV_OPT_INIT_PARM_DETECT then\n        WriteAnyIllegalVar := IsEnabled(WriteAnyIllegal) ;\n      end if ;\n      if WritePrefix /= OSVVM_STRING_INIT_PARM_DETECT then\n--!!        WritePrefixVar.Set(WritePrefix) ;\n        Alert(ALERTLOG_DEFAULT_ID, \"OsvvmSettingsPkg.COVERAGE_PRINT_PREFIX replaced SetReportOptions(WritePrefix)\", WARNING) ;  \n      end if ;\n      if PassName /= OSVVM_STRING_INIT_PARM_DETECT then\n--!!        PassNameVar.Set(PassName) ;\n        Alert(ALERTLOG_DEFAULT_ID, \"OsvvmSettingsPkg.COVERAGE_PASS_NAME replaced SetReportOptions(PassName)\", WARNING) ;  \n      end if ;\n      if FailName /= OSVVM_STRING_INIT_PARM_DETECT then\n--!!        FailNameVar.Set(FailName) ;\n        Alert(ALERTLOG_DEFAULT_ID, \"OsvvmSettingsPkg.COVERAGE_FAIL_NAME replaced SetReportOptions(FailName)\", WARNING) ;  \n      end if ;\n    end procedure SetReportOptions ;\n\n    ------------------------------------------------------------\n    procedure ResetReportOptions is\n    ------------------------------------------------------------\n    begin\n      -- Globals - for all coverage models\n      WritePassFailVar   := COVERAGE_WRITE_PASS_FAIL   ;\n      WriteBinInfoVar    := COVERAGE_WRITE_BIN_INFO    ;\n      WriteCountVar      := COVERAGE_WRITE_COUNT       ;\n      WriteAnyIllegalVar := COVERAGE_WRITE_ANY_ILLEGAL ;\n--!!      WritePrefixVar.deallocate ;\n--!!      PassNameVar.deallocate ;\n--!!      FailNameVar.deallocate ;\n    end procedure ResetReportOptions ;\n\n\n    ------------------------------------------------------------\n    -- /////////////////////////////////////////\n    --  Coverage Model Settings\n    -- /////////////////////////////////////////\n    ------------------------------------------------------------\n    impure function IsInitialized (ID : CoverageIDType) return boolean is\n    ------------------------------------------------------------\n    begin\n      return CovStructPtr(ID.ID).NumBins > 0 ;\n    end function IsInitialized ;\n\n    ------------------------------------------------------------\n    procedure InitSeed (ID : CoverageIDType; S : string;    UseNewSeedMethods : boolean := COVERAGE_USE_NEW_SEED_METHODS) is\n    ------------------------------------------------------------\n      variable ChurnSeed : integer ;\n    begin\n      if UseNewSeedMethods then\n        CovStructPtr(ID.ID).RV := GenRandSeed(S) ;\n        Uniform(CovStructPtr(ID.ID).RV, ChurnSeed, 0, 1) ;\n      else\n        CovStructPtr(ID.ID).RV := OldGenRandSeed(S) ;\n      end if ;\n      CovStructPtr(ID.ID).RvSeedInit := TRUE ;\n    end procedure InitSeed ;\n\n    ------------------------------------------------------------\n    impure function InitSeed (ID : CoverageIDType; S : string; UseNewSeedMethods : boolean := COVERAGE_USE_NEW_SEED_METHODS ) return string is\n    ------------------------------------------------------------\n    begin\n      InitSeed(ID, S, UseNewSeedMethods) ;\n      CovStructPtr(ID.ID).RvSeedInit := TRUE ;\n      return S ;\n    end function InitSeed ;\n\n    ------------------------------------------------------------\n    procedure InitSeed (ID : CoverageIDType; I : integer; UseNewSeedMethods : boolean := COVERAGE_USE_NEW_SEED_METHODS ) is\n    ------------------------------------------------------------\n      variable ChurnSeed : integer ;\n    begin\n      if UseNewSeedMethods then\n        CovStructPtr(ID.ID).RV := GenRandSeed(I) ;\n        Uniform(CovStructPtr(ID.ID).RV, ChurnSeed, 0, 1) ;\n      else\n        CovStructPtr(ID.ID).RV := OldGenRandSeed(I) ;\n      end if ;\n      CovStructPtr(ID.ID).RvSeedInit := TRUE ;\n    end procedure InitSeed ;\n\n    ------------------------------------------------------------\n    procedure SetSeed (ID : CoverageIDType; RandomSeedIn : RandomSeedType ) is\n    ------------------------------------------------------------\n    begin\n      CovStructPtr(ID.ID).RV         := RandomSeedIn ;\n      CovStructPtr(ID.ID).RvSeedInit := TRUE ;\n    end procedure SetSeed ;\n\n    ------------------------------------------------------------\n    impure function GetSeed (ID : CoverageIDType) return RandomSeedType is\n    ------------------------------------------------------------\n    begin\n      return CovStructPtr(ID.ID).RV ;\n    end function GetSeed ;\n\n    ------------------------------------------------------------\n    procedure SetName (ID : CoverageIDType; Name : String) is\n    ------------------------------------------------------------\n    begin\n      if CovStructPtr(ID.ID).CovName /= NULL then\n        deallocate (CovStructPtr(ID.ID).CovName) ;\n      end if;\n      CovStructPtr(ID.ID).CovName := new string'(Name) ;\n\n      -- Update if name updated after model created                      -- VendorCov\n      if IsInitialized(ID) then                                          -- VendorCov\n        VendorCovSetName(CovStructPtr(ID.ID).VendorCovHandle, Name) ;    -- VendorCov\n      end if ;                                                           -- VendorCov\n\n      -- Init seed if not already initialized\n      if not CovStructPtr(ID.ID).RvSeedInit then\n        InitSeed(ID, Name) ;\n        CovStructPtr(ID.ID).RvSeedInit := TRUE ;\n      end if ;\n    end procedure SetName ;\n\n    ------------------------------------------------------------\n    impure function SetName (ID : CoverageIDType; Name : String) return string is\n    ------------------------------------------------------------\n    begin\n      SetName(ID, Name) ; -- call procedure above\n      return Name ;\n    end function SetName ;\n\n    ------------------------------------------------------------\n    procedure DeallocateName (ID : CoverageIDType) is\n    ------------------------------------------------------------\n    begin\n      Deallocate (CovStructPtr(ID.ID).CovName) ;\n    end procedure DeallocateName ;\n\n    ------------------------------------------------------------\n    impure function GetName (ID : CoverageIDType) return String is\n    ------------------------------------------------------------\n    begin\n      if CovStructPtr(ID.ID).CovName /= NULL then\n        return CovStructPtr(ID.ID).CovName.all ;\n      else\n        return \"!!! CovName is NULL !!!\" ;\n      end if ;\n    end function GetName ;\n\n    ------------------------------------------------------------\n    impure function GetCovModelName (ID : CoverageIDType) return String is\n    ------------------------------------------------------------\n    begin\n      if CovStructPtr(ID.ID).CovName /= NULL then\n        -- return Name if set\n        return CovStructPtr(ID.ID).CovName.all ;\n      elsif CovStructPtr(ID.ID).AlertLogID /= OSVVM_COVERAGE_ALERTLOG_ID then\n        -- otherwise return AlertLogName if it is set\n        return GetAlertLogName(CovStructPtr(ID.ID).AlertLogID) ;\n      elsif CovStructPtr(ID.ID).CovMessage /= NULL then\n        -- otherwise Get the first word of the Message if it is set\n        return GetWord(CovStructPtr(ID.ID).CovMessage.Name.all) ;\n      else\n        return \"\" ;\n      end if ;\n    end function GetCovModelName ;\n\n    ------------------------------------------------------------\n    -- Called in calls to AlertLogID to add Name to if set different from AlertLogID name\n    impure function GetNamePlus(ID : CoverageIDType; prefix, suffix : string) return String is\n    ------------------------------------------------------------\n    begin\n      if CovStructPtr(ID.ID).CovName /= NULL and (CovStructPtr(ID.ID).CovName.all /= GetAlertLogName(CovStructPtr(ID.ID).AlertLogID)) then\n        -- return Name if set\n        return prefix & CovStructPtr(ID.ID).CovName.all & suffix ;\n      elsif CovStructPtr(ID.ID).AlertLogID = OSVVM_COVERAGE_ALERTLOG_ID and CovStructPtr(ID.ID).CovMessage /= NULL then\n        -- If AlertLogID not set, then use Message\n        return prefix & GetWord(CovStructPtr(ID.ID).CovMessage.Name.all) & suffix ;\n      else\n        return \"\" ;\n      end if ;\n    end function GetNamePlus ;\n\n    ------------------------------------------------------------\n    -- PT Local\n    impure function NewNamePtr(Name : string) return Line is\n    ------------------------------------------------------------\n    begin\n      if Name /= \"\" then\n        return new string'(Name) ;\n      else\n        return NULL ;\n      end if;\n    end function NewNamePtr ;\n\n--    ------------------------------------------------------------\n--    -- pt local\n--    procedure CheckBinValLength(ID : CoverageIDType; CurBinValLength : integer ; Caller : string ) is\n--    ------------------------------------------------------------\n--    begin\n--      if CovStructPtr(ID.ID).NumBins = 0 then\n--        CovStructPtr(ID.ID).BinValLength := CurBinValLength ; -- number of points in cross\n--      else\n--        AlertIfNotEqual(CovStructPtr(ID.ID).AlertLogID, CovStructPtr(ID.ID).BinValLength, CurBinValLength, GetNamePlus(ID, prefix => \"in \", suffix => \", \") & \"CoveragePkg.\" & Caller & \":\" &\n--        \" Cross coverage bins of different dimensions prohibited\", FAILURE) ;\n--      end if;\n--    end procedure CheckBinValLength ;\n\n    ------------------------------------------------------------\n    -- pt local\n    impure function BinValLengthNotEqual(CoverID : CoverageIDType; CurBinValLength : integer) return boolean is\n    ------------------------------------------------------------\n      constant ID : integer := CoverID.ID ;\n    begin\n      if CovStructPtr(ID).NumBins = 0 then\n        CovStructPtr(ID).BinValLength   := CurBinValLength ;\n        CovStructPtr(ID).TCoverValuePtr := new integer_vector(1 to CurBinValLength) ;\n        return FALSE ;\n      else\n        return CurBinValLength /= CovStructPtr(ID).BinValLength ;\n      end if;\n    end function BinValLengthNotEqual ;\n\n    ------------------------------------------------------------\n    procedure SetItemBinNames (\n    ------------------------------------------------------------\n      ID         : CoverageIDType ;\n      Name1      : String ;\n              Name2,  Name3,  Name4,  Name5,\n      Name6,  Name7,  Name8,  Name9,  Name10,\n      Name11, Name12, Name13, Name14, Name15,\n      Name16, Name17, Name18, Name19, Name20 : string := \"\"\n    ) is\n      variable NamePtr : Line ;\n      variable FieldNameArray : FieldNameArrayType(1 to 20) ;\n      variable Dimensions : integer := 0 ;\n    begin\n      -- Support names for up to a cross of 20\n      for i in 1 to 20 loop\n        if CovStructPtr(ID.ID).FieldName /= NULL then\n          for i in 1 to CovStructPtr(ID.ID).FieldName'length loop\n            deallocate (CovStructPtr(ID.ID).FieldName(i)) ;\n          end loop ;\n          deallocate (CovStructPtr(ID.ID).FieldName) ;\n        end if;\n        case i is\n          when  1 =>  NamePtr := NewNamePtr(Name1) ;\n          when  2 =>  NamePtr := NewNamePtr(Name2) ;\n          when  3 =>  NamePtr := NewNamePtr(Name3) ;\n          when  4 =>  NamePtr := NewNamePtr(Name4) ;\n          when  5 =>  NamePtr := NewNamePtr(Name5) ;\n          when  6 =>  NamePtr := NewNamePtr(Name6) ;\n          when  7 =>  NamePtr := NewNamePtr(Name7) ;\n          when  8 =>  NamePtr := NewNamePtr(Name8) ;\n          when  9 =>  NamePtr := NewNamePtr(Name9) ;\n          when 10 =>  NamePtr := NewNamePtr(Name10) ;\n          when 11 =>  NamePtr := NewNamePtr(Name11) ;\n          when 12 =>  NamePtr := NewNamePtr(Name12) ;\n          when 13 =>  NamePtr := NewNamePtr(Name13) ;\n          when 14 =>  NamePtr := NewNamePtr(Name14) ;\n          when 15 =>  NamePtr := NewNamePtr(Name15) ;\n          when 16 =>  NamePtr := NewNamePtr(Name16) ;\n          when 17 =>  NamePtr := NewNamePtr(Name17) ;\n          when 18 =>  NamePtr := NewNamePtr(Name18) ;\n          when 19 =>  NamePtr := NewNamePtr(Name19) ;\n          when 20 =>  NamePtr := NewNamePtr(Name20) ;\n        end case ;\n        exit when NamePtr = NULL ;\n        FieldNameArray(i) := NamePtr ;\n        Dimensions := i ;\n      end loop ;\n      CovStructPtr(ID.ID).FieldName := new FieldNameArrayType'(FieldNameArray(1 to Dimensions)) ;\n      -- Check that Dimensions match bin dimensions\n      if BinValLengthNotEqual(ID, Dimensions) then\n        Alert(CovStructPtr(ID.ID).AlertLogID, \"CoveragePkg.SetItemBinNames: Coverage bins of different dimensions prohibited\", FAILURE) ;\n      end if ;\n    end procedure SetItemBinNames ;\n\n    ------------------------------------------------------------\n    procedure SetMessage (ID : CoverageIDType; Message : String) is\n    ------------------------------------------------------------\n    begin\n      SetMessage(CovStructPtr(ID.ID).CovMessage, Message) ;\n      -- VendorCov update if name updated after model created\n      if IsInitialized(ID) then                                       -- VendorCov\n        -- Refine this?   If CovName or AlertLogID is set,            -- VendorCov\n        -- it may be set to the same name again.                      -- VendorCov\n        VendorCovSetName(CovStructPtr(ID.ID).VendorCovHandle, GetCovModelName(ID)) ;   -- VendorCov\n      end if ;                                                        -- VendorCov\n      if not CovStructPtr(ID.ID).RvSeedInit then  -- Init seed if not initialized\n        InitSeed(ID, Message) ;\n        CovStructPtr(ID.ID).RvSeedInit := TRUE ;\n      end if ;\n    end procedure SetMessage ;\n\n    ------------------------------------------------------------\n    procedure DeallocateMessage (ID : CoverageIDType) is\n    ------------------------------------------------------------\n    begin\n      DeallocateMessage(CovStructPtr(ID.ID).CovMessage) ;\n    end procedure DeallocateMessage ;\n\n    ------------------------------------------------------------\n    procedure SetThresholding (ID : CoverageIDType; A : boolean := TRUE ) is\n    ------------------------------------------------------------\n    begin\n      CovStructPtr(ID.ID).ThresholdingEnable := A ;\n    end procedure SetThresholding ;\n\n    ------------------------------------------------------------\n    procedure SetCovThreshold (ID : CoverageIDType; Percent : real) is\n    ------------------------------------------------------------\n    begin\n      CovStructPtr(ID.ID).ThresholdingEnable := TRUE ;\n      if Percent >= 0.0 then\n        CovStructPtr(ID.ID).CovThreshold := Percent + 0.0001 ; -- used in less than\n      else\n        CovStructPtr(ID.ID).CovThreshold := 0.0001 ; -- used in less than\n        Alert(CovStructPtr(ID.ID).AlertLogID, GetNamePlus(ID, prefix => \"in \", suffix => \", \") & \"CoveragePkg.SetCovThreshold:\" &\n                      \" Invalid Threshold Value \" & real'image(Percent), FAILURE) ;\n      end if ;\n    end procedure SetCovThreshold ;\n\n    ------------------------------------------------------------\n    procedure SetCovTarget (ID : CoverageIDType; Percent : real) is\n    ------------------------------------------------------------\n    begin\n      CovStructPtr(ID.ID).CovTarget := Percent ;\n    end procedure SetCovTarget ;\n\n    ------------------------------------------------------------\n    impure function GetCovTarget (ID : CoverageIDType) return real is\n    ------------------------------------------------------------\n    begin\n      return CovStructPtr(ID.ID).CovTarget ;\n    end function GetCovTarget ;\n\n    ------------------------------------------------------------\n    procedure SetMerging (ID : CoverageIDType; A : boolean := TRUE ) is\n    ------------------------------------------------------------\n    begin\n      CovStructPtr(ID.ID).MergingEnable := A ;\n    end procedure SetMerging ;\n\n    ------------------------------------------------------------\n    procedure SetCountMode (ID : CoverageIDType; A : CountModeType) is\n    ------------------------------------------------------------\n    begin\n      CovStructPtr(ID.ID).CountMode := A ;\n    end procedure SetCountMode ;\n\n    ------------------------------------------------------------\n    procedure SetAlertLogID (ID : CoverageIDType; A : AlertLogIDType) is\n    ------------------------------------------------------------\n    begin\n      CovStructPtr(ID.ID).AlertLogID := A ;\n    end procedure SetAlertLogID ;\n\n    ------------------------------------------------------------\n    procedure SetAlertLogID(ID : CoverageIDType; Name : string ; ParentID : AlertLogIDType := ALERTLOG_BASE_ID ; CreateHierarchy : Boolean := TRUE) is\n    ------------------------------------------------------------\n    begin\n      CovStructPtr(ID.ID).AlertLogID := GetAlertLogID(Name, ParentID, CreateHierarchy) ;\n      if not CovStructPtr(ID.ID).RvSeedInit then  -- Init seed if not initialized\n        InitSeed(ID, Name) ;\n        CovStructPtr(ID.ID).RvSeedInit := TRUE ;\n      end if ;\n    end procedure SetAlertLogID ;\n\n    ------------------------------------------------------------\n    impure function GetAlertLogID(ID : CoverageIDType) return AlertLogIDType is\n    ------------------------------------------------------------\n    begin\n      return CovStructPtr(ID.ID).AlertLogID ;\n    end function GetAlertLogID ;\n\n    ------------------------------------------------------------\n    procedure SetNextPointMode (ID : CoverageIDType; A : NextPointModeType) is\n    ------------------------------------------------------------\n    begin\n      CovStructPtr(ID.ID).NextPointMode := A ;\n    end procedure SetNextPointMode ;\n\n    ------------------------------------------------------------\n    procedure SetIllegalMode (ID : CoverageIDType; A : IllegalModeType) is\n    ------------------------------------------------------------\n    begin\n      CovStructPtr(ID.ID).IllegalMode := A ;\n      if A = ILLEGAL_FAILURE then\n        CovStructPtr(ID.ID).IllegalModeLevel := FAILURE ;\n      else\n        CovStructPtr(ID.ID).IllegalModeLevel := ERROR ;\n      end if ;\n    end procedure SetIllegalMode ;\n\n    ------------------------------------------------------------\n    procedure SetWeightMode (ID : CoverageIDType; WeightMode : WeightModeType;  WeightScale : real := 1.0) is\n    ------------------------------------------------------------\n      variable buf : line ;\n    begin\n      CovStructPtr(ID.ID).WeightMode := WeightMode ;\n      CovStructPtr(ID.ID).WeightScale := WeightScale ;\n\n      if (WeightMode = REMAIN_EXP) and (WeightScale > 2.0) then\n        Alert(CovStructPtr(ID.ID).AlertLogID, GetNamePlus(ID, prefix => \"in \", suffix => \", \") & \"CoveragePkg.SetWeightMode:\" &\n                      \" WeightScale > 2.0 and large Counts can cause RandCovPoint to fail due to integer values out of range\", WARNING) ;\n      end if ;\n      if (WeightScale < 1.0) and (WeightMode = REMAIN_WEIGHT or WeightMode = REMAIN_SCALED) then\n        Alert(CovStructPtr(ID.ID).AlertLogID, GetNamePlus(ID, prefix => \"in \", suffix => \", \") & \"CoveragePkg.SetWeightMode:\" &\n                      \" WeightScale must be > 1.0 when WeightMode = REMAIN_WEIGHT or WeightMode = REMAIN_SCALED\", FAILURE) ;\n        CovStructPtr(ID.ID).WeightScale := 1.0 ;\n      end if;\n      if WeightScale <= 0.0 then\n        Alert(CovStructPtr(ID.ID).AlertLogID, GetNamePlus(ID, prefix => \"in \", suffix => \", \") & \"CoveragePkg.SetWeightMode:\" &\n                      \" WeightScale must be > 0.0\", FAILURE) ;\n        CovStructPtr(ID.ID).WeightScale := 1.0 ;\n      end if;\n    end procedure SetWeightMode ;\n\n    ------------------------------------------------------------\n    procedure SetCovWeight (ID : CoverageIDType; Weight : integer) is\n    ------------------------------------------------------------\n    begin\n      CovStructPtr(ID.ID).CovWeight := Weight ;\n    end procedure SetCovWeight ;\n\n    ------------------------------------------------------------\n    impure function GetCovWeight (ID : CoverageIDType) return integer is\n    ------------------------------------------------------------\n    begin\n      return CovStructPtr(ID.ID).CovWeight ;\n    end function GetCovWeight ;\n\n    ------------------------------------------------------------\n    procedure SetBinSize (ID : CoverageIDType; NewNumBins : integer) is\n    -- Sets a CovBin to a particular size\n    -- Use for small bins to save space or large bins to\n    -- suppress the resize and copy as a CovBin autosizes.\n    ------------------------------------------------------------\n      variable oldCovBinPtr : CovBinPtrType ;\n    begin\n      if CovStructPtr(ID.ID).CovBinPtr = NULL then\n        CovStructPtr(ID.ID).CovBinPtr := new CovBinInternalType(1 to NewNumBins) ;\n      elsif NewNumBins > CovStructPtr(ID.ID).CovBinPtr'length then\n        -- make message bigger\n        oldCovBinPtr := CovStructPtr(ID.ID).CovBinPtr ;\n        CovStructPtr(ID.ID).CovBinPtr := new CovBinInternalType(1 to NewNumBins) ;\n        CovStructPtr(ID.ID).CovBinPtr.all(1 to CovStructPtr(ID.ID).NumBins) := oldCovBinPtr.all(1 to CovStructPtr(ID.ID).NumBins) ;\n        deallocate(oldCovBinPtr) ;\n      end if ;\n    end procedure SetBinSize ;\n\n    ------------------------------------------------------------\n    --  pt local\n    impure function NormalizeNumBins(ID : CoverageIDType; ReqNumBins : integer ) return integer is\n      variable NormNumBins : integer := MIN_NUM_BINS ;\n    begin\n      while NormNumBins < ReqNumBins loop\n        NormNumBins := NormNumBins + MIN_NUM_BINS ;\n      end loop ;\n      return NormNumBins ;\n    end function NormalizeNumBins ;\n\n    ------------------------------------------------------------\n    --  pt local\n    procedure GrowBins (ID : CoverageIDType; ReqNumBins : integer) is\n      variable oldCovBinPtr : CovBinPtrType ;\n      variable NewNumBins   : integer ;\n    begin\n      NewNumBins := CovStructPtr(ID.ID).NumBins + ReqNumBins ;\n      if CovStructPtr(ID.ID).CovBinPtr = NULL then\n        CovStructPtr(ID.ID).CovBinPtr := new CovBinInternalType(1 to NormalizeNumBins(ID, NewNumBins)) ;\n      elsif NewNumBins > CovStructPtr(ID.ID).CovBinPtr'length then\n        -- make message bigger\n        oldCovBinPtr := CovStructPtr(ID.ID).CovBinPtr ;\n        CovStructPtr(ID.ID).CovBinPtr := new CovBinInternalType(1 to NormalizeNumBins(ID, NewNumBins)) ;\n        CovStructPtr(ID.ID).CovBinPtr.all(1 to CovStructPtr(ID.ID).NumBins) := oldCovBinPtr.all(1 to CovStructPtr(ID.ID).NumBins) ;\n        deallocate(oldCovBinPtr) ;\n      end if ;\n    end procedure GrowBins ;\n\n    ------------------------------------------------------------\n    --  pt local, called by InsertBin\n    -- Finds index of bin if it is inside an existing bins\n    procedure FindBinInside(\n      ID           : CoverageIDType ;\n      BinVal       : RangeArrayType ;\n      Position     : out integer ;\n      FoundInside  : out boolean\n    ) is\n    begin\n      Position     := CovStructPtr(ID.ID).NumBins + 1 ;\n      FoundInside  := FALSE ;\n      FindLoop : for i in CovStructPtr(ID.ID).NumBins downto 1 loop\n        -- skip this CovBin if CovPoint is not in it\n        next FindLoop when not inside(BinVal, CovStructPtr(ID.ID).CovBinPtr(i).BinVal.all) ;\n        Position := i ;\n        FoundInside := TRUE ;\n        exit ;\n      end loop ;\n    end procedure FindBinInside ;\n\n    ------------------------------------------------------------\n    --  pt local\n    -- Inserts values into a new bin.\n    -- Called by InsertBin\n    procedure InsertNewBin(\n      ID           : CoverageIDType ;\n      BinVal       : RangeArrayType ;\n      Action       : integer ;\n      Count        : integer ;\n      AtLeast      : integer ;\n      Weight       : integer ;\n      Name         : string ;\n      PercentCov   : real\n    ) is\n    begin\n      if (not IsInitialized(ID)) then                                                              -- VendorCov\n        if (BinVal'length > 1) then  -- Cross Bin                                              -- VendorCov\n          CovStructPtr(ID.ID).VendorCovHandle := VendorCovCrossCreate(GetCovModelName(ID)) ;                            -- VendorCov\n        else                                                                                   -- VendorCov\n          CovStructPtr(ID.ID).VendorCovHandle := VendorCovPointCreate(GetCovModelName(ID));                             -- VendorCov\n      	end if;                                                                                -- VendorCov\n      end if;                                                                                  -- VendorCov\n      VendorCovBinAdd(CovStructPtr(ID.ID).VendorCovHandle, ToVendorCovBinVal(BinVal), Action, AtLeast, Name) ;  -- VendorCov\n      CovStructPtr(ID.ID).NumBins := CovStructPtr(ID.ID).NumBins + 1 ;\n      CovStructPtr(ID.ID).CovBinPtr.all(CovStructPtr(ID.ID).NumBins).BinVal      := new RangeArrayType'(BinVal) ;\n      CovStructPtr(ID.ID).CovBinPtr.all(CovStructPtr(ID.ID).NumBins).Action      := Action ;\n      CovStructPtr(ID.ID).CovBinPtr.all(CovStructPtr(ID.ID).NumBins).Count       := Count ;\n      CovStructPtr(ID.ID).CovBinPtr.all(CovStructPtr(ID.ID).NumBins).AtLeast     := AtLeast ;\n      CovStructPtr(ID.ID).CovBinPtr.all(CovStructPtr(ID.ID).NumBins).Weight      := Weight ;\n      CovStructPtr(ID.ID).CovBinPtr.all(CovStructPtr(ID.ID).NumBins).Name        := new String'(Name) ;\n      CovStructPtr(ID.ID).CovBinPtr.all(CovStructPtr(ID.ID).NumBins).PercentCov  := PercentCov ;\n    end procedure InsertNewBin ;\n\n    ------------------------------------------------------------\n    --  pt local\n    -- Inserts values into a new bin.\n    -- Called by InsertBin\n    procedure MergeBin (\n      ID           : CoverageIDType ;\n      Position     : Natural ;\n      Count        : integer ;\n      AtLeast      : integer ;\n      Weight       : integer\n    ) is\n    begin\n      CovStructPtr(ID.ID).CovBinPtr.all(Position).Count   := CovStructPtr(ID.ID).CovBinPtr.all(Position).Count + Count ;\n      CovStructPtr(ID.ID).CovBinPtr.all(Position).AtLeast := CovStructPtr(ID.ID).CovBinPtr.all(Position).AtLeast + AtLeast ;\n      CovStructPtr(ID.ID).CovBinPtr.all(Position).Weight  := CovStructPtr(ID.ID).CovBinPtr.all(Position).Weight + Weight ;\n      CovStructPtr(ID.ID).CovBinPtr.all(Position).PercentCov := CalcPercentCov(\n        Count => CovStructPtr(ID.ID).CovBinPtr.all(Position).Count,\n        AtLeast =>  CovStructPtr(ID.ID).CovBinPtr.all(Position).AtLeast ) ;\n    end procedure MergeBin ;\n\n    ------------------------------------------------------------\n    --  pt local\n    -- All insertion comes here\n    -- Enforces the general insertion use model:\n    --   Earlier bins supercede later bins - except with COUNT_ALL\n    --   Add Illegal and Ignore bins first to remove regions of larger count bins\n    --   Later ignore bins can be used to miss an illegal catch-all\n    --   Add Illegal bins last as a catch-all to find things that missed other bins\n    procedure InsertBin(\n      ID           : CoverageIDType ;\n      BinVal       : RangeArrayType ;\n      Action       : integer ;\n      Count        : integer ;\n      AtLeast      : integer ;\n      Weight       : integer ;\n      Name         : string\n    ) is\n      variable Position    : integer ;\n      variable FoundInside : boolean ;\n      variable PercentCov  : real ;\n    begin\n      PercentCov := CalcPercentCov(Count => Count,  AtLeast =>  AtLeast) ;\n\n      if not CovStructPtr(ID.ID).MergingEnable then\n        InsertNewBin(ID, BinVal, Action, Count, AtLeast, Weight, Name, PercentCov) ;\n\n      else -- handle merging\n-- future optimization, FindBinInside only checks against Ignore and Illegal bins\n        FindBinInside(ID, BinVal, Position, FoundInside) ;\n\n        if not FoundInside then\n          InsertNewBin(ID, BinVal, Action, Count, AtLeast, Weight, Name, PercentCov) ;\n\n        elsif Action = COV_COUNT then\n-- when check only ignore and illegal bins, only action is to drop\n          if CovStructPtr(ID.ID).CovBinPtr.all(Position).Action /= COV_COUNT then\n            null ; -- drop count bin when it is inside a Illegal or Ignore bin\n\n          elsif CovStructPtr(ID.ID).CovBinPtr.all(Position).BinVal.all = BinVal and CovStructPtr(ID.ID).CovBinPtr.all(Position).Name.all = Name then\n            -- Bins match, so merge the count values\n            MergeBin (ID, Position, Count, AtLeast, Weight) ;\n          else\n            -- Bins overlap, but do not match, insert new bin\n            InsertNewBin(ID, BinVal, Action, Count, AtLeast, Weight, Name, PercentCov) ;\n          end if;\n\n        elsif Action = COV_IGNORE then\n-- when check only ignore and illegal bins, only action is to log\n          if CovStructPtr(ID.ID).CovBinPtr.all(Position).Action = COV_COUNT then\n            InsertNewBin(ID, BinVal, Action, Count, AtLeast, Weight, Name, PercentCov) ;\n          else\n            -- Drop the ignore bin it is redundant\n            log(CovStructPtr(ID.ID).AlertLogID, GetNamePlus(ID, prefix => \"in \", suffix => \", \") & \"CoveragePkg.InsertBin (AddBins/AddCross):\" &\n                          \" ignore bin \" & to_string(BinVal) & \" dropped.  It is a subset of prior bin\", DEBUG) ;\n          end if;\n\n        elsif Action = COV_ILLEGAL then\n-- when check only ignore and illegal bins, only action is to log \n          if CovStructPtr(ID.ID).CovBinPtr.all(Position).Action = COV_COUNT then\n            InsertNewBin(ID, BinVal, Action, Count, AtLeast, Weight, Name, PercentCov) ;\n          else\n            -- Drop the illegal bin it is redundant\n            log(CovStructPtr(ID.ID).AlertLogID, GetNamePlus(ID, prefix => \"in \", suffix => \", \") & \"CoveragePkg.InsertBin (AddBins/AddCross):\" &\n                          \" illegal bin \" & to_string(BinVal) & \" dropped.  It is a subset of prior bin\", DEBUG) ;\n          end if;\n        end if ;\n      end if ; -- merging enabled\n    end procedure InsertBin ;\n\n    ------------------------------------------------------------\n    procedure AddBins (\n    ------------------------------------------------------------\n      ID      : CoverageIDType ;\n      Name    : String ;\n      AtLeast : integer ;\n      Weight  : integer ;\n      CovBin  : CovBinType\n    ) is\n      variable vCalcAtLeast : integer ;\n      variable vCalcWeight  : integer ;\n    begin\n      if BinValLengthNotEqual(ID, 1) then\n        Alert(CovStructPtr(ID.ID).AlertLogID, \"CoveragePkg.AddBins: Coverage bins of different dimensions prohibited\", FAILURE) ;\n        return ;\n      end if ;\n\n      GrowBins(ID, CovBin'length) ;\n      for i in CovBin'range loop\n        if CovBin(i).Action = COV_COUNT then\n          vCalcAtLeast := maximum(AtLeast, CovBin(i).AtLeast) ;\n          vCalcWeight  := maximum(Weight, CovBin(i).Weight) ;\n        else\n          vCalcAtLeast := 0 ;\n          vCalcWeight  := 0 ;\n        end if ;\n        InsertBin(\n          ID       => ID,\n          BinVal   => CovBin(i).BinVal,\n          Action   => CovBin(i).Action,\n          Count    => CovBin(i).Count,\n          AtLeast  => vCalcAtLeast,\n          Weight   => vCalcWeight,\n          Name     => Name\n        ) ;\n      end loop ;\n    end procedure AddBins ;\n\n    ------------------------------------------------------------\n    procedure AddBins (ID : CoverageIDType; Name : String ; AtLeast : integer ; CovBin : CovBinType ) is\n    ------------------------------------------------------------\n    begin\n      AddBins(ID, Name, AtLeast, 1, CovBin) ;\n    end procedure AddBins ;\n\n    ------------------------------------------------------------\n    procedure AddBins (ID : CoverageIDType; Name : String ;  CovBin : CovBinType) is\n    ------------------------------------------------------------\n    begin\n      AddBins(ID, Name, 1, 1, CovBin) ;\n    end procedure AddBins ;\n\n    ------------------------------------------------------------\n    procedure AddBins (ID : CoverageIDType; AtLeast : integer ; Weight  : integer ; CovBin : CovBinType ) is\n    ------------------------------------------------------------\n    begin\n      AddBins(ID, \"\", AtLeast, Weight, CovBin) ;\n    end procedure AddBins ;\n\n    ------------------------------------------------------------\n    procedure AddBins (ID : CoverageIDType; AtLeast : integer ; CovBin : CovBinType ) is\n    ------------------------------------------------------------\n    begin\n      AddBins(ID, \"\", AtLeast, 1, CovBin) ;\n    end procedure AddBins ;\n\n    ------------------------------------------------------------\n    procedure AddBins (ID : CoverageIDType; CovBin : CovBinType  ) is\n    ------------------------------------------------------------\n    begin\n      AddBins(ID, \"\", 1, 1, CovBin) ;\n    end procedure AddBins ;\n\n    ------------------------------------------------------------\n    procedure AddCross(\n    ------------------------------------------------------------\n      ID         : CoverageIDType ;\n      Name       : string ;\n      AtLeast    : integer ;\n      Weight     : integer ;\n      Bin1, Bin2 : CovBinType ;\n      Bin3, Bin4, Bin5, Bin6, Bin7, Bin8, Bin9, Bin10, Bin11, Bin12, Bin13,\n      Bin14, Bin15, Bin16, Bin17, Bin18, Bin19, Bin20 : CovBinType := NULL_BIN\n    ) is\n      constant BIN_LENS : integer_vector :=\n          BinLengths(\n             Bin1, Bin2, Bin3, Bin4, Bin5, Bin6, Bin7, Bin8, Bin9, Bin10, Bin11,\n             Bin12, Bin13, Bin14, Bin15, Bin16, Bin17, Bin18, Bin19, Bin20\n           ) ;\n      constant NUM_NEW_BINS : integer := CalcNumCrossBins(BIN_LENS) ;\n      variable BinIndex     : integer_vector(1 to BIN_LENS'length) := (others => 1) ;\n      variable CrossBins    : CovBinType(BinIndex'range) ;\n      variable vCalcAction, vCalcCount, vCalcAtLeast, vCalcWeight : integer ;\n      variable vCalcBinVal   : RangeArrayType(BinIndex'range) ;\n    begin\n      if BinValLengthNotEqual(ID, BIN_LENS'length) then\n        Alert(CovStructPtr(ID.ID).AlertLogID, \"CoveragePkg.AddCross: Cross coverage bins of different dimensions prohibited\", FAILURE) ;\n        return ;\n      end if ;\n\n      GrowBins(ID, NUM_NEW_BINS) ;\n      vCalcCount := 0 ;\n      for MatrixIndex in 1 to NUM_NEW_BINS loop\n        CrossBins := ConcatenateBins(BinIndex,\n             Bin1, Bin2, Bin3, Bin4, Bin5, Bin6, Bin7, Bin8, Bin9, Bin10, Bin11,\n             Bin12, Bin13, Bin14, Bin15, Bin16, Bin17, Bin18, Bin19, Bin20\n           ) ;\n        vCalcAction   := MergeState (CrossBins) ;\n        vCalcBinVal   := MergeBinVal(CrossBins) ;\n        vCalcAtLeast  := MergeAtLeast( vCalcAction, AtLeast, CrossBins) ;\n        vCalcWeight   := MergeWeight ( vCalcAction, Weight,  CrossBins) ;\n        InsertBin(ID, vCalcBinVal, vCalcAction, vCalcCount, vCalcAtLeast, vCalcWeight, Name) ;\n        IncBinIndex( BinIndex, BIN_LENS) ; -- increment right most one, then if overflow, increment next\n      end loop ;\n    end procedure AddCross ;\n\n    ------------------------------------------------------------\n    procedure AddCross(\n    ------------------------------------------------------------\n      ID         : CoverageIDType ;\n      Name       : string ;\n      AtLeast    : integer ;\n      Bin1, Bin2 : CovBinType ;\n      Bin3, Bin4, Bin5, Bin6, Bin7, Bin8, Bin9, Bin10, Bin11, Bin12, Bin13,\n      Bin14, Bin15, Bin16, Bin17, Bin18, Bin19, Bin20 : CovBinType := NULL_BIN\n    ) is\n    begin\n      AddCross(ID, Name, AtLeast, 1,\n           Bin1, Bin2, Bin3, Bin4, Bin5, Bin6, Bin7, Bin8, Bin9, Bin10, Bin11,\n           Bin12, Bin13, Bin14, Bin15, Bin16, Bin17, Bin18, Bin19, Bin20\n        ) ;\n    end procedure AddCross ;\n\n    ------------------------------------------------------------\n    procedure AddCross(\n    ------------------------------------------------------------\n      ID         : CoverageIDType ;\n      Name       : string ;\n      Bin1, Bin2 : CovBinType ;\n      Bin3, Bin4, Bin5, Bin6, Bin7, Bin8, Bin9, Bin10, Bin11, Bin12, Bin13,\n      Bin14, Bin15, Bin16, Bin17, Bin18, Bin19, Bin20 : CovBinType := NULL_BIN\n    ) is\n    begin\n      AddCross(ID, Name, 1, 1,\n           Bin1, Bin2, Bin3, Bin4, Bin5, Bin6, Bin7, Bin8, Bin9, Bin10, Bin11,\n           Bin12, Bin13, Bin14, Bin15, Bin16, Bin17, Bin18, Bin19, Bin20\n        ) ;\n    end procedure AddCross ;\n\n    ------------------------------------------------------------\n    procedure AddCross(\n    ------------------------------------------------------------\n      ID         : CoverageIDType ;\n      AtLeast    : integer ;\n      Weight     : integer ;\n      Bin1, Bin2 : CovBinType ;\n      Bin3, Bin4, Bin5, Bin6, Bin7, Bin8, Bin9, Bin10, Bin11, Bin12, Bin13,\n      Bin14, Bin15, Bin16, Bin17, Bin18, Bin19, Bin20 : CovBinType := NULL_BIN\n    ) is\n    begin\n      AddCross(ID, \"\", AtLeast, Weight,\n           Bin1, Bin2, Bin3, Bin4, Bin5, Bin6, Bin7, Bin8, Bin9, Bin10, Bin11,\n           Bin12, Bin13, Bin14, Bin15, Bin16, Bin17, Bin18, Bin19, Bin20\n        ) ;\n    end procedure AddCross ;\n\n    ------------------------------------------------------------\n    procedure AddCross(\n    ------------------------------------------------------------\n      ID         : CoverageIDType ;\n      AtLeast    : integer ;\n      Bin1, Bin2 : CovBinType ;\n      Bin3, Bin4, Bin5, Bin6, Bin7, Bin8, Bin9, Bin10, Bin11, Bin12, Bin13,\n      Bin14, Bin15, Bin16, Bin17, Bin18, Bin19, Bin20 : CovBinType := NULL_BIN\n    ) is\n    begin\n      AddCross(ID, \"\", AtLeast, 1,\n           Bin1, Bin2, Bin3, Bin4, Bin5, Bin6, Bin7, Bin8, Bin9, Bin10, Bin11,\n           Bin12, Bin13, Bin14, Bin15, Bin16, Bin17, Bin18, Bin19, Bin20\n        ) ;\n    end procedure AddCross ;\n\n    ------------------------------------------------------------\n    procedure AddCross(\n    ------------------------------------------------------------\n      ID         : CoverageIDType ;\n      Bin1, Bin2 : CovBinType ;\n      Bin3, Bin4, Bin5, Bin6, Bin7, Bin8, Bin9, Bin10, Bin11, Bin12, Bin13,\n      Bin14, Bin15, Bin16, Bin17, Bin18, Bin19, Bin20 : CovBinType := NULL_BIN\n    ) is\n    begin\n      AddCross(ID, \"\", 1, 1,\n           Bin1, Bin2, Bin3, Bin4, Bin5, Bin6, Bin7, Bin8, Bin9, Bin10, Bin11,\n           Bin12, Bin13, Bin14, Bin15, Bin16, Bin17, Bin18, Bin19, Bin20\n        ) ;\n    end procedure AddCross ;\n\n    ------------------------------------------------------------\n    procedure DeallocateBins(CoverID : CoverageIDType) is\n    ------------------------------------------------------------\n      constant Index   : integer := CoverID.ID ;\n    begin\n      -- Local for a particular CoverageModel\n      if CovStructPtr(Index).CovBinPtr /= NULL then\n        for i in 1 to CovStructPtr(Index).NumBins loop\n          deallocate(CovStructPtr(Index).CovBinPtr(i).BinVal) ;\n          deallocate(CovStructPtr(Index).CovBinPtr(i).Name) ;\n        end loop ;\n        deallocate(CovStructPtr(Index).CovBinPtr) ;\n      end if ;\n      CovStructPtr(Index).NumBins := 0 ;\n    end procedure DeallocateBins ;\n\n    ------------------------------------------------------------\n    procedure Deallocate(ID : CoverageIDType) is\n    ------------------------------------------------------------\n      constant Index   : integer := ID.ID ;\n    begin\n--!!?? These are only done when removing all coverage models.\n--      -- Globals - for all coverage models\n--      WritePassFailVar   := COV_OPT_INIT_PARM_DETECT ;\n--      WriteBinInfoVar    := COV_OPT_INIT_PARM_DETECT ;\n--      WriteCountVar      := COV_OPT_INIT_PARM_DETECT ;\n--      WriteAnyIllegalVar := COV_OPT_INIT_PARM_DETECT ;\n--      WritePrefixVar.deallocate ;\n--      PassNameVar.deallocate ;\n--      FailNameVar.deallocate ;\n      DeallocateBins(ID) ;\n      DeallocateName(ID) ;\n      DeallocateMessage(ID) ;\n      -- Restore internal variables to their default values\n--      CovStructPtr(Index) := COV_STRUCT_INIT ;\n\n      CovStructPtr(Index).BinValLength       := 1 ;\n      CovStructPtr(Index).VendorCovHandle    := 0 ;\n      CovStructPtr(Index).ItemCount          := 0 ;\n      CovStructPtr(Index).LastIndex          := 1 ;\n      CovStructPtr(Index).LastStimGenIndex   := 1 ;\n\n      -- Changing these is beyond what deallocate should do.\n      CovStructPtr(Index).NextPointMode      := RANDOM ;\n      CovStructPtr(Index).IllegalMode        := ILLEGAL_ON ;\n      CovStructPtr(Index).IllegalModeLevel   := ERROR ;\n      CovStructPtr(Index).WeightMode         := DEFAULT_WEIGHT_MODE ;\n      CovStructPtr(Index).WeightScale        := 1.0 ;\n      CovStructPtr(Index).ThresholdingEnable := FALSE ;\n      CovStructPtr(Index).CovThreshold       := 45.0 ;\n      CovStructPtr(Index).CovTarget          := 100.0 ;\n      CovStructPtr(Index).MergingEnable      := FALSE ;\n      CovStructPtr(Index).CountMode          := COUNT_FIRST ;\n--      CovStructPtr(Index).RV                 := (1, 7) ;\n--      CovStructPtr(Index).RvSeedInit         := FALSE ;\n--      CovStructPtr(Index).AlertLogID         := OSVVM_COVERAGE_ALERTLOG_ID ;\n\n    end procedure deallocate ;\n\n    ------------------------------------------------------------\n    -- Local\n    procedure ICoverIndex(ID : CoverageIDType; Index : integer ; CovPoint : integer_vector ) is\n    ------------------------------------------------------------\n      variable buf : line ;\n    begin\n      -- Update Count, PercentCov\n      CovStructPtr(ID.ID).CovBinPtr(Index).Count := CovStructPtr(ID.ID).CovBinPtr(Index).Count + CovStructPtr(ID.ID).CovBinPtr(Index).action ;\n      VendorCovBinInc(CovStructPtr(ID.ID).VendorCovHandle, Index);   -- VendorCov\n      CovStructPtr(ID.ID).CovBinPtr(Index).PercentCov := CalcPercentCov(\n          Count => CovStructPtr(ID.ID).CovBinPtr.all(Index).Count,\n          AtLeast =>  CovStructPtr(ID.ID).CovBinPtr.all(Index).AtLeast\n        ) ;\n      if CovStructPtr(ID.ID).CovBinPtr(Index).action = COV_ILLEGAL then\n        if CovStructPtr(ID.ID).IllegalMode /= ILLEGAL_OFF then\n--          if CovPoint = NULL_INTV then\n          if CovPoint'length = 0 then\n            alert(CovStructPtr(ID.ID).AlertLogID, GetNamePlus(ID, prefix => \"in \", suffix => \", \") & \"CoveragePkg.ICoverLast:\" &\n                          \" Value randomized is in an illegal bin.\", CovStructPtr(ID.ID).IllegalModeLevel) ;\n          else\n            write(buf, CovPoint) ;\n            alert(CovStructPtr(ID.ID).AlertLogID, GetNamePlus(ID, prefix => \"in \", suffix => \", \") & \"CoveragePkg.ICover:\" &\n                          \" Value \" & buf.all & \" is in an illegal bin.\", CovStructPtr(ID.ID).IllegalModeLevel) ;\n            deallocate(buf) ;\n          end if ;\n        else\n          IncAlertCount(CovStructPtr(ID.ID).AlertLogID, ERROR) ; -- silent alert.\n        end if ;\n      end if ;\n    end procedure ICoverIndex ;\n\n    ------------------------------------------------------------\n    procedure ICoverLast (ID : CoverageIDType) is\n    ------------------------------------------------------------\n    begin\n     ICoverIndex(ID, CovStructPtr(ID.ID).LastStimGenIndex, NULL_INTV) ;\n    end procedure ICoverLast ;\n\n    ------------------------------------------------------------\n    procedure ICover(ID : CoverageIDType; CovPoint : integer_vector) is\n    ------------------------------------------------------------\n    begin\n      if CovPoint'length /= CovStructPtr(ID.ID).BinValLength then\n        Alert(CovStructPtr(ID.ID).AlertLogID, GetNamePlus(ID, prefix => \"in \", suffix => \", \") & \"CoveragePkg.\" &\n        \" ICover: CovPoint length = \" & to_string(CovPoint'length) &\n        \"  does not match Coverage Bin dimensions = \" & to_string(CovStructPtr(ID.ID).BinValLength), FAILURE) ;\n      -- Search CovStructPtr(ID.ID).LastStimGenIndex first.  Important it is not CovStructPtr(ID.ID).LastIndex seen by ICover below.\n      -- If find an object in a sentinal bin - only looks in sentinal bin after that point\n      elsif CovStructPtr(ID.ID).CountMode = COUNT_FIRST and inside(CovPoint, CovStructPtr(ID.ID).CovBinPtr(CovStructPtr(ID.ID).LastStimGenIndex).BinVal.all) then\n        ICoverIndex(ID, CovStructPtr(ID.ID).LastStimGenIndex, CovPoint) ;\n      else\n        CovLoop : for i in 1 to CovStructPtr(ID.ID).NumBins loop\n          -- skip this CovBin if CovPoint is not in it\n          next CovLoop when not inside(CovPoint, CovStructPtr(ID.ID).CovBinPtr(i).BinVal.all) ;\n          -- Mark Covered\n          CovStructPtr(ID.ID).LastIndex := i ; -- Mark found index\n          ICoverIndex(ID, i, CovPoint) ;\n          exit CovLoop when CovStructPtr(ID.ID).CountMode = COUNT_FIRST ;   -- only find first one\n        end loop CovLoop ;\n      end if ;\n     end procedure ICover ;\n\n    ------------------------------------------------------------\n    procedure ICover (ID : CoverageIDType; CovPoint : integer) is\n    ------------------------------------------------------------\n    begin\n     ICover(ID, (1=> CovPoint)) ;\n    end procedure ICover ;\n\n    ------------------------------------------------------------\n    procedure TCover (ID : CoverageIDType; A : integer) is\n    ------------------------------------------------------------\n      constant CoverID : integer := ID.ID ;\n    begin\n      CovStructPtr(CoverID).TCoverCount        := CovStructPtr(CoverID).TCoverCount + 1 ;\n      CovStructPtr(CoverID).TCoverValuePtr.all := CovStructPtr(CoverID).TCoverValuePtr.all(2 to CovStructPtr(CoverID).BinValLength) & A ;\n      if (CovStructPtr(CoverID).TCoverCount >= CovStructPtr(CoverID).BinValLength) then\n        ICover(ID, CovStructPtr(CoverID).TCoverValuePtr.all) ;\n      end if ;\n    end procedure TCover ;\n\n    ------------------------------------------------------------\n    procedure ClearCov (ID : CoverageIDType) is\n    ------------------------------------------------------------\n    begin\n      for i in 1 to CovStructPtr(ID.ID).NumBins loop\n        CovStructPtr(ID.ID).CovBinPtr(i).Count := 0 ;\n        CovStructPtr(ID.ID).CovBinPtr(i).PercentCov := CalcPercentCov(\n          Count => CovStructPtr(ID.ID).CovBinPtr.all(i).Count,\n          AtLeast =>  CovStructPtr(ID.ID).CovBinPtr.all(i).AtLeast ) ;\n      end loop ;\n    end procedure ClearCov ;\n\n    ------------------------------------------------------------\n    impure function GetMinCov (ID : CoverageIDType) return real is\n    ------------------------------------------------------------\n      variable MinCov : real := real'right ;  -- big number\n    begin\n      CovLoop : for i in 1 to CovStructPtr(ID.ID).NumBins loop\n        if CovStructPtr(ID.ID).CovBinPtr(i).action = COV_COUNT and CovStructPtr(ID.ID).CovBinPtr(i).PercentCov < MinCov then\n          MinCov := CovStructPtr(ID.ID).CovBinPtr(i).PercentCov ;\n        end if ;\n      end loop CovLoop ;\n      return MinCov ;\n    end function GetMinCov ;\n\n    ------------------------------------------------------------\n    impure function GetMinCount (ID : CoverageIDType) return integer is\n    ------------------------------------------------------------\n      variable MinCount : integer := integer'right ;  -- big number\n    begin\n      CovLoop : for i in 1 to CovStructPtr(ID.ID).NumBins loop\n        if CovStructPtr(ID.ID).CovBinPtr(i).action = COV_COUNT and CovStructPtr(ID.ID).CovBinPtr(i).Count < MinCount then\n          MinCount := CovStructPtr(ID.ID).CovBinPtr(i).Count ;\n        end if ;\n      end loop CovLoop ;\n      return MinCount ;\n    end function GetMinCount ;\n\n    ------------------------------------------------------------\n    impure function GetMaxCov (ID : CoverageIDType) return real is\n    ------------------------------------------------------------\n      variable MaxCov : real := 0.0 ;\n    begin\n      CovLoop : for i in 1 to CovStructPtr(ID.ID).NumBins loop\n        if CovStructPtr(ID.ID).CovBinPtr(i).action = COV_COUNT and CovStructPtr(ID.ID).CovBinPtr(i).PercentCov > MaxCov then\n          MaxCov := CovStructPtr(ID.ID).CovBinPtr(i).PercentCov ;\n        end if ;\n      end loop CovLoop ;\n      return MaxCov ;\n    end function GetMaxCov ;\n\n    ------------------------------------------------------------\n    impure function GetMaxCount (ID : CoverageIDType) return integer is\n    ------------------------------------------------------------\n      variable MaxCount : integer := 0 ;\n    begin\n      CovLoop : for i in 1 to CovStructPtr(ID.ID).NumBins loop\n        if CovStructPtr(ID.ID).CovBinPtr(i).action = COV_COUNT and CovStructPtr(ID.ID).CovBinPtr(i).Count > MaxCount then\n          MaxCount := CovStructPtr(ID.ID).CovBinPtr(i).Count ;\n        end if ;\n      end loop CovLoop ;\n      return MaxCount ;\n    end function GetMaxCount ;\n\n    ------------------------------------------------------------\n    impure function CountCovHoles (ID : CoverageIDType; PercentCov : real ) return integer is\n    ------------------------------------------------------------\n      variable HoleCount : integer := 0 ;\n    begin\n      CovLoop : for i in 1 to CovStructPtr(ID.ID).NumBins loop\n        if CovStructPtr(ID.ID).CovBinPtr(i).action = COV_COUNT and CovStructPtr(ID.ID).CovBinPtr(i).PercentCov < PercentCov then\n          HoleCount := HoleCount + 1 ;\n        end if ;\n      end loop CovLoop ;\n      return HoleCount ;\n    end function CountCovHoles ;\n\n    ------------------------------------------------------------\n    impure function CountCovHoles (ID : CoverageIDType) return integer is\n    ------------------------------------------------------------\n    begin\n      return CountCovHoles(ID, CovStructPtr(ID.ID).CovTarget) ;\n    end function CountCovHoles ;\n\n    ------------------------------------------------------------\n    impure function IsCovered (ID : CoverageIDType; PercentCov : real ) return boolean is\n    ------------------------------------------------------------\n    begin\n      -- AlertIf(CovStructPtr(ID.ID).NumBins < 1, OSVVM_COVERAGE_ALERTLOG_ID, \"CoveragePkg.IsCovered: Empty Coverage Model\", failure) ;\n      return CountCovHoles(ID, PercentCov) = 0 ;\n    end function IsCovered ;\n\n    ------------------------------------------------------------\n    impure function IsCovered (ID : CoverageIDType) return boolean is\n    ------------------------------------------------------------\n    begin\n      -- AlertIf(CovStructPtr(ID.ID).NumBins < 1, OSVVM_COVERAGE_ALERTLOG_ID, \"CoveragePkg.IsCovered: Empty Coverage Model\", failure) ;\n      return CountCovHoles(ID, CovStructPtr(ID.ID).CovTarget) = 0 ;\n    end function IsCovered ;\n\n    ------------------------------------------------------------\n    procedure GetTotalCovCountAndGoal (ID : CoverageIDType; PercentCov : real; TotalCovCount : out integer; TotalCovGoal : out integer ) is\n    ------------------------------------------------------------\n      variable ScaledCovGoal : integer := 0 ;\n    begin\n      TotalCovCount := 0 ;\n      TotalCovGoal  := 0 ;\n      BinLoop : for i in 1 to CovStructPtr(ID.ID).NumBins loop\n        if CovStructPtr(ID.ID).CovBinPtr(i).action = COV_COUNT then\n          ScaledCovGoal := integer(ceil(PercentCov * real(CovStructPtr(ID.ID).CovBinPtr(i).AtLeast)/100.0)) ;\n          TotalCovGoal := TotalCovGoal + ScaledCovGoal ;\n          if CovStructPtr(ID.ID).CovBinPtr(i).Count <= ScaledCovGoal then\n            TotalCovCount := TotalCovCount + CovStructPtr(ID.ID).CovBinPtr(i).Count ;\n          else\n            -- do not count the extra values that exceed their cov goal\n            TotalCovCount := TotalCovCount + ScaledCovGoal ;\n          end if ;\n        end if ;\n      end loop BinLoop ;\n    end procedure GetTotalCovCountAndGoal ;\n\n    ------------------------------------------------------------\n    procedure GetTotalCovCountAndGoal (ID : CoverageIDType; TotalCovCount : out integer; TotalCovGoal : out integer ) is\n    ------------------------------------------------------------\n    begin\n      GetTotalCovCountAndGoal(ID, CovStructPtr(ID.ID).CovTarget, TotalCovCount, TotalCovGoal) ;\n    end procedure GetTotalCovCountAndGoal ;\n\n    ------------------------------------------------------------\n    impure function GetCov (ID : CoverageIDType; PercentCov : real ) return real is\n    ------------------------------------------------------------\n      variable TotalCovCount, TotalCovGoal : integer ;\n    begin\n      GetTotalCovCountAndGoal(ID, PercentCov, TotalCovCount, TotalCovGoal) ;\n      if TotalCovGoal > 0 then\n        return 100.0 * real(TotalCovCount) / real(TotalCovGoal) ;\n      else\n        return 0.0 ;\n      end if ;\n    end function GetCov ;\n\n    ------------------------------------------------------------\n    impure function GetCov (ID : CoverageIDType) return real is\n    ------------------------------------------------------------\n    begin\n      return GetCov(ID, CovStructPtr(ID.ID).CovTarget ) ;\n    end function GetCov ;\n\n    ------------------------------------------------------------\n    impure function GetTotalCovCount (ID : CoverageIDType; PercentCov : real ) return integer is\n    ------------------------------------------------------------\n      variable TotalCovCount, TotalCovGoal : integer ;\n    begin\n      GetTotalCovCountAndGoal(ID, PercentCov, TotalCovCount, TotalCovGoal) ;\n      return TotalCovCount ;\n    end function GetTotalCovCount ;\n\n    ------------------------------------------------------------\n    impure function GetTotalCovCount (ID : CoverageIDType) return integer is\n    ------------------------------------------------------------\n    begin\n      return GetTotalCovCount(ID, CovStructPtr(ID.ID).CovTarget) ;\n    end function GetTotalCovCount ;\n\n    ------------------------------------------------------------\n    impure function GetTotalCovGoal (ID : CoverageIDType; PercentCov : real ) return integer is\n    ------------------------------------------------------------\n      variable TotalCovCount, TotalCovGoal : integer ;\n    begin\n      GetTotalCovCountAndGoal(ID, PercentCov, TotalCovCount, TotalCovGoal) ;\n      return TotalCovGoal ;\n    end function GetTotalCovGoal ;\n\n    ------------------------------------------------------------\n    impure function GetTotalCovGoal (ID : CoverageIDType) return integer is\n    ------------------------------------------------------------\n    begin\n      return GetTotalCovGoal(ID, CovStructPtr(ID.ID).CovTarget) ;\n    end function GetTotalCovGoal ;\n\n    ------------------------------------------------------------\n    impure function GetItemCount (ID : CoverageIDType) return integer is\n    ------------------------------------------------------------\n    begin\n      return CovStructPtr(ID.ID).ItemCount ;\n    end function GetItemCount ;\n\n    -- Return Index Values\n    ------------------------------------------------------------\n    impure function GetNumBins (ID : CoverageIDType) return integer is\n    ------------------------------------------------------------\n    begin\n      return CovStructPtr(ID.ID).NumBins ;\n    end function GetNumBins ;\n\n    ------------------------------------------------------------\n    impure function GetLastIndex (ID : CoverageIDType) return integer is\n    ------------------------------------------------------------\n    begin\n      return CovStructPtr(ID.ID).LastIndex ;\n    end function GetLastIndex ;\n\n    ------------------------------------------------------------\n    impure function CalcWeight (ID : CoverageIDType; BinIndex : integer ; MaxCovPercent : real  ) return integer is\n    --  pt local\n    ------------------------------------------------------------\n    begin\n      case CovStructPtr(ID.ID).WeightMode is\n        when AT_LEAST =>    -- AtLeast\n          return CovStructPtr(ID.ID).CovBinPtr(BinIndex).AtLeast ;\n\n        when WEIGHT =>       -- Weight\n          return CovStructPtr(ID.ID).CovBinPtr(BinIndex).Weight ;\n\n        when REMAIN =>       -- (Adjust * AtLeast) - Count\n--?? simpler integer( Ceil (MaxCovPercent - CovStructPtr(ID.ID).CovBinPtr(BinIndex).PercentCov)) * CovStructPtr(ID.ID).CovBinPtr(BinIndex).AtLeast\n          return integer( Ceil( MaxCovPercent * real(CovStructPtr(ID.ID).CovBinPtr(BinIndex).AtLeast)/100.0)) -\n                          CovStructPtr(ID.ID).CovBinPtr(BinIndex).Count ;\n\n        when REMAIN_EXP =>       -- Weight * (REMAIN **WeightScale)\n          -- Experimental may be removed\n-- CAUTION:  for large numbers and/or WeightScale > 2.0, result can be > 2**31 (max integer value)\n          -- both Weight and WeightScale default to 1\n            return CovStructPtr(ID.ID).CovBinPtr(BinIndex).Weight *\n                    integer( Ceil (\n                      ( (MaxCovPercent * real(CovStructPtr(ID.ID).CovBinPtr(BinIndex).AtLeast)/100.0) -\n                            real(CovStructPtr(ID.ID).CovBinPtr(BinIndex).Count) ) ** CovStructPtr(ID.ID).WeightScale ) );\n\n        when REMAIN_SCALED =>   -- (WeightScale * Adjust * AtLeast) - Count\n          -- Experimental may be removed\n          -- Biases remainder toward AT_LEAST value.\n          -- WeightScale must be > 1.0\n          return integer( Ceil( CovStructPtr(ID.ID).WeightScale * MaxCovPercent * real(CovStructPtr(ID.ID).CovBinPtr(BinIndex).AtLeast)/100.0)) -\n                          CovStructPtr(ID.ID).CovBinPtr(BinIndex).Count ;\n\n        when REMAIN_WEIGHT =>     -- Weight * ((WeightScale * Adjust * AtLeast) - Count)\n          -- Experimental may be removed\n          -- WeightScale must be > 1.0\n          return   CovStructPtr(ID.ID).CovBinPtr(BinIndex).Weight * (\n                   integer( Ceil( CovStructPtr(ID.ID).WeightScale * MaxCovPercent * real(CovStructPtr(ID.ID).CovBinPtr(BinIndex).AtLeast)/100.0)) -\n                            CovStructPtr(ID.ID).CovBinPtr(BinIndex).Count) ;\n\n      end case ;\n    end function CalcWeight ;\n\n    ------------------------------------------------------------\n    impure function GetRandIndex (ID : CoverageIDType; CovTargetPercent : real ) return integer is\n    ------------------------------------------------------------\n      variable WeightVec : integer_vector(0 to CovStructPtr(ID.ID).NumBins-1) ;  -- Prep for change to DistInt\n      variable MaxCovPercent : real ;\n      variable MinCovPercent : real ;\n      variable rInt : integer ;\n    begin\n      CovStructPtr(ID.ID).ItemCount := CovStructPtr(ID.ID).ItemCount + 1 ;\n      MinCovPercent := GetMinCov(ID) ;\n      if CovStructPtr(ID.ID).ThresholdingEnable then\n        MaxCovPercent := MinCovPercent + CovStructPtr(ID.ID).CovThreshold ;\n        if MinCovPercent < CovTargetPercent then\n          -- Clip at CovTargetPercent until reach CovTargetPercent\n          MaxCovPercent := minimum(MaxCovPercent, CovTargetPercent);\n        end if ;\n      else\n        if MinCovPercent < CovTargetPercent then\n          MaxCovPercent := CovTargetPercent ;\n        else\n          -- Done, Enable all bins\n          MaxCovPercent := GetMaxCov(ID) + 1.0 ;\n          -- MaxCovPercent := real'right ;  -- weight scale issues\n        end if ;\n      end if ;\n      CovLoop : for i in 1 to CovStructPtr(ID.ID).NumBins loop\n        if CovStructPtr(ID.ID).CovBinPtr(i).action = COV_COUNT and CovStructPtr(ID.ID).CovBinPtr(i).PercentCov < MaxCovPercent then\n          -- Calculate Weight based on CovStructPtr(ID.ID).WeightMode\n          --   Scale to current percentage goal:  MaxCov which can be < or > 100.0\n          WeightVec(i-1) := CalcWeight(ID, i, MaxCovPercent) ;\n        else\n          WeightVec(i-1) := 0 ;\n        end if ;\n      end loop CovLoop ;\n      -- DistInt returns integer range 0 to CovStructPtr(ID.ID).NumBins-1\n      -- Caution:  DistInt can fail when sum(WeightVec) > 2**31\n      --           See notes in CalcWeight for REMAIN_EXP\n--      CovStructPtr(ID.ID).LastStimGenIndex := 1 + RV.DistInt( WeightVec )  ; -- return range 1 to CovStructPtr(ID.ID).NumBins\n      DistInt(CovStructPtr(ID.ID).RV, rInt, WeightVec) ;\n      CovStructPtr(ID.ID).LastStimGenIndex := 1 + rInt  ; -- return range 1 to CovStructPtr(ID.ID).NumBins\n      CovStructPtr(ID.ID).LastIndex := CovStructPtr(ID.ID).LastStimGenIndex ;\n      return CovStructPtr(ID.ID).LastStimGenIndex ;\n    end function GetRandIndex ;\n\n    ------------------------------------------------------------\n    impure function GetRandIndex (ID : CoverageIDType) return integer is\n    ------------------------------------------------------------\n    begin\n      return GetRandIndex(ID, CovStructPtr(ID.ID).CovTarget) ;\n    end function GetRandIndex ;\n\n    ------------------------------------------------------------\n    impure function GetIncIndex (ID : CoverageIDType) return integer is\n    ------------------------------------------------------------\n      variable CurIndex : integer ;\n    begin\n      CurIndex := CovStructPtr(ID.ID).LastStimGenIndex ;\n      CovStructPtr(ID.ID).LastStimGenIndex := (CovStructPtr(ID.ID).LastStimGenIndex mod CovStructPtr(ID.ID).NumBins) + 1 ;\n      CovStructPtr(ID.ID).LastIndex := CovStructPtr(ID.ID).LastStimGenIndex ;\n      return CurIndex ;\n    end function GetIncIndex ;\n\n    ------------------------------------------------------------\n    impure function GetMinIndex (ID : CoverageIDType) return integer is\n    ------------------------------------------------------------\n      variable MinCov : real := real'right ;  -- big number\n    begin\n      CovLoop : for i in 1 to CovStructPtr(ID.ID).NumBins loop\n        if CovStructPtr(ID.ID).CovBinPtr(i).action = COV_COUNT and CovStructPtr(ID.ID).CovBinPtr(i).PercentCov < MinCov then\n          MinCov := CovStructPtr(ID.ID).CovBinPtr(i).PercentCov ;\n          CovStructPtr(ID.ID).LastStimGenIndex := i ;\n        end if ;\n      end loop CovLoop ;\n      CovStructPtr(ID.ID).LastIndex := CovStructPtr(ID.ID).LastStimGenIndex ;\n      return CovStructPtr(ID.ID).LastStimGenIndex ;\n    end function GetMinIndex ;\n\n    ------------------------------------------------------------\n    impure function GetMaxIndex (ID : CoverageIDType) return integer is\n    ------------------------------------------------------------\n      variable MaxCov : real := -1.0 ;\n    begin\n      CovLoop : for i in 1 to CovStructPtr(ID.ID).NumBins loop\n        if CovStructPtr(ID.ID).CovBinPtr(i).action = COV_COUNT and CovStructPtr(ID.ID).CovBinPtr(i).PercentCov > MaxCov then\n          MaxCov := CovStructPtr(ID.ID).CovBinPtr(i).PercentCov ;\n          CovStructPtr(ID.ID).LastStimGenIndex := i ;\n        end if ;\n      end loop CovLoop ;\n      CovStructPtr(ID.ID).LastIndex := CovStructPtr(ID.ID).LastStimGenIndex ;\n      return CovStructPtr(ID.ID).LastStimGenIndex ;\n    end function GetMaxIndex ;\n\n    ------------------------------------------------------------\n    impure function GetNextIndex (ID : CoverageIDType; Mode : NextPointModeType) return integer is\n    ------------------------------------------------------------\n    begin\n      case Mode is\n        when RANDOM =>      return GetRandIndex(ID) ;\n        when INCREMENT =>   return GetIncIndex (ID) ;\n        when others =>      return GetMinIndex (ID) ;\n      end case ;\n    end function GetNextIndex;\n\n    ------------------------------------------------------------\n    impure function GetNextIndex (ID : CoverageIDType) return integer is\n    ------------------------------------------------------------\n    begin\n      return GetNextIndex(ID, CovStructPtr(ID.ID).NextPointMode) ;\n    end function GetNextIndex ;\n\n    -- Return BinVals\n    ------------------------------------------------------------\n    impure function GetBinVal (ID : CoverageIDType; BinIndex : integer ) return RangeArrayType is\n    ------------------------------------------------------------\n    begin\n      return CovStructPtr(ID.ID).CovBinPtr( BinIndex ).BinVal.all ;\n    end function GetBinVal ;\n\n    ------------------------------------------------------------\n    impure function GetLastBinVal (ID : CoverageIDType) return RangeArrayType is\n    ------------------------------------------------------------\n    begin\n      return CovStructPtr(ID.ID).CovBinPtr( CovStructPtr(ID.ID).LastIndex ).BinVal.all ;\n    end function GetLastBinVal ;\n\n    ------------------------------------------------------------\n    impure function GetRandBinVal (ID : CoverageIDType; PercentCov : real ) return RangeArrayType is\n    ------------------------------------------------------------\n    begin\n      return CovStructPtr(ID.ID).CovBinPtr( GetRandIndex(ID, PercentCov) ).BinVal.all ;  -- GetBinVal\n    end function GetRandBinVal ;\n\n    ------------------------------------------------------------\n    impure function GetRandBinVal (ID : CoverageIDType) return RangeArrayType is\n    ------------------------------------------------------------\n    begin\n      -- use global coverage target\n      return CovStructPtr(ID.ID).CovBinPtr( GetRandIndex(ID, CovStructPtr(ID.ID).CovTarget ) ).BinVal.all ;  -- GetBinVal\n    end function GetRandBinVal ;\n\n    ------------------------------------------------------------\n    impure function GetIncBinVal (ID : CoverageIDType) return RangeArrayType is\n    ------------------------------------------------------------\n    begin\n      return GetBinVal(ID, GetIncIndex(ID)) ;\n    end function GetIncBinVal ;\n\n    ------------------------------------------------------------\n    impure function GetMinBinVal (ID : CoverageIDType) return RangeArrayType is\n    ------------------------------------------------------------\n    begin\n      -- use global coverage target\n      return GetBinVal(ID, GetMinIndex(ID) ) ;\n    end function GetMinBinVal ;\n\n    ------------------------------------------------------------\n    impure function GetMaxBinVal (ID : CoverageIDType) return RangeArrayType is\n    ------------------------------------------------------------\n    begin\n      -- use global coverage target\n      return GetBinVal(ID, GetMaxIndex(ID) ) ;\n    end function GetMaxBinVal ;\n\n    ------------------------------------------------------------\n    impure function GetNextBinVal (ID : CoverageIDType; Mode : NextPointModeType) return RangeArrayType is\n    ------------------------------------------------------------\n    begin\n      return GetBinVal(ID, GetNextIndex(ID, Mode)) ;\n    end function GetNextBinVal;\n\n    ------------------------------------------------------------\n    impure function GetNextBinVal (ID : CoverageIDType) return RangeArrayType is\n    ------------------------------------------------------------\n    begin\n      return GetBinVal(ID, GetNextIndex(ID, CovStructPtr(ID.ID).NextPointMode)) ;\n    end function GetNextBinVal ;\n\n    ------------------------------------------------------------\n    -- deprecated, see GetRandBinVal\n    impure function RandCovBinVal (ID : CoverageIDType; PercentCov : real ) return RangeArrayType is\n    ------------------------------------------------------------\n    begin\n      return CovStructPtr(ID.ID).CovBinPtr( GetRandIndex(ID, PercentCov) ).BinVal.all ;  -- GetBinVal\n    end function RandCovBinVal ;\n\n    ------------------------------------------------------------\n    -- deprecated, see GetRandBinVal\n    impure function RandCovBinVal (ID : CoverageIDType) return RangeArrayType is\n    ------------------------------------------------------------\n    begin\n      -- use global coverage target\n      return CovStructPtr(ID.ID).CovBinPtr( GetRandIndex(ID, CovStructPtr(ID.ID).CovTarget ) ).BinVal.all ;  -- GetBinVal\n    end function RandCovBinVal ;\n\n    ------------------------------------------------------------\n    impure function GetHoleBinVal (ID : CoverageIDType; ReqHoleNum : integer ; PercentCov : real  ) return RangeArrayType is\n    ------------------------------------------------------------\n      variable HoleCount : integer := 0 ;\n      variable buf : line ;\n    begin\n      CovLoop : for i in 1 to CovStructPtr(ID.ID).NumBins loop\n        if CovStructPtr(ID.ID).CovBinPtr(i).action = COV_COUNT and CovStructPtr(ID.ID).CovBinPtr(i).PercentCov < PercentCov then\n          HoleCount := HoleCount + 1 ;\n          if HoleCount = ReqHoleNum  then\n           return CovStructPtr(ID.ID).CovBinPtr(i).BinVal.all ;\n          end if ;\n        end if ;\n      end loop CovLoop ;\n      Alert(CovStructPtr(ID.ID).AlertLogID, GetNamePlus(ID, prefix => \"in \", suffix => \", \") & \"CoveragePkg.GetHoleBinVal:\" &\n                    \" did not find a coverage hole.  HoleCount = \"  & integer'image(HoleCount) &\n                    \" ReqHoleNum = \" & integer'image(ReqHoleNum), ERROR\n      ) ;\n      return CovStructPtr(ID.ID).CovBinPtr(CovStructPtr(ID.ID).NumBins).BinVal.all ;\n\n    end function GetHoleBinVal ;\n\n    ------------------------------------------------------------\n    impure function GetHoleBinVal (ID : CoverageIDType; PercentCov : real  ) return RangeArrayType is\n    ------------------------------------------------------------\n    begin\n      return GetHoleBinVal(ID, 1, PercentCov) ;\n    end function GetHoleBinVal ;\n\n    ------------------------------------------------------------\n    impure function GetHoleBinVal (ID : CoverageIDType; ReqHoleNum : integer := 1 ) return RangeArrayType is\n    ------------------------------------------------------------\n    begin\n      return GetHoleBinVal(ID, ReqHoleNum, CovStructPtr(ID.ID).CovTarget) ;\n    end function GetHoleBinVal ;\n\n    -- Return Points\n    ------------------------------------------------------------\n    impure function ToRandPoint(ID : CoverageIDType; BinVal : RangeArrayType ) return integer is\n    --  pt local\n    ------------------------------------------------------------\n      variable rInt : integer ;\n    begin\n--      return RV.RandInt(BinVal(BinVal'left).min, BinVal(BinVal'left).max) ;\n      RandInt(CovStructPtr(ID.ID).RV, rInt, BinVal(BinVal'left).min, BinVal(BinVal'left).max) ;\n      return rInt ;\n    end function ToRandPoint ;\n\n    ------------------------------------------------------------\n    impure function ToRandPoint(ID : CoverageIDType; BinVal : RangeArrayType ) return integer_vector is\n    --  pt local\n    ------------------------------------------------------------\n      variable CovPoint : integer_vector(BinVal'range) ;\n      variable normCovPoint : integer_vector(1 to BinVal'length) ;\n    begin\n      for i in BinVal'range loop\n--        CovPoint(i) := RV.RandInt(BinVal(i).min, BinVal(i).max) ;\n        Uniform(CovStructPtr(ID.ID).RV, CovPoint(i), BinVal(i).min, BinVal(i).max) ;\n      end loop ;\n      normCovPoint := CovPoint ;\n      return normCovPoint ;\n    end function ToRandPoint ;\n\n    ------------------------------------------------------------\n    impure function GetPoint (ID : CoverageIDType; BinIndex : integer ) return integer is\n    ------------------------------------------------------------\n    begin\n      return ToRandPoint(ID, GetBinVal(ID, BinIndex)) ;\n    end function GetPoint ;\n\n    ------------------------------------------------------------\n    impure function GetPoint (ID : CoverageIDType; BinIndex : integer ) return integer_vector is\n    ------------------------------------------------------------\n    begin\n      return ToRandPoint(ID, GetBinVal(ID, BinIndex)) ;\n    end function GetPoint ;\n\n    ------------------------------------------------------------\n    impure function GetRandPoint (ID : CoverageIDType) return integer is\n    ------------------------------------------------------------\n    begin\n      return ToRandPoint(ID, GetRandBinVal(ID, CovStructPtr(ID.ID).CovTarget)) ;\n    end function GetRandPoint ;\n\n    ------------------------------------------------------------\n    impure function GetRandPoint (ID : CoverageIDType; PercentCov : real ) return integer is\n    ------------------------------------------------------------\n    begin\n      return ToRandPoint(ID, GetRandBinVal(ID, PercentCov)) ;\n    end function GetRandPoint ;\n\n    ------------------------------------------------------------\n    impure function GetRandPoint (ID : CoverageIDType) return integer_vector is\n    ------------------------------------------------------------\n    begin\n      return ToRandPoint(ID, GetRandBinVal(ID, CovStructPtr(ID.ID).CovTarget)) ;\n    end function GetRandPoint ;\n\n    ------------------------------------------------------------\n    impure function GetRandPoint (ID : CoverageIDType; PercentCov : real ) return integer_vector is\n    ------------------------------------------------------------\n    begin\n      return ToRandPoint(ID, GetRandBinVal(ID, PercentCov)) ;\n    end function GetRandPoint ;\n\n    ------------------------------------------------------------\n    impure function GetIncPoint (ID : CoverageIDType) return integer is\n    ------------------------------------------------------------\n    begin\n      return GetPoint(ID, GetIncIndex(ID)) ;\n    end function GetIncPoint ;\n\n    ------------------------------------------------------------\n    impure function GetIncPoint (ID : CoverageIDType) return integer_vector is\n    ------------------------------------------------------------\n    begin\n      return GetPoint(ID, GetIncIndex(ID)) ;\n    end function GetIncPoint ;\n\n    ------------------------------------------------------------\n    impure function GetMinPoint (ID : CoverageIDType) return integer is\n    ------------------------------------------------------------\n    begin\n      return ToRandPoint(ID, GetBinVal(ID, GetMinIndex(ID) )) ;\n    end function GetMinPoint ;\n\n    ------------------------------------------------------------\n    impure function GetMinPoint (ID : CoverageIDType) return integer_vector is\n    ------------------------------------------------------------\n    begin\n      return ToRandPoint(ID, GetBinVal(ID, GetMinIndex(ID) )) ;\n    end function GetMinPoint ;\n\n    ------------------------------------------------------------\n    impure function GetMaxPoint (ID : CoverageIDType) return integer is\n    ------------------------------------------------------------\n    begin\n      return ToRandPoint(ID, GetBinVal(ID, GetMaxIndex(ID) )) ;\n    end function GetMaxPoint ;\n\n    ------------------------------------------------------------\n    impure function GetMaxPoint (ID : CoverageIDType) return integer_vector is\n    ------------------------------------------------------------\n    begin\n      return ToRandPoint(ID, GetBinVal(ID, GetMaxIndex(ID) )) ;\n    end function GetMaxPoint ;\n\n    ------------------------------------------------------------\n    impure function GetNextPoint (ID : CoverageIDType; Mode : NextPointModeType) return integer is\n    ------------------------------------------------------------\n    begin\n      return GetPoint(ID, GetNextIndex(ID, Mode)) ;\n    end function GetNextPoint;\n\n    ------------------------------------------------------------\n    impure function GetNextPoint (ID : CoverageIDType; Mode : NextPointModeType) return integer_vector is\n    ------------------------------------------------------------\n    begin\n      return GetPoint(ID, GetNextIndex(ID, Mode)) ;\n    end function GetNextPoint;\n\n    ------------------------------------------------------------\n    impure function GetNextPoint (ID : CoverageIDType) return integer is\n    ------------------------------------------------------------\n    begin\n      return GetPoint(ID, GetNextIndex(ID, CovStructPtr(ID.ID).NextPointMode)) ;\n    end function GetNextPoint ;\n\n    ------------------------------------------------------------\n    impure function GetNextPoint (ID : CoverageIDType) return integer_vector is\n    ------------------------------------------------------------\n    begin\n      return GetPoint(ID, GetNextIndex(ID, CovStructPtr(ID.ID).NextPointMode)) ;\n    end function GetNextPoint ;\n\n    ------------------------------------------------------------\n    -- deprecated, see GetRandPoint\n    impure function RandCovPoint (ID : CoverageIDType) return integer is\n    ------------------------------------------------------------\n    begin\n      return ToRandPoint(ID, GetRandBinVal(ID, CovStructPtr(ID.ID).CovTarget)) ;\n    end function RandCovPoint ;\n\n    ------------------------------------------------------------\n    -- deprecated, see GetRandPoint\n    impure function RandCovPoint (ID : CoverageIDType; PercentCov : real ) return integer is\n    ------------------------------------------------------------\n    begin\n      return ToRandPoint(ID, GetRandBinVal(ID, PercentCov)) ;\n    end function RandCovPoint ;\n\n    ------------------------------------------------------------\n    -- deprecated, see GetRandPoint\n    impure function RandCovPoint (ID : CoverageIDType) return integer_vector is\n    ------------------------------------------------------------\n    begin\n      return ToRandPoint(ID, GetRandBinVal(ID, CovStructPtr(ID.ID).CovTarget)) ;\n    end function RandCovPoint ;\n\n    ------------------------------------------------------------\n    -- deprecated, see GetRandPoint\n    impure function RandCovPoint (ID : CoverageIDType; PercentCov : real ) return integer_vector is\n    ------------------------------------------------------------\n    begin\n      return ToRandPoint(ID, GetRandBinVal(ID, PercentCov)) ;\n    end function RandCovPoint ;\n\n    -- ------------------------------------------------------------\n    -- Intended as a stand in until we get a more general GetBin\n    impure function GetBinInfo (ID : CoverageIDType; BinIndex : integer ) return CovBinBaseType is\n    -- ------------------------------------------------------------\n      variable result : CovBinBaseType ;\n    begin\n      result.BinVal  := ALL_RANGE;\n      result.Action  := CovStructPtr(ID.ID).CovBinPtr(BinIndex).Action;\n      result.Count   := CovStructPtr(ID.ID).CovBinPtr(BinIndex).Count;\n      result.AtLeast := CovStructPtr(ID.ID).CovBinPtr(BinIndex).AtLeast;\n      result.Weight  := CovStructPtr(ID.ID).CovBinPtr(BinIndex).Weight;\n      return result ;\n    end function GetBinInfo ;\n\n    -- ------------------------------------------------------------\n    -- Intended as a stand in until we get a more general GetBin\n    impure function GetBinValLength (ID : CoverageIDType) return integer is\n    -- ------------------------------------------------------------\n    begin\n      return CovStructPtr(ID.ID).BinValLength ;\n    end function GetBinValLength ;\n\n-- Eventually the multiple GetBin functions will be replaced by a\n-- a single GetBin that returns CovBinBaseType with BinVal as an\n-- unconstrained element\n    -- ------------------------------------------------------------\n    impure function GetBin (ID : CoverageIDType; BinIndex : integer ) return CovBinBaseType is\n    -- ------------------------------------------------------------\n      variable result : CovBinBaseType ;\n    begin\n      result.BinVal  := CovStructPtr(ID.ID).CovBinPtr(BinIndex).BinVal.all;\n      result.Action  := CovStructPtr(ID.ID).CovBinPtr(BinIndex).Action;\n      result.Count   := CovStructPtr(ID.ID).CovBinPtr(BinIndex).Count;\n      result.AtLeast := CovStructPtr(ID.ID).CovBinPtr(BinIndex).AtLeast;\n      result.Weight  := CovStructPtr(ID.ID).CovBinPtr(BinIndex).Weight;\n      return result ;\n    end function GetBin ;\n\n    -- ------------------------------------------------------------\n    impure function GetBin (ID : CoverageIDType; BinIndex : integer ) return CovMatrix2BaseType is\n    -- ------------------------------------------------------------\n      variable result : CovMatrix2BaseType ;\n    begin\n      result.BinVal  := CovStructPtr(ID.ID).CovBinPtr(BinIndex).BinVal.all;\n      result.Action  := CovStructPtr(ID.ID).CovBinPtr(BinIndex).Action;\n      result.Count   := CovStructPtr(ID.ID).CovBinPtr(BinIndex).Count;\n      result.AtLeast := CovStructPtr(ID.ID).CovBinPtr(BinIndex).AtLeast;\n      result.Weight  := CovStructPtr(ID.ID).CovBinPtr(BinIndex).Weight;\n      return result ;\n    end function GetBin ;\n\n    -- ------------------------------------------------------------\n    impure function GetBin (ID : CoverageIDType; BinIndex : integer ) return CovMatrix3BaseType is\n    -- ------------------------------------------------------------\n      variable result : CovMatrix3BaseType ;\n    begin\n      result.BinVal  := CovStructPtr(ID.ID).CovBinPtr(BinIndex).BinVal.all;\n      result.Action  := CovStructPtr(ID.ID).CovBinPtr(BinIndex).Action;\n      result.Count   := CovStructPtr(ID.ID).CovBinPtr(BinIndex).Count;\n      result.AtLeast := CovStructPtr(ID.ID).CovBinPtr(BinIndex).AtLeast;\n      result.Weight  := CovStructPtr(ID.ID).CovBinPtr(BinIndex).Weight;\n      return result ;\n    end function GetBin ;\n\n    -- ------------------------------------------------------------\n    impure function GetBin (ID : CoverageIDType; BinIndex : integer ) return CovMatrix4BaseType is\n    -- ------------------------------------------------------------\n      variable result : CovMatrix4BaseType ;\n    begin\n      result.BinVal  := CovStructPtr(ID.ID).CovBinPtr(BinIndex).BinVal.all;\n      result.Action  := CovStructPtr(ID.ID).CovBinPtr(BinIndex).Action;\n      result.Count   := CovStructPtr(ID.ID).CovBinPtr(BinIndex).Count;\n      result.AtLeast := CovStructPtr(ID.ID).CovBinPtr(BinIndex).AtLeast;\n      result.Weight  := CovStructPtr(ID.ID).CovBinPtr(BinIndex).Weight;\n      return result ;\n    end function GetBin ;\n\n    -- ------------------------------------------------------------\n    impure function GetBin (ID : CoverageIDType; BinIndex : integer ) return CovMatrix5BaseType is\n    -- ------------------------------------------------------------\n      variable result : CovMatrix5BaseType ;\n    begin\n      result.BinVal  := CovStructPtr(ID.ID).CovBinPtr(BinIndex).BinVal.all;\n      result.Action  := CovStructPtr(ID.ID).CovBinPtr(BinIndex).Action;\n      result.Count   := CovStructPtr(ID.ID).CovBinPtr(BinIndex).Count;\n      result.AtLeast := CovStructPtr(ID.ID).CovBinPtr(BinIndex).AtLeast;\n      result.Weight  := CovStructPtr(ID.ID).CovBinPtr(BinIndex).Weight;\n      return result ;\n    end function GetBin ;\n\n    -- ------------------------------------------------------------\n    impure function GetBin (ID : CoverageIDType; BinIndex : integer ) return CovMatrix6BaseType is\n    -- ------------------------------------------------------------\n      variable result : CovMatrix6BaseType ;\n    begin\n      result.BinVal  := CovStructPtr(ID.ID).CovBinPtr(BinIndex).BinVal.all;\n      result.Action  := CovStructPtr(ID.ID).CovBinPtr(BinIndex).Action;\n      result.Count   := CovStructPtr(ID.ID).CovBinPtr(BinIndex).Count;\n      result.AtLeast := CovStructPtr(ID.ID).CovBinPtr(BinIndex).AtLeast;\n      result.Weight  := CovStructPtr(ID.ID).CovBinPtr(BinIndex).Weight;\n      return result ;\n    end function GetBin ;\n\n    -- ------------------------------------------------------------\n    impure function GetBin (ID : CoverageIDType; BinIndex : integer ) return CovMatrix7BaseType is\n    -- ------------------------------------------------------------\n      variable result : CovMatrix7BaseType ;\n    begin\n      result.BinVal  := CovStructPtr(ID.ID).CovBinPtr(BinIndex).BinVal.all;\n      result.Action  := CovStructPtr(ID.ID).CovBinPtr(BinIndex).Action;\n      result.Count   := CovStructPtr(ID.ID).CovBinPtr(BinIndex).Count;\n      result.AtLeast := CovStructPtr(ID.ID).CovBinPtr(BinIndex).AtLeast;\n      result.Weight  := CovStructPtr(ID.ID).CovBinPtr(BinIndex).Weight;\n      return result ;\n    end function GetBin ;\n\n    -- ------------------------------------------------------------\n    impure function GetBin (ID : CoverageIDType; BinIndex : integer ) return CovMatrix8BaseType is\n    -- ------------------------------------------------------------\n      variable result : CovMatrix8BaseType ;\n    begin\n      result.BinVal  := CovStructPtr(ID.ID).CovBinPtr(BinIndex).BinVal.all;\n      result.Action  := CovStructPtr(ID.ID).CovBinPtr(BinIndex).Action;\n      result.Count   := CovStructPtr(ID.ID).CovBinPtr(BinIndex).Count;\n      result.AtLeast := CovStructPtr(ID.ID).CovBinPtr(BinIndex).AtLeast;\n      result.Weight  := CovStructPtr(ID.ID).CovBinPtr(BinIndex).Weight;\n      return result ;\n    end function GetBin ;\n\n    -- ------------------------------------------------------------\n    impure function GetBin (ID : CoverageIDType; BinIndex : integer ) return CovMatrix9BaseType is\n    -- ------------------------------------------------------------\n      variable result : CovMatrix9BaseType ;\n    begin\n      result.BinVal  := CovStructPtr(ID.ID).CovBinPtr(BinIndex).BinVal.all;\n      result.Action  := CovStructPtr(ID.ID).CovBinPtr(BinIndex).Action;\n      result.Count   := CovStructPtr(ID.ID).CovBinPtr(BinIndex).Count;\n      result.AtLeast := CovStructPtr(ID.ID).CovBinPtr(BinIndex).AtLeast;\n      result.Weight  := CovStructPtr(ID.ID).CovBinPtr(BinIndex).Weight;\n      return result ;\n    end function GetBin ;\n\n    -- ------------------------------------------------------------\n    impure function GetBinName (ID : CoverageIDType; BinIndex : integer; DefaultName : string := \"\" ) return string is\n    -- ------------------------------------------------------------\n    begin\n      if CovStructPtr(ID.ID).CovBinPtr(BinIndex).Name.all /= \"\" then\n        return CovStructPtr(ID.ID).CovBinPtr(BinIndex).Name.all ;\n      else\n        return DefaultName ;\n      end if;\n    end function GetBinName;\n\n    ------------------------------------------------------------\n    -- pt local for now -- file formal parameter not allowed with a public method\n--    procedure WriteBinName (ID : CoverageIDType; file f : text ; S : string ; Prefix : string := \"%% \" ) is\n    procedure WriteBinName (ID : CoverageIDType; variable buf : inout line; S : string ; Prefix : string := \"%% \" ) is\n    ------------------------------------------------------------\n      variable Message : MessageStructPtrType ;\n      variable MessageIndex : integer := 1 ;\n--      variable buf : line ;\n    begin\n      Message := CovStructPtr(ID.ID).CovMessage ;\n      if Message = NULL then\n        write(buf, Prefix & S & GetCovModelName(ID)) ; -- Print name when no message\n        write(buf, \"\" & LF) ;\n--        writeline(f, buf) ;\n      else\n        if CovStructPtr(ID.ID).CovName /= NULL then\n          -- Print Name if set\n          write(buf, Prefix & S & CovStructPtr(ID.ID).CovName.all) ;\n        elsif CovStructPtr(ID.ID).AlertLogID /= OSVVM_COVERAGE_ALERTLOG_ID then\n          -- otherwise Print AlertLogName if it is set\n          write(buf, Prefix & S & string'(GetAlertLogName(CovStructPtr(ID.ID).AlertLogID)) ) ;\n        else\n          -- otherwise print the first line of the message\n          write(buf, Prefix & S & Message.Name.all) ;\n          Message := Message.NextPtr ;\n        end if ;\n        write(buf, \"\" & LF) ;\n--        writeline(f, buf) ;\n        WriteMessage(buf, Message, Prefix) ;\n      end if ;\n    end procedure WriteBinName ;\n\n    ------------------------------------------------------------\n    --  pt local for now -- file formal parameter not allowed with method\n    procedure WriteBin (\n      ID              : CoverageIDType ;\n      variable buf    : inout line ;\n--      file f          : text ;\n--!!      WritePassFail   : OsvvmOptionsType ;\n--!!      WriteBinInfo    : OsvvmOptionsType ;\n--!!      WriteCount      : OsvvmOptionsType ;\n--!!      WriteAnyIllegal : OsvvmOptionsType ;\n      WritePassFail   : boolean ;\n      WriteBinInfo    : boolean ;\n      WriteCount      : boolean ;\n      WriteAnyIllegal : boolean ;\n      WritePrefix     : string ;\n      PassName        : string ;\n      FailName        : string ;\n      UsingLocalFile  : boolean := FALSE\n    ) is\n    ------------------------------------------------------------\n    begin\n      if CovStructPtr(ID.ID).NumBins < 1 then\n        if WriteBinFileInit or UsingLocalFile then\n          swrite(buf, WritePrefix & \" \" & FailName & \" \") ;\n          swrite(buf, GetNamePlus(ID, prefix => \"in \", suffix => \", \") & \"CoveragePkg.WriteBin: Coverage model is empty.  Nothing to print.\") ;\n--          writeline(f, buf) ;\n        end if ;\n        Alert(CovStructPtr(ID.ID).AlertLogID, GetNamePlus(ID, prefix => \"in \", suffix => \", \") & \"CoveragePkg.WriteBin:\" &\n                      \" Coverage model is empty.  Nothing to print.\", FAILURE) ;\n        return ;\n      end if ;\n      -- Models with Bins\n      WriteBinName(ID, buf, \"WriteBin: \", WritePrefix) ;\n      for i in 1 to CovStructPtr(ID.ID).NumBins loop      -- CovStructPtr(ID.ID).CovBinPtr.all'range\n        if CovStructPtr(ID.ID).CovBinPtr(i).action = COV_COUNT or\n--           (CovStructPtr(ID.ID).CovBinPtr(i).action = COV_ILLEGAL and IsEnabled(WriteAnyIllegal)) or\n           (CovStructPtr(ID.ID).CovBinPtr(i).action = COV_ILLEGAL and WriteAnyIllegal) or\n           CovStructPtr(ID.ID).CovBinPtr(i).count < 0  -- Illegal bin with errors\n        then\n          -- WriteBin Info\n          swrite(buf, WritePrefix) ;\n          if CovStructPtr(ID.ID).CovBinPtr(i).Name.all /= \"\" then\n            swrite(buf, CovStructPtr(ID.ID).CovBinPtr(i).Name.all & \"  \") ;\n          end if ;\n--!!          if IsEnabled(WritePassFail) then\n          if (WritePassFail) then\n            -- For illegal bins, AtLeast = 0 and count is negative.\n            if CovStructPtr(ID.ID).CovBinPtr(i).count >= CovStructPtr(ID.ID).CovBinPtr(i).AtLeast then\n              swrite(buf, PassName & ' ') ;\n            else\n              swrite(buf, FailName & ' ') ;\n            end if ;\n          end if ;\n--!!          if IsEnabled(WriteBinInfo) then\n          if (WriteBinInfo) then\n            if CovStructPtr(ID.ID).CovBinPtr(i).action = COV_COUNT then\n              swrite(buf, \"Bin:\") ;\n            else\n              swrite(buf, \"Illegal Bin:\") ;\n            end if;\n            write(buf, CovStructPtr(ID.ID).CovBinPtr(i).BinVal.all) ;\n          end if ;\n--!!          if IsEnabled(WriteCount) then\n          if (WriteCount) then\n            write(buf, \"  Count = \" & integer'image(abs(CovStructPtr(ID.ID).CovBinPtr(i).count))) ;\n            write(buf, \"  AtLeast = \" & integer'image(CovStructPtr(ID.ID).CovBinPtr(i).AtLeast)) ;\n            if CovStructPtr(ID.ID).WeightMode = WEIGHT or CovStructPtr(ID.ID).WeightMode = REMAIN_WEIGHT then\n              -- Print Weight only when it is used\n              write(buf, \"  Weight = \" & integer'image(CovStructPtr(ID.ID).CovBinPtr(i).Weight)) ;\n            end if ;\n          end if ;\n          write(buf, \"\" & LF) ;\n--          writeline(f, buf) ;\n        end if ;\n      end loop ;\n      swrite(buf, \"\") ;\n--      writeline(f, buf) ;\n    end procedure WriteBin ;\n\n    ------------------------------------------------------------\n    procedure WriteBin (ID : CoverageIDType) is\n    ------------------------------------------------------------\n--!!      constant rWritePassFail   : OsvvmOptionsType := ResolveCovWritePassFail  (WritePassFailVar) ;\n--!!      constant rWriteBinInfo    : OsvvmOptionsType := ResolveCovWriteBinInfo   (WriteBinInfoVar  ) ;\n--!!      constant rWriteCount      : OsvvmOptionsType := ResolveCovWriteCount     (WriteCountVar    ) ;\n--!!      constant rWriteAnyIllegal : OsvvmOptionsType := ResolveCovWriteAnyIllegal(WriteAnyIllegalVar) ;\n      -- constant rWritePrefix     : string         := ResolveOsvvmWritePrefix  (WritePrefixVar.GetOpt) ;\n      -- constant rPassName        : string         := ResolveOsvvmPassName     (PassNameVar.GetOpt  ) ;\n      -- constant rFailName        : string         := ResolveOsvvmFailName     (FailNameVar.GetOpt  ) ;\n      variable buf              : line ;\n    begin\n      WriteBin (\n        ID              => ID,\n        buf             => buf,\n--!!        WritePassFail   => rWritePassFail,\n--!!        WriteBinInfo    => rWriteBinInfo,\n--!!        WriteCount      => rWriteCount,\n--!!        WriteAnyIllegal => rWriteAnyIllegal,\n        WritePassFail   => WritePassFailVar,\n        WriteBinInfo    => WriteBinInfoVar,\n        WriteCount      => WriteCountVar,\n        WriteAnyIllegal => WriteAnyIllegalVar,\n--!!        WritePrefix     => rWritePrefix,\n--!!        PassName        => rPassName,\n--!!        FailName        => rFailName\n--!!        WritePrefix     => ResolveOsvvmWritePrefix  (WritePrefixVar.GetOpt),\n--!!        PassName        => ResolveOsvvmPassName     (PassNameVar.GetOpt  ),\n--!!        FailName        => ResolveOsvvmFailName     (FailNameVar.GetOpt  )\n        WritePrefix     => COVERAGE_PRINT_PREFIX,\n        PassName        => COVERAGE_PASS_NAME,\n        FailName        => COVERAGE_FAIL_NAME\n      ) ;\n      WriteToCovFile(buf) ;\n    end procedure WriteBin ;\n\n    ------------------------------------------------------------\n    procedure WriteBin (ID : CoverageIDType; LogLevel : LogType ) is\n    ------------------------------------------------------------\n    begin\n      if IsLogEnabled(CovStructPtr(ID.ID).AlertLogID, LogLevel) then\n        WriteBin (\n          ID              => ID\n        ) ;\n      end if ;\n    end procedure WriteBin ;  -- With LogLevel\n\n    ------------------------------------------------------------\n    procedure WriteBin (ID : CoverageIDType; FileName : string;  OpenKind : File_Open_Kind := APPEND_MODE) is\n    ------------------------------------------------------------\n--!!      constant rWritePassFail    : OsvvmOptionsType := ResolveCovWritePassFail   (WritePassFailVar) ;\n--!!      constant rWriteBinInfo     : OsvvmOptionsType := ResolveCovWriteBinInfo    (WriteBinInfoVar  ) ;\n--!!      constant rWriteCount       : OsvvmOptionsType := ResolveCovWriteCount      (WriteCountVar    ) ;\n--!!      constant rWriteAnyIllegal  : OsvvmOptionsType := ResolveCovWriteAnyIllegal (WriteAnyIllegalVar) ;\n      -- constant rWritePrefix      : string         := ResolveOsvvmWritePrefix   (WritePrefixVar.GetOpt) ;\n      -- constant rPassName         : string         := ResolveOsvvmPassName      (PassNameVar.GetOpt  ) ;\n      -- constant rFailName         : string         := ResolveOsvvmFailName      (FailNameVar.GetOpt  ) ;\n--x      file     LocalWriteBinFile : text open OpenKind is FileName ;\n      file LocalWriteBinFile : text ;\n      variable buf               : line ;\n    begin\n      file_open(LocalWriteBinFile, FileName, OpenKind) ;\n      WriteBin (\n        ID              => ID,\n        buf             => buf,\n--!!        WritePassFail   => rWritePassFail,\n--!!        WriteBinInfo    => rWriteBinInfo,\n--!!        WriteCount      => rWriteCount,\n--!!        WriteAnyIllegal => rWriteAnyIllegal,\n        WritePassFail   => WritePassFailVar,\n        WriteBinInfo    => WriteBinInfoVar,\n        WriteCount      => WriteCountVar,\n        WriteAnyIllegal => WriteAnyIllegalVar,\n--!!        WritePrefix     => rWritePrefix,\n--!!        PassName        => rPassName,\n--!!        FailName        => rFailName\n--!!        WritePrefix     => ResolveOsvvmWritePrefix  (WritePrefixVar.GetOpt),\n--!!        PassName        => ResolveOsvvmPassName     (PassNameVar.GetOpt  ),\n--!!        FailName        => ResolveOsvvmFailName     (FailNameVar.GetOpt  ),\n        WritePrefix     => COVERAGE_PRINT_PREFIX,\n        PassName        => COVERAGE_PASS_NAME,\n        FailName        => COVERAGE_FAIL_NAME,\n        UsingLocalFile  => TRUE\n      );\n      writeline(LocalWriteBinFile, buf) ;\n    end procedure WriteBin ;\n\n    ------------------------------------------------------------\n    procedure WriteBin (  -- With LogLevel\n    ------------------------------------------------------------\n      ID              : CoverageIDType ;\n      LogLevel        : LogType ;\n      FileName        : string ;\n      OpenKind        : File_Open_Kind := APPEND_MODE\n    ) is\n    begin\n      if IsLogEnabled(CovStructPtr(ID.ID).AlertLogID, LogLevel) then\n        WriteBin (\n          ID              => ID,\n          FileName        => FileName,\n          OpenKind        => OpenKind\n        ) ;\n      end if ;\n    end procedure WriteBin ;  -- With LogLevel\n\n    ------------------------------------------------------------\n    -- Development only\n    --  pt local for now -- file formal parameter not allowed with method\n--    procedure DumpBin (ID : CoverageIDType; file f : text ) is\n    procedure DumpBin (ID : CoverageIDType; variable buf : inout line ) is\n    ------------------------------------------------------------\n--      variable buf : line ;\n    begin\n      WriteBinName(ID, buf, \"DumpBin: \") ;\n--      writeline(f, buf) ;\n      -- if CovStructPtr(ID.ID).NumBins < 1 then\n      --   Write(f, \"%%FATAL, Coverage Model is empty.  Nothing to print.\" & LF ) ;\n      -- end if ;\n      for i in 1 to CovStructPtr(ID.ID).NumBins loop      -- CovStructPtr(ID.ID).CovBinPtr.all'range\n        swrite(buf, \"%% \") ;\n        if CovStructPtr(ID.ID).CovBinPtr(i).Name.all /= \"\" then\n          swrite(buf, CovStructPtr(ID.ID).CovBinPtr(i).Name.all & \"  \") ;\n        end if ;\n        swrite(buf, \"Bin:\") ;\n        write(buf, CovStructPtr(ID.ID).CovBinPtr(i).BinVal.all) ;\n        case CovStructPtr(ID.ID).CovBinPtr(i).action is\n          when COV_COUNT   =>   swrite(buf, \"    Count = \") ;\n          when COV_IGNORE  =>   swrite(buf, \"   Ignore = \") ;\n          when COV_ILLEGAL =>   swrite(buf, \"  Illegal = \") ;\n          when others      =>   swrite(buf, \"  BOGUS BOGUS BOGUS = \") ;\n        end case ;\n        write(buf, CovStructPtr(ID.ID).CovBinPtr(i).count) ;\n        write(buf, \"   AtLeast = \" & integer'image(CovStructPtr(ID.ID).CovBinPtr(i).AtLeast)) ;\n        write(buf, \"   Weight = \"  & integer'image(CovStructPtr(ID.ID).CovBinPtr(i).Weight)) ;\n        write(buf, \"\" & LF) ;\n--        writeline(f, buf) ;\n      end loop ;\n      swrite(buf, \"\") ;\n--      writeline(f,buf) ;\n    end procedure DumpBin ;\n\n    ------------------------------------------------------------\n    procedure DumpBin (ID : CoverageIDType; LogLevel : LogType := DEBUG) is\n    ------------------------------------------------------------\n      variable buf : line ;\n    begin\n      if IsLogEnabled(CovStructPtr(ID.ID).AlertLogID, LogLevel) then\n        DumpBin(ID, buf) ;\n        WriteToCovFile(buf) ;\n      end if ;\n    end procedure DumpBin ;\n\n    ------------------------------------------------------------\n    --  pt local\n--    procedure WriteCovHoles (ID : CoverageIDType; file f : text;  PercentCov : real := 100.0;  UsingLocalFile : boolean := FALSE) is\n    procedure WriteCovHoles (ID : CoverageIDType; variable buf : inout line;  PercentCov : real := 100.0;  UsingLocalFile : boolean := FALSE) is\n    ------------------------------------------------------------\n--      variable buf : line ;\n    begin\n      if CovStructPtr(ID.ID).NumBins < 1 then\n        if WriteBinFileInit or UsingLocalFile then\n          -- Duplicate Alert in specified file\n          swrite(buf, \"%% Alert FAILURE  \" & GetNamePlus(ID, prefix => \"in \", suffix => \", \") & \"CoveragePkg.WriteCovHoles:\" &\n                      \" coverage model empty.  Nothing to print.\") ;\n--          writeline(f, buf) ;\n        end if ;\n        Alert(CovStructPtr(ID.ID).AlertLogID, GetNamePlus(ID, prefix => \"in \", suffix => \", \") & \"CoveragePkg.WriteCovHoles:\" &\n                      \" coverage model empty.  Nothing to print.\", FAILURE) ;\n        return ;\n      end if ;\n      -- Models with Bins\n      WriteBinName(ID, buf, \"WriteCovHoles: \") ;\n--      writeline(f, buf) ;\n      CovLoop : for i in 1 to CovStructPtr(ID.ID).NumBins loop\n        if CovStructPtr(ID.ID).CovBinPtr(i).action = COV_COUNT and CovStructPtr(ID.ID).CovBinPtr(i).PercentCov < PercentCov then\n          swrite(buf, \"%% \") ;\n          if CovStructPtr(ID.ID).CovBinPtr(i).Name.all /= \"\" then\n            swrite(buf, CovStructPtr(ID.ID).CovBinPtr(i).Name.all & \"  \") ;\n          end if ;\n          swrite(buf, \"Bin:\") ;\n          write(buf, CovStructPtr(ID.ID).CovBinPtr(i).BinVal.all) ;\n          write(buf, \"  Count = \" & integer'image(CovStructPtr(ID.ID).CovBinPtr(i).Count)) ;\n          write(buf, \"  AtLeast = \" & integer'image(CovStructPtr(ID.ID).CovBinPtr(i).AtLeast)) ;\n          if CovStructPtr(ID.ID).WeightMode = WEIGHT or CovStructPtr(ID.ID).WeightMode = REMAIN_WEIGHT then\n            -- Print Weight only when it is used\n            write(buf, \"  Weight = \" & integer'image(CovStructPtr(ID.ID).CovBinPtr(i).Weight)) ;\n          end if ;\n          write(buf, \"\" & LF) ;\n--          writeline(f, buf) ;\n        end if ;\n      end loop CovLoop ;\n      swrite(buf, \"\") ;\n--      writeline(f, buf) ;\n    end procedure WriteCovHoles ;\n\n    ------------------------------------------------------------\n    procedure WriteCovHoles (ID : CoverageIDType; PercentCov : real ) is\n    ------------------------------------------------------------\n      variable buf : line ;\n    begin\n      WriteCovHoles(ID, buf, PercentCov) ;\n      WriteToCovFile(buf) ;\n    end procedure WriteCovHoles ;\n\n    ------------------------------------------------------------\n    procedure WriteCovHoles (ID : CoverageIDType; LogLevel : LogType := ALWAYS ) is\n    ------------------------------------------------------------\n    begin\n      if IsLogEnabled(CovStructPtr(ID.ID).AlertLogID, LogLevel) then\n        WriteCovHoles(ID, CovStructPtr(ID.ID).CovTarget) ;\n      end if;\n    end procedure WriteCovHoles ;\n\n    ------------------------------------------------------------\n    procedure WriteCovHoles (ID : CoverageIDType; LogLevel : LogType ; PercentCov : real ) is\n    ------------------------------------------------------------\n    begin\n      if IsLogEnabled(CovStructPtr(ID.ID).AlertLogID, LogLevel) then\n        WriteCovHoles(ID, PercentCov) ;\n      end if;\n    end procedure WriteCovHoles ;\n\n    ------------------------------------------------------------\n    procedure WriteCovHoles (ID : CoverageIDType; FileName : string;  OpenKind : File_Open_Kind := APPEND_MODE ) is\n    ------------------------------------------------------------\n--x      file CovHoleFile : text open OpenKind is FileName ;\n      file CovHoleFile : text ;\n      variable buf : line ;\n    begin\n      file_open(CovHoleFile, FileName, OpenKind) ;\n--      WriteCovHoles(ID, CovHoleFile, CovStructPtr(ID.ID).CovTarget, TRUE) ;\n      WriteCovHoles(ID, buf, CovStructPtr(ID.ID).CovTarget, TRUE) ;\n      writeline(CovHoleFile, buf) ;\n    end procedure WriteCovHoles ;\n\n    ------------------------------------------------------------\n    procedure WriteCovHoles (ID : CoverageIDType; LogLevel : LogType ; FileName : string;  OpenKind : File_Open_Kind := APPEND_MODE ) is\n    ------------------------------------------------------------\n    begin\n      if IsLogEnabled(CovStructPtr(ID.ID).AlertLogID, LogLevel) then\n        WriteCovHoles(ID, FileName, OpenKind) ;\n      end if;\n    end procedure WriteCovHoles ;\n\n    ------------------------------------------------------------\n    procedure WriteCovHoles (ID : CoverageIDType; FileName : string;  PercentCov : real ; OpenKind : File_Open_Kind := APPEND_MODE ) is\n    ------------------------------------------------------------\n--x      file CovHoleFile : text open OpenKind is FileName ;\n      file CovHoleFile : text ;\n      variable buf : line ;\n    begin\n      file_open(CovHoleFile, FileName, OpenKind) ;\n      -- WriteCovHoles(ID, CovHoleFile, PercentCov, TRUE) ;\n      WriteCovHoles(ID, buf, PercentCov, TRUE) ;\n      writeline(CovHoleFile, buf) ;\n    end procedure WriteCovHoles ;\n\n    ------------------------------------------------------------\n    procedure WriteCovHoles (ID : CoverageIDType; LogLevel : LogType ; FileName : string;  PercentCov : real ; OpenKind : File_Open_Kind := APPEND_MODE ) is\n    ------------------------------------------------------------\n    begin\n      if IsLogEnabled(CovStructPtr(ID.ID).AlertLogID, LogLevel) then\n        WriteCovHoles(ID, FileName, PercentCov, OpenKind) ;\n      end if;\n    end procedure WriteCovHoles ;\n\n    ------------------------------------------------------------\n    --  pt local\n    impure function FindExactBin (\n    -- find an exact match to a bin wrt BinVal, Action, AtLeast, Weight, and Name\n    ------------------------------------------------------------\n      ID      : CoverageIDType ;\n      Merge   : boolean ;\n	    BinVal  : RangeArrayType ;\n      Action  : integer ;\n      AtLeast : integer ;\n      Weight  : integer ;\n      Name    : string\n    ) return integer is\n    begin\n      if Merge then\n        for i in 1 to CovStructPtr(ID.ID).NumBins loop\n          if (BinVal = CovStructPtr(ID.ID).CovBinPtr(i).BinVal.all) and (Action = CovStructPtr(ID.ID).CovBinPtr(i).Action) and\n             (AtLeast = CovStructPtr(ID.ID).CovBinPtr(i).AtLeast) and (Weight = CovStructPtr(ID.ID).CovBinPtr(i).Weight) and\n             (Name = CovStructPtr(ID.ID).CovBinPtr(i).Name.all) then\n            return i ;\n          end if;\n        end loop ;\n      end if ;\n      return 0 ;\n    end function FindExactBin ;\n\n    ------------------------------------------------------------\n    --  pt local\n    procedure ReadNamePtr (\n    ------------------------------------------------------------\n      buf         : inout line ;\n      NamePtr     : inout line ;\n      NameLength  : in integer ;\n      ReadValid   : inout boolean\n    ) is\n      variable Name : string(1 to NameLength) ;\n    begin\n      ReadValid := TRUE ; \n      NamePtr   := NULL ; \n      if NameLength > 0 then\n        read(buf, Name, ReadValid) ;\n        if ReadValid then \n          NamePtr := new string'(Name) ;\n        end if ; \n      end if ;\n    end procedure ReadNamePtr ;\n\n    ------------------------------------------------------------\n    --  pt local\n    procedure ReadCovVars (ID : CoverageIDType; file CovDbFile : text; Good : out boolean ) is\n    ------------------------------------------------------------\n      variable buf                  : line ;\n      variable Empty                : boolean ;\n      variable MultiLineComment     : boolean := FALSE ;\n      variable ReadValid            : boolean ;\n      variable GoodLoop1            : boolean ;\n      variable iSeed                : RandomSeedType ;\n      variable iIllegalMode         : integer ;\n      variable iWeightMode          : integer ;\n      variable iWeightScale         : real ;\n      variable iCovThreshold        : real ;\n      variable iCountMode           : integer ;\n      variable iNumberOfMessages    : integer ;\n      variable iThresholdingEnable  : boolean ;\n      variable iCovTarget           : real ;\n      variable iMergingEnable       : boolean ;\n    begin\n      -- ReadLoop0 : while not EndFile(CovDbFile) loop\n      ReadLoop0 : loop   -- allows emulation of \"return when\"\n        -- ReadLine to Get Coverage Model Name, skip blank and comment lines, fails when file empty\n        exit when AlertIf(CovStructPtr(ID.ID).AlertLogID, EndFile(CovDbFile), GetNamePlus(ID, prefix => \"in \", suffix => \", \") &\n                       \"CoveragePkg.ReadCovDb: No Coverage Data to read\", FAILURE) ;\n        ReadLine(CovDbFile, buf) ;\n        EmptyOrCommentLine(buf, Empty, MultiLineComment) ;\n        next when Empty ;\n\n        if buf.all /= \"Coverage_Model_Not_Named\" then\n          SetName(ID, buf.all) ;\n        end if ;\n\n        exit ReadLoop0 ;\n      end loop ReadLoop0 ;\n\n      -- ReadLoop1 : while not EndFile(CovDbFile) loop\n      ReadLoop1 : loop\n        -- ReadLine to Get Variables, skip blank and comment lines, fails when file empty\n        exit when AlertIf(CovStructPtr(ID.ID).AlertLogID, EndFile(CovDbFile), GetNamePlus(ID, prefix => \"in \", suffix => \", \") &\n                      \"CoveragePkg.ReadCovDb: Coverage DB File Incomplete\", FAILURE) ;\n        ReadLine(CovDbFile, buf) ;\n        EmptyOrCommentLine(buf, Empty, MultiLineComment) ;\n        next when Empty ;\n\n        read(buf, iSeed, ReadValid) ;\n        exit when AlertIfNot(CovStructPtr(ID.ID).AlertLogID, ReadValid, GetNamePlus(ID, prefix => \"in \", suffix => \", \") &\n                       \"CoveragePkg.ReadCovDb: Failed while reading Seed\", FAILURE) ;\n--        RV.SetSeed( iSeed ) ;\n        CovStructPtr(ID.ID).RV         := iSeed ;\n        CovStructPtr(ID.ID).RvSeedInit := TRUE ;\n\n        read(buf, iCovThreshold, ReadValid) ;\n        exit when AlertIfNot(CovStructPtr(ID.ID).AlertLogID, ReadValid, GetNamePlus(ID, prefix => \"in \", suffix => \", \") &\n                       \"CoveragePkg.ReadCovDb: Failed while reading CovThreshold\", FAILURE) ;\n        CovStructPtr(ID.ID).CovThreshold := iCovThreshold ;\n\n        read(buf, iIllegalMode, ReadValid) ;\n        exit when AlertIfNot(CovStructPtr(ID.ID).AlertLogID, ReadValid, GetNamePlus(ID, prefix => \"in \", suffix => \", \") &\n                       \"CoveragePkg.ReadCovDb: Failed while reading IllegalMode\", FAILURE) ;\n        SetIllegalMode(ID, IllegalModeType'val( iIllegalMode )) ;\n\n        read(buf, iWeightMode, ReadValid) ;\n        exit when AlertIfNot(CovStructPtr(ID.ID).AlertLogID, ReadValid, GetNamePlus(ID, prefix => \"in \", suffix => \", \") &\n                       \"CoveragePkg.ReadCovDb: Failed while reading WeightMode\", FAILURE) ;\n        CovStructPtr(ID.ID).WeightMode := WeightModeType'val( iWeightMode ) ;\n\n        read(buf, iWeightScale, ReadValid) ;\n        exit when AlertIfNot(CovStructPtr(ID.ID).AlertLogID, ReadValid, GetNamePlus(ID, prefix => \"in \", suffix => \", \") &\n                       \"CoveragePkg.ReadCovDb: Failed while reading WeightScale\", FAILURE) ;\n        CovStructPtr(ID.ID).WeightScale := iWeightScale  ;\n\n        read(buf, iCountMode, ReadValid) ;\n        exit when AlertIfNot(CovStructPtr(ID.ID).AlertLogID, ReadValid, GetNamePlus(ID, prefix => \"in \", suffix => \", \") &\n                       \"CoveragePkg.ReadCovDb: Failed while reading CountMode\", FAILURE) ;\n        CovStructPtr(ID.ID).CountMode := CountModeType'val( iCountMode ) ;\n\n        read(buf, iThresholdingEnable, ReadValid) ;\n        exit when AlertIfNot(CovStructPtr(ID.ID).AlertLogID, ReadValid, GetNamePlus(ID, prefix => \"in \", suffix => \", \") &\n                       \"CoveragePkg.ReadCovDb: Failed while reading ThresholdingEnable\", FAILURE) ;\n        CovStructPtr(ID.ID).ThresholdingEnable := iThresholdingEnable ;\n\n        read(buf, iCovTarget, ReadValid) ;\n        exit when AlertIfNot(CovStructPtr(ID.ID).AlertLogID, ReadValid, GetNamePlus(ID, prefix => \"in \", suffix => \", \") &\n                       \"CoveragePkg.ReadCovDb: Failed while reading CovTarget\", FAILURE) ;\n        CovStructPtr(ID.ID).CovTarget := iCovTarget ;\n\n        read(buf, iMergingEnable, ReadValid) ;\n        exit when AlertIfNot(CovStructPtr(ID.ID).AlertLogID, ReadValid, GetNamePlus(ID, prefix => \"in \", suffix => \", \") &\n                       \"CoveragePkg.ReadCovDb: Failed while reading MergingEnable\", FAILURE) ;\n        CovStructPtr(ID.ID).MergingEnable := iMergingEnable ;\n\n        exit ReadLoop1 ;\n      end loop ReadLoop1 ;\n\n      GoodLoop1 := ReadValid ;\n\n      -- ReadLoop2 : while not EndFile(CovDbFile) loop\n      ReadLoop2 : while ReadValid loop\n        -- ReadLine to Coverage Model Header WriteBin Message, skip blank and comment lines, fails when file empty\n        exit when AlertIf(CovStructPtr(ID.ID).AlertLogID, EndFile(CovDbFile), GetNamePlus(ID, prefix => \"in \", suffix => \", \") &\n                       \"CoveragePkg.ReadCovDb: Coverage DB File Incomplete\", FAILURE) ;\n        ReadLine(CovDbFile, buf) ;\n        EmptyOrCommentLine(buf, Empty, MultiLineComment) ;\n        next when Empty ;\n\n        read(buf, iNumberOfMessages, ReadValid) ;\n        exit when AlertIfNot(CovStructPtr(ID.ID).AlertLogID, ReadValid, GetNamePlus(ID, prefix => \"in \", suffix => \", \") &\n                       \"CoveragePkg.ReadCovDb: Failed while reading NumberOfMessages\", FAILURE) ;\n\n        for i in 1 to iNumberOfMessages loop\n          exit when AlertIf(CovStructPtr(ID.ID).AlertLogID, EndFile(CovDbFile), GetNamePlus(ID, prefix => \"in \", suffix => \", \") &\n                       \"CoveragePkg.ReadCovDb: End of File while reading Messages\", FAILURE) ;\n          ReadLine(CovDbFile, buf) ;\n          SetMessage(ID, buf.all) ;\n        end loop ;\n\n        exit ReadLoop2 ;\n      end loop ReadLoop2 ;\n\n      Good := ReadValid and  GoodLoop1 ;\n    end procedure ReadCovVars ;\n\n    ------------------------------------------------------------\n    --  pt local\n    procedure ReadCovDbInfo (\n    ------------------------------------------------------------\n      ID                     :     CoverageIDType ;\n      File     CovDbFile     :     text ;\n      variable NumRangeItems : out integer ;\n      variable NumLines      : out integer ;\n      variable Good          : out boolean\n    ) is\n      variable buf               : line ;\n      variable ReadValid         : boolean ;\n      variable Empty             : boolean ;\n      variable MultiLineComment  : boolean := FALSE ;\n    begin\n\n      ReadLoop : loop\n        -- ReadLine to RangeItems NumLines, skip blank and comment lines, fails when file empty\n        exit when AlertIf(CovStructPtr(ID.ID).AlertLogID, EndFile(CovDbFile), GetNamePlus(ID, prefix => \"in \", suffix => \", \") &\n                       \"CoveragePkg.ReadCovDb: Coverage DB File Incomplete\", FAILURE) ;\n        ReadLine(CovDbFile, buf) ;\n        EmptyOrCommentLine(buf, Empty, MultiLineComment) ;\n        next when Empty ;\n\n        read(buf, NumRangeItems, ReadValid) ;\n        exit when AlertIfNot(CovStructPtr(ID.ID).AlertLogID, ReadValid, GetNamePlus(ID, prefix => \"in \", suffix => \", \") &\n                       \"CoveragePkg.ReadCovDb: Failed while reading NumRangeItems\", FAILURE) ;\n        read(buf, NumLines, ReadValid) ;\n        exit when AlertIfNot(CovStructPtr(ID.ID).AlertLogID, ReadValid, GetNamePlus(ID, prefix => \"in \", suffix => \", \") &\n                       \"CoveragePkg.ReadCovDb: Failed while reading NumLines\", FAILURE) ;\n        exit ;\n      end loop ReadLoop ;\n      Good := ReadValid ;\n    end procedure ReadCovDbInfo ;\n\n    ------------------------------------------------------------\n    --  pt local\n    procedure ReadCovDbDataBase (\n    ------------------------------------------------------------\n      ID                     :     CoverageIDType ;\n      File     CovDbFile     :     text ;\n      constant NumRangeItems : in  integer ;\n      constant NumLines      : in  integer ;\n      constant Merge         : in  boolean ;\n      variable Good          : out boolean\n    )  is\n      variable buf              : line ;\n      variable Empty            : boolean ;\n      variable MultiLineComment : boolean := FALSE ;\n      variable ReadValid        : boolean ;\n      -- Format:  Action Count min1 max1 min2 max2 ....\n      variable Action           : integer ;\n      variable Count            : integer ;\n      variable BinVal           : RangeArrayType(1 to NumRangeItems) ;\n      variable index            : integer ;\n      variable AtLeast          : integer ;\n      variable Weight           : integer ;\n      variable PercentCov       : real ;\n      variable NameLength       : integer ;\n      variable SkipBlank        : character ;\n      variable NamePtr          : line ;\n    begin\n      GrowBins(ID, NumLines) ;\n      ReadLoop : for i in 1 to NumLines loop\n\n        GetValidLineLoop: loop\n          exit ReadLoop when AlertIf(CovStructPtr(ID.ID).AlertLogID, EndFile(CovDbFile), GetNamePlus(ID, prefix => \"in \", suffix => \", \") &\n                       \"CoveragePkg.ReadCovDb: Did not read specified number of lines\", FAILURE) ;\n          ReadLine(CovDbFile, buf) ;\n          EmptyOrCommentLine(buf, Empty, MultiLineComment) ;\n          next GetValidLineLoop when Empty ;  -- replace with EmptyLine(buf)\n          exit GetValidLineLoop ;\n        end loop ;\n\n        read(buf, Action, ReadValid) ;\n        exit ReadLoop when AlertIfNot(CovStructPtr(ID.ID).AlertLogID, ReadValid, GetNamePlus(ID, prefix => \"in \", suffix => \", \") &\n                       \"CoveragePkg.ReadCovDb: Failed while reading Action\", FAILURE) ;\n        read(buf, Count, ReadValid) ;\n        exit ReadLoop when AlertIfNot(CovStructPtr(ID.ID).AlertLogID, ReadValid, GetNamePlus(ID, prefix => \"in \", suffix => \", \") &\n                       \"CoveragePkg.ReadCovDb: Failed while reading Count\", FAILURE) ;\n        read(buf, AtLeast, ReadValid) ;\n        exit ReadLoop when AlertIfNot(CovStructPtr(ID.ID).AlertLogID, ReadValid, GetNamePlus(ID, prefix => \"in \", suffix => \", \") &\n                       \"CoveragePkg.ReadCovDb: Failed while reading AtLeast\", FAILURE) ;\n        read(buf, Weight, ReadValid) ;\n        exit ReadLoop when AlertIfNot(CovStructPtr(ID.ID).AlertLogID, ReadValid, GetNamePlus(ID, prefix => \"in \", suffix => \", \") &\n                       \"CoveragePkg.ReadCovDb: Failed while reading Weight\", FAILURE) ;\n        read(buf, PercentCov, ReadValid) ;\n        exit ReadLoop when AlertIfNot(CovStructPtr(ID.ID).AlertLogID, ReadValid, GetNamePlus(ID, prefix => \"in \", suffix => \", \") &\n                       \"CoveragePkg.ReadCovDb: Failed while reading PercentCov\", FAILURE) ;\n        read(buf, BinVal, ReadValid) ;\n        exit ReadLoop when AlertIfNot(CovStructPtr(ID.ID).AlertLogID, ReadValid, GetNamePlus(ID, prefix => \"in \", suffix => \", \") &\n                       \"CoveragePkg.ReadCovDb: Failed while reading BinVal\", FAILURE) ;\n        read(buf, NameLength, ReadValid) ;\n        exit ReadLoop when AlertIfNot(CovStructPtr(ID.ID).AlertLogID, ReadValid, GetNamePlus(ID, prefix => \"in \", suffix => \", \") &\n                       \"CoveragePkg.ReadCovDb: Failed while reading Bin Name Length\", FAILURE) ;\n        read(buf, SkipBlank, ReadValid) ;\n        exit ReadLoop when AlertIfNot(CovStructPtr(ID.ID).AlertLogID, ReadValid, GetNamePlus(ID, prefix => \"in \", suffix => \", \") &\n                       \"CoveragePkg.ReadCovDb: Failed while reading Bin Name Length\", FAILURE) ;\n        ReadNamePtr(buf, NamePtr, NameLength, ReadValid) ;\n        exit ReadLoop when AlertIfNot(CovStructPtr(ID.ID).AlertLogID, ReadValid, GetNamePlus(ID, prefix => \"in \", suffix => \", \") &\n                       \"CoveragePkg.ReadCovDb: Failed while reading Bin Name\", FAILURE) ;\n        if NamePtr /= NULL then \n          index := FindExactBin(ID, Merge, BinVal, Action, AtLeast, Weight, NamePtr.all) ;\n        else\n          index := FindExactBin(ID, Merge, BinVal, Action, AtLeast, Weight, \"\") ;\n        end if ; \n        if index > 0 then\n          -- Bin is an exact match so only merge the count values\n          CovStructPtr(ID.ID).CovBinPtr(index).Count := CovStructPtr(ID.ID).CovBinPtr(index).Count + Count ;\n          CovStructPtr(ID.ID).CovBinPtr(index).PercentCov := CalcPercentCov(\n            Count => CovStructPtr(ID.ID).CovBinPtr.all(index).Count,\n            AtLeast =>  CovStructPtr(ID.ID).CovBinPtr.all(index).AtLeast ) ;\n        else\n          if NamePtr /= NULL then \n            InsertNewBin(ID, BinVal, Action, Count, AtLeast, Weight, NamePtr.all, PercentCov) ;\n          else\n            InsertNewBin(ID, BinVal, Action, Count, AtLeast, Weight, \"\", PercentCov) ;\n          end if ; \n        end if ;\n        deallocate(NamePtr) ;\n      end loop ReadLoop ;\n      Good := ReadValid ;\n    end ReadCovDbDataBase ;\n\n    ------------------------------------------------------------\n    -- pt local\n    procedure ReadCovDb (ID : CoverageIDType; File CovDbFile : text; Merge : boolean := FALSE) is\n    ------------------------------------------------------------\n      -- Format:  Action Count min1 max1 min2 max2\n      variable NumRangeItems : integer ;\n      variable NumLines      : integer ;\n      variable ReadValid    : boolean ;\n    begin\n      if not Merge then\n        Deallocate(ID) ;  -- remove any old bins\n      end if ;\n\n      ReadLoop : loop\n        -- Read coverage private variables to the file\n        ReadCovVars(ID, CovDbFile, ReadValid) ;\n        exit when not ReadValid ;\n\n        -- Get Coverage dimensions and number of items in file.\n        ReadCovDbInfo(ID, CovDbFile, NumRangeItems, NumLines, ReadValid) ;\n        exit when not ReadValid ;\n\n        -- Read the file\n        ReadCovDbDataBase(ID, CovDbFile, NumRangeItems, NumLines, Merge, ReadValid) ;\n        exit ;\n      end loop ReadLoop ;\n    end ReadCovDb ;\n\n    ------------------------------------------------------------\n    procedure ReadCovDb (ID : CoverageIDType; FileName : string; Merge : boolean := FALSE) is\n    ------------------------------------------------------------\n      -- Format:  Action Count min1 max1 min2 max2\n      file CovDbFile         : text open READ_MODE is FileName ;\n    begin\n      ReadCovDb(ID, CovDbFile, Merge) ;\n    end procedure ReadCovDb ;\n\n    ------------------------------------------------------------\n    --  pt local\n    procedure WriteCovDbVars (ID : CoverageIDType; file CovDbFile : text ) is\n    ------------------------------------------------------------\n      variable buf             : line ;\n      variable CovMessageCount : integer ;\n    begin\n      -- write coverage private variables to the file\n      if CovStructPtr(ID.ID).CovName /= NULL then\n        swrite(buf, CovStructPtr(ID.ID).CovName.all) ;\n      else\n        swrite(buf, \"Coverage_Model_Not_Named\") ;\n      end if ;\n      writeline(CovDbFile, buf) ;\n\n      write(buf, CovStructPtr(ID.ID).RV ) ;\n      write(buf, ' ') ;\n      write(buf, CovStructPtr(ID.ID).CovThreshold, RIGHT, 0, 5) ;\n      write(buf, ' ') ;\n      write(buf, IllegalModeType'pos(CovStructPtr(ID.ID).IllegalMode)) ;\n      write(buf, ' ') ;\n      write(buf, WeightModeType'pos(CovStructPtr(ID.ID).WeightMode)) ;\n      write(buf, ' ') ;\n      write(buf, CovStructPtr(ID.ID).WeightScale, RIGHT, 0, 6) ;\n      write(buf, ' ') ;\n      write(buf, CountModeType'pos(CovStructPtr(ID.ID).CountMode)) ;\n      write(buf, ' ') ;\n      write(buf, to_upper(boolean'image(CovStructPtr(ID.ID).ThresholdingEnable))) ; -- boolean\n      write(buf, ' ') ;\n      write(buf, CovStructPtr(ID.ID).CovTarget, RIGHT, 0, 6) ; -- Real\n      write(buf, ' ') ;\n      write(buf, to_upper(boolean'image(CovStructPtr(ID.ID).MergingEnable))) ; -- boolean\n      write(buf, ' ') ;\n      writeline(CovDbFile, buf) ;\n      GetMessageCount(CovStructPtr(ID.ID).CovMessage, CovMessageCount) ;\n      write(buf, CovMessageCount ) ;\n      writeline(CovDbFile, buf) ;\n      WriteMessage(CovDbFile, CovStructPtr(ID.ID).CovMessage) ;\n    end procedure WriteCovDbVars ;\n\n    ------------------------------------------------------------\n    --  pt local\n    procedure WriteCovDb (ID : CoverageIDType; file CovDbFile : text ) is\n    ------------------------------------------------------------\n      -- Format:  Action Count min1 max1 min2 max2\n      variable buf       : line ;\n    begin\n      -- write Cover variables to the file\n      WriteCovDbVars(ID, CovDbFile ) ;\n\n      -- write NumRangeItems, NumLines\n      write(buf, CovStructPtr(ID.ID).CovBinPtr(1).BinVal'length) ;\n      write(buf, ' ') ;\n      write(buf, CovStructPtr(ID.ID).NumBins) ;\n      write(buf, ' ') ;\n      writeline(CovDbFile, buf) ;\n      -- write coverage to a file\n      writeloop : for LineCount in 1 to CovStructPtr(ID.ID).NumBins loop\n        write(buf, CovStructPtr(ID.ID).CovBinPtr(LineCount).Action) ;\n        write(buf, ' ') ;\n        write(buf, CovStructPtr(ID.ID).CovBinPtr(LineCount).Count) ;\n        write(buf, ' ') ;\n        write(buf, CovStructPtr(ID.ID).CovBinPtr(LineCount).AtLeast) ;\n        write(buf, ' ') ;\n        write(buf, CovStructPtr(ID.ID).CovBinPtr(LineCount).Weight) ;\n        write(buf, ' ') ;\n        write(buf, CovStructPtr(ID.ID).CovBinPtr(LineCount).PercentCov, RIGHT, 0, 4) ;\n        write(buf, ' ') ;\n        WriteBinVal(buf, CovStructPtr(ID.ID).CovBinPtr(LineCount).BinVal.all) ;\n        write(buf, ' ') ;\n        write(buf, CovStructPtr(ID.ID).CovBinPtr(LineCount).Name'length) ;\n        write(buf, ' ') ;\n        write(buf, CovStructPtr(ID.ID).CovBinPtr(LineCount).Name.all) ;\n        writeline(CovDbFile, buf) ;\n      end loop WriteLoop ;\n    end procedure WriteCovDb ;\n\n    ------------------------------------------------------------\n    procedure WriteCovDb (ID : CoverageIDType; FileName : string; OpenKind : File_Open_Kind := WRITE_MODE ) is\n    ------------------------------------------------------------\n      -- Format:  Action Count min1 max1 min2 max2\n      file CovDbFile : text ;\n    begin\n      file_open(CovDbFile, FileName, OpenKind) ;\n      if CovStructPtr(ID.ID).NumBins >= 1 then\n        WriteCovDb(ID, CovDbFile) ;\n      else\n        Alert(CovStructPtr(ID.ID).AlertLogID, GetNamePlus(ID, prefix => \"in \", suffix => \", \") &\n                       \"CoveragePkg.WriteCovDb: no bins defined \", FAILURE) ;\n      end if ;\n      file_close(CovDbFile) ;\n    end procedure WriteCovDb ;\n\n--     ------------------------------------------------------------\n--     procedure WriteCovDb (ID : CoverageIDType) is\n--     ------------------------------------------------------------\n--     begin\n--       if WriteCovDbFileInit then\n--         WriteCovDb(ID, WriteCovDbFile) ;\n--       else\n--         report \"CoveragePkg: WriteCovDb file not specified\" severity failure ;\n--       end if ;\n--     end procedure WriteCovDb ;\n\n    ------------------------------------------------------------\n    --  pt local\n    procedure WriteCovSettingsYaml (ID : CoverageIDType; variable buf : inout LINE; Prefix : string ) is\n    ------------------------------------------------------------\n      variable TotalCovCount, TotalCovGoal : integer ;\n    begin\n      -- write bins to YAML file\n      write(buf, Prefix & \"Settings: \" & LF) ;\n      write(buf, Prefix & \"  CovWeight: \"          & to_string(CovStructPtr(ID.ID).CovWeight)                    & LF) ;\n      write(buf, Prefix & \"  Goal: \"               & to_string(CovStructPtr(ID.ID).CovTarget, 1)                 & LF) ;\n      write(buf, Prefix & \"  WeightMode: \"\"\"       & to_upper(to_string(CovStructPtr(ID.ID).WeightMode))         & '\"' & LF) ;\n      write(buf, Prefix & \"  Seeds: [\"             & to_string(CovStructPtr(ID.ID).RV, \", \") & \"]\"               & LF) ;\n      write(buf, Prefix & \"  CountMode: \"\"\"        & to_upper(to_string(CovStructPtr(ID.ID).CountMode))          & '\"' & LF) ;\n      write(buf, Prefix & \"  IllegalMode: \"\"\"      & to_upper(to_string(CovStructPtr(ID.ID).IllegalMode))        & '\"' & LF) ;\n      write(buf, Prefix & \"  Threshold: \"          & to_string(CovStructPtr(ID.ID).CovThreshold, 1)              & LF) ;\n      write(buf, Prefix & \"  ThresholdEnable: \"\"\"  & to_upper(to_string(CovStructPtr(ID.ID).ThresholdingEnable)) & '\"' & LF) ;\n      GetTotalCovCountAndGoal (ID, TotalCovCount, TotalCovGoal) ;\n      write(buf, Prefix & \"  TotalCovCount: \"      & to_string(TotalCovCount)                                    & LF) ;\n      write(buf, Prefix & \"  TotalCovGoal: \"       & to_string(TotalCovGoal)                                     & LF) ;\n    end procedure WriteCovSettingsYaml ;\n\n    ------------------------------------------------------------\n    --  pt local\n    procedure WriteCovFieldNameYaml (ID : CoverageIDType; variable buf : inout LINE; Prefix : string ) is\n    ------------------------------------------------------------\n      variable Dimensions : integer ;\n      variable FieldWidth : integer ;\n      variable FieldName  : FieldNameArrayPtrType ;\n    begin\n      FieldName  := CovStructPtr(ID.ID).FieldName ;\n      Dimensions := CovStructPtr(ID.ID).BinValLength ;\n      if FieldName = NULL then\n        FieldWidth := 0 ;\n      else\n        FieldWidth := FieldName'length;\n      end if;\n\n      write(buf, Prefix & \"  FieldNames: \" & LF) ;\n      for i in 1 to Dimensions loop\n        if i > FieldWidth then\n          write(buf, Prefix & \"    - \"\"Bin\" & to_string(i)  & '\"' & LF) ;\n        else\n          write(buf, Prefix & \"    - \"\"\" & FieldName(i).all & '\"' & LF) ;\n        end if ;\n      end loop ;\n    end procedure WriteCovFieldNameYaml ;\n\n    ------------------------------------------------------------\n    --  pt local\n    procedure WriteCovBinInfoYaml (ID : CoverageIDType; variable buf : inout LINE; Prefix : string ) is\n    ------------------------------------------------------------\n    begin\n      -- write bins to YAML file\n      write(buf, Prefix & \"BinInfo: \" & LF) ;\n      write(buf, Prefix & \"  Dimensions: \" & to_string(CovStructPtr(ID.ID).BinValLength) & LF) ;\n      WriteCovFieldNameYaml(ID, buf, Prefix) ;\n      write(buf, Prefix & \"  NumBins: \" & to_string(CovStructPtr(ID.ID).NumBins) & LF) ;\n    end procedure WriteCovBinInfoYaml ;\n\n    ------------------------------------------------------------\n    procedure WriteBinValYaml (\n    -- package local for now\n    ------------------------------------------------------------\n      variable buf    : inout line ;\n      constant BinVal : in    RangeArrayType ;\n      constant Prefix : in    string\n    ) is\n    begin\n      for i in BinVal'range loop\n        write(buf, Prefix &\n            \"- {Min: \" & to_string(BinVal(i).min) &\n            \", Max: \"  & to_string(BinVal(i).max) & \"}\" & LF) ;\n      end loop ;\n    end procedure WriteBinValYaml ;\n\n    ------------------------------------------------------------\n    --  pt local\n    procedure WriteCovBinsYaml (ID : CoverageIDType; variable buf : inout LINE; Prefix : string ) is\n    ------------------------------------------------------------\n      variable Action : integer ;\n      variable CovBin : CovBinInternalBaseType ;\n    begin\n      -- write bins to YAML file\n      write(buf, Prefix & \"Bins: \" & LF) ;\n\n      writeloop : for EachLine in 1 to CovStructPtr(ID.ID).NumBins loop\n        CovBin := CovStructPtr(ID.ID).CovBinPtr(EachLine) ;\n        write(buf, Prefix & \"  - Name: \"\"\" & CovBin.Name.all             & '\"' & LF) ;\n        write(buf, Prefix & \"    Type: \"\"\" & ActionToName(CovBin.Action) & '\"' & LF ) ;\n        write(buf, Prefix & \"    Range: \" & LF) ;\n        WriteBinValYaml(buf, CovBin.BinVal.all, Prefix & \"      \") ;\n        write(buf, Prefix & \"    Count: \"      & to_string(CovBin.Count) & LF) ;\n        write(buf, Prefix & \"    AtLeast: \"    & to_string(CovBin.AtLeast) & LF) ;\n        write(buf, Prefix & \"    PercentCov: \" & to_string(CovBin.PercentCov, 4) & LF) ;\n      end loop writeloop ;\n    end procedure WriteCovBinsYaml ;\n\n    ------------------------------------------------------------\n    --  pt local\n    procedure WriteCovYaml (ID : CoverageIDType; file CovYamlFile : text; TestCaseName : string ) is\n    ------------------------------------------------------------\n      variable buf       : line ;\n      constant NAME_PREFIX : string := \"  \" ;\n    begin\n      -- If no bins, FAIL and return (if resumed)\n      if CovStructPtr(ID.ID).NumBins < 1 then\n        Alert(CovStructPtr(ID.ID).AlertLogID, GetNamePlus(ID, prefix => \"in \", suffix => \", \") &\n                       \"CoveragePkg.WriteCovYaml: no bins defined \", FAILURE) ;\n        return ;\n      end if ;\n\n      write(buf, NAME_PREFIX & \"- Name: \"     & '\"' & GetName(ID) & '\"' & LF) ;\n--!! TODO: Add Writing for ParentName, ReportMode, Search, PrintParent\n      write(buf, NAME_PREFIX & \"  TestCases: \" & LF) ;\n      write(buf, NAME_PREFIX & \"    - \" & '\"' & TestCaseName & '\"' & LF) ;\n--!! Add code to list out merged tests\n      write(buf, NAME_PREFIX & \"  Coverage: \" & to_string(GetCov(ID), 2) & LF) ;\n      WriteCovSettingsYaml(ID, buf, NAME_PREFIX &  \"  \") ;\n      WriteCovBinInfoYaml (ID, buf, NAME_PREFIX &  \"  \") ;\n      WriteCovBinsYaml    (ID, buf, NAME_PREFIX &  \"  \") ;\n      writeline(CovYamlFile, buf) ;\n    end procedure WriteCovYaml ;\n    \n    ------------------------------------------------------------\n    --  pt local\n    procedure WriteSettingsYaml (file CovYamlFile : text) is\n    ------------------------------------------------------------\n      variable buf            : line ;\n      constant NAME_PREFIX    : string := \"\" ;\n --!!     constant rWritePassFail : boolean := IsEnabled(ResolveCovWritePassFail(WritePassFailVar)) ;\n    begin\n      write(buf, NAME_PREFIX & \"Settings: \" & LF) ;\n      -- write(buf, NAME_PREFIX & \"  AlertIfNotCovered: \" & ifelse(AlertIfNotCoveredVar, \"1\", \"0\") & LF) ;\n      write(buf, NAME_PREFIX & \"  WritePassFail: \"     & ifelse(WritePassFailVar or ErrorIfNotCoveredVar, \"1\", \"0\")) ;\n      writeline(CovYamlFile, buf) ;\n    end procedure WriteSettingsYaml ;\n\n--     ------------------------------------------------------------\n--     procedure WriteCovYaml (ID : CoverageIDType; FileName : string; OpenKind : File_Open_Kind := WRITE_MODE ) is\n--     ------------------------------------------------------------\n--       file CovYamlFile : text open OpenKind is FileName ;\n--     begin\n--       WriteCovYaml(ID, CovYamlFile) ;\n--       file_close(CovYamlFile) ;\n--     end procedure WriteCovYaml ;\n\n    ------------------------------------------------------------\n    procedure WriteCovYaml (FileName : string := \"\"; Coverage : real ; OpenKind : File_Open_Kind := WRITE_MODE) is\n    ------------------------------------------------------------\n      constant RESOLVED_FILE_NAME : string := ifelse(FileName = \"\", OSVVM_RAW_OUTPUT_DIRECTORY & GetAlertLogName & \"_cov.yml\", FileName) ;\n--x      file CovYamlFile : text open OpenKind is RESOLVED_FILE_NAME ;\n      file CovYamlFile : text ;\n      variable buf : line ;\n    begin\n      file_open(CovYamlFile, RESOLVED_FILE_NAME, OpenKind) ;\n      swrite(buf, \"Version: 1.0\" & LF) ;\n      swrite(buf, \"Coverage: \" & to_string(Coverage, 2) ) ;\n      writeline(CovYamlFile, buf) ;\n      WriteSettingsYaml(CovYamlFile) ;\n      swrite(buf, \"Models: \") ;\n      writeline(CovYamlFile, buf) ;\n      for i in 1 to NumItems loop\n        if CovStructPtr(i).NumBins >= 1 then\n          WriteCovYaml(CoverageIDType'(ID => i), CovYamlFile, GetAlertLogName) ;\n        end if ;\n      end loop ;\n      file_close(CovYamlFile) ;\n    end procedure WriteCovYaml ;\n\n    ------------------------------------------------------------\n    --  pt local.  Find a specific token potentially split across lines\n    procedure ReadFindToken (\n    ------------------------------------------------------------\n      file     ReadFile :       text ;\n      constant Token    : in    string ;\n      variable buf      : inout line ;\n      variable Found    : out   boolean\n    ) is\n      variable Empty, MultiLineComment, ReadValid  : boolean ;\n      variable vToken     : string(1 to Token'length) ;\n    begin\n      Found := FALSE ;\n\n      ReadLoop : loop\n        if buf = NULL or buf.all'length = 0  then\n          -- return Good FALSE when file empty\n          exit ReadLoop when EndFile(ReadFile) ;\n          -- Get Next Line\n          ReadLine(ReadFile, buf) ;\n        end if ;\n        -- Skip blank and multi-line comment lines\n        EmptyOrCommentLine(buf, Empty, MultiLineComment) ;\n        next ReadLoop when Empty;\n\n        read(buf, vToken, ReadValid) ;\n        if not ReadValid then\n          deallocate(buf) ;\n          next ReadLoop ;\n        end if ;\n        next ReadLoop when vToken /= Token ;\n        Found := TRUE ;\n        exit ReadLoop ;\n      end loop ReadLoop ;\n    end procedure ReadFindToken ;\n\n    ------------------------------------------------------------\n    --  pt local\n    procedure ReadQuotedString (\n    ------------------------------------------------------------\n      variable buf      : inout line ;\n      variable Name     : inout line\n    ) is\n      variable char    : character ;\n      variable vString : string(1 to buf'length) ;\n      variable Index   : integer := 1 ;\n      variable Found, Empty, ReadValid : boolean ;\n    begin\n      Found := FALSE ;\n      if Name /= NULL then\n        deallocate(Name) ;\n      end if ;\n\n      ReadLoop : loop\n        SkipWhiteSpace(buf, Empty) ;  -- Skips white space at beginning of line\n        exit ReadLoop when Empty ;\n\n        exit ReadLoop when buf.all(buf'left) /= '\"' ;\n        Read(buf, Char, ReadValid) ;\n        exit ReadLoop when not ReadValid ;\n\n        for i in vString'range loop\n          Read(buf, vString(i), ReadValid) ;\n          exit ReadLoop when not ReadValid ;\n          if vString(i) = '\"' then\n            Index := i - 1 ;\n            Found := TRUE ;\n            exit ;\n          end if ;\n          exit ReadLoop when buf.all'length = 0 ;\n        end loop ;\n      end loop ReadLoop ;\n\n      if Found then\n        Name := new string'(vString(1 to Index)) ;\n      end if ;\n    end procedure ReadQuotedString ;\n\n    ------------------------------------------------------------\n    --  pt local\n    procedure ReadCovModelNameYaml (\n    ------------------------------------------------------------\n      variable ID          : out CoverageIDType ;\n      file     CovYamlFile :     text ;\n      variable Found       : out boolean\n    ) is\n      variable buf  : line ;\n      variable sName : line ;\n    begin\n      Found := FALSE ;\n      ReadLoop: loop\n        ReadFindToken (CovYamlFile, \"- Name:\", buf, Found) ;\n        exit ReadLoop when not Found ;\n        -- Get the Name\n        ReadQuotedString(buf, sName) ;\n        exit when AlertIf(OSVVM_COV_ALERTLOG_ID, sName = NULL,\n            \"CoveragePkg.ReadCovYaml: Unnamed Coverage Model.\", COV_READ_YAML_ALERT_LEVEL);\n\n--!! TODO: Add reading for ParentName, ReportMode, Search, PrintParent\n        ID := NewID(sName.all, ReportMode => ENABLED, Search => NAME_AND_PARENT, PrintParent => PRINT_NAME_AND_PARENT) ;\n        deallocate(sName) ;\n        Found := TRUE ;\n        exit ;\n      end loop ReadLoop ;\n    end procedure ReadCovModelNameYaml ;\n\n    ------------------------------------------------------------\n    --  pt local\n    procedure ReadCovSettingsYaml (\n    ------------------------------------------------------------\n      constant CovID       : in  CoverageIDType ;\n      file     CovYamlFile :     text ;\n      variable Found       : out boolean\n    ) is\n      variable buf          : line ;\n      variable Name         : line ;\n      constant ID           : integer := CovID.ID ;\n      constant AlertLogID   : AlertLogIDType := CovStructPtr(ID).AlertLogID ;\n      variable vInteger     : integer ;\n      variable vReal        : real ;\n      variable Seed1, Seed2 : integer ;\n      variable ReadValid    : boolean ;\n    begin\n      Found := FALSE ;\n      ReadLoop: loop\n        ReadFindToken (CovYamlFile, \"Settings:\", buf, Found) ;\n        exit ReadLoop when AlertIf(AlertLogID, not Found,\n            \"CoveragePkg.ReadCovYaml did not find \"\"Settings:\"\"\", COV_READ_YAML_ALERT_LEVEL) ;\n\n        -- CovWeight\n        ReadFindToken (CovYamlFile, \"CovWeight:\", buf, Found) ;\n        exit ReadLoop when AlertIf(AlertLogID, not Found,\n            \"CoveragePkg.ReadCovYaml did not find \"\"Settings:\"\"\", COV_READ_YAML_ALERT_LEVEL) ;\n        Read(buf, vInteger, ReadValid) ;\n        exit ReadLoop when AlertIf(AlertLogID, not ReadValid,\n            \"CoveragePkg.ReadCovYaml Error while reading CovWeight value.\", COV_READ_YAML_ALERT_LEVEL) ;\n        CovStructPtr(ID).CovWeight := vInteger ;\n\n        -- Goal / CovTarget\n        ReadFindToken (CovYamlFile, \"Goal:\", buf, Found) ;\n        exit ReadLoop when AlertIf(AlertLogID, not Found,\n            \"CoveragePkg.ReadCovYaml did not find \"\"Goal:\"\"\", COV_READ_YAML_ALERT_LEVEL) ;\n        Read(buf, vReal, ReadValid) ;\n        exit ReadLoop when AlertIf(AlertLogID, not ReadValid,\n            \"CoveragePkg.ReadCovYaml Error while reading CovTarget value.\", COV_READ_YAML_ALERT_LEVEL) ;\n        CovStructPtr(ID).CovTarget := vReal ;\n\n       -- WeightMode\n        ReadFindToken (CovYamlFile, \"WeightMode:\", buf, Found) ;\n        exit ReadLoop when AlertIf(AlertLogID, not Found,\n            \"CoveragePkg.ReadCovYaml did not find \"\"WeightMode:\"\"\", COV_READ_YAML_ALERT_LEVEL) ;\n        ReadQuotedString(buf, Name) ;\n        exit ReadLoop when AlertIf(AlertLogID, Name = NULL,\n            \"CoveragePkg.ReadCovYaml Error while reading WeightMode value.\", COV_READ_YAML_ALERT_LEVEL) ;\n        if Name.all = \"REMAIN\" then\n          CovStructPtr(ID).WeightMode := REMAIN ;\n        else -- at_least\n          CovStructPtr(ID).WeightMode := AT_LEAST ;\n        end if ;\n\n       -- Seeds\n        ReadFindToken (CovYamlFile, \"Seeds:\", buf, Found) ;\n        exit ReadLoop when AlertIf(AlertLogID, not Found,\n            \"CoveragePkg.ReadCovYaml did not find \"\"Seeds:\"\"\", COV_READ_YAML_ALERT_LEVEL) ;\n\n        -- [\n        ReadFindToken (CovYamlFile, \"[\", buf, Found) ;\n        exit ReadLoop when AlertIf(AlertLogID, not Found,\n            \"CoveragePkg.ReadCovYaml did not find Seeds \"\"[\"\"\", COV_READ_YAML_ALERT_LEVEL) ;\n        Read(buf, Seed1, ReadValid) ;\n        exit ReadLoop when AlertIf(AlertLogID, not ReadValid,\n            \"CoveragePkg.ReadCovYaml Error while reading Seed1 value.\", COV_READ_YAML_ALERT_LEVEL) ;\n\n        -- ,\n        ReadFindToken (CovYamlFile, \",\", buf, Found) ;\n        exit ReadLoop when AlertIf(AlertLogID, not Found,\n            \"CoveragePkg.ReadCovYaml did not find Seed #2 \"\",\"\"\", COV_READ_YAML_ALERT_LEVEL) ;\n        Read(buf, Seed2, ReadValid) ;\n        exit ReadLoop when AlertIf(AlertLogID, not ReadValid,\n            \"CoveragePkg.ReadCovYaml Error while reading Seed2 value.\", COV_READ_YAML_ALERT_LEVEL) ;\n\n        CovStructPtr(ID).RV := (Seed1, Seed2) ;\n\n       -- CountMode\n        ReadFindToken (CovYamlFile, \"CountMode:\", buf, Found) ;\n        exit ReadLoop when AlertIf(AlertLogID, not Found,\n            \"CoveragePkg.ReadCovYaml did not find \"\"CountMode:\"\"\", COV_READ_YAML_ALERT_LEVEL) ;\n        ReadQuotedString(buf, Name) ;\n        exit ReadLoop when AlertIf(AlertLogID, Name = NULL,\n            \"CoveragePkg.ReadCovYaml Error while reading CountMode value.\", COV_READ_YAML_ALERT_LEVEL) ;\n        if Name.all = \"COUNT_ALL\" then\n          CovStructPtr(ID).CountMode := COUNT_ALL ;\n        else\n          CovStructPtr(ID).CountMode := COUNT_FIRST ;\n        end if ;\n\n       -- IllegalMode\n        ReadFindToken (CovYamlFile, \"IllegalMode:\", buf, Found) ;\n        exit ReadLoop when AlertIf(AlertLogID, not Found,\n            \"CoveragePkg.ReadCovYaml did not find \"\"IllegalMode:\"\"\", COV_READ_YAML_ALERT_LEVEL) ;\n        ReadQuotedString(buf, Name) ;\n        exit ReadLoop when AlertIf(AlertLogID, Name = NULL,\n            \"CoveragePkg.ReadCovYaml Error while reading IllegalMode value.\", COV_READ_YAML_ALERT_LEVEL) ;\n        if Name.all = \"ILLEGAL_OFF\" then\n          CovStructPtr(ID).IllegalMode := ILLEGAL_OFF ;\n        elsif Name.all = \"ILLEGAL_FAILURE\" then\n          CovStructPtr(ID).IllegalMode := ILLEGAL_FAILURE ;\n        else\n          CovStructPtr(ID).IllegalMode := ILLEGAL_ON ;\n        end if ;\n\n       -- Threshold\n        ReadFindToken (CovYamlFile, \"Threshold:\", buf, Found) ;\n        exit ReadLoop when AlertIf(AlertLogID, not Found,\n            \"CoveragePkg.ReadCovYaml did not find \"\"Threshold:\"\"\", COV_READ_YAML_ALERT_LEVEL) ;\n        Read(buf, vReal, ReadValid) ;\n        exit ReadLoop when AlertIf(AlertLogID, not ReadValid,\n            \"CoveragePkg.ReadCovYaml Error while reading Threshold value.\", COV_READ_YAML_ALERT_LEVEL) ;\n        CovStructPtr(ID).CovThreshold := vReal ;\n\n       -- ThresholdEnable\n        ReadFindToken (CovYamlFile, \"ThresholdEnable:\", buf, Found) ;\n        exit ReadLoop when AlertIf(AlertLogID, not Found,\n            \"CoveragePkg.ReadCovYaml did not find \"\"ThresholdEnable:\"\"\", COV_READ_YAML_ALERT_LEVEL) ;\n        ReadQuotedString(buf, Name) ;\n        exit ReadLoop when AlertIf(AlertLogID, Name = NULL,\n            \"CoveragePkg.ReadCovYaml Error while reading IllegalMode value.\", COV_READ_YAML_ALERT_LEVEL) ;\n        if Name.all = \"TRUE\" then\n          CovStructPtr(ID).ThresholdingEnable := TRUE ;\n        else\n          CovStructPtr(ID).ThresholdingEnable := FALSE ;\n        end if ;\n\n       -- TotalCovCount - read and toss\n        ReadFindToken (CovYamlFile, \"TotalCovCount:\", buf, Found) ;\n        exit ReadLoop when AlertIf(AlertLogID, not Found,\n            \"CoveragePkg.ReadCovYaml did not find \"\"TotalCovCount:\"\"\", COV_READ_YAML_ALERT_LEVEL) ;\n        Read(buf, vInteger, ReadValid) ;\n        exit ReadLoop when AlertIf(AlertLogID, not ReadValid,\n            \"CoveragePkg.ReadCovYaml Error while reading TotalCovCount value.\", COV_READ_YAML_ALERT_LEVEL) ;\n        -- Value not used\n\n       -- TotalCovGoal - read and toss\n        ReadFindToken (CovYamlFile, \"TotalCovGoal:\", buf, Found) ;\n        exit ReadLoop when AlertIf(AlertLogID, not Found,\n            \"CoveragePkg.ReadCovYaml did not find \"\"TotalCovGoal:\"\"\", COV_READ_YAML_ALERT_LEVEL) ;\n        Read(buf, vInteger, ReadValid) ;\n        exit ReadLoop when AlertIf(AlertLogID, not ReadValid,\n            \"CoveragePkg.ReadCovYaml Error while reading TotalCovGoal value.\", COV_READ_YAML_ALERT_LEVEL) ;\n\n        -- End\n        Found := TRUE ;\n        exit ReadLoop ;\n      end loop ReadLoop ;\n      deallocate(Name) ;\n    end procedure ReadCovSettingsYaml ;\n\n    ------------------------------------------------------------\n    --  pt local\n    procedure ReadCovBinInfoYaml (\n    ------------------------------------------------------------\n      constant CovID       : in  CoverageIDType ;\n      file     CovYamlFile :     text ;\n      variable Dimensions  : out integer ;\n      variable NumBins     : out integer ;\n      variable Found       : out boolean\n    ) is\n      variable buf            : line ;\n      variable FieldNameArray : FieldNameArrayType(1 to 20) ;\n      constant ID             : integer := CovID.ID ;\n      constant AlertLogID     : AlertLogIDType := CovStructPtr(ID).AlertLogID ;\n      variable ReadValid      : boolean ;\n      variable FoundFieldName : boolean ;\n    begin\n      Found := FALSE ;\n      Dimensions := 0 ;\n      NumBins := 0 ;\n      ReadLoop: loop\n        ReadFindToken (CovYamlFile, \"BinInfo:\", buf, Found) ;\n        exit when AlertIf(AlertLogID, not Found,\n            \"CoveragePkg.ReadCovYaml did not find \"\"BinInfo:\"\"\", COV_READ_YAML_ALERT_LEVEL) ;\n\n        -- Dimensions\n        ReadFindToken (CovYamlFile, \"Dimensions:\", buf, Found) ;\n        exit when AlertIf(AlertLogID, not Found,\n            \"CoveragePkg.ReadCovYaml did not find \"\"Dimensions:\"\"\", COV_READ_YAML_ALERT_LEVEL) ;\n        Read(buf, Dimensions, ReadValid) ;\n        exit when AlertIf(AlertLogID, not ReadValid,\n            \"CoveragePkg.ReadCovYaml Error while reading Dimensions value.\", COV_READ_YAML_ALERT_LEVEL) ;\n        CovStructPtr(ID).BinValLength := Dimensions ;\n\n        -- FieldNames\n        ReadFindToken (CovYamlFile, \"FieldNames:\", buf, Found) ;\n        exit when AlertIf(AlertLogID, not Found,\n            \"CoveragePkg.ReadCovYaml did not find \"\"FieldNames:\"\"\", COV_READ_YAML_ALERT_LEVEL) ;\n\n        -- FieldNames Values\n        FoundFieldName := FALSE ;\n        for i in 1 to Dimensions loop\n          ReadFindToken (CovYamlFile, \"-\", buf, Found) ;\n          exit when AlertIf(AlertLogID, not Found,\n              \"CoveragePkg.ReadCovYaml did not find Field Name deliminter '-'.\", COV_READ_YAML_ALERT_LEVEL) ;\n          ReadQuotedString(buf, FieldNameArray(i)) ;\n          exit ReadLoop when AlertIf(AlertLogID, FieldNameArray(i) = NULL,\n              \"CoveragePkg.ReadCovYaml Error while reading Field Name value # \" & to_string(i), COV_READ_YAML_ALERT_LEVEL) ;\n          if FieldNameArray(i).all /= (\"Bin\" & to_string(i)) then\n            FoundFieldName := TRUE ;\n          end if ;\n        end loop ;\n        if FoundFieldName then\n          CovStructPtr(ID).FieldName := new FieldNameArrayType'(FieldNameArray(1 to Dimensions)) ;\n        end if ;\n\n        -- NumBins\n        ReadFindToken (CovYamlFile, \"NumBins:\", buf, Found) ;\n        exit when AlertIf(AlertLogID, not Found,\n            \"CoveragePkg.ReadCovYaml did not find \"\"NumBins:\"\"\", COV_READ_YAML_ALERT_LEVEL) ;\n        Read(buf, NumBins, ReadValid) ;\n        exit when AlertIf(AlertLogID, not ReadValid,\n            \"CoveragePkg.ReadCovYaml Error while reading NumBins value.\", COV_READ_YAML_ALERT_LEVEL) ;\n\n        -- End\n        Found := TRUE ;\n        exit ;\n      end loop ReadLoop ;\n      if not Found or not FoundFieldName then\n        -- clean up pointers\n        for i in 1 to Dimensions loop\n          deallocate(FieldNameArray(i)) ;\n        end loop ;\n      end if ;\n    end procedure ReadCovBinInfoYaml ;\n\n    ------------------------------------------------------------\n    --  pt local\n    procedure ReadCovBinValYaml (\n    ------------------------------------------------------------\n      file     CovYamlFile :     text ;\n      constant AlertLogID  : in  AlertLogIDType ;\n      variable BinVal      : out RangeArrayType ;\n      variable Found       : out boolean\n    ) is\n      variable buf         : line ;\n      variable Min, Max    : integer ;\n      variable ReadValid   : boolean ;\n    begin\n      Found := FALSE ;\n      ReadLoop: loop\n        -- Range:\n        ReadFindToken (CovYamlFile, \"Range:\", buf, Found) ;\n        exit when AlertIf(AlertLogID, not Found,\n            \"CoveragePkg.ReadCovYaml did not find \"\"Range:\"\"\", COV_READ_YAML_ALERT_LEVEL) ;\n\n        -- RangeArrayType\n        for i in BinVal'range loop\n          -- - {Min:\n          ReadFindToken (CovYamlFile, \"- {Min:\", buf, Found) ;\n          exit ReadLoop when AlertIf(AlertLogID, not Found,\n              \"CoveragePkg.ReadCovYaml did not find Bins \"\"Min:\"\"\", COV_READ_YAML_ALERT_LEVEL) ;\n          Read(buf, Min, ReadValid) ;\n          exit ReadLoop when AlertIf(AlertLogID, not ReadValid,\n              \"CoveragePkg.ReadCovYaml Error while reading Min value.\", COV_READ_YAML_ALERT_LEVEL) ;\n\n          -- , Max:\n          ReadFindToken (CovYamlFile, \", Max:\", buf, Found) ;\n          exit ReadLoop  when AlertIf(AlertLogID, not Found,\n              \"CoveragePkg.ReadCovYaml did not find Bins \"\"Max:\"\"\", COV_READ_YAML_ALERT_LEVEL) ;\n          Read(buf, Max, ReadValid) ;\n          exit ReadLoop when AlertIf(AlertLogID, not ReadValid,\n              \"CoveragePkg.ReadCovYaml Error while reading Max value.\", COV_READ_YAML_ALERT_LEVEL) ;\n\n          BinVal(i) := (Min => Min, Max => Max) ;\n        end loop ;\n\n        Found := TRUE ;\n        exit ReadLoop ;\n      end loop ;\n    end procedure ReadCovBinValYaml ;\n\n    ------------------------------------------------------------\n    --  pt local\n    procedure ReadCovOneBinYaml (\n    ------------------------------------------------------------\n      file     CovYamlFile :     text ;\n      constant CovID       : in  CoverageIDType ;\n      constant Merge       : in  boolean ;\n      constant Dimensions  : in  integer ;\n      variable Found       : out boolean\n    ) is\n      variable buf         : line ;\n      variable Name        : line ;\n      constant ID          : integer := CovID.ID ;\n      constant AlertLogID  : AlertLogIDType := CovStructPtr(ID).AlertLogID ;\n      variable NamePtr     : line ;\n      variable Action      : integer ;\n      variable BinVal      : RangeArrayType(1 to Dimensions) ;\n      variable Count       : integer ;\n      variable AtLeast     : integer ;\n      variable Weight      : integer ;\n      variable PercentCov  : real ;\n      variable Index       : integer ;\n      variable ReadValid   : boolean ;\n    begin\n      Found := FALSE ;\n      ReadLoop: loop\n        -- - Name:\n        ReadFindToken (CovYamlFile, \"- Name:\", buf, Found) ;\n        exit when AlertIf(AlertLogID, not Found,\n            \"CoveragePkg.ReadCovYaml did not find Bins \"\"Name:\"\"\", COV_READ_YAML_ALERT_LEVEL) ;\n        ReadQuotedString(buf, NamePtr) ;\n        exit ReadLoop when AlertIf(AlertLogID, NamePtr = NULL,\n            \"CoveragePkg.ReadCovYaml Error while reading Name value.\", COV_READ_YAML_ALERT_LEVEL) ;\n\n        -- Type:\n        ReadFindToken (CovYamlFile, \"Type:\", buf, Found) ;\n        exit when AlertIf(AlertLogID, not Found,\n            \"CoveragePkg.ReadCovYaml did not find \"\"Type:\"\"\", COV_READ_YAML_ALERT_LEVEL) ;\n        ReadQuotedString(buf, Name) ;\n        exit ReadLoop when AlertIf(AlertLogID, Name = NULL,\n            \"CoveragePkg.ReadCovYaml Error while reading Type value.\", COV_READ_YAML_ALERT_LEVEL) ;\n        if Name.all = \"COUNT\" then\n          Action := 1 ;\n        elsif Name.all = \"IGNORE\" then\n          Action := 0 ;\n        else -- Illegal\n          Action := -1 ;\n        end if ;\n        deallocate(Name) ;\n\n        -- BinVal\n        ReadCovBinValYaml(CovYamlFile, AlertLogID, BinVal, Found) ;\n        exit when not Found ;\n\n        -- Count:\n        ReadFindToken (CovYamlFile, \"Count:\", buf, Found) ;\n        exit when AlertIf(AlertLogID, not Found,\n            \"CoveragePkg.ReadCovYaml did not find \"\"Count:\"\"\", COV_READ_YAML_ALERT_LEVEL) ;\n        Read(buf, Count, ReadValid) ;\n        exit when AlertIf(AlertLogID, not ReadValid,\n            \"CoveragePkg.ReadCovYaml Error while reading Count value.\", COV_READ_YAML_ALERT_LEVEL) ;\n\n        -- AtLeast:\n        ReadFindToken (CovYamlFile, \"AtLeast:\", buf, Found) ;\n        exit when AlertIf(AlertLogID, not Found,\n            \"CoveragePkg.ReadCovYaml did not find \"\"AtLeast:\"\"\", COV_READ_YAML_ALERT_LEVEL) ;\n        Read(buf, AtLeast, ReadValid) ;\n        exit when AlertIf(AlertLogID, not ReadValid,\n            \"CoveragePkg.ReadCovYaml Error while reading AtLeast value.\", COV_READ_YAML_ALERT_LEVEL) ;\n        Weight  := AtLeast ;\n\n        -- PercentCov:\n        ReadFindToken (CovYamlFile, \"PercentCov:\", buf, Found) ;\n        exit when AlertIf(AlertLogID, not Found,\n            \"CoveragePkg.ReadCovYaml did not find \"\"PercentCov:\"\"\", COV_READ_YAML_ALERT_LEVEL) ;\n        Read(buf, PercentCov, ReadValid) ;\n        exit when AlertIf(AlertLogID, not ReadValid,\n            \"CoveragePkg.ReadCovYaml Error while reading PercentCov value.\", COV_READ_YAML_ALERT_LEVEL) ;\n\n        -- Insert the Bin\n        Index := FindExactBin(CovID, Merge, BinVal, Action, AtLeast, Weight, NamePtr.all) ;\n        if Index > 0 then\n          -- Bin is an exact match so only merge the count values\n          CovStructPtr(ID).CovBinPtr(Index).Count := CovStructPtr(ID).CovBinPtr(Index).Count + Count ;\n          CovStructPtr(ID).CovBinPtr(Index).PercentCov := CalcPercentCov(\n              Count   =>  CovStructPtr(ID).CovBinPtr.all(Index).Count,\n              AtLeast =>  CovStructPtr(ID).CovBinPtr.all(Index).AtLeast ) ;\n        else\n          InsertNewBin(CovID, BinVal, Action, Count, AtLeast, Weight, NamePtr.all, PercentCov) ;\n        end if ;\n        deallocate(NamePtr) ;\n\n        -- End\n        Found := TRUE ;\n        exit ;\n      end loop ReadLoop ;\n    end procedure ReadCovOneBinYaml ;\n\n    ------------------------------------------------------------\n    --  pt local\n    procedure ReadCovBinsYaml (\n    ------------------------------------------------------------\n      constant CovID       : in  CoverageIDType ;\n      file     CovYamlFile :     text ;\n      constant Dimensions  : in  integer ;\n      constant NumBins     : in  integer ;\n      variable Found       : out boolean ;\n      constant Merge       : in  boolean := FALSE\n    ) is\n      variable buf            : line ;\n      variable FieldNameArray : FieldNameArrayType(1 to 20) ;\n      constant ID             : integer := CovID.ID ;\n      constant AlertLogID     : AlertLogIDType := CovStructPtr(ID).AlertLogID ;\n    begin\n      Found := FALSE ;\n      ReadLoop: loop\n        ReadFindToken (CovYamlFile, \"Bins:\", buf, Found) ;\n        exit when AlertIf(AlertLogID, not Found,\n            \"CoveragePkg.ReadCovYaml did not find \"\"Bins:\"\"\", COV_READ_YAML_ALERT_LEVEL) ;\n\n        GrowBins(CovID, NumBins) ;\n\n        for i in 1 to NumBins loop\n          ReadCovOneBinYaml(CovYamlFile, CovID, Merge, Dimensions, Found) ;\n          exit ReadLoop when not Found ;\n        end loop ;\n\n        -- End\n        Found := TRUE ;\n        exit ;\n      end loop ReadLoop ;\n    end procedure ReadCovBinsYaml ;\n\n    ------------------------------------------------------------\n    --  pt local\n    procedure ReadCovModelYaml (\n    ------------------------------------------------------------\n      file     CovYamlFile :     text ;\n      variable Found       : out boolean ;\n      constant Merge       : in  boolean := FALSE\n    ) is\n      variable CovID      : CoverageIDType ;\n      variable Dimensions : integer ;\n      variable NumBins    : integer ;\n      variable FoundModelName : boolean ;\n    begin\n      Found          := FALSE ;\n      FoundModelName := FALSE ;\n\n      ReadLoop: loop\n        ReadCovModelNameYaml(CovID, CovYamlFile, Found) ;\n        exit when not Found ;\n        FoundModelName := TRUE ;\n\n        if not Merge then  -- remove any old bins\n          DeallocateBins(CovID) ;\n        end if ;\n\n-- Nothing to do with this for now\n--        ReadCovTestCasesYaml(CovID, CovYamlFile, Found) ;\n--        exit when not Found ;\n\n-- On merge, new settings apply\n        ReadCovSettingsYaml(CovID, CovYamlFile, Found) ;\n        exit when not Found ;\n\n-- On merge, new settings apply\n        ReadCovBinInfoYaml(CovID, CovYamlFile, Dimensions, NumBins, Found) ;\n        exit when not Found ;\n\n        -- On merge, matching bins are merged\n        ReadCovBinsYaml(CovID, CovYamlFile, Dimensions, NumBins, Found, Merge) ;\n        exit when not Found ;\n\n        -- End\n        Found := TRUE ;\n        exit ;\n      end loop ReadLoop ;\n\n      if FoundModelName and not Found then\n        -- remove partially constructed model\n        Deallocate(CovID) ;\n      end if ;\n    end procedure ReadCovModelYaml ;\n\n--     ------------------------------------------------------------\n--     procedure ReadCovYaml (ModelName : string; FileName : string) is\n--     ------------------------------------------------------------\n--       file CovYamlFile : text open READ_MODE is FileName ;\n--     begin\n--       ID := NewID(\"ModelName\"\n--       ReadCovYaml(ID, CovYamlFile) ;\n--       file_close(CovYamlFile) ;\n--     end procedure ReadCovYaml ;\n\n    ------------------------------------------------------------\n    procedure ReadCovYaml  (FileName : string := \"\"; Merge : boolean := FALSE) is\n    ------------------------------------------------------------\n      constant RESOLVED_FILE_NAME : string := ifelse(FileName = \"\", OSVVM_RAW_OUTPUT_DIRECTORY & GetAlertLogName & \"_cov.yml\", FileName) ;\n      file CovYamlFile : text open READ_MODE is RESOLVED_FILE_NAME ;\n      variable buf     : line ;\n      variable Found   : boolean ;\n    begin\n      ReadFindToken (CovYamlFile, \"Models:\", buf, Found) ;\n      if not Found then\n        Alert(OSVVM_COV_ALERTLOG_ID,\n            \"No Coverage Models found in \" & RESOLVED_FILE_NAME, COV_READ_YAML_ALERT_LEVEL) ;\n        return ;\n      end if;\n\n      loop\n        ReadCovModelYaml(CovYamlFile, Found, Merge) ;\n        exit when not Found ;\n      end loop ;\n      file_close(CovYamlFile) ;\n    end procedure ReadCovYaml ;\n\n    ------------------------------------------------------------\n    impure function GotCoverage return boolean is\n    ------------------------------------------------------------\n    begin\n      for i in 1 to NumItems loop\n        if CovStructPtr(i).NumBins >= 1 then\n          return TRUE ;\n        end if;\n      end loop ;\n      return FALSE ;\n    end function GotCoverage ;\n    \n    ------------------------------------------------------------\n    procedure SetErrorIfNotCovered(Checked : boolean := FALSE) is \n    ------------------------------------------------------------\n    begin\n      ErrorIfNotCoveredVar             := TRUE ;\n--!!      if Checked then \n--!!        CheckedForErrorIfNotCoveredVar := TRUE ;\n--!!      end if ; \n    end procedure SetErrorIfNotCovered ;\n\n    ------------------------------------------------------------\n    impure function GetErrorCount (ID : CoverageIDType) return integer is\n    ------------------------------------------------------------\n      variable ErrorCnt : integer := 0 ;\n    begin\n      if CovStructPtr(ID.ID).NumBins < 1 then\n        return 1 ;  -- return error if model empty\n      else\n        for i in 1 to CovStructPtr(ID.ID).NumBins loop\n          if CovStructPtr(ID.ID).CovBinPtr(i).count < 0 then -- illegal CovBin\n            ErrorCnt := ErrorCnt + CovStructPtr(ID.ID).CovBinPtr(i).count ;\n          end if ;\n        end loop ;\n        return - ErrorCnt ;\n      end if ;\n    end function GetErrorCount ;\n\n    ------------------------------------------------------------\n    --  pt local\n    -- Adjusted InsertBin\n    --   Ensures minimum of Count and AtLeast are 1\n    procedure AdjustedInsertBin (\n      ID           : CoverageIDType ;\n      BinVal       : RangeArrayType ;\n      Action       : integer ;\n      Count        : integer ;\n      AtLeast      : integer ;\n      Weight       : integer ;\n      Name         : string\n    ) is\n      variable vCalcAtLeast : integer ;\n      variable vCalcWeight  : integer ;\n    begin\n      if Action = COV_COUNT then\n        vCalcAtLeast := maximum(0, AtLeast) ;\n        vCalcWeight  := maximum(0,  Weight) ;\n      else\n        vCalcAtLeast := 0 ;\n        vCalcWeight  := 0 ;\n      end if ;\n      InsertBin(\n        ID       => ID,\n        BinVal   => BinVal,\n        Action   => Action,\n        Count    => Count,\n        AtLeast  => vCalcAtLeast,\n        Weight   => vCalcWeight,\n        Name     => Name\n      ) ;\n    end procedure AdjustedInsertBin ;\n\n    ------------------------------------------------------------\n    -- These support usage of cross coverage constants\n    -- Also support the older AddCross(GenCross(...)) methodology\n    -- which has been replaced by AddCross(GenBin, GenBin, ...)\n    ------------------------------------------------------------\n    procedure AddCross (ID : CoverageIDType; CovBin : CovMatrix2Type ; Name : String := \"\") is\n    ------------------------------------------------------------\n    begin\n      if BinValLengthNotEqual(ID, 2) then\n        Alert(CovStructPtr(ID.ID).AlertLogID, \"CoveragePkg.AddCross: Cross coverage bins of different dimensions prohibited\", FAILURE) ;\n        return ;\n      end if ;\n      GrowBins(ID, CovBin'length) ;\n      for i in CovBin'range loop\n        InsertBin(ID,\n          CovBin(i).BinVal, CovBin(i).Action, CovBin(i).Count,\n          CovBin(i).AtLeast, CovBin(i).Weight, Name\n        ) ;\n      end loop ;\n    end procedure AddCross ;\n\n    ------------------------------------------------------------\n    procedure AddCross (ID : CoverageIDType; CovBin : CovMatrix3Type ; Name : String := \"\") is\n    ------------------------------------------------------------\n    begin\n      if BinValLengthNotEqual(ID, 3) then\n        Alert(CovStructPtr(ID.ID).AlertLogID, \"CoveragePkg.AddCross: Cross coverage bins of different dimensions prohibited\", FAILURE) ;\n        return ;\n      end if ;\n      GrowBins(ID, CovBin'length) ;\n      for i in CovBin'range loop\n        AdjustedInsertBin(ID,\n          CovBin(i).BinVal, CovBin(i).Action, CovBin(i).Count,\n          CovBin(i).AtLeast, CovBin(i).Weight, Name\n        ) ;\n      end loop ;\n    end procedure AddCross ;\n\n    ------------------------------------------------------------\n    procedure AddCross (ID : CoverageIDType; CovBin : CovMatrix4Type ; Name : String := \"\") is\n    ------------------------------------------------------------\n    begin\n      if BinValLengthNotEqual(ID, 4) then\n        Alert(CovStructPtr(ID.ID).AlertLogID, \"CoveragePkg.AddCross: Cross coverage bins of different dimensions prohibited\", FAILURE) ;\n        return ;\n      end if ;\n      GrowBins(ID, CovBin'length) ;\n      for i in CovBin'range loop\n        AdjustedInsertBin(ID,\n          CovBin(i).BinVal, CovBin(i).Action, CovBin(i).Count,\n          CovBin(i).AtLeast, CovBin(i).Weight, Name\n        ) ;\n      end loop ;\n    end procedure AddCross ;\n\n    ------------------------------------------------------------\n    procedure AddCross (ID : CoverageIDType; CovBin : CovMatrix5Type ; Name : String := \"\") is\n    ------------------------------------------------------------\n    begin\n      if BinValLengthNotEqual(ID, 5) then\n        Alert(CovStructPtr(ID.ID).AlertLogID, \"CoveragePkg.AddCross: Cross coverage bins of different dimensions prohibited\", FAILURE) ;\n        return ;\n      end if ;\n      GrowBins(ID, CovBin'length) ;\n      for i in CovBin'range loop\n        AdjustedInsertBin(ID,\n          CovBin(i).BinVal, CovBin(i).Action, CovBin(i).Count,\n          CovBin(i).AtLeast, CovBin(i).Weight, Name\n        ) ;\n      end loop ;\n    end procedure AddCross ;\n\n    ------------------------------------------------------------\n    procedure AddCross (ID : CoverageIDType; CovBin : CovMatrix6Type ; Name : String := \"\") is\n    ------------------------------------------------------------\n    begin\n      if BinValLengthNotEqual(ID, 6) then\n        Alert(CovStructPtr(ID.ID).AlertLogID, \"CoveragePkg.AddCross: Cross coverage bins of different dimensions prohibited\", FAILURE) ;\n        return ;\n      end if ;\n      GrowBins(ID, CovBin'length) ;\n      for i in CovBin'range loop\n        AdjustedInsertBin(ID,\n          CovBin(i).BinVal, CovBin(i).Action, CovBin(i).Count,\n          CovBin(i).AtLeast, CovBin(i).Weight, Name\n        ) ;\n      end loop ;\n    end procedure AddCross ;\n\n    ------------------------------------------------------------\n    procedure AddCross (ID : CoverageIDType; CovBin : CovMatrix7Type ; Name : String := \"\") is\n    ------------------------------------------------------------\n    begin\n      if BinValLengthNotEqual(ID, 7) then\n        Alert(CovStructPtr(ID.ID).AlertLogID, \"CoveragePkg.AddCross: Cross coverage bins of different dimensions prohibited\", FAILURE) ;\n        return ;\n      end if ;\n      GrowBins(ID, CovBin'length) ;\n      for i in CovBin'range loop\n        AdjustedInsertBin(ID,\n          CovBin(i).BinVal, CovBin(i).Action, CovBin(i).Count,\n          CovBin(i).AtLeast, CovBin(i).Weight, Name\n        ) ;\n      end loop ;\n    end procedure AddCross ;\n\n    ------------------------------------------------------------\n    procedure AddCross (ID : CoverageIDType; CovBin : CovMatrix8Type ; Name : String := \"\") is\n    ------------------------------------------------------------\n    begin\n      if BinValLengthNotEqual(ID, 8) then\n        Alert(CovStructPtr(ID.ID).AlertLogID, \"CoveragePkg.AddCross: Cross coverage bins of different dimensions prohibited\", FAILURE) ;\n        return ;\n      end if ;\n      GrowBins(ID, CovBin'length) ;\n      for i in CovBin'range loop\n        AdjustedInsertBin(ID,\n          CovBin(i).BinVal, CovBin(i).Action, CovBin(i).Count,\n          CovBin(i).AtLeast, CovBin(i).Weight, Name\n        ) ;\n      end loop ;\n    end procedure AddCross ;\n\n    ------------------------------------------------------------\n    procedure AddCross (ID : CoverageIDType; CovBin : CovMatrix9Type ; Name : String := \"\") is\n    ------------------------------------------------------------\n    begin\n      if BinValLengthNotEqual(ID, 9) then\n        Alert(CovStructPtr(ID.ID).AlertLogID, \"CoveragePkg.AddCross: Cross coverage bins of different dimensions prohibited\", FAILURE) ;\n        return ;\n      end if ;\n      GrowBins(ID, CovBin'length) ;\n      for i in CovBin'range loop\n        AdjustedInsertBin(ID,\n          CovBin(i).BinVal, CovBin(i).Action, CovBin(i).Count,\n          CovBin(i).AtLeast, CovBin(i).Weight, Name\n        ) ;\n      end loop ;\n    end procedure AddCross ;\n\n--!!!! How to handle this - do not support in main interface\n--------------------------------------------------------------\n--------------------------------------------------------------\n-- Deprecated / Subsumed by versions with PercentCov Parameter\n-- Maintained for backward compatibility only and\n-- may be removed in the future.\n-- ------------------------------------------------------------\n   ------------------------------------------------------------\n    -- Deprecated.  New versions use PercentCov\n    impure function CountCovHoles (ID : CoverageIDType; AtLeast : integer ) return integer is\n    ------------------------------------------------------------\n      variable HoleCount : integer := 0 ;\n    begin\n      CovLoop : for i in 1 to CovStructPtr(ID.ID).NumBins loop\n--         if CovStructPtr(ID.ID).CovBinPtr(i).action = COV_COUNT and CovStructPtr(ID.ID).CovBinPtr(i).Count < minimum(AtLeast, CovStructPtr(ID.ID).CovBinPtr(i).AtLeast) then\n        if CovStructPtr(ID.ID).CovBinPtr(i).action = COV_COUNT and CovStructPtr(ID.ID).CovBinPtr(i).Count < AtLeast then\n          HoleCount := HoleCount + 1 ;\n        end if ;\n      end loop CovLoop ;\n      return HoleCount ;\n    end function CountCovHoles ;\n\n    ------------------------------------------------------------\n    -- Deprecated.  New versions use PercentCov\n    impure function IsCovered (ID : CoverageIDType; AtLeast : integer ) return boolean is\n    ------------------------------------------------------------\n    begin\n      return CountCovHoles(ID, AtLeast) = 0 ;\n    end function IsCovered ;\n\n    ------------------------------------------------------------\n    impure function CalcWeight (ID : CoverageIDType; BinIndex : integer ; MaxAtLeast : integer  ) return integer is\n    --  pt local\n    ------------------------------------------------------------\n    begin\n      case CovStructPtr(ID.ID).WeightMode is\n        when AT_LEAST =>\n          return CovStructPtr(ID.ID).CovBinPtr(BinIndex).AtLeast ;\n\n        when WEIGHT =>\n          return CovStructPtr(ID.ID).CovBinPtr(BinIndex).Weight ;\n\n        when REMAIN =>\n          return MaxAtLeast - CovStructPtr(ID.ID).CovBinPtr(BinIndex).Count ;\n\n        when REMAIN_SCALED =>\n          -- Experimental may be removed\n          return integer( Ceil( CovStructPtr(ID.ID).WeightScale * real(MaxAtLeast))) -\n                          CovStructPtr(ID.ID).CovBinPtr(BinIndex).Count ;\n\n        when REMAIN_WEIGHT =>\n          -- Experimental may be removed\n          return CovStructPtr(ID.ID).CovBinPtr(BinIndex).Weight * (\n                   integer( Ceil( CovStructPtr(ID.ID).WeightScale * real(MaxAtLeast))) -\n                   CovStructPtr(ID.ID).CovBinPtr(BinIndex).Count ) ;\n\n        when others =>\n          Alert(CovStructPtr(ID.ID).AlertLogID, GetNamePlus(ID, prefix => \"in \", suffix => \", \") & \"CoveragePkg.CalcWeight:\" &\n                      \" Selected Weight Mode not supported with deprecated RandCovPoint(AtLeast), see RandCovPoint(PercentCov)\", FAILURE) ;\n          return MaxAtLeast - CovStructPtr(ID.ID).CovBinPtr(BinIndex).Count ;\n\n      end case ;\n    end function CalcWeight ;\n\n    ------------------------------------------------------------\n    -- Deprecated.  New versions use PercentCov\n    -- If keep this, need to be able to scale AtLeast Value\n    impure function GetRandIndex (ID : CoverageIDType; AtLeast : integer ) return integer is\n    --  pt local\n    ------------------------------------------------------------\n      variable WeightVec : integer_vector(0 to CovStructPtr(ID.ID).NumBins-1) ;  -- Prep for change to DistInt\n      variable MinCount, AdjAtLeast, MaxAtLeast : integer ;\n      variable rInt : integer ;\n    begin\n      CovStructPtr(ID.ID).ItemCount := CovStructPtr(ID.ID).ItemCount + 1 ;\n      MinCount := GetMinCount(ID) ;\n      -- iAtLeast := integer(ceil(CovStructPtr(ID.ID).CovTarget * real(AtLeast)/100.0)) ;\n      if CovStructPtr(ID.ID).ThresholdingEnable then\n        AdjAtLeast := MinCount + integer(CovStructPtr(ID.ID).CovThreshold) + 1 ;\n        if MinCount < AtLeast then\n          -- Clip at AtLeast until reach AtLeast\n          AdjAtLeast := minimum(AdjAtLeast, AtLeast) ;\n        end if ;\n      else\n        if MinCount < AtLeast then\n          AdjAtLeast := AtLeast ;  -- Valid\n        else\n          -- Done, Enable all bins\n          -- AdjAtLeast := integer'right ;  -- Get All\n          AdjAtLeast := GetMaxCount(ID) + 1 ;  -- Get All\n        end if ;\n      end if;\n      MaxAtLeast := AdjAtLeast ;\n      CovLoop : for i in 1 to CovStructPtr(ID.ID).NumBins loop\n--         if not CovStructPtr(ID.ID).ThresholdingEnable then\n--           -- When not thresholding, consider bin Bin.AtLeast\n--           -- iBinAtLeast := integer(ceil(CovStructPtr(ID.ID).CovTarget * real(CovStructPtr(ID.ID).CovBinPtr(i).AtLeast)/100.0)) ;\n--           MaxAtLeast := maximum(AdjAtLeast, CovStructPtr(ID.ID).CovBinPtr(i).AtLeast) ;\n--         end if ;\n        if CovStructPtr(ID.ID).CovBinPtr(i).action = COV_COUNT and CovStructPtr(ID.ID).CovBinPtr(i).Count < MaxAtLeast then\n          WeightVec(i-1) := CalcWeight(ID, i, MaxAtLeast ) ; -- CovStructPtr(ID.ID).CovBinPtr(i).Weight ;\n        else\n          WeightVec(i-1) := 0 ;\n        end if ;\n      end loop CovLoop ;\n      -- DistInt returns integer range 0 to CovStructPtr(ID.ID).NumBins-1\n--      CovStructPtr(ID.ID).LastStimGenIndex := 1 + RV.DistInt( WeightVec )  ; -- return range 1 to CovStructPtr(ID.ID).NumBins\n      DistInt(CovStructPtr(ID.ID).RV, rInt, WeightVec) ;\n      CovStructPtr(ID.ID).LastStimGenIndex := 1 + rInt  ; -- return range 1 to CovStructPtr(ID.ID).NumBins\n      CovStructPtr(ID.ID).LastIndex := CovStructPtr(ID.ID).LastStimGenIndex ;\n      return CovStructPtr(ID.ID).LastStimGenIndex ;\n    end function GetRandIndex ;\n\n    ------------------------------------------------------------\n    -- Deprecated.  New versions use PercentCov\n    impure function RandCovBinVal (ID : CoverageIDType; AtLeast : integer ) return RangeArrayType is\n    ------------------------------------------------------------\n    begin\n      return CovStructPtr(ID.ID).CovBinPtr( GetRandIndex(ID, AtLeast) ).BinVal.all ;  -- GetBinVal\n    end function RandCovBinVal ;\n\n-- Maintained for backward compatibility.  Repeated until aliases work for methods\n    ------------------------------------------------------------\n    -- Deprecated+  New versions use PercentCov.  Name change.\n    impure function RandCovHole (ID : CoverageIDType; AtLeast : integer ) return RangeArrayType is\n    ------------------------------------------------------------\n    begin\n      return RandCovBinVal(ID, AtLeast) ;  -- GetBinVal\n    end function RandCovHole ;\n\n    ------------------------------------------------------------\n    -- Deprecated.  New versions use PercentCov\n    impure function RandCovPoint (ID : CoverageIDType; AtLeast : integer ) return integer is\n    ------------------------------------------------------------\n      variable BinVal : RangeArrayType(1 to 1) ;\n      variable rInt   : integer ;\n    begin\n      BinVal := RandCovBinVal(ID, AtLeast) ;\n--      return RV.RandInt(BinVal(1).min, BinVal(1).max) ;\n      Uniform(CovStructPtr(ID.ID).RV, rInt, BinVal(1).min, BinVal(1).max) ;\n      return rInt ;\n    end function RandCovPoint ;\n\n    ------------------------------------------------------------\n    impure function RandCovPoint (ID : CoverageIDType; AtLeast : integer ) return integer_vector is\n    ------------------------------------------------------------\n    begin\n      return ToRandPoint(ID, RandCovBinVal(ID, AtLeast)) ;\n    end function RandCovPoint ;\n\n    ------------------------------------------------------------\n    -- Deprecated.  New versions use PercentCov\n    impure function GetHoleBinVal (ID : CoverageIDType; ReqHoleNum : integer ; AtLeast : integer ) return RangeArrayType is\n    ------------------------------------------------------------\n      variable HoleCount : integer := 0 ;\n      variable buf : line ;\n    begin\n      CovLoop : for i in 1 to CovStructPtr(ID.ID).NumBins loop\n--        if CovStructPtr(ID.ID).CovBinPtr(i).action = COV_COUNT and CovStructPtr(ID.ID).CovBinPtr(i).Count < minimum(AtLeast, CovStructPtr(ID.ID).CovBinPtr(i).AtLeast) then\n        if CovStructPtr(ID.ID).CovBinPtr(i).action = COV_COUNT and CovStructPtr(ID.ID).CovBinPtr(i).Count < AtLeast then\n          HoleCount := HoleCount + 1 ;\n          if HoleCount = ReqHoleNum  then\n           return CovStructPtr(ID.ID).CovBinPtr(i).BinVal.all ;\n          end if ;\n        end if ;\n      end loop CovLoop ;\n      Alert(CovStructPtr(ID.ID).AlertLogID, GetNamePlus(ID, prefix => \"in \", suffix => \", \") & \"CoveragePkg.GetHoleBinVal:\" &\n                    \" did not find hole.  HoleCount = \" & integer'image(HoleCount) &\n                    \"ReqHoleNum = \" & integer'image(ReqHoleNum), ERROR\n      ) ;\n      return CovStructPtr(ID.ID).CovBinPtr(CovStructPtr(ID.ID).NumBins).BinVal.all ;\n    end function GetHoleBinVal ;\n\n    ------------------------------------------------------------\n    -- Deprecated+.  New versions use PercentCov.  Name Change.\n    impure function GetCovHole (ID : CoverageIDType; ReqHoleNum : integer ; AtLeast : integer ) return RangeArrayType is\n    ------------------------------------------------------------\n    begin\n      return GetHoleBinVal(ID, ReqHoleNum, AtLeast) ;\n    end function GetCovHole ;\n\n    ------------------------------------------------------------\n    --  pt local\n    -- Deprecated.  New versions use PercentCov.\n    procedure WriteCovHoles (ID : CoverageIDType; file f : text;  AtLeast : integer;  UsingLocalFile : boolean := FALSE ) is\n    ------------------------------------------------------------\n      -- variable minAtLeast : integer ;\n      variable buf : line ;\n    begin\n      WriteBinName(ID, buf, \"WriteCovHoles: \") ;\n--      writeline(f, buf) ;\n      if CovStructPtr(ID.ID).NumBins < 1 then\n        if WriteBinFileInit or UsingLocalFile then\n          -- Duplicate Alert in specified file\n          swrite(buf, \"%% Alert FAILURE \" & GetNamePlus(ID, prefix => \"in \", suffix => \", \") & \"CoveragePkg.WriteCovHoles:\" &\n                      \" coverage model is empty.  Nothing to print.\") ;\n          writeline(f, buf) ;\n        end if ;\n        Alert(CovStructPtr(ID.ID).AlertLogID, GetNamePlus(ID, prefix => \"in \", suffix => \", \") & \"CoveragePkg.WriteCovHoles:\" &\n                      \" coverage model is empty.  Nothing to print.\", FAILURE) ;\n      end if ;\n      CovLoop : for i in 1 to CovStructPtr(ID.ID).NumBins loop\n--        minAtLeast := minimum(AtLeast,CovStructPtr(ID.ID).CovBinPtr(i).AtLeast) ;\n--         if CovStructPtr(ID.ID).CovBinPtr(i).action = COV_COUNT and CovStructPtr(ID.ID).CovBinPtr(i).Count < minAtLeast then\n        if CovStructPtr(ID.ID).CovBinPtr(i).action = COV_COUNT and CovStructPtr(ID.ID).CovBinPtr(i).Count < AtLeast then\n          swrite(buf, \"%% Bin:\") ;\n          write(buf, CovStructPtr(ID.ID).CovBinPtr(i).BinVal.all) ;\n          write(buf, \"  Count = \" & integer'image(CovStructPtr(ID.ID).CovBinPtr(i).Count)) ;\n          write(buf, \"  AtLeast = \" & integer'image(CovStructPtr(ID.ID).CovBinPtr(i).AtLeast)) ;\n          if CovStructPtr(ID.ID).WeightMode = WEIGHT or CovStructPtr(ID.ID).WeightMode = REMAIN_WEIGHT then\n            -- Print Weight only when it is used\n            write(buf, \"  Weight = \" & integer'image(CovStructPtr(ID.ID).CovBinPtr(i).Weight)) ;\n          end if ;\n          writeline(f, buf) ;\n        end if ;\n      end loop CovLoop ;\n      swrite(buf, \"\") ;\n      writeline(f, buf) ;\n    end procedure WriteCovHoles ;\n\n    ------------------------------------------------------------\n    -- Deprecated.  New versions use PercentCov.\n    procedure WriteCovHoles (ID : CoverageIDType; AtLeast : integer ) is\n    ------------------------------------------------------------\n    begin\n      if WriteBinFileInit then\n        -- Write to Local WriteBinFile - Deprecated, recommend use TranscriptFile instead\n        WriteCovHoles(ID, WriteBinFile, AtLeast) ;\n      elsif IsTranscriptEnabled then\n        -- Write to TranscriptFile\n        WriteCovHoles(ID, TranscriptFile, AtLeast) ;\n        if IsTranscriptMirrored then\n          -- Mirrored to OUTPUT\n          WriteCovHoles(ID, OUTPUT, AtLeast) ;\n        end if ;\n      else\n        -- Default Write to OUTPUT\n        WriteCovHoles(ID, OUTPUT, AtLeast) ;\n      end if;\n    end procedure WriteCovHoles ;\n\n    ------------------------------------------------------------\n    -- Deprecated.  New versions use PercentCov.\n    procedure WriteCovHoles (ID : CoverageIDType; LogLevel : LogType ; AtLeast : integer ) is\n    ------------------------------------------------------------\n    begin\n      if IsLogEnabled(CovStructPtr(ID.ID).AlertLogID, LogLevel) then\n        WriteCovHoles(ID, AtLeast) ;\n      end if;\n    end procedure WriteCovHoles ;\n\n    ------------------------------------------------------------\n    -- Deprecated.  New versions use PercentCov.\n    procedure WriteCovHoles (ID : CoverageIDType; FileName : string;  AtLeast : integer ; OpenKind : File_Open_Kind := APPEND_MODE ) is\n    ------------------------------------------------------------\n--x      file CovHoleFile : text open OpenKind is FileName ;\n      file CovHoleFile : text ;\n    begin\n      file_open(CovHoleFile, FileName, OpenKind) ;\n      WriteCovHoles(ID, CovHoleFile, AtLeast, TRUE) ;\n    end procedure WriteCovHoles ;\n\n    ------------------------------------------------------------\n    -- Deprecated.  New versions use PercentCov.\n    procedure WriteCovHoles (ID : CoverageIDType; LogLevel : LogType ; FileName : string;  AtLeast : integer ; OpenKind : File_Open_Kind := APPEND_MODE ) is\n    ------------------------------------------------------------\n    begin\n      if IsLogEnabled(CovStructPtr(ID.ID).AlertLogID, LogLevel) then\n        WriteCovHoles(ID, FileName, AtLeast, OpenKind) ;\n      end if;\n    end procedure WriteCovHoles ;\n\n\n------------------------------------------------------------\n-- /////////////////////////////////////////\n-- /////////////////////////////////////////\n-- Compatibility Methods - Allows CoveragePkg to Work as a PT still\n-- /////////////////////////////////////////\n-- /////////////////////////////////////////\n------------------------------------------------------------\n    ------------------------------------------------------------\n    procedure SetAlertLogID (A : AlertLogIDType) is\n    ------------------------------------------------------------\n    begin\n      SetAlertLogID(COV_STRUCT_ID_DEFAULT, A) ;\n    end procedure SetAlertLogID ;\n\n    ------------------------------------------------------------\n    procedure SetAlertLogID(Name : string ; ParentID : AlertLogIDType := ALERTLOG_BASE_ID ; CreateHierarchy : Boolean := TRUE) is\n    ------------------------------------------------------------\n      constant SeedInit : boolean := CovStructPtr(COV_STRUCT_ID_DEFAULT.ID).RvSeedInit ;\n    begin\n      SetAlertLogID(COV_STRUCT_ID_DEFAULT, Name, ParentID, CreateHierarchy) ;\n      if not SeedInit then\n        InitSeed(COV_STRUCT_ID_DEFAULT, Name) ;\n      end if ;\n    end procedure SetAlertLogID ;\n\n    ------------------------------------------------------------\n    impure function GetAlertLogID return AlertLogIDType is\n    ------------------------------------------------------------\n    begin\n      return GetAlertLogID(COV_STRUCT_ID_DEFAULT) ;\n    end function GetAlertLogID ;\n\n    ------------------------------------------------------------\n    procedure SetName (Name : String) is\n    ------------------------------------------------------------\n      constant SeedInit : boolean := CovStructPtr(COV_STRUCT_ID_DEFAULT.ID).RvSeedInit ;\n    begin\n      SetName(COV_STRUCT_ID_DEFAULT, Name) ;\n      if not SeedInit then\n        InitSeed(COV_STRUCT_ID_DEFAULT, Name) ;\n      end if ;\n    end procedure SetName ;\n\n    ------------------------------------------------------------\n    impure function SetName (Name : String) return string is\n    ------------------------------------------------------------\n    begin\n      SetName(Name) ; -- call procedure above\n      return Name ;\n    end function SetName ;\n\n    ------------------------------------------------------------\n    impure function GetName return String is\n    ------------------------------------------------------------\n    begin\n      return GetName(COV_STRUCT_ID_DEFAULT) ;\n    end function GetName ;\n\n    ------------------------------------------------------------\n    impure function GetCovModelName return String is\n    ------------------------------------------------------------\n    begin\n      return GetCovModelName(COV_STRUCT_ID_DEFAULT) ;\n    end function GetCovModelName ;\n\n    ------------------------------------------------------------\n    impure function GetNamePlus(prefix, suffix : string) return String is\n    ------------------------------------------------------------\n    begin\n      return GetNamePlus(COV_STRUCT_ID_DEFAULT, prefix, suffix) ;\n    end function GetNamePlus ;\n\n    ------------------------------------------------------------\n    procedure SetMessage (Message : String) is\n    ------------------------------------------------------------\n      constant SeedInit : boolean := CovStructPtr(COV_STRUCT_ID_DEFAULT.ID).RvSeedInit ;\n    begin\n      SetMessage(COV_STRUCT_ID_DEFAULT, Message) ;\n      if not SeedInit then\n        InitSeed(COV_STRUCT_ID_DEFAULT, Message) ;\n      end if ;\n    end procedure SetMessage ;\n\n    ------------------------------------------------------------\n    procedure SetNextPointMode (A : NextPointModeType) is\n    ------------------------------------------------------------\n    begin\n      SetNextPointMode(COV_STRUCT_ID_DEFAULT, A) ;\n    end procedure SetNextPointMode ;\n\n    ------------------------------------------------------------\n    procedure SetIllegalMode (A : IllegalModeType) is\n    ------------------------------------------------------------\n    begin\n      SetIllegalMode(COV_STRUCT_ID_DEFAULT, A) ;\n    end procedure SetIllegalMode ;\n\n    ------------------------------------------------------------\n    procedure SetWeightMode (A : WeightModeType;  Scale : real := 1.0) is\n    ------------------------------------------------------------\n    begin\n      SetWeightMode(COV_STRUCT_ID_DEFAULT, A, Scale) ;\n    end procedure SetWeightMode ;\n\n    ------------------------------------------------------------\n    procedure DeallocateMessage is\n    ------------------------------------------------------------\n    begin\n      DeallocateMessage(COV_STRUCT_ID_DEFAULT) ;\n    end procedure DeallocateMessage ;\n\n    ------------------------------------------------------------\n    procedure DeallocateName is\n    ------------------------------------------------------------\n    begin\n      DeallocateName(COV_STRUCT_ID_DEFAULT) ;\n    end procedure DeallocateName ;\n\n    ------------------------------------------------------------\n    procedure SetThresholding (A : boolean := TRUE ) is\n    ------------------------------------------------------------\n    begin\n      SetThresholding(COV_STRUCT_ID_DEFAULT, A) ;\n    end procedure SetThresholding ;\n\n    ------------------------------------------------------------\n    procedure SetCovThreshold (Percent : real) is\n    ------------------------------------------------------------\n    begin\n      SetCovThreshold(COV_STRUCT_ID_DEFAULT, Percent) ;\n    end procedure SetCovThreshold ;\n\n    ------------------------------------------------------------\n    procedure SetCovTarget (Percent : real) is\n    ------------------------------------------------------------\n    begin\n      SetCovTarget(COV_STRUCT_ID_DEFAULT, Percent) ;\n    end procedure SetCovTarget ;\n\n    ------------------------------------------------------------\n    impure function GetCovTarget return real is\n    ------------------------------------------------------------\n    begin\n      return GetCovTarget(COV_STRUCT_ID_DEFAULT) ;\n    end function GetCovTarget ;\n\n    ------------------------------------------------------------\n    procedure SetMerging (A : boolean := TRUE ) is\n    ------------------------------------------------------------\n    begin\n      SetMerging(COV_STRUCT_ID_DEFAULT, A) ;\n    end procedure SetMerging ;\n\n    ------------------------------------------------------------\n    procedure SetCountMode (A : CountModeType) is\n    ------------------------------------------------------------\n    begin\n      SetCountMode(COV_STRUCT_ID_DEFAULT, A) ;\n    end procedure SetCountMode ;\n\n    ------------------------------------------------------------\n    procedure InitSeed (S : string;  UseNewSeedMethods : boolean := COVERAGE_USE_NEW_SEED_METHODS) is\n    ------------------------------------------------------------\n    begin\n      InitSeed(COV_STRUCT_ID_DEFAULT, S, UseNewSeedMethods) ;\n    end procedure InitSeed ;\n\n    ------------------------------------------------------------\n    impure function InitSeed (S : string;  UseNewSeedMethods : boolean := COVERAGE_USE_NEW_SEED_METHODS) return string is\n    ------------------------------------------------------------\n    begin\n      return InitSeed(COV_STRUCT_ID_DEFAULT, S, UseNewSeedMethods) ;\n    end function InitSeed ;\n\n    ------------------------------------------------------------\n    procedure InitSeed (I : integer;  UseNewSeedMethods : boolean := COVERAGE_USE_NEW_SEED_METHODS) is\n    ------------------------------------------------------------\n    begin\n      InitSeed(COV_STRUCT_ID_DEFAULT, I, UseNewSeedMethods) ;\n    end procedure InitSeed ;\n\n    ------------------------------------------------------------\n    procedure SetSeed (RandomSeedIn : RandomSeedType ) is\n    ------------------------------------------------------------\n    begin\n      SetSeed(COV_STRUCT_ID_DEFAULT, RandomSeedIn) ;\n    end procedure SetSeed ;\n\n    ------------------------------------------------------------\n    impure function GetSeed return RandomSeedType is\n    ------------------------------------------------------------\n    begin\n      return GetSeed(COV_STRUCT_ID_DEFAULT) ;\n    end function GetSeed ;\n\n    ------------------------------------------------------------\n    procedure SetBinSize (NewNumBins : integer) is\n    -- Sets a CovBin to a particular size\n    -- Use for small bins to save space or large bins to\n    -- suppress the resize and copy as a CovBin autosizes.\n    ------------------------------------------------------------\n    begin\n      SetBinSize(COV_STRUCT_ID_DEFAULT, NewNumBins) ;\n    end procedure SetBinSize ;\n\n    ------------------------------------------------------------\n    procedure AddBins (\n    ------------------------------------------------------------\n      Name    : String ;\n      AtLeast : integer ;\n      Weight  : integer ;\n      CovBin  : CovBinType\n    ) is\n    begin\n      AddBins(COV_STRUCT_ID_DEFAULT, Name, AtLeast, Weight, CovBin) ;\n    end procedure AddBins ;\n\n    ------------------------------------------------------------\n    procedure AddBins ( Name : String ; AtLeast : integer ; CovBin : CovBinType ) is\n    ------------------------------------------------------------\n    begin\n      AddBins(Name, AtLeast, 1, CovBin) ;\n    end procedure AddBins ;\n\n    ------------------------------------------------------------\n    procedure AddBins (Name : String ;  CovBin : CovBinType) is\n    ------------------------------------------------------------\n    begin\n      AddBins(Name, 1, 1, CovBin) ;\n    end procedure AddBins ;\n\n    ------------------------------------------------------------\n    procedure AddBins ( AtLeast : integer ; Weight  : integer ; CovBin : CovBinType ) is\n    ------------------------------------------------------------\n    begin\n      AddBins(\"\", AtLeast, Weight, CovBin) ;\n    end procedure AddBins ;\n\n    ------------------------------------------------------------\n    procedure AddBins ( AtLeast : integer ; CovBin : CovBinType ) is\n    ------------------------------------------------------------\n    begin\n      AddBins(\"\", AtLeast, 1, CovBin) ;\n    end procedure AddBins ;\n\n    ------------------------------------------------------------\n    procedure AddBins ( CovBin : CovBinType  ) is\n    ------------------------------------------------------------\n    begin\n      AddBins(\"\", 1, 1, CovBin) ;\n    end procedure AddBins ;\n\n    ------------------------------------------------------------\n    procedure AddCross(\n    ------------------------------------------------------------\n      Name       : string ;\n      AtLeast    : integer ;\n      Weight     : integer ;\n      Bin1, Bin2 : CovBinType ;\n      Bin3, Bin4, Bin5, Bin6, Bin7, Bin8, Bin9, Bin10, Bin11, Bin12, Bin13,\n      Bin14, Bin15, Bin16, Bin17, Bin18, Bin19, Bin20 : CovBinType := NULL_BIN\n    ) is\n    begin\n      AddCross(COV_STRUCT_ID_DEFAULT, Name, AtLeast, Weight,\n        Bin1, Bin2, Bin3, Bin4, Bin5, Bin6, Bin7, Bin8, Bin9, Bin10,\n        Bin11, Bin12, Bin13, Bin14, Bin15, Bin16, Bin17, Bin18, Bin19, Bin20) ;\n    end procedure AddCross ;\n\n    ------------------------------------------------------------\n    procedure AddCross(\n    ------------------------------------------------------------\n      Name       : string ;\n      AtLeast    : integer ;\n      Bin1, Bin2 : CovBinType ;\n      Bin3, Bin4, Bin5, Bin6, Bin7, Bin8, Bin9, Bin10, Bin11, Bin12, Bin13,\n      Bin14, Bin15, Bin16, Bin17, Bin18, Bin19, Bin20 : CovBinType := NULL_BIN\n    ) is\n    begin\n      AddCross(Name, AtLeast, 1,\n           Bin1, Bin2, Bin3, Bin4, Bin5, Bin6, Bin7, Bin8, Bin9, Bin10, Bin11,\n           Bin12, Bin13, Bin14, Bin15, Bin16, Bin17, Bin18, Bin19, Bin20\n        ) ;\n    end procedure AddCross ;\n\n    ------------------------------------------------------------\n    procedure AddCross(\n    ------------------------------------------------------------\n      Name       : string ;\n      Bin1, Bin2 : CovBinType ;\n      Bin3, Bin4, Bin5, Bin6, Bin7, Bin8, Bin9, Bin10, Bin11, Bin12, Bin13,\n      Bin14, Bin15, Bin16, Bin17, Bin18, Bin19, Bin20 : CovBinType := NULL_BIN\n    ) is\n    begin\n      AddCross(Name, 1, 1,\n           Bin1, Bin2, Bin3, Bin4, Bin5, Bin6, Bin7, Bin8, Bin9, Bin10, Bin11,\n           Bin12, Bin13, Bin14, Bin15, Bin16, Bin17, Bin18, Bin19, Bin20\n        ) ;\n    end procedure AddCross ;\n\n    ------------------------------------------------------------\n    procedure AddCross(\n    ------------------------------------------------------------\n      AtLeast    : integer ;\n      Weight     : integer ;\n      Bin1, Bin2 : CovBinType ;\n      Bin3, Bin4, Bin5, Bin6, Bin7, Bin8, Bin9, Bin10, Bin11, Bin12, Bin13,\n      Bin14, Bin15, Bin16, Bin17, Bin18, Bin19, Bin20 : CovBinType := NULL_BIN\n    ) is\n    begin\n      AddCross(\"\", AtLeast, Weight,\n           Bin1, Bin2, Bin3, Bin4, Bin5, Bin6, Bin7, Bin8, Bin9, Bin10, Bin11,\n           Bin12, Bin13, Bin14, Bin15, Bin16, Bin17, Bin18, Bin19, Bin20\n        ) ;\n    end procedure AddCross ;\n\n    ------------------------------------------------------------\n    procedure AddCross(\n    ------------------------------------------------------------\n      AtLeast    : integer ;\n      Bin1, Bin2 : CovBinType ;\n      Bin3, Bin4, Bin5, Bin6, Bin7, Bin8, Bin9, Bin10, Bin11, Bin12, Bin13,\n      Bin14, Bin15, Bin16, Bin17, Bin18, Bin19, Bin20 : CovBinType := NULL_BIN\n    ) is\n    begin\n      AddCross(\"\", AtLeast, 1,\n           Bin1, Bin2, Bin3, Bin4, Bin5, Bin6, Bin7, Bin8, Bin9, Bin10, Bin11,\n           Bin12, Bin13, Bin14, Bin15, Bin16, Bin17, Bin18, Bin19, Bin20\n        ) ;\n    end procedure AddCross ;\n\n    ------------------------------------------------------------\n    procedure AddCross(\n    ------------------------------------------------------------\n      Bin1, Bin2 : CovBinType ;\n      Bin3, Bin4, Bin5, Bin6, Bin7, Bin8, Bin9, Bin10, Bin11, Bin12, Bin13,\n      Bin14, Bin15, Bin16, Bin17, Bin18, Bin19, Bin20 : CovBinType := NULL_BIN\n    ) is\n    begin\n      AddCross(\"\", 1, 1,\n           Bin1, Bin2, Bin3, Bin4, Bin5, Bin6, Bin7, Bin8, Bin9, Bin10, Bin11,\n           Bin12, Bin13, Bin14, Bin15, Bin16, Bin17, Bin18, Bin19, Bin20\n        ) ;\n    end procedure AddCross ;\n\n    ------------------------------------------------------------\n    procedure Deallocate is\n    ------------------------------------------------------------\n    begin\n      ResetReportOptions ;\n      Deallocate(COV_STRUCT_ID_DEFAULT) ;\n    end procedure deallocate ;\n\n    ------------------------------------------------------------\n    procedure ICoverLast is\n    ------------------------------------------------------------\n    begin\n      ICoverLast(COV_STRUCT_ID_DEFAULT) ;\n    end procedure ICoverLast ;\n\n    ------------------------------------------------------------\n    procedure ICover ( CovPoint : integer) is\n    ------------------------------------------------------------\n    begin\n      ICover(COV_STRUCT_ID_DEFAULT, (1=> CovPoint)) ;\n    end procedure ICover ;\n\n    ------------------------------------------------------------\n    procedure ICover( CovPoint : integer_vector) is\n    ------------------------------------------------------------\n    begin\n      ICover(COV_STRUCT_ID_DEFAULT, CovPoint) ;\n     end procedure ICover ;\n\n    ------------------------------------------------------------\n    procedure TCover ( A : integer) is\n    ------------------------------------------------------------\n    begin\n      TCover(COV_STRUCT_ID_DEFAULT, A) ;\n    end procedure TCover ;\n\n    ------------------------------------------------------------\n    procedure ClearCov is\n    ------------------------------------------------------------\n    begin\n      ClearCov(COV_STRUCT_ID_DEFAULT) ;\n    end procedure ClearCov ;\n\n    ------------------------------------------------------------\n    -- deprecated\n    procedure SetCovZero is\n    ------------------------------------------------------------\n    begin\n      ClearCov(COV_STRUCT_ID_DEFAULT) ;\n    end procedure SetCovZero ;\n\n    ------------------------------------------------------------\n    impure function IsInitialized return boolean is\n    ------------------------------------------------------------\n    begin\n      return IsInitialized(COV_STRUCT_ID_DEFAULT) ;\n    end function IsInitialized ;\n\n    ------------------------------------------------------------\n    impure function GetMinCov return real is\n    ------------------------------------------------------------\n    begin\n      return GetMinCov(COV_STRUCT_ID_DEFAULT) ;\n    end function GetMinCov ;\n\n    ------------------------------------------------------------\n    impure function GetMinCount return integer is\n    ------------------------------------------------------------\n    begin\n      return GetMinCount (COV_STRUCT_ID_DEFAULT);\n    end function GetMinCount ;\n\n    ------------------------------------------------------------\n    impure function GetMaxCov return real is\n    ------------------------------------------------------------\n    begin\n      return GetMaxCov(COV_STRUCT_ID_DEFAULT) ;\n    end function GetMaxCov ;\n\n    ------------------------------------------------------------\n    impure function GetMaxCount return integer is\n    ------------------------------------------------------------\n    begin\n      return GetMaxCount(COV_STRUCT_ID_DEFAULT);\n    end function GetMaxCount ;\n\n    ------------------------------------------------------------\n    impure function CountCovHoles ( PercentCov : real ) return integer is\n    ------------------------------------------------------------\n    begin\n      return CountCovHoles(COV_STRUCT_ID_DEFAULT, PercentCov) ;\n    end function CountCovHoles ;\n\n    ------------------------------------------------------------\n    impure function CountCovHoles return integer is\n    ------------------------------------------------------------\n    begin\n      return CountCovHoles(COV_STRUCT_ID_DEFAULT) ;\n    end function CountCovHoles ;\n\n    ------------------------------------------------------------\n    impure function IsCovered ( PercentCov : real ) return boolean is\n    ------------------------------------------------------------\n    begin\n      return IsCovered(COV_STRUCT_ID_DEFAULT, PercentCov) ;\n    end function IsCovered ;\n\n    ------------------------------------------------------------\n    impure function IsCovered return boolean is\n    ------------------------------------------------------------\n    begin\n      return IsCovered(COV_STRUCT_ID_DEFAULT) ;\n    end function IsCovered ;\n\n    ------------------------------------------------------------\n    impure function GetCov ( PercentCov : real ) return real is\n    ------------------------------------------------------------\n    begin\n      return GetCov(COV_STRUCT_ID_DEFAULT, PercentCov) ;\n    end function GetCov ;\n\n    ------------------------------------------------------------\n    impure function GetCov return real is\n    ------------------------------------------------------------\n    begin\n      return GetCov(COV_STRUCT_ID_DEFAULT ) ;\n    end function GetCov ;\n\n    ------------------------------------------------------------\n    impure function GetItemCount return integer is\n    ------------------------------------------------------------\n    begin\n      return GetItemCount(COV_STRUCT_ID_DEFAULT) ;\n    end function GetItemCount ;\n\n    ------------------------------------------------------------\n    impure function GetTotalCovCount ( PercentCov : real ) return integer is\n    ------------------------------------------------------------\n    begin\n      return GetTotalCovCount(COV_STRUCT_ID_DEFAULT, PercentCov) ;\n    end function GetTotalCovCount ;\n\n    ------------------------------------------------------------\n    impure function GetTotalCovCount return integer is\n    ------------------------------------------------------------\n    begin\n      return GetTotalCovCount(COV_STRUCT_ID_DEFAULT) ;\n    end function GetTotalCovCount ;\n\n    ------------------------------------------------------------\n    impure function GetTotalCovGoal ( PercentCov : real ) return integer is\n    ------------------------------------------------------------\n    begin\n      return GetTotalCovGoal(COV_STRUCT_ID_DEFAULT, PercentCov) ;\n    end function GetTotalCovGoal ;\n\n    ------------------------------------------------------------\n    impure function GetTotalCovGoal return integer is\n    ------------------------------------------------------------\n    begin\n      return GetTotalCovGoal(COV_STRUCT_ID_DEFAULT) ;\n    end function GetTotalCovGoal ;\n\n    -- Return Index Values\n    ------------------------------------------------------------\n    impure function GetNumBins return integer is\n    ------------------------------------------------------------\n    begin\n      return GetNumBins(COV_STRUCT_ID_DEFAULT) ;\n    end function GetNumBins ;\n\n    ------------------------------------------------------------\n    impure function GetLastIndex return integer is\n    ------------------------------------------------------------\n    begin\n      return GetLastIndex(COV_STRUCT_ID_DEFAULT) ;\n    end function GetLastIndex ;\n\n    ------------------------------------------------------------\n    impure function GetRandIndex ( CovTargetPercent : real ) return integer is\n    ------------------------------------------------------------\n    begin\n      return GetRandIndex(COV_STRUCT_ID_DEFAULT, CovTargetPercent) ;\n    end function GetRandIndex ;\n\n    ------------------------------------------------------------\n    impure function GetRandIndex return integer is\n    ------------------------------------------------------------\n    begin\n      return GetRandIndex(COV_STRUCT_ID_DEFAULT) ;\n    end function GetRandIndex ;\n\n    ------------------------------------------------------------\n    impure function GetIncIndex return integer is\n    ------------------------------------------------------------\n    begin\n      return GetIncIndex(COV_STRUCT_ID_DEFAULT) ;\n    end function GetIncIndex ;\n\n    ------------------------------------------------------------\n    impure function GetMinIndex return integer is\n    ------------------------------------------------------------\n    begin\n      return GetMinIndex(COV_STRUCT_ID_DEFAULT) ;\n    end function GetMinIndex ;\n\n    ------------------------------------------------------------\n    impure function GetMaxIndex return integer is\n    ------------------------------------------------------------\n    begin\n      return GetMaxIndex(COV_STRUCT_ID_DEFAULT) ;\n    end function GetMaxIndex ;\n\n    ------------------------------------------------------------\n    impure function GetNextIndex (Mode : NextPointModeType) return integer is\n    ------------------------------------------------------------\n    begin\n      return GetNextIndex(COV_STRUCT_ID_DEFAULT, Mode) ;\n    end function GetNextIndex;\n\n    ------------------------------------------------------------\n    impure function GetNextIndex return integer is\n    ------------------------------------------------------------\n    begin\n      return GetNextIndex(COV_STRUCT_ID_DEFAULT) ;\n    end function GetNextIndex ;\n\n    -- Return BinVals\n    ------------------------------------------------------------\n    impure function GetBinVal ( BinIndex : integer ) return RangeArrayType is\n    ------------------------------------------------------------\n    begin\n      return GetBinVal(COV_STRUCT_ID_DEFAULT, BinIndex ) ;\n    end function GetBinVal ;\n\n    ------------------------------------------------------------\n    impure function GetLastBinVal return RangeArrayType is\n    ------------------------------------------------------------\n    begin\n      return GetLastBinVal(COV_STRUCT_ID_DEFAULT) ;\n    end function GetLastBinVal ;\n\n    ------------------------------------------------------------\n    impure function GetRandBinVal ( PercentCov : real ) return RangeArrayType is\n    ------------------------------------------------------------\n    begin\n      return GetRandBinVal(COV_STRUCT_ID_DEFAULT, PercentCov) ;  -- GetBinVal\n    end function GetRandBinVal ;\n\n    ------------------------------------------------------------\n    impure function GetRandBinVal  return RangeArrayType is\n    ------------------------------------------------------------\n    begin\n      -- use global coverage target\n      return GetRandBinVal(COV_STRUCT_ID_DEFAULT) ;  -- GetBinVal\n    end function GetRandBinVal ;\n\n    ------------------------------------------------------------\n    impure function GetIncBinVal return RangeArrayType is\n    ------------------------------------------------------------\n    begin\n      return GetIncBinVal( COV_STRUCT_ID_DEFAULT ) ;\n    end function GetIncBinVal ;\n\n    ------------------------------------------------------------\n    impure function GetMinBinVal  return RangeArrayType is\n    ------------------------------------------------------------\n    begin\n      -- use global coverage target\n      return GetMinBinVal( COV_STRUCT_ID_DEFAULT ) ;\n    end function GetMinBinVal ;\n\n    ------------------------------------------------------------\n    impure function GetMaxBinVal  return RangeArrayType is\n    ------------------------------------------------------------\n    begin\n      -- use global coverage target\n      return GetMaxBinVal( COV_STRUCT_ID_DEFAULT ) ;\n    end function GetMaxBinVal ;\n\n    ------------------------------------------------------------\n    impure function GetNextBinVal (Mode : NextPointModeType) return RangeArrayType is\n    ------------------------------------------------------------\n    begin\n      return     GetNextBinVal (COV_STRUCT_ID_DEFAULT, Mode) ;\n    end function GetNextBinVal;\n\n    ------------------------------------------------------------\n    impure function GetNextBinVal return RangeArrayType is\n    ------------------------------------------------------------\n    begin\n      return     GetNextBinVal (COV_STRUCT_ID_DEFAULT) ;\n    end function GetNextBinVal ;\n\n    ------------------------------------------------------------\n    -- deprecated, see GetRandBinVal\n    impure function RandCovBinVal ( PercentCov : real ) return RangeArrayType is\n    ------------------------------------------------------------\n    begin\n      return     GetRandBinVal(COV_STRUCT_ID_DEFAULT, PercentCov) ;  -- GetBinVal\n    end function RandCovBinVal ;\n\n\n    ------------------------------------------------------------\n    -- deprecated, see GetRandBinVal\n    impure function RandCovBinVal  return RangeArrayType is\n    ------------------------------------------------------------\n    begin\n      return     GetRandBinVal(COV_STRUCT_ID_DEFAULT) ;  -- GetBinVal\n    end function RandCovBinVal ;\n\n    ------------------------------------------------------------\n    impure function GetHoleBinVal ( ReqHoleNum : integer ; PercentCov : real  ) return RangeArrayType is\n    ------------------------------------------------------------\n    begin\n      return     GetHoleBinVal(COV_STRUCT_ID_DEFAULT, ReqHoleNum, PercentCov) ;\n    end function GetHoleBinVal ;\n\n    ------------------------------------------------------------\n    impure function GetHoleBinVal ( PercentCov : real  ) return RangeArrayType is\n    ------------------------------------------------------------\n    begin\n      return     GetHoleBinVal(COV_STRUCT_ID_DEFAULT, 1, PercentCov) ;\n    end function GetHoleBinVal ;\n\n    ------------------------------------------------------------\n    impure function GetHoleBinVal ( ReqHoleNum : integer := 1 ) return RangeArrayType is\n    ------------------------------------------------------------\n    begin\n      return     GetHoleBinVal(COV_STRUCT_ID_DEFAULT, ReqHoleNum) ;\n    end function GetHoleBinVal ;\n\n    ------------------------------------------------------------\n    impure function GetPoint ( BinIndex : integer ) return integer is\n    ------------------------------------------------------------\n    begin\n      return     GetPoint(COV_STRUCT_ID_DEFAULT, BinIndex) ;\n    end function GetPoint ;\n\n    ------------------------------------------------------------\n    impure function GetPoint ( BinIndex : integer ) return integer_vector is\n    ------------------------------------------------------------\n    begin\n      return     GetPoint(COV_STRUCT_ID_DEFAULT, BinIndex) ;\n    end function GetPoint ;\n\n    ------------------------------------------------------------\n    impure function GetRandPoint return integer is\n    ------------------------------------------------------------\n    begin\n      return     GetRandPoint(COV_STRUCT_ID_DEFAULT) ;\n    end function GetRandPoint ;\n\n    ------------------------------------------------------------\n    impure function GetRandPoint ( PercentCov : real ) return integer is\n    ------------------------------------------------------------\n    begin\n      return     GetRandPoint(COV_STRUCT_ID_DEFAULT, PercentCov) ;\n    end function GetRandPoint ;\n\n    ------------------------------------------------------------\n    impure function GetRandPoint return integer_vector is\n    ------------------------------------------------------------\n    begin\n      return     GetRandPoint(COV_STRUCT_ID_DEFAULT) ;\n    end function GetRandPoint ;\n\n    ------------------------------------------------------------\n    impure function GetRandPoint ( PercentCov : real ) return integer_vector is\n    ------------------------------------------------------------\n    begin\n      return     GetRandPoint(COV_STRUCT_ID_DEFAULT, PercentCov) ;\n    end function GetRandPoint ;\n\n    ------------------------------------------------------------\n    impure function GetIncPoint return integer is\n    ------------------------------------------------------------\n    begin\n      return     GetIncPoint(COV_STRUCT_ID_DEFAULT) ;\n    end function GetIncPoint ;\n\n    ------------------------------------------------------------\n    impure function GetIncPoint return integer_vector is\n    ------------------------------------------------------------\n    begin\n      return     GetIncPoint(COV_STRUCT_ID_DEFAULT) ;\n    end function GetIncPoint ;\n\n    ------------------------------------------------------------\n    impure function GetMinPoint return integer is\n    ------------------------------------------------------------\n    begin\n      return     GetMinPoint(COV_STRUCT_ID_DEFAULT) ;\n    end function GetMinPoint ;\n\n    ------------------------------------------------------------\n    impure function GetMinPoint return integer_vector is\n    ------------------------------------------------------------\n    begin\n      return     GetMinPoint(COV_STRUCT_ID_DEFAULT) ;\n    end function GetMinPoint ;\n\n    ------------------------------------------------------------\n    impure function GetMaxPoint return integer is\n    ------------------------------------------------------------\n    begin\n      return     GetMaxPoint(COV_STRUCT_ID_DEFAULT) ;\n    end function GetMaxPoint ;\n\n    ------------------------------------------------------------\n    impure function GetMaxPoint return integer_vector is\n    ------------------------------------------------------------\n    begin\n      return     GetMaxPoint(COV_STRUCT_ID_DEFAULT) ;\n    end function GetMaxPoint ;\n\n    ------------------------------------------------------------\n    impure function GetNextPoint (Mode : NextPointModeType) return integer is\n    ------------------------------------------------------------\n    begin\n      return     GetNextPoint(COV_STRUCT_ID_DEFAULT, Mode) ;\n    end function GetNextPoint;\n\n    ------------------------------------------------------------\n    impure function GetNextPoint (Mode : NextPointModeType) return integer_vector is\n    ------------------------------------------------------------\n    begin\n      return     GetNextPoint(COV_STRUCT_ID_DEFAULT, Mode) ;\n    end function GetNextPoint;\n\n    ------------------------------------------------------------\n    impure function GetNextPoint return integer is\n    ------------------------------------------------------------\n    begin\n      return     GetNextPoint(COV_STRUCT_ID_DEFAULT) ;\n    end function GetNextPoint ;\n\n    ------------------------------------------------------------\n    impure function GetNextPoint return integer_vector is\n    ------------------------------------------------------------\n    begin\n      return     GetNextPoint(COV_STRUCT_ID_DEFAULT) ;\n    end function GetNextPoint ;\n\n    ------------------------------------------------------------\n    -- deprecated, see GetRandPoint\n    impure function RandCovPoint return integer is\n    ------------------------------------------------------------\n    begin\n      return     GetRandPoint(COV_STRUCT_ID_DEFAULT) ;\n    end function RandCovPoint ;\n\n    ------------------------------------------------------------\n    -- deprecated, see GetRandPoint\n    impure function RandCovPoint ( PercentCov : real ) return integer is\n    ------------------------------------------------------------\n    begin\n      return     GetRandPoint(COV_STRUCT_ID_DEFAULT, PercentCov) ;\n    end function RandCovPoint ;\n\n    ------------------------------------------------------------\n    -- deprecated, see GetRandPoint\n    impure function RandCovPoint return integer_vector is\n    ------------------------------------------------------------\n    begin\n      return     GetRandPoint(COV_STRUCT_ID_DEFAULT) ;\n    end function RandCovPoint ;\n\n    ------------------------------------------------------------\n    -- deprecated, see GetRandPoint\n    impure function RandCovPoint ( PercentCov : real ) return integer_vector is\n    ------------------------------------------------------------\n    begin\n      return     GetRandPoint(COV_STRUCT_ID_DEFAULT, PercentCov) ;\n    end function RandCovPoint ;\n\n    -- ------------------------------------------------------------\n    -- Intended as a stand in until we get a more general GetBin\n    impure function GetBinInfo ( BinIndex : integer ) return CovBinBaseType is\n    -- ------------------------------------------------------------\n    begin\n      return     GetBinInfo(COV_STRUCT_ID_DEFAULT, BinIndex) ;\n    end function GetBinInfo ;\n\n    -- ------------------------------------------------------------\n    -- Intended as a stand in until we get a more general GetBin\n    impure function GetBinValLength return integer is\n    -- ------------------------------------------------------------\n    begin\n      return     GetBinValLength(COV_STRUCT_ID_DEFAULT) ;\n    end function GetBinValLength ;\n\n-- Eventually the multiple GetBin functions will be replaced by a\n-- a single GetBin that returns CovBinBaseType with BinVal as an\n-- unconstrained element\n    -- ------------------------------------------------------------\n    impure function GetBin ( BinIndex : integer ) return CovBinBaseType is\n    -- ------------------------------------------------------------\n    begin\n      return     GetBin(COV_STRUCT_ID_DEFAULT, BinIndex) ;\n    end function GetBin ;\n\n    -- ------------------------------------------------------------\n    impure function GetBin ( BinIndex : integer ) return CovMatrix2BaseType is\n    -- ------------------------------------------------------------\n    begin\n      return     GetBin(COV_STRUCT_ID_DEFAULT, BinIndex) ;\n    end function GetBin ;\n\n    -- ------------------------------------------------------------\n    impure function GetBin ( BinIndex : integer ) return CovMatrix3BaseType is\n    -- ------------------------------------------------------------\n    begin\n      return     GetBin(COV_STRUCT_ID_DEFAULT, BinIndex) ;\n    end function GetBin ;\n\n    -- ------------------------------------------------------------\n    impure function GetBin ( BinIndex : integer ) return CovMatrix4BaseType is\n    -- ------------------------------------------------------------\n    begin\n      return     GetBin(COV_STRUCT_ID_DEFAULT, BinIndex) ;\n    end function GetBin ;\n\n    -- ------------------------------------------------------------\n    impure function GetBin ( BinIndex : integer ) return CovMatrix5BaseType is\n    -- ------------------------------------------------------------\n    begin\n      return     GetBin(COV_STRUCT_ID_DEFAULT, BinIndex) ;\n    end function GetBin ;\n\n    -- ------------------------------------------------------------\n    impure function GetBin ( BinIndex : integer ) return CovMatrix6BaseType is\n    -- ------------------------------------------------------------\n    begin\n      return     GetBin(COV_STRUCT_ID_DEFAULT, BinIndex) ;\n    end function GetBin ;\n\n    -- ------------------------------------------------------------\n    impure function GetBin ( BinIndex : integer ) return CovMatrix7BaseType is\n    -- ------------------------------------------------------------\n    begin\n      return     GetBin(COV_STRUCT_ID_DEFAULT, BinIndex) ;\n    end function GetBin ;\n\n    -- ------------------------------------------------------------\n    impure function GetBin ( BinIndex : integer ) return CovMatrix8BaseType is\n    -- ------------------------------------------------------------\n    begin\n      return     GetBin(COV_STRUCT_ID_DEFAULT, BinIndex) ;\n    end function GetBin ;\n\n\n    -- ------------------------------------------------------------\n    impure function GetBin ( BinIndex : integer ) return CovMatrix9BaseType is\n    -- ------------------------------------------------------------\n    begin\n      return     GetBin(COV_STRUCT_ID_DEFAULT, BinIndex) ;\n    end function GetBin ;\n\n    -- ------------------------------------------------------------\n    impure function GetBinName ( BinIndex : integer; DefaultName : string := \"\" ) return string is\n    -- ------------------------------------------------------------\n    begin\n      return GetBinName(COV_STRUCT_ID_DEFAULT, BinIndex, DefaultName) ;\n    end function GetBinName;\n\n    ------------------------------------------------------------\n    procedure WriteBin (\n    ------------------------------------------------------------\n      WritePassFail   : OsvvmOptionsType := COV_OPT_INIT_PARM_DETECT ;\n      WriteBinInfo    : OsvvmOptionsType := COV_OPT_INIT_PARM_DETECT ;\n      WriteCount      : OsvvmOptionsType := COV_OPT_INIT_PARM_DETECT ;\n      WriteAnyIllegal : OsvvmOptionsType := COV_OPT_INIT_PARM_DETECT ;\n      WritePrefix     : string         := OSVVM_STRING_INIT_PARM_DETECT ;\n      PassName        : string         := OSVVM_STRING_INIT_PARM_DETECT ;\n      FailName        : string         := OSVVM_STRING_INIT_PARM_DETECT\n    ) is\n--!!      constant rWritePassFail   : OsvvmOptionsType := ResolveCovWritePassFail  (WritePassFail,    WritePassFailVar) ;\n--!!      constant rWriteBinInfo    : OsvvmOptionsType := ResolveCovWriteBinInfo   (WriteBinInfo,     WriteBinInfoVar  ) ;\n--!!      constant rWriteCount      : OsvvmOptionsType := ResolveCovWriteCount     (WriteCount,       WriteCountVar    ) ;\n--!!      constant rWriteAnyIllegal : OsvvmOptionsType := ResolveCovWriteAnyIllegal(WriteAnyIllegal,  WriteAnyIllegalVar) ;\n      constant rWritePassFail   : boolean := IfElse(WritePassFail   /= COV_OPT_INIT_PARM_DETECT,  IsEnabled(WritePassFail),    WritePassFailVar) ;\n      constant rWriteBinInfo    : boolean := IfElse(WriteBinInfo    /= COV_OPT_INIT_PARM_DETECT,  IsEnabled(WriteBinInfo),     WriteBinInfoVar  ) ;\n      constant rWriteCount      : boolean := IfElse(WriteCount      /= COV_OPT_INIT_PARM_DETECT,  IsEnabled(WriteCount),       WriteCountVar    ) ;\n      constant rWriteAnyIllegal : boolean := IfElse(WriteAnyIllegal /= COV_OPT_INIT_PARM_DETECT,  IsEnabled(WriteAnyIllegal),  WriteAnyIllegalVar) ;\n      -- constant rWritePrefix     : string         := ResolveOsvvmWritePrefix  (WritePrefix,      WritePrefixVar.GetOpt) ;\n      -- constant rPassName        : string         := ResolveOsvvmPassName     (PassName,         PassNameVar.GetOpt  ) ;\n      -- constant rFailName        : string         := ResolveOsvvmFailName     (FailName,         FailNameVar.GetOpt  ) ;\n      variable buf, buf2 : line ;\n    begin\n      WriteBin (\n        ID              => COV_STRUCT_ID_DEFAULT,\n        buf             => buf,\n        WritePassFail   => rWritePassFail,\n        WriteBinInfo    => rWriteBinInfo,\n        WriteCount      => rWriteCount,\n        WriteAnyIllegal => rWriteAnyIllegal,\n--!!        WritePrefix     => rWritePrefix,\n--!!        PassName        => rPassName,\n--!!        FailName        => rFailName\n--!!        WritePrefix     => ResolveOsvvmWritePrefix  (WritePrefix,      WritePrefixVar.GetOpt),\n--!!        PassName        => ResolveOsvvmPassName     (PassName,         PassNameVar.GetOpt  ),\n--!!        FailName        => ResolveOsvvmFailName     (FailName,         FailNameVar.GetOpt  )\n        WritePrefix     => COVERAGE_PRINT_PREFIX,\n        PassName        => COVERAGE_PASS_NAME,\n        FailName        => COVERAGE_FAIL_NAME\n        ) ;\n      WriteToCovFile(buf) ;\n    end procedure WriteBin ;\n\n    ------------------------------------------------------------\n    -- Deprecated\n    procedure WriteBin (  -- With LogLevel\n    ------------------------------------------------------------\n      LogLevel        : LogType ;\n      WritePassFail   : OsvvmOptionsType := COV_OPT_INIT_PARM_DETECT ;\n      WriteBinInfo    : OsvvmOptionsType := COV_OPT_INIT_PARM_DETECT ;\n      WriteCount      : OsvvmOptionsType := COV_OPT_INIT_PARM_DETECT ;\n      WriteAnyIllegal : OsvvmOptionsType := COV_OPT_INIT_PARM_DETECT ;\n      WritePrefix     : string         := OSVVM_STRING_INIT_PARM_DETECT ;\n      PassName        : string         := OSVVM_STRING_INIT_PARM_DETECT ;\n      FailName        : string         := OSVVM_STRING_INIT_PARM_DETECT\n    ) is\n    begin\n      if IsLogEnabled(CovStructPtr(COV_STRUCT_ID_DEFAULT.ID).AlertLogID, LogLevel) then\n        WriteBin (\n          WritePassFail   => WritePassFail,\n          WriteBinInfo    => WriteBinInfo,\n          WriteCount      => WriteCount,\n          WriteAnyIllegal => WriteAnyIllegal,\n          WritePrefix     => WritePrefix,\n          PassName        => PassName,\n          FailName        => FailName\n        ) ;\n      end if ;\n    end procedure WriteBin ;  -- With LogLevel\n\n    ------------------------------------------------------------\n    procedure WriteBin (\n    ------------------------------------------------------------\n      FileName        : string;\n      OpenKind        : File_Open_Kind   := APPEND_MODE ;\n      WritePassFail   : OsvvmOptionsType := COV_OPT_INIT_PARM_DETECT ;\n      WriteBinInfo    : OsvvmOptionsType := COV_OPT_INIT_PARM_DETECT ;\n      WriteCount      : OsvvmOptionsType := COV_OPT_INIT_PARM_DETECT ;\n      WriteAnyIllegal : OsvvmOptionsType := COV_OPT_INIT_PARM_DETECT ;\n      WritePrefix     : string           := OSVVM_STRING_INIT_PARM_DETECT ;  --!! Deprecated\n      PassName        : string           := OSVVM_STRING_INIT_PARM_DETECT ;  --!! Deprecated\n      FailName        : string           := OSVVM_STRING_INIT_PARM_DETECT    --!! Deprecated\n    ) is\n--x      file LocalWriteBinFile : text open OpenKind is FileName ;\n      file LocalWriteBinFile : text ;\n--!!      constant rWritePassFail   : OsvvmOptionsType := ResolveCovWritePassFail   (WritePassFail,    WritePassFailVar) ;\n--!!      constant rWriteBinInfo    : OsvvmOptionsType := ResolveCovWriteBinInfo    (WriteBinInfo,     WriteBinInfoVar  ) ;\n--!!      constant rWriteCount      : OsvvmOptionsType := ResolveCovWriteCount      (WriteCount,       WriteCountVar    ) ;\n--!!      constant rWriteAnyIllegal : OsvvmOptionsType := ResolveCovWriteAnyIllegal (WriteAnyIllegal,  WriteAnyIllegalVar) ;\n      -- If input set, use it.\n      constant rWritePassFail   : boolean := IfElse(WritePassFail   /= COV_OPT_INIT_PARM_DETECT,  IsEnabled(WritePassFail),    WritePassFailVar) ;\n      constant rWriteBinInfo    : boolean := IfElse(WriteBinInfo    /= COV_OPT_INIT_PARM_DETECT,  IsEnabled(WriteBinInfo),     WriteBinInfoVar  ) ;\n      constant rWriteCount      : boolean := IfElse(WriteCount      /= COV_OPT_INIT_PARM_DETECT,  IsEnabled(WriteCount),       WriteCountVar    ) ;\n      constant rWriteAnyIllegal : boolean := IfElse(WriteAnyIllegal /= COV_OPT_INIT_PARM_DETECT,  IsEnabled(WriteAnyIllegal),  WriteAnyIllegalVar) ;\n      -- constant rWritePrefix     : string         := ResolveOsvvmWritePrefix   (WritePrefix,      WritePrefixVar.GetOpt) ;\n      -- constant rPassName        : string         := ResolveOsvvmPassName      (PassName,         PassNameVar.GetOpt  ) ;\n      -- constant rFailName        : string         := ResolveOsvvmFailName      (FailName,         FailNameVar.GetOpt  ) ;\n      variable buf : line ;\n    begin\n      file_open(LocalWriteBinFile, FileName, OpenKind) ;\n      WriteBin (\n        ID              => COV_STRUCT_ID_DEFAULT,\n        buf             => buf,\n        WritePassFail   => rWritePassFail,\n        WriteBinInfo    => rWriteBinInfo,\n        WriteCount      => rWriteCount,\n        WriteAnyIllegal => rWriteAnyIllegal,\n--!!      WritePrefix     => rWritePrefix,\n--!!      PassName        => rPassName,\n--!!      FailName        => rFailName\n--!!      WritePrefix     => ResolveOsvvmWritePrefix  (WritePrefix,      WritePrefixVar.GetOpt),\n--!!      PassName        => ResolveOsvvmPassName     (PassName,         PassNameVar.GetOpt  ),\n--!!      FailName        => ResolveOsvvmFailName     (FailName,         FailNameVar.GetOpt  ),\n        WritePrefix     => COVERAGE_PRINT_PREFIX,\n        PassName        => COVERAGE_PASS_NAME,\n        FailName        => COVERAGE_FAIL_NAME,\n        UsingLocalFile  => TRUE\n      );\n      writeline(LocalWriteBinFile, buf) ;\n    end procedure WriteBin ;\n\n    ------------------------------------------------------------\n    procedure WriteBin (  -- With LogLevel\n    ------------------------------------------------------------\n      LogLevel        : LogType ;\n      FileName        : string;\n      OpenKind        : File_Open_Kind := APPEND_MODE ;\n      WritePassFail   : OsvvmOptionsType := COV_OPT_INIT_PARM_DETECT ;\n      WriteBinInfo    : OsvvmOptionsType := COV_OPT_INIT_PARM_DETECT ;\n      WriteCount      : OsvvmOptionsType := COV_OPT_INIT_PARM_DETECT ;\n      WriteAnyIllegal : OsvvmOptionsType := COV_OPT_INIT_PARM_DETECT ;\n      WritePrefix     : string         := OSVVM_STRING_INIT_PARM_DETECT ;\n      PassName        : string         := OSVVM_STRING_INIT_PARM_DETECT ;\n      FailName        : string         := OSVVM_STRING_INIT_PARM_DETECT\n    ) is\n    begin\n      if IsLogEnabled(CovStructPtr(COV_STRUCT_ID_DEFAULT.ID).AlertLogID, LogLevel) then\n        WriteBin (\n          FileName        => FileName,\n          OpenKind        => OpenKind,\n          WritePassFail   => WritePassFail,\n          WriteBinInfo    => WriteBinInfo,\n          WriteCount      => WriteCount,\n          WriteAnyIllegal => WriteAnyIllegal,\n          WritePrefix     => WritePrefix,\n          PassName        => PassName,\n          FailName        => FailName\n        ) ;\n      end if ;\n    end procedure WriteBin ;  -- With LogLevel\n\n    ------------------------------------------------------------\n    procedure DumpBin (LogLevel : LogType := DEBUG) is\n    ------------------------------------------------------------\n    begin\n      DumpBin (COV_STRUCT_ID_DEFAULT, LogLevel) ;\n    end procedure DumpBin ;\n\n    ------------------------------------------------------------\n    procedure WriteCovHoles ( PercentCov : real ) is\n    ------------------------------------------------------------\n    begin\n      WriteCovHoles(COV_STRUCT_ID_DEFAULT, PercentCov) ;\n    end procedure WriteCovHoles ;\n\n    ------------------------------------------------------------\n    procedure WriteCovHoles ( LogLevel : LogType := ALWAYS ) is\n    ------------------------------------------------------------\n    begin\n      WriteCovHoles(COV_STRUCT_ID_DEFAULT, LogLevel) ;\n    end procedure WriteCovHoles ;\n\n    ------------------------------------------------------------\n    procedure WriteCovHoles ( LogLevel : LogType ; PercentCov : real ) is\n    ------------------------------------------------------------\n    begin\n      WriteCovHoles(COV_STRUCT_ID_DEFAULT, LogLevel, PercentCov) ;\n    end procedure WriteCovHoles ;\n\n    ------------------------------------------------------------\n    procedure WriteCovHoles ( FileName : string;  OpenKind : File_Open_Kind := APPEND_MODE ) is\n    ------------------------------------------------------------\n    begin\n      WriteCovHoles(COV_STRUCT_ID_DEFAULT, FileName, OpenKind) ;\n    end procedure WriteCovHoles ;\n\n    ------------------------------------------------------------\n    procedure WriteCovHoles ( LogLevel : LogType ; FileName : string;  OpenKind : File_Open_Kind := APPEND_MODE ) is\n    ------------------------------------------------------------\n    begin\n      WriteCovHoles(COV_STRUCT_ID_DEFAULT, LogLevel, FileName, OpenKind) ;\n    end procedure WriteCovHoles ;\n\n    ------------------------------------------------------------\n    procedure WriteCovHoles ( FileName : string;  PercentCov : real ; OpenKind : File_Open_Kind := APPEND_MODE ) is\n    ------------------------------------------------------------\n    begin\n      WriteCovHoles(COV_STRUCT_ID_DEFAULT, FileName, PercentCov, OpenKind) ;\n    end procedure WriteCovHoles ;\n\n    ------------------------------------------------------------\n    procedure WriteCovHoles ( LogLevel : LogType ; FileName : string;  PercentCov : real ; OpenKind : File_Open_Kind := APPEND_MODE ) is\n    ------------------------------------------------------------\n    begin\n      WriteCovHoles(COV_STRUCT_ID_DEFAULT, LogLevel, FileName, PercentCov, OpenKind) ;\n    end procedure WriteCovHoles ;\n\n    ------------------------------------------------------------\n    procedure ReadCovDb (FileName : string; Merge : boolean := FALSE) is\n    ------------------------------------------------------------\n    begin\n      ReadCovDb(COV_STRUCT_ID_DEFAULT, FileName, Merge) ;\n    end procedure ReadCovDb ;\n\n    ------------------------------------------------------------\n    procedure WriteCovDb (FileName : string; OpenKind : File_Open_Kind := WRITE_MODE ) is\n    ------------------------------------------------------------\n    begin\n      WriteCovDb (COV_STRUCT_ID_DEFAULT, FileName, OpenKind) ;\n    end procedure WriteCovDb ;\n\n    ------------------------------------------------------------\n    impure function GetErrorCount return integer is\n    ------------------------------------------------------------\n    begin\n      return GetErrorCount(COV_STRUCT_ID_DEFAULT) ;\n    end function GetErrorCount ;\n\n    ------------------------------------------------------------\n    -- These support usage of cross coverage constants\n    -- Also support the older AddCross(GenCross(...)) methodology\n    -- which has been replaced by AddCross\n    ------------------------------------------------------------\n    procedure AddCross (CovBin : CovMatrix2Type ; Name : String := \"\") is\n    ------------------------------------------------------------\n    begin\n      AddCross(COV_STRUCT_ID_DEFAULT, CovBin, Name) ;\n    end procedure AddCross ;\n\n    ------------------------------------------------------------\n    procedure AddCross (CovBin : CovMatrix3Type ; Name : String := \"\") is\n    ------------------------------------------------------------\n    begin\n      AddCross(COV_STRUCT_ID_DEFAULT, CovBin, Name) ;\n    end procedure AddCross ;\n\n    ------------------------------------------------------------\n    procedure AddCross (CovBin : CovMatrix4Type ; Name : String := \"\") is\n    ------------------------------------------------------------\n    begin\n      AddCross(COV_STRUCT_ID_DEFAULT, CovBin, Name) ;\n    end procedure AddCross ;\n\n    ------------------------------------------------------------\n    procedure AddCross (CovBin : CovMatrix5Type ; Name : String := \"\") is\n    ------------------------------------------------------------\n    begin\n      AddCross(COV_STRUCT_ID_DEFAULT, CovBin, Name) ;\n    end procedure AddCross ;\n\n    ------------------------------------------------------------\n    procedure AddCross (CovBin : CovMatrix6Type ; Name : String := \"\") is\n    ------------------------------------------------------------\n    begin\n      AddCross(COV_STRUCT_ID_DEFAULT, CovBin, Name) ;\n    end procedure AddCross ;\n\n    ------------------------------------------------------------\n    procedure AddCross (CovBin : CovMatrix7Type ; Name : String := \"\") is\n    ------------------------------------------------------------\n    begin\n      AddCross(COV_STRUCT_ID_DEFAULT, CovBin, Name) ;\n    end procedure AddCross ;\n\n    ------------------------------------------------------------\n    procedure AddCross (CovBin : CovMatrix8Type ; Name : String := \"\") is\n    ------------------------------------------------------------\n    begin\n      AddCross(COV_STRUCT_ID_DEFAULT, CovBin, Name) ;\n    end procedure AddCross ;\n\n    ------------------------------------------------------------\n    procedure AddCross (CovBin : CovMatrix9Type ; Name : String := \"\") is\n    ------------------------------------------------------------\n    begin\n      AddCross(COV_STRUCT_ID_DEFAULT, CovBin, Name) ;\n    end procedure AddCross ;\n\n-- ------------------------------------------------------------\n-- ------------------------------------------------------------\n-- Deprecated / Subsumed by versions with PercentCov Parameter\n-- Maintained for backward compatibility only and\n-- may be removed in the future.\n-- ------------------------------------------------------------\n\n    ------------------------------------------------------------\n    -- Deprecated.  New versions use PercentCov\n    impure function CountCovHoles ( AtLeast : integer ) return integer is\n    ------------------------------------------------------------\n    begin\n      return     CountCovHoles (COV_STRUCT_ID_DEFAULT, AtLeast) ;\n    end function CountCovHoles ;\n\n    ------------------------------------------------------------\n    -- Deprecated.  New versions use PercentCov\n    impure function IsCovered ( AtLeast : integer ) return boolean is\n    ------------------------------------------------------------\n    begin\n      return     IsCovered(COV_STRUCT_ID_DEFAULT, AtLeast) ;\n    end function IsCovered ;\n\n    ------------------------------------------------------------\n    -- Deprecated.  New versions use PercentCov\n    impure function RandCovBinVal (AtLeast : integer ) return RangeArrayType is\n    ------------------------------------------------------------\n    begin\n      return     RandCovBinVal(COV_STRUCT_ID_DEFAULT, AtLeast) ;\n    end function RandCovBinVal ;\n\n-- Maintained for backward compatibility.  Repeated until aliases work for methods\n    ------------------------------------------------------------\n    -- Deprecated+  New versions use PercentCov.  Name change.\n    impure function RandCovHole (AtLeast : integer ) return RangeArrayType is\n    ------------------------------------------------------------\n    begin\n      return     RandCovHole(COV_STRUCT_ID_DEFAULT, AtLeast) ;\n    end function RandCovHole ;\n\n    ------------------------------------------------------------\n    -- Deprecated.  New versions use PercentCov\n    impure function RandCovPoint (AtLeast : integer ) return integer is\n    ------------------------------------------------------------\n    begin\n      return     RandCovPoint(COV_STRUCT_ID_DEFAULT, AtLeast) ;\n    end function RandCovPoint ;\n\n    ------------------------------------------------------------\n    impure function RandCovPoint (AtLeast : integer ) return integer_vector is\n    ------------------------------------------------------------\n    begin\n      return     RandCovPoint(COV_STRUCT_ID_DEFAULT, AtLeast) ;\n    end function RandCovPoint ;\n\n    ------------------------------------------------------------\n    -- Deprecated.  New versions use PercentCov\n    impure function GetHoleBinVal ( ReqHoleNum : integer ; AtLeast : integer ) return RangeArrayType is\n    ------------------------------------------------------------\n    begin\n      return     GetHoleBinVal (COV_STRUCT_ID_DEFAULT, ReqHoleNum, AtLeast) ;\n    end function GetHoleBinVal ;\n\n    ------------------------------------------------------------\n    -- Deprecated+.  New versions use PercentCov.  Name Change.\n    impure function GetCovHole ( ReqHoleNum : integer ; AtLeast : integer ) return RangeArrayType is\n    ------------------------------------------------------------\n    begin\n      return     GetCovHole(COV_STRUCT_ID_DEFAULT, ReqHoleNum, AtLeast) ;\n    end function GetCovHole ;\n\n    ------------------------------------------------------------\n    -- Deprecated.  New versions use PercentCov.\n    procedure WriteCovHoles ( AtLeast : integer ) is\n    ------------------------------------------------------------\n    begin\n      WriteCovHoles(COV_STRUCT_ID_DEFAULT, AtLeast) ;\n    end procedure WriteCovHoles ;\n\n    ------------------------------------------------------------\n    -- Deprecated.  New versions use PercentCov.\n    procedure WriteCovHoles ( LogLevel : LogType ; AtLeast : integer ) is\n    ------------------------------------------------------------\n    begin\n      WriteCovHoles(COV_STRUCT_ID_DEFAULT, LogLevel, AtLeast) ;\n    end procedure WriteCovHoles ;\n\n    ------------------------------------------------------------\n    -- Deprecated.  New versions use PercentCov.\n    procedure WriteCovHoles ( FileName : string;  AtLeast : integer ; OpenKind : File_Open_Kind := APPEND_MODE ) is\n    ------------------------------------------------------------\n    begin\n      WriteCovHoles(COV_STRUCT_ID_DEFAULT, FileName, AtLeast, OpenKind) ;\n    end procedure WriteCovHoles ;\n\n    ------------------------------------------------------------\n    -- Deprecated.  New versions use PercentCov.\n    procedure WriteCovHoles ( LogLevel : LogType ; FileName : string;  AtLeast : integer ; OpenKind : File_Open_Kind := APPEND_MODE ) is\n    ------------------------------------------------------------\n    begin\n      WriteCovHoles(COV_STRUCT_ID_DEFAULT, LogLevel, FileName, AtLeast, OpenKind) ;\n    end procedure WriteCovHoles ;\n\n--------------------------------------------------------------\n--------------------------------------------------------------\n-- Deprecated.  Due to name changes to promote greater consistency\n-- Maintained for backward compatibility - but only for PT version\n-- Not available in Data Structure\n-- ------------------------------------------------------------\n\n    ------------------------------------------------------------\n    impure function CovBinErrCnt return integer is\n    -- Deprecated.  Name changed to ErrorCount for package to package consistency\n    ------------------------------------------------------------\n    begin\n      return GetErrorCount(COV_STRUCT_ID_DEFAULT) ;\n    end function CovBinErrCnt ;\n\n    ------------------------------------------------------------\n    -- Deprecated.  Same as RandCovBinVal\n    impure function RandCovHole ( PercentCov : real ) return RangeArrayType is\n    ------------------------------------------------------------\n    begin\n      return RandCovBinVal(COV_STRUCT_ID_DEFAULT, PercentCov)  ;\n    end function RandCovHole ;\n\n    ------------------------------------------------------------\n    -- Deprecated.  Same as RandCovBinVal\n    impure function RandCovHole return RangeArrayType is\n    ------------------------------------------------------------\n    begin\n      return RandCovBinVal(COV_STRUCT_ID_DEFAULT)  ;\n    end function RandCovHole ;\n\n    -- GetCovHole replaced by GetHoleBinVal\n    ------------------------------------------------------------\n    -- Deprecated.  Same as GetHoleBinVal\n    impure function GetCovHole ( ReqHoleNum : integer ; PercentCov : real ) return RangeArrayType is\n    ------------------------------------------------------------\n    begin\n      return GetHoleBinVal(COV_STRUCT_ID_DEFAULT, ReqHoleNum, PercentCov) ;\n    end function GetCovHole ;\n\n    ------------------------------------------------------------\n    -- Deprecated.  Same as GetHoleBinVal\n    impure function GetCovHole ( PercentCov : real ) return RangeArrayType is\n    ------------------------------------------------------------\n    begin\n      return GetHoleBinVal(COV_STRUCT_ID_DEFAULT, PercentCov) ;\n    end function GetCovHole ;\n\n    ------------------------------------------------------------\n    -- Deprecated.  Same as GetHoleBinVal\n    impure function GetCovHole ( ReqHoleNum : integer := 1 ) return RangeArrayType is\n    ------------------------------------------------------------\n    begin\n      return GetHoleBinVal(COV_STRUCT_ID_DEFAULT, ReqHoleNum) ;\n    end function GetCovHole ;\n\n    ------------------------------------------------------------\n    -- Deprecated.  Replaced by SetMessage with multi-line support\n    procedure SetItemName (ItemNameIn : String) is\n    ------------------------------------------------------------\n    begin\n      SetMessage(COV_STRUCT_ID_DEFAULT, ItemNameIn) ;\n    end procedure SetItemName ;\n\n    ------------------------------------------------------------\n    -- Deprecated.  Same as GetMinCount\n    impure function GetMinCov return integer is\n    ------------------------------------------------------------\n    begin\n      return GetMinCount(COV_STRUCT_ID_DEFAULT) ;\n    end function GetMinCov ;\n\n    ------------------------------------------------------------\n    -- Deprecated.  Same as GetMaxCount\n    impure function GetMaxCov return integer is\n    ------------------------------------------------------------\n    begin\n      return GetMaxCount(COV_STRUCT_ID_DEFAULT) ;\n    end function GetMaxCov ;\n\n    ------------------------------------------------------------\n    -- Deprecated.  Use AddCross Instead.\n    procedure AddBins (CovBin : CovMatrix2Type ; Name : String := \"\") is\n    ------------------------------------------------------------\n    begin\n      AddCross(COV_STRUCT_ID_DEFAULT, CovBin, Name) ;\n    end procedure AddBins ;\n\n    ------------------------------------------------------------\n    procedure AddBins (CovBin : CovMatrix3Type ; Name : String := \"\") is\n    ------------------------------------------------------------\n    begin\n      AddCross(COV_STRUCT_ID_DEFAULT, CovBin, Name) ;\n    end procedure AddBins ;\n\n    ------------------------------------------------------------\n    procedure AddBins (CovBin : CovMatrix4Type ; Name : String := \"\") is\n    ------------------------------------------------------------\n    begin\n      AddCross(COV_STRUCT_ID_DEFAULT, CovBin, Name) ;\n    end procedure AddBins ;\n\n    ------------------------------------------------------------\n    procedure AddBins (CovBin : CovMatrix5Type ; Name : String := \"\") is\n    ------------------------------------------------------------\n    begin\n      AddCross(COV_STRUCT_ID_DEFAULT, CovBin, Name) ;\n    end procedure AddBins ;\n\n    ------------------------------------------------------------\n    procedure AddBins (CovBin : CovMatrix6Type ; Name : String := \"\") is\n    ------------------------------------------------------------\n    begin\n      AddCross(COV_STRUCT_ID_DEFAULT, CovBin, Name) ;\n    end procedure AddBins ;\n\n    ------------------------------------------------------------\n    procedure AddBins (CovBin : CovMatrix7Type ; Name : String := \"\") is\n    ------------------------------------------------------------\n    begin\n      AddCross(COV_STRUCT_ID_DEFAULT, CovBin, Name) ;\n    end procedure AddBins ;\n\n    ------------------------------------------------------------\n    procedure AddBins (CovBin : CovMatrix8Type ; Name : String := \"\") is\n    ------------------------------------------------------------\n    begin\n      AddCross(COV_STRUCT_ID_DEFAULT, CovBin, Name) ;\n    end procedure AddBins ;\n\n    ------------------------------------------------------------\n    procedure AddBins (CovBin : CovMatrix9Type ; Name : String := \"\") is\n    ------------------------------------------------------------\n    begin\n      AddCross(COV_STRUCT_ID_DEFAULT, CovBin, Name) ;\n    end procedure AddBins ;\n\n  end protected body CovPType ;\n\n  ------------------------------------------------------------------------------------------\n  --  XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX  CovPType  XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n  --  XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX  CovPType  XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n  ------------------------------------------------------------------------------------------\n\n  ------------------------------------------------------------\n  -- /////////////////////////////////////////\n  -- Singleton Data Structure\n  -- /////////////////////////////////////////\n  ------------------------------------------------------------\n  shared variable CoverageStore : CovPType ;\n\n\n  ------------------------------------------------------------\n  impure function NewID (\n    Name                : String ;\n    ParentID            : AlertLogIDType          := OSVVM_COVERAGE_ALERTLOG_ID ;\n    ReportMode          : AlertLogReportModeType  := ENABLED ;\n    Search              : NameSearchType          := PRIVATE_NAME ;\n    PrintParent         : AlertLogPrintParentType := PRINT_NAME_AND_PARENT\n  ) return CoverageIDType is\n  begin\n    return CoverageStore.NewID (Name, ParentID, ReportMode, Search, PrintParent) ;\n  end function NewID ;\n\n\n  ------------------------------------------------------------\n  -- /////////////////////////////////////////\n  --  Coverage Global Settings Common to All Coverage Models\n  -- /////////////////////////////////////////\n  ------------------------------------------------------------\n  procedure FileOpenWriteBin (FileName : string; OpenKind : File_Open_Kind ) is\n  begin\n    CoverageStore.FileOpenWriteBin (FileName, OpenKind) ;\n  end procedure FileOpenWriteBin ;\n\n  procedure FileCloseWriteBin is\n  begin\n    CoverageStore.FileCloseWriteBin ;\n  end procedure FileCloseWriteBin ;\n\n--  procedure WriteToCovFile (variable buf : inout line) is\n--  begin\n--    CoverageStore.WriteToCovFile (buf) ;\n--  end procedure WriteToCovFile ;\n\n  procedure PrintToCovFile(S : string) is\n  begin\n    CoverageStore.PrintToCovFile (S) ;\n  end procedure PrintToCovFile ;\n\n  ------------------------------------------------------------\n  procedure SetReportOptions (\n  ------------------------------------------------------------\n    WritePassFail   : OsvvmOptionsType := COV_OPT_INIT_PARM_DETECT ;\n    WriteBinInfo    : OsvvmOptionsType := COV_OPT_INIT_PARM_DETECT ;\n    WriteCount      : OsvvmOptionsType := COV_OPT_INIT_PARM_DETECT ;\n    WriteAnyIllegal : OsvvmOptionsType := COV_OPT_INIT_PARM_DETECT ;\n    WritePrefix     : string := OSVVM_STRING_INIT_PARM_DETECT ;\n    PassName        : string := OSVVM_STRING_INIT_PARM_DETECT ;\n    FailName        : string := OSVVM_STRING_INIT_PARM_DETECT\n  ) is\n  begin\n    CoverageStore.SetReportOptions (\n      WritePassFail, WriteBinInfo, WriteCount, WriteAnyIllegal,\n      WritePrefix, PassName, FailName\n    ) ;\n  end procedure SetReportOptions ;\n\n  procedure ResetReportOptions is\n  begin\n    CoverageStore.ResetReportOptions ;\n  end procedure ResetReportOptions ;\n\n\n  ------------------------------------------------------------\n  -- /////////////////////////////////////////\n  --  Coverage Model Settings\n  -- /////////////////////////////////////////\n  ------------------------------------------------------------\n  procedure SetName (ID : CoverageIDType; Name : String) is\n  begin\n    CoverageStore.SetName (ID, Name) ;\n  end procedure SetName ;\n\n  impure function SetName (ID : CoverageIDType; Name : String) return string is\n  begin\n    return CoverageStore.SetName (ID, Name) ;\n  end function SetName ;\n\n  procedure DeallocateName (ID : CoverageIDType) is\n  begin\n    CoverageStore.DeallocateName (ID) ;\n  end procedure DeallocateName ;\n\n  impure function GetName (ID : CoverageIDType) return String is\n  begin\n    return CoverageStore.GetName(ID => ID) ;\n  end function GetName ;\n\n  impure function GetCovModelName (ID : CoverageIDType) return String is\n  begin\n    return CoverageStore.GetCovModelName(ID => ID) ;\n  end function GetCovModelName ;\n\n  impure function GetNamePlus (ID : CoverageIDType; prefix, suffix : string) return String is\n  begin\n    return CoverageStore.GetNamePlus (ID, prefix, suffix) ;\n  end function GetNamePlus ;\n\n  procedure SetItemBinNames (\n    ID         : CoverageIDType ;\n    Name1      : String ;\n            Name2,  Name3,  Name4,  Name5,\n    Name6,  Name7,  Name8,  Name9,  Name10,\n    Name11, Name12, Name13, Name14, Name15,\n    Name16, Name17, Name18, Name19, Name20 : string := \"\"\n  ) is\n  begin\n    CoverageStore.SetItemBinNames (\n      ID,\n      Name1,  Name2,  Name3,  Name4,  Name5,\n      Name6,  Name7,  Name8,  Name9,  Name10,\n      Name11, Name12, Name13, Name14, Name15,\n      Name16, Name17, Name18, Name19, Name20\n    ) ;\n  end procedure SetItemBinNames ;\n\n\n  ------------------------------------------------------------\n  procedure SetMessage (ID : CoverageIDType; Message : String) is\n  begin\n    CoverageStore.SetMessage(ID, Message) ;\n  end procedure SetMessage ;\n\n  procedure DeallocateMessage (ID : CoverageIDType) is\n  begin\n    CoverageStore.DeallocateMessage(ID) ;\n  end procedure DeallocateMessage ;\n\n\n  procedure SetCovTarget (ID : CoverageIDType; Percent : real) is\n  begin\n    CoverageStore.SetCovTarget(ID, Percent) ;\n  end procedure SetCovTarget ;\n\n  impure function GetCovTarget (ID : CoverageIDType) return real is\n  begin\n    return CoverageStore.GetCovTarget(ID) ;\n  end function GetCovTarget ;\n\n  procedure SetThresholding (ID : CoverageIDType; A : boolean := TRUE ) is\n  begin\n    CoverageStore.SetThresholding(ID, A) ;\n  end procedure SetThresholding ;\n\n  procedure SetCovThreshold (ID : CoverageIDType; Percent : real) is\n  begin\n    CoverageStore.SetCovThreshold(ID, Percent) ;\n  end procedure SetCovThreshold ;\n\n  procedure SetMerging (ID : CoverageIDType; A : boolean := TRUE ) is\n  begin\n    CoverageStore.SetMerging(ID, A) ;\n  end procedure SetMerging ;\n\n  procedure SetCountMode (ID : CoverageIDType; A : CountModeType) is\n  begin\n    CoverageStore.SetCountMode(ID, A) ;\n  end procedure SetCountMode ;\n\n  procedure SetIllegalMode (ID : CoverageIDType; A : IllegalModeType) is\n  begin\n    CoverageStore.SetIllegalMode(ID, A) ;\n  end procedure SetIllegalMode ;\n\n  procedure SetWeightMode (ID : CoverageIDType; WeightMode : WeightModeType;  WeightScale : real := 1.0) is\n  begin\n    CoverageStore.SetWeightMode(ID, WeightMode, WeightScale) ;\n  end procedure SetWeightMode ;\n\n  procedure SetCovWeight (ID : CoverageIDType; Weight : integer) is\n  begin\n    CoverageStore.SetCovWeight(ID, Weight) ;\n  end procedure SetCovWeight ;\n\n  impure function GetCovWeight (ID : CoverageIDType) return integer is\n  begin\n    return CoverageStore.GetCovWeight(ID) ;\n  end function GetCovWeight ;\n\n  procedure SetNextPointMode (ID : CoverageIDType; A : NextPointModeType) is\n  begin\n    CoverageStore.SetNextPointMode(ID, A) ;\n  end procedure SetNextPointMode ;\n\n\n  ------------------------------------------------------------\n  procedure SetAlertLogID (ID : CoverageIDType; A : AlertLogIDType) is\n  begin\n    CoverageStore.SetAlertLogID (ID, A) ;\n  end procedure SetAlertLogID ;\n\n  procedure SetAlertLogID (ID : CoverageIDType; Name : string ; ParentID : AlertLogIDType := ALERTLOG_BASE_ID ; CreateHierarchy : Boolean := TRUE) is\n  begin\n    CoverageStore.SetAlertLogID (ID, Name, ParentID, CreateHierarchy) ;\n  end procedure SetAlertLogID ;\n\n  impure function GetAlertLogID (ID : CoverageIDType) return AlertLogIDType is\n  begin\n    return CoverageStore.GetAlertLogID(ID) ;\n  end function GetAlertLogID ;\n\n\n  ------------------------------------------------------------\n  procedure InitSeed (ID : CoverageIDType; S : string;  UseNewSeedMethods : boolean := COVERAGE_USE_NEW_SEED_METHODS) is\n  begin\n    CoverageStore.InitSeed(ID, S, UseNewSeedMethods) ;\n  end procedure InitSeed ;\n\n  impure function InitSeed (ID : CoverageIDType; S : string;  UseNewSeedMethods : boolean := COVERAGE_USE_NEW_SEED_METHODS ) return string is\n  begin\n    return CoverageStore.InitSeed(ID, S, UseNewSeedMethods) ;\n  end function InitSeed ;\n\n  procedure InitSeed (ID : CoverageIDType; I : integer; UseNewSeedMethods : boolean := COVERAGE_USE_NEW_SEED_METHODS ) is\n  begin\n    CoverageStore.InitSeed(ID, I, UseNewSeedMethods) ;\n  end procedure InitSeed ;\n\n\n  ------------------------------------------------------------\n  procedure SetSeed (ID : CoverageIDType; RandomSeedIn : RandomSeedType ) is\n  begin\n    CoverageStore.SetSeed (ID, RandomSeedIn) ;\n  end procedure SetSeed ;\n\n  impure function GetSeed (ID : CoverageIDType) return RandomSeedType is\n  begin\n    return CoverageStore.GetSeed (ID => ID) ;\n  end function GetSeed ;\n\n  ------------------------------------------------------------\n  -- /////////////////////////////////////////\n  --  Item / Cross Bin Creation and Destruction\n  -- /////////////////////////////////////////\n  ------------------------------------------------------------\n  procedure SetBinSize (ID : CoverageIDType; NewNumBins : integer) is\n  begin\n    CoverageStore.SetBinSize (ID, NewNumBins) ;\n  end procedure SetBinSize ;\n\n  procedure DeallocateBins (CoverID : CoverageIDType) is\n  begin\n    CoverageStore.DeallocateBins (CoverID) ;\n  end procedure DeallocateBins ;\n\n  procedure Deallocate (ID : CoverageIDType) is\n  begin\n    CoverageStore.Deallocate (ID) ;\n  end procedure Deallocate ;\n\n\n  ------------------------------------------------------------\n  -- Weight Deprecated\n  procedure AddBins (\n  ------------------------------------------------------------\n    ID      : CoverageIDType ;\n    Name    : String ;\n    AtLeast : integer ;\n    Weight  : integer ;\n    CovBin  : CovBinType\n  ) is\n  begin\n    CoverageStore.AddBins (ID, Name, AtLeast, Weight, CovBin) ;\n  end procedure AddBins ;\n\n  procedure AddBins (ID : CoverageIDType; Name : String ; AtLeast : integer ; CovBin : CovBinType ) is\n  begin\n    CoverageStore.AddBins (ID, Name, AtLeast, CovBin) ;\n  end procedure AddBins ;\n\n  procedure AddBins (ID : CoverageIDType; Name : String ;  CovBin : CovBinType) is\n  begin\n    CoverageStore.AddBins (ID, Name, CovBin) ;\n  end procedure AddBins ;\n\n  procedure AddBins (ID : CoverageIDType; AtLeast : integer ; Weight  : integer ; CovBin : CovBinType ) is\n  begin\n    CoverageStore.AddBins (ID, AtLeast, Weight, CovBin) ;\n  end procedure AddBins ;\n\n  procedure AddBins (ID : CoverageIDType; AtLeast : integer ; CovBin : CovBinType ) is\n  begin\n    CoverageStore.AddBins (ID, AtLeast, CovBin) ;\n  end procedure AddBins ;\n\n  procedure AddBins (ID : CoverageIDType; CovBin : CovBinType  ) is\n  begin\n    CoverageStore.AddBins (ID, CovBin) ;\n  end procedure AddBins ;\n\n\n  ------------------------------------------------------------\n  -- Weight Deprecated\n  procedure AddCross (\n  ------------------------------------------------------------\n    ID         : CoverageIDType ;\n    Name       : string ;\n    AtLeast    : integer ;\n    Weight     : integer ;\n    Bin1, Bin2 : CovBinType ;\n    Bin3, Bin4, Bin5, Bin6, Bin7, Bin8, Bin9, Bin10, Bin11, Bin12, Bin13,\n    Bin14, Bin15, Bin16, Bin17, Bin18, Bin19, Bin20 : CovBinType := NULL_BIN\n  ) is\n  begin\n    CoverageStore.AddCross(ID, Name, AtLeast, Weight, Bin1, Bin2,\n      Bin3, Bin4, Bin5, Bin6, Bin7, Bin8, Bin9, Bin10, Bin11, Bin12, Bin13,\n      Bin14, Bin15, Bin16, Bin17, Bin18, Bin19, Bin20\n    );\n  end procedure AddCross ;\n\n\n  ------------------------------------------------------------\n  procedure AddCross(\n  ------------------------------------------------------------\n    ID         : CoverageIDType ;\n    Name       : string ;\n    AtLeast    : integer ;\n    Bin1, Bin2 : CovBinType ;\n    Bin3, Bin4, Bin5, Bin6, Bin7, Bin8, Bin9, Bin10, Bin11, Bin12, Bin13,\n    Bin14, Bin15, Bin16, Bin17, Bin18, Bin19, Bin20 : CovBinType := NULL_BIN\n  ) is\n  begin\n    CoverageStore.AddCross(ID, Name, AtLeast, Bin1, Bin2,\n      Bin3, Bin4, Bin5, Bin6, Bin7, Bin8, Bin9, Bin10, Bin11, Bin12, Bin13,\n      Bin14, Bin15, Bin16, Bin17, Bin18, Bin19, Bin20\n    );\n  end procedure AddCross ;\n\n\n  ------------------------------------------------------------\n  procedure AddCross(\n  ------------------------------------------------------------\n    ID         : CoverageIDType ;\n    Name       : string ;\n    Bin1, Bin2 : CovBinType ;\n    Bin3, Bin4, Bin5, Bin6, Bin7, Bin8, Bin9, Bin10, Bin11, Bin12, Bin13,\n    Bin14, Bin15, Bin16, Bin17, Bin18, Bin19, Bin20 : CovBinType := NULL_BIN\n  ) is\n  begin\n    CoverageStore.AddCross(ID, Name, Bin1, Bin2,\n      Bin3, Bin4, Bin5, Bin6, Bin7, Bin8, Bin9, Bin10, Bin11, Bin12, Bin13,\n      Bin14, Bin15, Bin16, Bin17, Bin18, Bin19, Bin20\n    );\n  end procedure AddCross ;\n\n  ------------------------------------------------------------\n  -- Weight Deprecated\n  procedure AddCross(\n  ------------------------------------------------------------\n    ID         : CoverageIDType ;\n    AtLeast    : integer ;\n    Weight     : integer ;\n    Bin1, Bin2 : CovBinType ;\n    Bin3, Bin4, Bin5, Bin6, Bin7, Bin8, Bin9, Bin10, Bin11, Bin12, Bin13,\n    Bin14, Bin15, Bin16, Bin17, Bin18, Bin19, Bin20 : CovBinType := NULL_BIN\n  ) is\n  begin\n    CoverageStore.AddCross(ID, AtLeast, Weight, Bin1, Bin2,\n      Bin3, Bin4, Bin5, Bin6, Bin7, Bin8, Bin9, Bin10, Bin11, Bin12, Bin13,\n      Bin14, Bin15, Bin16, Bin17, Bin18, Bin19, Bin20\n    );\n  end procedure AddCross ;\n\n  ------------------------------------------------------------\n  procedure AddCross(\n  ------------------------------------------------------------\n    ID         : CoverageIDType ;\n    AtLeast    : integer ;\n    Bin1, Bin2 : CovBinType ;\n    Bin3, Bin4, Bin5, Bin6, Bin7, Bin8, Bin9, Bin10, Bin11, Bin12, Bin13,\n    Bin14, Bin15, Bin16, Bin17, Bin18, Bin19, Bin20 : CovBinType := NULL_BIN\n  ) is\n  begin\n    CoverageStore.AddCross(ID, AtLeast, Bin1, Bin2,\n      Bin3, Bin4, Bin5, Bin6, Bin7, Bin8, Bin9, Bin10, Bin11, Bin12, Bin13,\n      Bin14, Bin15, Bin16, Bin17, Bin18, Bin19, Bin20\n    );\n  end procedure AddCross ;\n\n  ------------------------------------------------------------\n  procedure AddCross(\n  ------------------------------------------------------------\n    ID         : CoverageIDType ;\n    Bin1, Bin2 : CovBinType ;\n    Bin3, Bin4, Bin5, Bin6, Bin7, Bin8, Bin9, Bin10, Bin11, Bin12, Bin13,\n    Bin14, Bin15, Bin16, Bin17, Bin18, Bin19, Bin20 : CovBinType := NULL_BIN\n  ) is\n  begin\n    CoverageStore.AddCross(ID, Bin1, Bin2,\n      Bin3, Bin4, Bin5, Bin6, Bin7, Bin8, Bin9, Bin10, Bin11, Bin12, Bin13,\n      Bin14, Bin15, Bin16, Bin17, Bin18, Bin19, Bin20\n    );\n  end procedure AddCross ;\n\n  ------------------------------------------------------------\n  -- AddCross for usage with constants created by GenCross\n  ------------------------------------------------------------\n  procedure AddCross (ID : CoverageIDType; CovBin : CovMatrix2Type ; Name : String := \"\") is\n  begin\n    CoverageStore.AddCross (ID, CovBin, Name) ;\n  end procedure AddCross ;\n\n  procedure AddCross (ID : CoverageIDType; CovBin : CovMatrix3Type ; Name : String := \"\") is\n  begin\n    CoverageStore.AddCross (ID, CovBin, Name) ;\n  end procedure AddCross ;\n\n  procedure AddCross (ID : CoverageIDType; CovBin : CovMatrix4Type ; Name : String := \"\") is\n  begin\n    CoverageStore.AddCross (ID, CovBin, Name) ;\n  end procedure AddCross ;\n\n  procedure AddCross (ID : CoverageIDType; CovBin : CovMatrix5Type ; Name : String := \"\") is\n  begin\n    CoverageStore.AddCross (ID, CovBin, Name) ;\n  end procedure AddCross ;\n\n  procedure AddCross (ID : CoverageIDType; CovBin : CovMatrix6Type ; Name : String := \"\") is\n  begin\n    CoverageStore.AddCross (ID, CovBin, Name) ;\n  end procedure AddCross ;\n\n  procedure AddCross (ID : CoverageIDType; CovBin : CovMatrix7Type ; Name : String := \"\") is\n  begin\n    CoverageStore.AddCross (ID, CovBin, Name) ;\n  end procedure AddCross ;\n\n  procedure AddCross (ID : CoverageIDType; CovBin : CovMatrix8Type ; Name : String := \"\") is\n  begin\n    CoverageStore.AddCross (ID, CovBin, Name) ;\n  end procedure AddCross ;\n\n  procedure AddCross (ID : CoverageIDType; CovBin : CovMatrix9Type ; Name : String := \"\") is\n  begin\n    CoverageStore.AddCross (ID, CovBin, Name) ;\n  end procedure AddCross ;\n\n\n  ------------------------------------------------------------\n  -- /////////////////////////////////////////\n  --  Recording and Clearing Coverage\n  -- /////////////////////////////////////////\n  ------------------------------------------------------------\n  ------------------------------------------------------------\n  procedure ICoverLast (ID : CoverageIDType) is\n  begin\n    CoverageStore.ICoverLast (ID) ;\n  end procedure ICoverLast ;\n\n  procedure ICover (ID : CoverageIDType; CovPoint : integer_vector) is\n  begin\n    CoverageStore.ICover (ID, CovPoint) ;\n  end procedure ICover ;\n\n  procedure ICover (ID : CoverageIDType; CovPoint : integer) is\n  begin\n    CoverageStore.ICover (ID, CovPoint) ;\n  end procedure ICover ;\n\n  procedure TCover (ID : CoverageIDType; A : integer) is\n  begin\n    CoverageStore.TCover (ID, A) ;\n  end procedure TCover ;\n\n  procedure ClearCov (ID : CoverageIDType) is\n  begin\n    CoverageStore.ClearCov (ID) ;\n  end procedure ClearCov ;\n\n\n  ------------------------------------------------------------\n  -- /////////////////////////////////////////\n  --  Coverage Information and Statistics\n  -- /////////////////////////////////////////\n  ------------------------------------------------------------\n  ------------------------------------------------------------\n  impure function IsCovered (ID : CoverageIDType; PercentCov : real ) return boolean is\n  begin\n    return CoverageStore.IsCovered (ID, PercentCov) ;\n  end function IsCovered ;\n\n  impure function IsCovered (ID : CoverageIDType) return boolean is\n  begin\n    return CoverageStore.IsCovered (ID) ;\n  end function IsCovered ;\n\n  impure function IsNotCovered (ID : CoverageIDType; PercentCov : real ) return boolean is\n  begin\n    return not CoverageStore.IsCovered (ID, PercentCov) ;\n  end function IsNotCovered ;\n\n  impure function IsNotCovered (ID : CoverageIDType) return boolean is\n  begin\n    return not CoverageStore.IsCovered (ID) ;\n  end function IsNotCovered ;\n\n  impure function IsInitialized (ID : CoverageIDType) return boolean is\n  begin\n    return CoverageStore.IsInitialized (ID) ;\n  end function IsInitialized ;\n\n\n  ------------------------------------------------------------\n  impure function GetItemCount (ID : CoverageIDType) return integer is\n  begin\n    return CoverageStore.GetItemCount (ID) ;\n  end function GetItemCount ;\n\n  impure function GetCov (ID : CoverageIDType; PercentCov : real ) return real is\n  begin\n    return CoverageStore.GetCov (ID, PercentCov) ;\n  end function GetCov ;\n\n  impure function GetCov (ID : CoverageIDType) return real is\n  begin\n    return CoverageStore.GetCov (ID) ;\n  end function GetCov ;\n\n  impure function GetTotalCovCount (ID : CoverageIDType; PercentCov : real ) return integer is\n  begin\n    return CoverageStore.GetTotalCovCount (ID, PercentCov) ;\n  end function GetTotalCovCount ;\n\n  impure function GetTotalCovCount (ID : CoverageIDType) return integer is\n  begin\n    return CoverageStore.GetTotalCovCount (ID) ;\n  end function GetTotalCovCount ;\n\n  impure function GetTotalCovGoal (ID : CoverageIDType; PercentCov : real ) return integer is\n  begin\n    return CoverageStore.GetTotalCovGoal (ID, PercentCov) ;\n  end function GetTotalCovGoal ;\n\n  impure function GetTotalCovGoal (ID : CoverageIDType) return integer is\n  begin\n    return CoverageStore.GetTotalCovGoal (ID) ;\n  end function GetTotalCovGoal ;\n\n\n  ------------------------------------------------------------\n  impure function GetMinCov (ID : CoverageIDType) return real is\n  begin\n    return CoverageStore.GetMinCov (ID) ;\n  end function GetMinCov ;\n\n  impure function GetMinCount (ID : CoverageIDType) return integer is\n  begin\n    return CoverageStore.GetMinCount (ID) ;\n  end function GetMinCount ;\n\n  impure function GetMaxCov (ID : CoverageIDType) return real is\n  begin\n    return CoverageStore.GetMaxCov (ID) ;\n  end function GetMaxCov ;\n\n  impure function GetMaxCount (ID : CoverageIDType) return integer is\n  begin\n    return CoverageStore.GetMaxCount (ID) ;\n  end function GetMaxCount ;\n\n\n  ------------------------------------------------------------\n  impure function CountCovHoles (ID : CoverageIDType; PercentCov : real ) return integer is\n  begin\n    return CoverageStore.CountCovHoles (ID, PercentCov) ;\n  end function CountCovHoles ;\n\n  impure function CountCovHoles (ID : CoverageIDType) return integer is\n  begin\n    return CoverageStore.CountCovHoles (ID) ;\n  end function CountCovHoles ;\n\n\n  ------------------------------------------------------------\n  -- /////////////////////////////////////////\n  --  Generating Coverage Points, BinValues, and Indices\n  -- /////////////////////////////////////////\n  ------------------------------------------------------------\n  -- Return Points\n  ------------------------------------------------------------\n  -- to be replaced in VHDL-2019 by version that uses RandomSeed as an inout\n  impure function ToRandPoint (ID : CoverageIDType; BinVal : RangeArrayType ) return integer is\n  begin\n    return CoverageStore.ToRandPoint (ID, BinVal) ;\n  end function ToRandPoint ;\n\n  impure function ToRandPoint (ID : CoverageIDType; BinVal : RangeArrayType ) return integer_vector is\n  begin\n    return CoverageStore.ToRandPoint (ID, BinVal) ;\n  end function ToRandPoint ;\n\n\n  ------------------------------------------------------------\n  -- Return Points\n  impure function GetPoint     (ID : CoverageIDType; BinIndex : integer ) return integer is\n  begin\n    return CoverageStore.GetPoint (ID, BinIndex) ;\n  end function GetPoint ;\n\n  impure function GetPoint (ID : CoverageIDType; BinIndex : integer ) return integer_vector is\n  begin\n    return CoverageStore.GetPoint (ID, BinIndex) ;\n  end function GetPoint ;\n\n  impure function GetRandPoint (ID : CoverageIDType) return integer is\n  begin\n    return CoverageStore.GetRandPoint (ID) ;\n  end function GetRandPoint ;\n\n  impure function GetRandPoint (ID : CoverageIDType; PercentCov : real ) return integer is\n  begin\n    return CoverageStore.GetRandPoint (ID, PercentCov) ;\n  end function GetRandPoint ;\n\n  impure function GetRandPoint (ID : CoverageIDType) return integer_vector is\n  begin\n    return CoverageStore.GetRandPoint (ID) ;\n  end function GetRandPoint ;\n\n  impure function GetRandPoint (ID : CoverageIDType; PercentCov : real ) return integer_vector is\n  begin\n    return CoverageStore.GetRandPoint (ID, PercentCov) ;\n  end function GetRandPoint ;\n\n  impure function GetIncPoint  (ID : CoverageIDType) return integer is\n  begin\n    return CoverageStore.GetIncPoint (ID => ID) ;\n  end function GetIncPoint ;\n\n  impure function GetIncPoint (ID : CoverageIDType) return integer_vector is\n  begin\n    return CoverageStore.GetIncPoint (ID => ID) ;\n  end function GetIncPoint ;\n\n  impure function GetMinPoint  (ID : CoverageIDType) return integer is\n  begin\n    return CoverageStore.GetMinPoint (ID => ID) ;\n  end function GetMinPoint ;\n\n  impure function GetMinPoint (ID : CoverageIDType) return integer_vector is\n  begin\n    return CoverageStore.GetMinPoint (ID => ID) ;\n  end function GetMinPoint ;\n\n  impure function GetMaxPoint  (ID : CoverageIDType) return integer is\n  begin\n    return CoverageStore.GetMaxPoint (ID => ID) ;\n  end function GetMaxPoint ;\n\n  impure function GetMaxPoint (ID : CoverageIDType) return integer_vector is\n  begin\n    return CoverageStore.GetMaxPoint (ID => ID) ;\n  end function GetMaxPoint ;\n\n  impure function GetNextPoint (ID : CoverageIDType; Mode : NextPointModeType) return integer is\n  begin\n    return CoverageStore.GetNextPoint (ID, Mode) ;\n  end function GetNextPoint ;\n\n  impure function GetNextPoint (ID : CoverageIDType; Mode : NextPointModeType) return integer_vector is\n  begin\n    return CoverageStore.GetNextPoint (ID, Mode) ;\n  end function GetNextPoint ;\n\n  impure function GetNextPoint (ID : CoverageIDType) return integer is\n  begin\n    return CoverageStore.GetNextPoint (ID) ;\n  end function GetNextPoint ;\n\n  impure function GetNextPoint (ID : CoverageIDType) return integer_vector is\n  begin\n    return CoverageStore.GetNextPoint (ID) ;\n  end function GetNextPoint ;\n\n\n  ------------------------------------------------------------\n  -- deprecated, see GetRandPoint\n  impure function RandCovPoint (ID : CoverageIDType) return integer is\n  begin\n    return CoverageStore.RandCovPoint (ID) ;\n  end function RandCovPoint ;\n\n  impure function RandCovPoint (ID : CoverageIDType; PercentCov : real ) return integer is\n  begin\n    return CoverageStore.RandCovPoint (ID, PercentCov) ;\n  end function RandCovPoint ;\n\n  impure function RandCovPoint (ID : CoverageIDType) return integer_vector is\n  begin\n    return CoverageStore.RandCovPoint (ID) ;\n  end function RandCovPoint ;\n\n  impure function RandCovPoint (ID : CoverageIDType; PercentCov : real ) return integer_vector is\n  begin\n    return CoverageStore.RandCovPoint (ID, PercentCov) ;\n  end function RandCovPoint ;\n\n\n  ------------------------------------------------------------\n  -- Return BinVals\n  impure function GetBinVal (ID : CoverageIDType; BinIndex : integer ) return RangeArrayType is\n  begin\n    return CoverageStore.GetBinVal (ID, BinIndex) ;\n  end function GetBinVal ;\n\n  impure function GetRandBinVal (ID : CoverageIDType; PercentCov : real ) return RangeArrayType is\n  begin\n    return CoverageStore.GetRandBinVal (ID, PercentCov) ;\n  end function GetRandBinVal ;\n\n  impure function GetRandBinVal (ID : CoverageIDType) return RangeArrayType is\n  begin\n    return CoverageStore.GetRandBinVal (ID => ID) ;\n  end function GetRandBinVal ;\n\n  impure function GetLastBinVal (ID : CoverageIDType) return RangeArrayType is\n  begin\n    return CoverageStore.GetLastBinVal (ID => ID) ;\n  end function GetLastBinVal ;\n\n  impure function GetIncBinVal (ID : CoverageIDType) return RangeArrayType is\n  begin\n    return CoverageStore.GetIncBinVal (ID => ID) ;\n  end function GetIncBinVal ;\n\n  impure function GetMinBinVal (ID : CoverageIDType) return RangeArrayType is\n  begin\n    return CoverageStore.GetMinBinVal (ID => ID) ;\n  end function GetMinBinVal ;\n\n  impure function GetMaxBinVal  (ID : CoverageIDType) return RangeArrayType is\n  begin\n    return CoverageStore.GetMaxBinVal (ID => ID) ;\n  end function GetMaxBinVal ;\n\n  impure function GetNextBinVal (ID : CoverageIDType; Mode : NextPointModeType) return RangeArrayType is\n  begin\n    return CoverageStore.GetNextBinVal (ID, Mode) ;\n  end function GetNextBinVal ;\n\n  impure function GetNextBinVal (ID : CoverageIDType) return RangeArrayType is\n  begin\n    return CoverageStore.GetNextBinVal (ID => ID) ;\n  end function GetNextBinVal ;\n\n  impure function GetHoleBinVal (ID : CoverageIDType; ReqHoleNum : integer ; PercentCov : real  ) return RangeArrayType is\n  begin\n    return CoverageStore.GetHoleBinVal (ID, ReqHoleNum, PercentCov) ;\n  end function GetHoleBinVal ;\n\n  impure function GetHoleBinVal (ID : CoverageIDType; PercentCov : real  ) return RangeArrayType is\n  begin\n    return CoverageStore.GetHoleBinVal (ID, PercentCov) ;\n  end function GetHoleBinVal ;\n\n  impure function GetHoleBinVal (ID : CoverageIDType; ReqHoleNum : integer := 1 ) return RangeArrayType is\n  begin\n    return CoverageStore.GetHoleBinVal (ID, ReqHoleNum) ;\n  end function GetHoleBinVal ;\n\n\n  -- deprecated RandCovBinVal, see GetRandBinVal\n  impure function RandCovBinVal (ID : CoverageIDType; PercentCov : real ) return RangeArrayType is\n  begin\n    return CoverageStore.RandCovBinVal (ID, PercentCov) ;\n  end function RandCovBinVal ;\n\n  impure function RandCovBinVal (ID : CoverageIDType) return RangeArrayType is\n  begin\n    return CoverageStore.RandCovBinVal (ID => ID) ;\n  end function RandCovBinVal ;\n\n\n  ------------------------------------------------------------\n  -- Return Index Values\n  impure function GetNumBins (ID : CoverageIDType) return integer is\n  begin\n    return CoverageStore.GetNumBins (ID => ID) ;\n  end function GetNumBins ;\n\n  impure function GetRandIndex (ID : CoverageIDType; CovTargetPercent : real ) return integer is\n  begin\n    return CoverageStore.GetRandIndex (ID, CovTargetPercent) ;\n  end function GetRandIndex ;\n\n  impure function GetRandIndex (ID : CoverageIDType) return integer is\n  begin\n    return CoverageStore.GetRandIndex (ID => ID)  ;\n  end function GetRandIndex ;\n\n  impure function GetLastIndex (ID : CoverageIDType) return integer is\n  begin\n    return CoverageStore.GetLastIndex (ID => ID) ;\n  end function GetLastIndex ;\n\n  impure function GetIncIndex (ID : CoverageIDType) return integer is\n  begin\n    return CoverageStore.GetIncIndex (ID => ID) ;\n  end function GetIncIndex ;\n\n  impure function GetMinIndex (ID : CoverageIDType) return integer is\n  begin\n    return CoverageStore.GetMinIndex  (ID => ID) ;\n  end function GetMinIndex ;\n\n  impure function GetMaxIndex (ID : CoverageIDType) return integer is\n  begin\n    return CoverageStore.GetMaxIndex  (ID => ID) ;\n  end function GetMaxIndex ;\n\n  impure function GetNextIndex (ID : CoverageIDType; Mode : NextPointModeType) return integer is\n  begin\n    return CoverageStore.GetNextIndex (ID, Mode) ;\n  end function GetNextIndex;\n\n  impure function GetNextIndex (ID : CoverageIDType) return integer is\n  begin\n    return CoverageStore.GetNextIndex (ID => ID) ;\n  end function GetNextIndex ;\n\n\n  ------------------------------------------------------------\n  -- /////////////////////////////////////////\n  --  Accessing Coverage Bin Information\n  -- /////////////////////////////////////////\n  ------------------------------------------------------------\n  -- ------------------------------------------------------------\n  -- Intended as a stand in until we get a more general GetBin\n  impure function GetBinInfo (ID : CoverageIDType; BinIndex : integer ) return CovBinBaseType is\n  begin\n    return CoverageStore.GetBinInfo(ID, BinIndex) ;\n  end function GetBinInfo ;\n\n\n  -- ------------------------------------------------------------\n  -- Intended as a stand in until we get a more general GetBin\n  impure function GetBinValLength (ID : CoverageIDType) return integer is\n  begin\n    return CoverageStore.GetBinValLength(ID => ID);\n  end function GetBinValLength ;\n\n\n  -- ------------------------------------------------------------\n  -- Eventually the multiple GetBin functions will be replaced by a\n  -- a single GetBin that returns CovBinBaseType with BinVal as an\n  -- unconstrained element\n  impure function GetBin (ID : CoverageIDType; BinIndex : integer ) return CovBinBaseType is\n  begin\n    return CoverageStore.GetBin(ID, BinIndex) ;\n  end function GetBin ;\n\n  impure function GetBin (ID : CoverageIDType; BinIndex : integer ) return CovMatrix2BaseType is\n  begin\n    return CoverageStore.GetBin(ID, BinIndex) ;\n  end function GetBin ;\n\n  impure function GetBin (ID : CoverageIDType; BinIndex : integer ) return CovMatrix3BaseType is\n  begin\n    return CoverageStore.GetBin(ID, BinIndex) ;\n  end function GetBin ;\n\n  impure function GetBin (ID : CoverageIDType; BinIndex : integer ) return CovMatrix4BaseType is\n  begin\n    return CoverageStore.GetBin(ID, BinIndex) ;\n  end function GetBin ;\n\n  impure function GetBin (ID : CoverageIDType; BinIndex : integer ) return CovMatrix5BaseType is\n  begin\n    return CoverageStore.GetBin(ID, BinIndex) ;\n  end function GetBin ;\n\n  impure function GetBin (ID : CoverageIDType; BinIndex : integer ) return CovMatrix6BaseType is\n  begin\n    return CoverageStore.GetBin(ID, BinIndex) ;\n  end function GetBin ;\n\n  impure function GetBin (ID : CoverageIDType; BinIndex : integer ) return CovMatrix7BaseType is\n  begin\n    return CoverageStore.GetBin(ID, BinIndex) ;\n  end function GetBin ;\n\n  impure function GetBin (ID : CoverageIDType; BinIndex : integer ) return CovMatrix8BaseType is\n  begin\n    return CoverageStore.GetBin(ID, BinIndex) ;\n  end function GetBin ;\n\n  impure function GetBin (ID : CoverageIDType; BinIndex : integer ) return CovMatrix9BaseType is\n  begin\n    return CoverageStore.GetBin(ID, BinIndex) ;\n  end function GetBin ;\n\n\n  -- ------------------------------------------------------------\n  impure function GetBinName (ID : CoverageIDType; BinIndex : integer; DefaultName : string := \"\" ) return string is\n  begin\n    return CoverageStore.GetBinName (ID, BinIndex, DefaultName) ;\n  end function GetBinName ;\n\n\n  ------------------------------------------------------------\n  impure function GetErrorCount (ID : CoverageIDType) return integer is\n  begin\n    return CoverageStore.GetErrorCount (ID => ID) ;\n  end function GetErrorCount ;\n\n\n  ------------------------------------------------------------\n  -- /////////////////////////////////////////\n  --  Printing Coverage Bin Information\n  -- /////////////////////////////////////////\n  ------------------------------------------------------------\n  -- To specify the following, see SetReportOptions\n  --   WritePassFail, WriteBinInfo, WriteCount, WriteAnyIllegal\n  --   WritePrefix, PassName, FailName\n  ------------------------------------------------------------\n  procedure WriteBin (ID : CoverageIDType) is\n  begin\n    CoverageStore.WriteBin (ID => ID) ;\n  end procedure WriteBin ;\n\n  procedure WriteBin (ID : CoverageIDType; LogLevel : LogType ) is\n  begin\n    CoverageStore.WriteBin (ID, LogLevel) ;\n  end procedure WriteBin ;\n\n  procedure WriteBin (ID : CoverageIDType; FileName : string;  OpenKind : File_Open_Kind := APPEND_MODE) is\n  begin\n    CoverageStore.WriteBin (ID, FileName, OpenKind) ;\n  end procedure WriteBin ;\n\n  procedure WriteBin (ID : CoverageIDType; LogLevel : LogType; FileName : string; OpenKind : File_Open_Kind := APPEND_MODE) is\n  begin\n    CoverageStore.WriteBin (ID, LogLevel, FileName, OpenKind) ;\n  end procedure WriteBin ;\n\n\n  ------------------------------------------------------------\n  procedure DumpBin (ID : CoverageIDType; LogLevel : LogType := DEBUG) is\n  begin\n    CoverageStore.DumpBin (ID, LogLevel) ;\n  end procedure DumpBin ;\n\n\n  ------------------------------------------------------------\n  procedure WriteCovHoles (ID : CoverageIDType; LogLevel : LogType := ALWAYS ) is\n  begin\n    CoverageStore.WriteCovHoles (ID, LogLevel) ;\n  end procedure WriteCovHoles ;\n\n  procedure WriteCovHoles (ID : CoverageIDType; PercentCov : real ) is\n  begin\n    CoverageStore.WriteCovHoles (ID, PercentCov) ;\n  end procedure WriteCovHoles ;\n\n  procedure WriteCovHoles (ID : CoverageIDType;  LogLevel : LogType;  PercentCov : real ) is\n  begin\n    CoverageStore.WriteCovHoles (ID, LogLevel, PercentCov) ;\n  end procedure WriteCovHoles ;\n\n  procedure WriteCovHoles (ID : CoverageIDType;  FileName : string;   OpenKind : File_Open_Kind := APPEND_MODE ) is\n  begin\n    CoverageStore.WriteCovHoles (ID, FileName, OpenKind) ;\n  end procedure WriteCovHoles ;\n\n  procedure WriteCovHoles (ID : CoverageIDType; LogLevel : LogType;  FileName : string;  OpenKind : File_Open_Kind := APPEND_MODE ) is\n  begin\n    CoverageStore.WriteCovHoles (ID, LogLevel, FileName, OpenKind) ;\n  end procedure WriteCovHoles ;\n\n  procedure WriteCovHoles (ID : CoverageIDType; FileName : string;   PercentCov : real ; OpenKind : File_Open_Kind := APPEND_MODE ) is\n  begin\n    CoverageStore.WriteCovHoles (ID, FileName, PercentCov, OpenKind) ;\n  end procedure WriteCovHoles ;\n\n  procedure WriteCovHoles (ID : CoverageIDType; LogLevel : LogType;  FileName : string;  PercentCov : real ; OpenKind : File_Open_Kind := APPEND_MODE ) is\n  begin\n    CoverageStore.WriteCovHoles (ID, LogLevel, FileName, PercentCov, OpenKind) ;\n  end procedure WriteCovHoles ;\n\n\n  ------------------------------------------------------------\n  -- /////////////////////////////////////////\n  --  Writing Out RAW Coverage Bin Information\n  --  Note that read supports merging of coverage models\n  -- /////////////////////////////////////////\n  ------------------------------------------------------------\n  procedure ReadCovDb (ID : CoverageIDType; FileName : string; Merge : boolean := FALSE) is\n  begin\n    CoverageStore.ReadCovDb (ID, FileName, Merge) ;\n  end procedure ReadCovDb ;\n\n  procedure WriteCovDb (ID : CoverageIDType; FileName : string; OpenKind : File_Open_Kind := WRITE_MODE ) is\n  begin\n    CoverageStore.WriteCovDb (ID, FileName, OpenKind) ;\n  end procedure WriteCovDb ;\n\n  --     procedure WriteCovDb (ID : CoverageIDType) is\n\n--  ------------------------------------------------------------\n--  procedure WriteCovYaml (ID : CoverageIDType; FileName : string; OpenKind : File_Open_Kind := WRITE_MODE ) is\n--  ------------------------------------------------------------\n--    file CovYamlFile : text open OpenKind is FileName ;\n--  begin\n--    CoverageStore.WriteCovYaml (ID, FileName, OpenKind) ;\n--  end procedure WriteCovYaml ;\n\n  ------------------------------------------------------------\n  procedure WriteCovYaml (FileName : string := \"\"; OpenKind : File_Open_Kind := WRITE_MODE) is\n  ------------------------------------------------------------\n  begin\n    CoverageStore.WriteCovYaml(FileName, GetCov, OpenKind) ;\n  end procedure WriteCovYaml ;\n\n  ------------------------------------------------------------\n  procedure ReadCovYaml  (FileName : string := \"\"; Merge : boolean := FALSE) is\n  ------------------------------------------------------------\n  begin\n    CoverageStore.ReadCovYaml(FileName, Merge) ;\n  end procedure ReadCovYaml ;\n\n  ------------------------------------------------------------\n  impure function GotCoverage return boolean is\n  ------------------------------------------------------------\n  begin\n    return CoverageStore.GotCoverage ;\n  end function GotCoverage ;\n\n  ------------------------------------------------------------\n  impure function GetCov (PercentCov : real ) return real is\n  ------------------------------------------------------------\n    variable ID : CoverageIDType ;\n    variable ItemCovCount, ItemCovGoal   : integer ;\n    variable TotalCovCount, TotalCovGoal : integer := 0;\n    variable CovWeight : integer ;\n    variable ScaledCovGoal, rTotalCovCount : real ;\n  begin\n    for i in 1 to CoverageStore.GetNumIDs loop\n      ID := (ID => i) ;\n      CoverageStore.GetTotalCovCountAndGoal(ID, ItemCovCount, ItemCovGoal) ;\n      CovWeight     := GetCovWeight(ID) ;\n      TotalCovCount := TotalCovCount + (ItemCovCount * CovWeight) ;\n      TotalCovGoal  := TotalCovGoal  + (ItemCovGoal  * CovWeight) ;\n    end loop ;\n    ScaledCovGoal  := PercentCov * real(TotalCovGoal) / 100.0 ;\n    rTotalCovCount := real(TotalCovCount) ;\n\n    if rTotalCovCount >= ScaledCovGoal then\n      return 100.0 ;\n    elsif ScaledCovGoal > 0.0 then\n      return (100.0 * rTotalCovCount) / ScaledCovGoal ;\n    else\n      return 0.0 ;\n    end if;\n  end function GetCov ;\n\n  ------------------------------------------------------------\n  impure function GetCov return real is\n  ------------------------------------------------------------\n  begin\n    return GetCov (100.0) ;\n  end function GetCov ;\n\n  ------------------------------------------------------------\n  procedure AffirmIfCovered is \n  ------------------------------------------------------------\n--    constant TotalCov : real := GetCov(100.0) ; \n    variable TotalCov : real ; \n  begin\n    TotalCov := GetCov(100.0) ; \n    CoverageStore.SetErrorIfNotCovered(Checked => TRUE) ; \n    AffirmIf(OSVVM_COVERAGE_ALERTLOG_ID, \n             TotalCov >= 100.0, \"TotalCov = \" & to_string(TotalCov, 2), \"\") ; \n  end procedure AffirmIfCovered ; \n  \n  ------------------------------------------------------------\n  procedure AlertIfNotCovered (Level : AlertType := ERROR) is \n  ------------------------------------------------------------\n--    constant TotalCov : real := GetCov(100.0) ; \n    variable TotalCov : real ; \n  begin\n    TotalCov := GetCov(100.0) ; \n    CoverageStore.SetErrorIfNotCovered(Checked => TRUE) ; \n    AlertIf(OSVVM_COVERAGE_ALERTLOG_ID, \n            TotalCov < 100.0, \"TotalCov = \" & to_string(TotalCov, 2), Level) ; \n  end procedure AlertIfNotCovered ; \n\n  ------------------------------------------------------------\n  -- Experimental.  Intended primarily for development.\n  procedure CompareBins (\n  ------------------------------------------------------------\n    variable Bin1       : inout CovPType ;\n    variable Bin2       : inout CovPType ;\n    variable ErrorCount : inout integer\n  ) is\n    variable NumBins1, NumBins2 : integer ;\n    variable BinInfo1, BinInfo2 : CovBinBaseType ;\n    variable BinVal1, BinVal2 : RangeArrayType(1 to Bin1.GetBinValLength) ;\n    variable buf : line ;\n    variable iAlertLogID : AlertLogIDType ;\n  begin\n    iAlertLogID := Bin1.GetAlertLogID ;\n\n    NumBins1 := Bin1.GetNumBins ;\n    NumBins2 := Bin2.GetNumBins ;\n\n    if (NumBins1 /= NumBins2) then\n      ErrorCount := ErrorCount + 1 ;\n      print(\"CoveragePkg.CompareBins: CoverageModels \" & Bin1.GetCovModelName & \" and \" & Bin2.GetCovModelName &\n            \" have different bin lengths\") ;\n      return ;\n    end if ;\n\n    for i in 1 to NumBins1 loop\n      BinInfo1 := Bin1.GetBinInfo(i) ;\n      BinInfo2 := Bin2.GetBinInfo(i) ;\n      BinVal1  := Bin1.GetBinVal (i) ;\n      BinVal2  := Bin2.GetBinVal (i) ;\n      if BinInfo1 /= BinInfo2 or BinVal1 /= BinVal2 then\n        write(buf, \"%% Bin:\" & to_string(i) & \" miscompare.\" & LF) ;\n        -- writeline(OUTPUT, buf) ;\n        swrite(buf, \"%% Bin1: \") ;\n        write(buf, BinVal1) ;\n        write(buf, \"   Action = \" &  to_string(BinInfo1.action)) ;\n        write(buf, \"   Count = \" &   to_string(BinInfo1.count)) ;\n        write(buf, \"   AtLeast = \" & to_string(BinInfo1.AtLeast)) ;\n        write(buf, \"   Weight = \" &  to_string(BinInfo1.Weight) & LF ) ;\n        -- writeline(OUTPUT, buf) ;\n        swrite(buf, \"%% Bin2: \") ;\n        write(buf, BinVal2) ;\n        write(buf, \"   Action = \" &  to_string(BinInfo2.action)) ;\n        write(buf, \"   Count = \" &   to_string(BinInfo2.count)) ;\n        write(buf, \"   AtLeast = \" & to_string(BinInfo2.AtLeast)) ;\n        write(buf, \"   Weight = \" &  to_string(BinInfo2.Weight) & LF ) ;\n        -- writeline(OUTPUT, buf) ;\n        ErrorCount := ErrorCount + 1 ;\n        writeline(buf) ;\n        -- Alert(iAlertLogID, buf.all, ERROR) ;\n        -- deallocate(buf) ;\n      end if ;\n    end loop ;\n  end procedure CompareBins ;\n\n\n  ------------------------------------------------------------\n  -- Experimental.  Intended primarily for development.\n  procedure CompareBins (\n  ------------------------------------------------------------\n    variable Bin1       : inout CovPType ;\n    variable Bin2       : inout CovPType\n  ) is\n    variable ErrorCount : integer ;\n    variable iAlertLogID : AlertLogIDType ;\n  begin\n    CompareBins(Bin1, Bin2, ErrorCount) ;\n    iAlertLogID := Bin1.GetAlertLogID ;\n    AffirmIfEqual(ErrorCount, 0, \"CompareBins(Bin1, Bin2, ErrorCount) \" & Bin1.GetCovModelName & \" and \" & Bin2.GetCovModelName & \" ErrorCount:\") ;\n  end procedure CompareBins ;\n\n\n  ------------------------------------------------------------\n  -- Experimental.  Intended primarily for development.\n  procedure CompareBins (\n  ------------------------------------------------------------\n    constant Bin1       : in    CoverageIDType ;\n    constant Bin2       : in    CoverageIDType ;\n    variable Valid      : out   Boolean\n  ) is\n    variable NumBins1, NumBins2 : integer ;\n    variable BinInfo1, BinInfo2 : CovBinBaseType ;\n    variable BinVal1, BinVal2 : RangeArrayType(1 to GetBinValLength(Bin1)) ;\n    variable buf : line ;\n    variable iAlertLogID : AlertLogIDType ;\n  begin\n    iAlertLogID := GetAlertLogID(Bin1) ;\n\n    NumBins1 := GetNumBins(Bin1) ;\n    NumBins2 := GetNumBins(Bin2) ;\n\n    Valid := TRUE ;\n\n    if (NumBins1 /= NumBins2) then\n      Valid := FALSE ;\n      print(\"CoveragePkg.CompareBins: CoverageModels \" & GetCovModelName(Bin1) & \" and \" & GetCovModelName(Bin2) &\n            \" have different bin lengths\") ;\n      return ;\n    end if ;\n\n    for i in 1 to NumBins1 loop\n      BinInfo1 := GetBinInfo(Bin1, i) ;\n      BinInfo2 := GetBinInfo(Bin2, i) ;\n      BinVal1  := GetBinVal (Bin1, i) ;\n      BinVal2  := GetBinVal (Bin2, i) ;\n      if BinInfo1 /= BinInfo2 or BinVal1 /= BinVal2 then\n        write(buf, \"%% Bin: \" & to_string(i) & \" miscompare.\" & LF) ;\n        -- writeline(OUTPUT, buf) ;\n        swrite(buf, \"%% Bin1: \") ;\n        write(buf, BinVal1) ;\n        write(buf, \"   Action = \" &  to_string(BinInfo1.action)) ;\n        write(buf, \"   Count = \" &   to_string(BinInfo1.count)) ;\n        write(buf, \"   AtLeast = \" & to_string(BinInfo1.AtLeast)) ;\n        write(buf, \"   Weight = \" &  to_string(BinInfo1.Weight) & LF ) ;\n        -- writeline(OUTPUT, buf) ;\n        swrite(buf, \"%% Bin2: \") ;\n        write(buf, BinVal2) ;\n        write(buf, \"   Action = \" &  to_string(BinInfo2.action)) ;\n        write(buf, \"   Count = \" &   to_string(BinInfo2.count)) ;\n        write(buf, \"   AtLeast = \" & to_string(BinInfo2.AtLeast)) ;\n        write(buf, \"   Weight = \" &  to_string(BinInfo2.Weight) ) ;  -- & LF\n        -- writeline(OUTPUT, buf) ;\n        Valid := FALSE ;\n        writeline(buf) ;\n        -- Alert(iAlertLogID, buf.all, ERROR) ;\n        -- deallocate(buf) ;\n      end if ;\n    end loop ;\n  end procedure CompareBins ;\n\n\n  ------------------------------------------------------------\n  -- Experimental.  Intended primarily for development.\n  procedure CompareBins (\n  ------------------------------------------------------------\n    constant Bin1       : in    CoverageIDType ;\n    constant Bin2       : in    CoverageIDType\n  ) is\n    variable Valid : boolean ;\n    variable iAlertLogID : AlertLogIDType ;\n  begin\n    CompareBins(Bin1, Bin2, Valid) ;\n    iAlertLogID := GetAlertLogID(Bin1) ;\n    AffirmIf(iAlertLogID, Valid, \"CompareBins(Bin1, Bin2) \" & GetCovModelName(Bin1) & \" and \" & GetCovModelName(Bin2)) ;\n  end procedure CompareBins ;\n\n  ------------------------------------------------------------\n  -- package local, Used by GenBin, IllegalBin, and IgnoreBin\n  function MakeBin(\n  -- Must be pure to allow initializing coverage models passed as generics.\n  -- Impure implies the expression is not globally static.\n  ------------------------------------------------------------\n    Min, Max      : integer ;\n    NumBin        : integer ;\n    AtLeast       : integer ;\n    Weight        : integer ;\n    Action        : integer\n  ) return CovBinType is\n    variable iCovBin : CovBinType(1 to NumBin) ;\n    variable TotalBins : integer ; -- either real or integer\n    variable rMax, rCurMin, rNumItemsInBin, rRemainingBins : real ; -- must be real\n    variable iCurMin, iCurMax : integer ;\n  begin\n    if Min > Max then\n      -- Similar to NULL ranges.  Only generate report warning.\n      report \"OSVVM.CoveragePkg.MakeBin (called by GenBin, IllegalBin, or IgnoreBin) MAX > MIN generated NULL_BIN\"\n        severity WARNING ;\n      -- No Alerts. They make this impure.\n      -- Alert(OSVVM_COVERAGE_ALERTLOG_ID, \"CoveragePkg.MakeBin (called by GenBin, IllegalBin, IgnoreBin): Min must be <= Max\", WARNING) ;\n      return NULL_BIN ;\n\n    elsif NumBin <= 0 then\n      -- Similar to NULL ranges.  Only generate report warning.\n      report \"OSVVM.CoveragePkg.MakeBin (called by GenBin, IllegalBin, or IgnoreBin) NumBin <= 0 generated NULL_BIN\"\n        severity WARNING ;\n      -- Alerts make this impure.\n      -- Alert(OSVVM_COVERAGE_ALERTLOG_ID, \"CoveragePkg.MakeBin (called by GenBin, IllegalBin, IgnoreBin): NumBin must be <= 0\", WARNING) ;\n      return NULL_BIN ;\n\n    elsif NumBin = 1 then\n      iCovBin(1) := (\n        BinVal   => (1 => (Min, Max)),\n        Action   => Action,\n        Count    => 0,\n        Weight   => Weight,\n        AtLeast  => AtLeast\n      ) ;\n      return iCovBin ;\n\n    else\n      -- Using type real to work around issues with integer sizing\n      iCurMin := Min ;\n      rCurMin := real(iCurMin) ;\n      rMax    := real(Max) ;\n      rRemainingBins :=  (minimum( real(NumBin), rMax - rCurMin + 1.0 )) ;\n      TotalBins := integer(rRemainingBins)  ;\n      for i in iCovBin'range loop\n        rNumItemsInBin := trunc((rMax - rCurMin + 1.0) / rRemainingBins) ; -- Max - Min can be larger than integer range.\n        iCurMax := iCurMin - integer(-rNumItemsInBin + 1.0) ;  -- Keep: the \"minus negative\" works around a simulator bounds issue found in 2015.06\n        iCovBin(i) := (\n          BinVal   => (1 => (iCurMin, iCurMax)),\n          Action   => Action,\n          Count    => 0,\n          Weight   => Weight,\n          AtLeast  => AtLeast\n        ) ;\n        rRemainingBins := rRemainingBins - 1.0 ;\n        exit when rRemainingBins = 0.0 ;\n        iCurMin := iCurMax + 1 ;\n        rCurMin := real(iCurMin) ;\n      end loop ;\n      return iCovBin(1 to TotalBins) ;\n\n    end if ;\n  end function MakeBin ;\n\n\n  ------------------------------------------------------------\n  -- package local, Used by GenBin, IllegalBin, and IgnoreBin\n  function MakeBin(\n  ------------------------------------------------------------\n    A             : integer_vector ;\n    AtLeast       : integer ;\n    Weight        : integer ;\n    Action        : integer\n  ) return CovBinType is\n    alias    NewA      : integer_vector(1 to A'length) is A ;\n    variable iCovBin   : CovBinType(1 to A'length) ;\n  begin\n\n    if A'length <= 0 then\n      -- Similar to NULL ranges.  Only generate report warning.\n      report \"OSVVM.CoveragePkg.MakeBin (called by GenBin, IllegalBin, or IgnoreBin) integer_vector length <= 0 generated NULL_BIN\"\n        severity WARNING ;\n      -- Alerts make this impure.\n      -- Alert(OSVVM_COVERAGE_ALERTLOG_ID, \"CoveragePkg.MakeBin (GenBin, IllegalBin, IgnoreBin): integer_vector parameter must have values\", WARNING) ;\n      return NULL_BIN ;\n\n    else\n      for i in NewA'Range loop\n        iCovBin(i) := (\n--          BinVal   => (i => (NewA(i), NewA(i)) ),\n          BinVal   => (1 => (NewA(i), NewA(i)) ),\n          Action   => Action,\n          Count    => 0,\n          Weight   => Weight,\n          AtLeast  => AtLeast\n        ) ;\n      end loop ;\n      return iCovBin ;\n    end if ;\n  end function MakeBin ;\n\n  ------------------------------------------------------------\n  function GenBin(\n  ------------------------------------------------------------\n    AtLeast       : integer ;\n    Weight        : integer ;\n    Min, Max      : integer ;\n    NumBin        : integer\n  ) return CovBinType is\n  begin\n    return  MakeBin(\n              Min      => Min,\n              Max      => Max,\n              NumBin   => NumBin,\n              AtLeast  => AtLeast,\n              Weight   => Weight,\n              Action   => COV_COUNT\n            ) ;\n  end function GenBin ;\n\n  ------------------------------------------------------------\n  function GenBin(\n  ------------------------------------------------------------\n    AtLeast       : integer ;\n    Min, Max      : integer ;\n    NumBin        : integer\n  ) return CovBinType is\n  begin\n    return  MakeBin(\n              Min      => Min,\n              Max      => Max,\n              NumBin   => NumBin,\n              AtLeast  => AtLeast,\n              Weight   => 1,\n              Action   => COV_COUNT\n            ) ;\n  end function GenBin ;\n\n  ------------------------------------------------------------\n  function GenBin( Min, Max, NumBin : integer ) return CovBinType is\n  ------------------------------------------------------------\n  begin\n    return  MakeBin(\n              Min      => Min,\n              Max      => Max,\n              NumBin   => NumBin,\n              AtLeast  => 0,\n              Weight   => 0,\n              Action   => COV_COUNT\n            ) ;\n  end function GenBin ;\n\n  ------------------------------------------------------------\n  function GenBin ( Min, Max : integer) return CovBinType is\n  ------------------------------------------------------------\n  begin\n    -- create a separate CovBin for each value\n    -- AtLeast and Weight = 1 (must use longer version to specify)\n    return  MakeBin(\n              Min      => Min,\n              Max      => Max,\n              NumBin   => Max - Min + 1,\n              AtLeast  => 0,\n              Weight   => 0,\n              Action   => COV_COUNT\n            ) ;\n  end function GenBin ;\n\n  ------------------------------------------------------------\n  function GenBin ( A : integer ) return CovBinType is\n  ------------------------------------------------------------\n  begin\n    -- create a single CovBin for A.\n    -- AtLeast and Weight = 1 (must use longer version to specify)\n    return  MakeBin(\n              Min      => A,\n              Max      => A,\n              NumBin   => 1,\n              AtLeast  => 0,\n              Weight   => 0,\n              Action   => COV_COUNT\n            ) ;\n  end function GenBin ;\n\n  ------------------------------------------------------------\n  function GenBin(\n  ------------------------------------------------------------\n    AtLeast       : integer ;\n    Weight        : integer ;\n    A             : integer_vector\n  ) return CovBinType is\n  begin\n    return  MakeBin(\n              A        => A,\n              AtLeast  => AtLeast,\n              Weight   => Weight,\n              Action   => COV_COUNT\n            ) ;\n  end function GenBin ;\n\n  ------------------------------------------------------------\n  function GenBin ( AtLeast : integer ;  A : integer_vector ) return CovBinType is\n  ------------------------------------------------------------\n  begin\n    return  MakeBin(\n              A        => A,\n              AtLeast  => AtLeast,\n              Weight   => 0,\n              Action   => COV_COUNT\n            ) ;\n  end function GenBin ;\n\n  ------------------------------------------------------------\n  function GenBin ( A : integer_vector ) return CovBinType is\n  ------------------------------------------------------------\n  begin\n    return  MakeBin(\n              A        => A,\n              AtLeast  => 0,\n              Weight   => 0,\n              Action   => COV_COUNT\n            ) ;\n  end function GenBin ;\n\n  ------------------------------------------------------------\n  function IllegalBin ( Min, Max, NumBin : integer ) return CovBinType is\n  ------------------------------------------------------------\n  begin\n    return  MakeBin(\n              Min      => Min,\n              Max      => Max,\n              NumBin   => NumBin,\n              AtLeast  => 0,\n              Weight   => 0,\n              Action   => COV_ILLEGAL\n            ) ;\n  end function IllegalBin ;\n\n  ------------------------------------------------------------\n  function IllegalBin ( Min, Max : integer ) return CovBinType is\n  ------------------------------------------------------------\n  begin\n    -- default, generate one CovBin with the entire range of values\n    return  MakeBin(\n              Min      => Min,\n              Max      => Max,\n              NumBin   => 1,\n              AtLeast  => 0,\n              Weight   => 0,\n              Action   => COV_ILLEGAL\n            ) ;\n  end function IllegalBin ;\n\n  ------------------------------------------------------------\n  function IllegalBin ( A : integer ) return CovBinType is\n  ------------------------------------------------------------\n  begin\n    return  MakeBin(\n              Min      => A,\n              Max      => A,\n              NumBin   => 1,\n              AtLeast  => 0,\n              Weight   => 0,\n              Action   => COV_ILLEGAL\n            ) ;\n  end function IllegalBin ;\n\n-- IgnoreBin should never have an AtLeast parameter\n  ------------------------------------------------------------\n  function IgnoreBin (Min, Max, NumBin : integer) return CovBinType is\n  ------------------------------------------------------------\n  begin\n    return  MakeBin(\n              Min      => Min,\n              Max      => Max,\n              NumBin   => NumBin,\n              AtLeast  => 0,\n              Weight   => 0,\n              Action   => COV_IGNORE\n            ) ;\n  end function IgnoreBin ;\n\n  ------------------------------------------------------------\n  function IgnoreBin (Min, Max : integer) return CovBinType is\n  ------------------------------------------------------------\n  begin\n    -- default, generate one CovBin with the entire range of values\n    return  MakeBin(\n              Min      => Min,\n              Max      => Max,\n              NumBin   => 1,\n              AtLeast  => 0,\n              Weight   => 0,\n              Action   => COV_IGNORE\n            ) ;\n  end function IgnoreBin ;\n\n  ------------------------------------------------------------\n  function IgnoreBin (A : integer) return CovBinType is\n  ------------------------------------------------------------\n  begin\n    return  MakeBin(\n              Min      => A,\n              Max      => A,\n              NumBin   => 1,\n              AtLeast  => 0,\n              Weight   => 0,\n              Action   => COV_IGNORE\n            ) ;\n  end function IgnoreBin ;\n\n  ------------------------------------------------------------\n  function GenCross(  -- 2\n  -- Cross existing bins\n  -- Use AddCross for adding values directly to coverage database\n  -- Use GenCross for constants\n  ------------------------------------------------------------\n    AtLeast     : integer ;\n    Weight      : integer ;\n    Bin1, Bin2  : CovBinType\n  ) return CovMatrix2Type is\n    constant BIN_LENS : integer_vector := BinLengths(Bin1, Bin2) ;\n    constant NUM_NEW_BINS : integer := CalcNumCrossBins(BIN_LENS) ;\n    variable BinIndex     : integer_vector(1 to BIN_LENS'length) := (others => 1) ;\n    variable CrossBins    : CovBinType(BinIndex'range) ;\n    variable Action       : integer ;\n    variable iCovMatrix   : CovMatrix2Type(1 to NUM_NEW_BINS) ;\n  begin\n    for MatrixIndex in iCovMatrix'range loop\n      CrossBins := ConcatenateBins(BinIndex, Bin1, Bin2) ;\n      Action       := MergeState(CrossBins) ;\n      iCovMatrix(MatrixIndex).action  := Action ;\n      iCovMatrix(MatrixIndex).count   := 0 ;\n      iCovMatrix(MatrixIndex).BinVal  := MergeBinVal(CrossBins) ;\n      iCovMatrix(MatrixIndex).AtLeast := MergeAtLeast( Action, AtLeast, CrossBins) ;\n      iCovMatrix(MatrixIndex).Weight  := MergeWeight ( Action, Weight,  CrossBins) ;\n      IncBinIndex( BinIndex, BIN_LENS ) ; -- increment right most one, then if overflow, increment next\n    end loop ;\n    return iCovMatrix ;\n  end function GenCross ;\n\n  ------------------------------------------------------------\n  function GenCross(AtLeast : integer ; Bin1, Bin2 : CovBinType) return CovMatrix2Type is\n  -- Cross existing bins  -- use AddCross instead\n  ------------------------------------------------------------\n  begin\n    return GenCross(AtLeast, 1, Bin1, Bin2) ;\n  end function GenCross ;\n\n  ------------------------------------------------------------\n  function GenCross(Bin1, Bin2 : CovBinType) return CovMatrix2Type is\n  -- Cross existing bins  -- use AddCross instead\n  ------------------------------------------------------------\n  begin\n    return GenCross(1, 1, Bin1, Bin2) ;\n  end function GenCross ;\n\n  ------------------------------------------------------------\n  function GenCross(  -- 3\n  ------------------------------------------------------------\n    AtLeast           : integer ;\n    Weight            : integer ;\n    Bin1, Bin2, Bin3  : CovBinType\n  ) return CovMatrix3Type is\n    constant BIN_LENS : integer_vector := BinLengths(Bin1, Bin2, Bin3) ;\n    constant NUM_NEW_BINS : integer := CalcNumCrossBins(BIN_LENS) ;\n    variable BinIndex     : integer_vector(1 to BIN_LENS'length) := (others => 1) ;\n    variable CrossBins    : CovBinType(BinIndex'range) ;\n    variable Action       : integer ;\n    variable iCovMatrix   : CovMatrix3Type(1 to NUM_NEW_BINS) ;\n  begin\n    for MatrixIndex in iCovMatrix'range loop\n      CrossBins := ConcatenateBins(BinIndex, Bin1, Bin2, Bin3) ;\n      Action       := MergeState(CrossBins) ;\n      iCovMatrix(MatrixIndex).action  := Action ;\n      iCovMatrix(MatrixIndex).count   := 0 ;\n      iCovMatrix(MatrixIndex).BinVal  := MergeBinVal(CrossBins) ;\n      iCovMatrix(MatrixIndex).AtLeast := MergeAtLeast( Action, AtLeast, CrossBins) ;\n      iCovMatrix(MatrixIndex).Weight  := MergeWeight ( Action, Weight,  CrossBins) ;\n      IncBinIndex( BinIndex, BIN_LENS ) ; -- increment right most one, then if overflow, increment next\n    end loop ;\n    return iCovMatrix ;\n  end function GenCross ;\n\n  ------------------------------------------------------------\n  function GenCross( AtLeast : integer ; Bin1, Bin2, Bin3 : CovBinType ) return CovMatrix3Type is\n  ------------------------------------------------------------\n  begin\n    return GenCross(AtLeast, 1, Bin1, Bin2, Bin3) ;\n  end function GenCross ;\n\n  ------------------------------------------------------------\n  function GenCross( Bin1, Bin2, Bin3 : CovBinType ) return CovMatrix3Type is\n  ------------------------------------------------------------\n  begin\n    return GenCross(1, 1, Bin1, Bin2, Bin3) ;\n  end function GenCross ;\n\n  ------------------------------------------------------------\n  function GenCross(  -- 4\n  ------------------------------------------------------------\n    AtLeast                 : integer ;\n    Weight                  : integer ;\n    Bin1, Bin2, Bin3, Bin4  : CovBinType\n  ) return CovMatrix4Type is\n    constant BIN_LENS : integer_vector := BinLengths(Bin1, Bin2, Bin3, Bin4) ;\n    constant NUM_NEW_BINS : integer := CalcNumCrossBins(BIN_LENS) ;\n    variable BinIndex     : integer_vector(1 to BIN_LENS'length) := (others => 1) ;\n    variable CrossBins    : CovBinType(BinIndex'range) ;\n    variable Action       : integer ;\n    variable iCovMatrix   : CovMatrix4Type(1 to NUM_NEW_BINS) ;\n  begin\n    for MatrixIndex in iCovMatrix'range loop\n      CrossBins := ConcatenateBins(BinIndex, Bin1, Bin2, Bin3, Bin4) ;\n      Action       := MergeState(CrossBins) ;\n      iCovMatrix(MatrixIndex).action  := Action ;\n      iCovMatrix(MatrixIndex).count   := 0 ;\n      iCovMatrix(MatrixIndex).BinVal  := MergeBinVal(CrossBins) ;\n      iCovMatrix(MatrixIndex).AtLeast := MergeAtLeast( Action, AtLeast, CrossBins) ;\n      iCovMatrix(MatrixIndex).Weight  := MergeWeight ( Action, Weight,  CrossBins) ;\n      IncBinIndex( BinIndex, BIN_LENS ) ; -- increment right most one, then if overflow, increment next\n    end loop ;\n    return iCovMatrix ;\n  end function GenCross ;\n\n  ------------------------------------------------------------\n  function GenCross( AtLeast : integer ; Bin1, Bin2, Bin3, Bin4 : CovBinType ) return CovMatrix4Type is\n  ------------------------------------------------------------\n  begin\n    return GenCross(AtLeast, 1, Bin1, Bin2, Bin3, Bin4) ;\n  end function GenCross ;\n\n  ------------------------------------------------------------\n  function GenCross( Bin1, Bin2, Bin3, Bin4 : CovBinType ) return CovMatrix4Type is\n  ------------------------------------------------------------\n  begin\n    return GenCross(1, 1, Bin1, Bin2, Bin3, Bin4) ;\n  end function GenCross ;\n\n  ------------------------------------------------------------\n  function GenCross(  -- 5\n  ------------------------------------------------------------\n    AtLeast                       : integer ;\n    Weight                        : integer ;\n    Bin1, Bin2, Bin3, Bin4, Bin5  : CovBinType\n  ) return CovMatrix5Type is\n    constant BIN_LENS : integer_vector := BinLengths(Bin1, Bin2, Bin3, Bin4, Bin5) ;\n    constant NUM_NEW_BINS : integer := CalcNumCrossBins(BIN_LENS) ;\n    variable BinIndex     : integer_vector(1 to BIN_LENS'length) := (others => 1) ;\n    variable CrossBins    : CovBinType(BinIndex'range) ;\n    variable Action       : integer ;\n    variable iCovMatrix   : CovMatrix5Type(1 to NUM_NEW_BINS) ;\n  begin\n    for MatrixIndex in iCovMatrix'range loop\n      CrossBins := ConcatenateBins(BinIndex, Bin1, Bin2, Bin3, Bin4, Bin5) ;\n      Action       := MergeState(CrossBins) ;\n      iCovMatrix(MatrixIndex).action  := Action ;\n      iCovMatrix(MatrixIndex).count   := 0 ;\n      iCovMatrix(MatrixIndex).BinVal  := MergeBinVal(CrossBins) ;\n      iCovMatrix(MatrixIndex).AtLeast := MergeAtLeast( Action, AtLeast, CrossBins) ;\n      iCovMatrix(MatrixIndex).Weight  := MergeWeight ( Action, Weight,  CrossBins) ;\n      IncBinIndex( BinIndex, BIN_LENS ) ; -- increment right most one, then if overflow, increment next\n    end loop ;\n    return iCovMatrix ;\n  end function GenCross ;\n\n  ------------------------------------------------------------\n  function GenCross( AtLeast : integer ; Bin1, Bin2, Bin3, Bin4, Bin5 : CovBinType ) return CovMatrix5Type is\n  ------------------------------------------------------------\n  begin\n    return GenCross(AtLeast, 1, Bin1, Bin2, Bin3, Bin4, Bin5) ;\n  end function GenCross ;\n\n  ------------------------------------------------------------\n  function GenCross( Bin1, Bin2, Bin3, Bin4, Bin5 : CovBinType ) return CovMatrix5Type is\n  ------------------------------------------------------------\n  begin\n    return GenCross(1, 1, Bin1, Bin2, Bin3, Bin4, Bin5) ;\n  end function GenCross ;\n\n  ------------------------------------------------------------\n  function GenCross(  -- 6\n  ------------------------------------------------------------\n    AtLeast                             : integer ;\n    Weight                              : integer ;\n    Bin1, Bin2, Bin3, Bin4, Bin5, Bin6  : CovBinType\n  ) return CovMatrix6Type is\n    constant BIN_LENS : integer_vector := BinLengths(Bin1, Bin2, Bin3, Bin4, Bin5, Bin6) ;\n    constant NUM_NEW_BINS : integer := CalcNumCrossBins(BIN_LENS) ;\n    variable BinIndex     : integer_vector(1 to BIN_LENS'length) := (others => 1) ;\n    variable CrossBins    : CovBinType(BinIndex'range) ;\n    variable Action       : integer ;\n    variable iCovMatrix   : CovMatrix6Type(1 to NUM_NEW_BINS) ;\n  begin\n    for MatrixIndex in iCovMatrix'range loop\n      CrossBins := ConcatenateBins(BinIndex, Bin1, Bin2, Bin3, Bin4, Bin5, Bin6) ;\n      Action       := MergeState(CrossBins) ;\n      iCovMatrix(MatrixIndex).action  := Action ;\n      iCovMatrix(MatrixIndex).count   := 0 ;\n      iCovMatrix(MatrixIndex).BinVal  := MergeBinVal(CrossBins) ;\n      iCovMatrix(MatrixIndex).AtLeast := MergeAtLeast( Action, AtLeast, CrossBins) ;\n      iCovMatrix(MatrixIndex).Weight  := MergeWeight ( Action, Weight,  CrossBins) ;\n      IncBinIndex( BinIndex, BIN_LENS ) ; -- increment right most one, then if overflow, increment next\n    end loop ;\n    return iCovMatrix ;\n  end function GenCross ;\n\n  ------------------------------------------------------------\n  function GenCross( AtLeast : integer ; Bin1, Bin2, Bin3, Bin4, Bin5, Bin6 : CovBinType ) return CovMatrix6Type is\n  ------------------------------------------------------------\n  begin\n    return GenCross(AtLeast, 1, Bin1, Bin2, Bin3, Bin4, Bin5, Bin6) ;\n  end function GenCross ;\n\n  ------------------------------------------------------------\n  function GenCross( Bin1, Bin2, Bin3, Bin4, Bin5, Bin6 : CovBinType ) return CovMatrix6Type is\n  ------------------------------------------------------------\n  begin\n    return GenCross(1, 1, Bin1, Bin2, Bin3, Bin4, Bin5, Bin6) ;\n  end function GenCross ;\n\n  ------------------------------------------------------------\n  function GenCross(  -- 7\n  ------------------------------------------------------------\n    AtLeast                                   : integer ;\n    Weight                                    : integer ;\n    Bin1, Bin2, Bin3, Bin4, Bin5, Bin6, Bin7  : CovBinType\n  ) return CovMatrix7Type is\n    constant BIN_LENS : integer_vector := BinLengths(Bin1, Bin2, Bin3, Bin4, Bin5, Bin6, Bin7) ;\n    constant NUM_NEW_BINS : integer := CalcNumCrossBins(BIN_LENS) ;\n    variable BinIndex     : integer_vector(1 to BIN_LENS'length) := (others => 1) ;\n    variable CrossBins    : CovBinType(BinIndex'range) ;\n    variable Action       : integer ;\n    variable iCovMatrix   : CovMatrix7Type(1 to NUM_NEW_BINS) ;\n  begin\n    for MatrixIndex in iCovMatrix'range loop\n      CrossBins := ConcatenateBins(BinIndex, Bin1, Bin2, Bin3, Bin4, Bin5, Bin6, Bin7) ;\n      Action       := MergeState(CrossBins) ;\n      iCovMatrix(MatrixIndex).action  := Action ;\n      iCovMatrix(MatrixIndex).count   := 0 ;\n      iCovMatrix(MatrixIndex).BinVal  := MergeBinVal(CrossBins) ;\n      iCovMatrix(MatrixIndex).AtLeast := MergeAtLeast( Action, AtLeast, CrossBins) ;\n      iCovMatrix(MatrixIndex).Weight  := MergeWeight ( Action, Weight,  CrossBins) ;\n      IncBinIndex( BinIndex, BIN_LENS ) ; -- increment right most one, then if overflow, increment next\n    end loop ;\n    return iCovMatrix ;\n  end function GenCross ;\n\n  ------------------------------------------------------------\n  function GenCross( AtLeast : integer ; Bin1, Bin2, Bin3, Bin4, Bin5, Bin6, Bin7 : CovBinType ) return CovMatrix7Type is\n  ------------------------------------------------------------\n  begin\n    return GenCross(AtLeast, 1, Bin1, Bin2, Bin3, Bin4, Bin5, Bin6, Bin7) ;\n  end function GenCross ;\n\n  ------------------------------------------------------------\n  function GenCross( Bin1, Bin2, Bin3, Bin4, Bin5, Bin6, Bin7 : CovBinType ) return CovMatrix7Type is\n  ------------------------------------------------------------\n  begin\n    return GenCross(1, 1, Bin1, Bin2, Bin3, Bin4, Bin5, Bin6, Bin7) ;\n  end function GenCross ;\n\n  ------------------------------------------------------------\n  function GenCross(  -- 8\n  ------------------------------------------------------------\n    AtLeast                                         : integer ;\n    Weight                                          : integer ;\n    Bin1, Bin2, Bin3, Bin4, Bin5, Bin6, Bin7, Bin8  : CovBinType\n  ) return CovMatrix8Type is\n    constant BIN_LENS : integer_vector := BinLengths(Bin1, Bin2, Bin3, Bin4, Bin5, Bin6, Bin7, Bin8) ;\n    constant NUM_NEW_BINS : integer := CalcNumCrossBins(BIN_LENS) ;\n    variable BinIndex     : integer_vector(1 to BIN_LENS'length) := (others => 1) ;\n    variable CrossBins    : CovBinType(BinIndex'range) ;\n    variable Action       : integer ;\n    variable iCovMatrix   : CovMatrix8Type(1 to NUM_NEW_BINS) ;\n  begin\n    for MatrixIndex in iCovMatrix'range loop\n      CrossBins := ConcatenateBins(BinIndex, Bin1, Bin2, Bin3, Bin4, Bin5, Bin6, Bin7, Bin8) ;\n      Action       := MergeState(CrossBins) ;\n      iCovMatrix(MatrixIndex).action  := Action ;\n      iCovMatrix(MatrixIndex).count   := 0 ;\n      iCovMatrix(MatrixIndex).BinVal  := MergeBinVal(CrossBins) ;\n      iCovMatrix(MatrixIndex).AtLeast := MergeAtLeast( Action, AtLeast, CrossBins) ;\n      iCovMatrix(MatrixIndex).Weight  := MergeWeight ( Action, Weight,  CrossBins) ;\n      IncBinIndex( BinIndex, BIN_LENS ) ; -- increment right most one, then if overflow, increment next\n    end loop ;\n    return iCovMatrix ;\n  end function GenCross ;\n\n  ------------------------------------------------------------\n  function GenCross( AtLeast : integer ; Bin1, Bin2, Bin3, Bin4, Bin5, Bin6, Bin7, Bin8 : CovBinType ) return CovMatrix8Type is\n  ------------------------------------------------------------\n  begin\n    return GenCross(AtLeast, 1, Bin1, Bin2, Bin3, Bin4, Bin5, Bin6, Bin7, Bin8) ;\n  end function GenCross ;\n\n  ------------------------------------------------------------\n  function GenCross( Bin1, Bin2, Bin3, Bin4, Bin5, Bin6, Bin7, Bin8 : CovBinType ) return CovMatrix8Type is\n  ------------------------------------------------------------\n  begin\n    return GenCross(1, 1, Bin1, Bin2, Bin3, Bin4, Bin5, Bin6, Bin7, Bin8) ;\n  end function GenCross ;\n\n  ------------------------------------------------------------\n  function GenCross(  -- 9\n  ------------------------------------------------------------\n    AtLeast                                               : integer ;\n    Weight                                                : integer ;\n    Bin1, Bin2, Bin3, Bin4, Bin5, Bin6, Bin7, Bin8, Bin9  : CovBinType\n  ) return CovMatrix9Type is\n    constant BIN_LENS : integer_vector := BinLengths(Bin1, Bin2, Bin3, Bin4, Bin5, Bin6, Bin7, Bin8, Bin9) ;\n    constant NUM_NEW_BINS : integer := CalcNumCrossBins(BIN_LENS) ;\n    variable BinIndex     : integer_vector(1 to BIN_LENS'length) := (others => 1) ;\n    variable CrossBins    : CovBinType(BinIndex'range) ;\n    variable Action       : integer ;\n    variable iCovMatrix   : CovMatrix9Type(1 to NUM_NEW_BINS) ;\n  begin\n    for MatrixIndex in iCovMatrix'range loop\n      CrossBins := ConcatenateBins(BinIndex, Bin1, Bin2, Bin3, Bin4, Bin5, Bin6, Bin7, Bin8, Bin9) ;\n      Action       := MergeState(CrossBins) ;\n      iCovMatrix(MatrixIndex).action  := Action ;\n      iCovMatrix(MatrixIndex).count   := 0 ;\n      iCovMatrix(MatrixIndex).BinVal  := MergeBinVal(CrossBins) ;\n      iCovMatrix(MatrixIndex).AtLeast := MergeAtLeast( Action, AtLeast, CrossBins) ;\n      iCovMatrix(MatrixIndex).Weight  := MergeWeight ( Action, Weight,  CrossBins) ;\n      IncBinIndex( BinIndex, BIN_LENS ) ; -- increment right most one, then if overflow, increment next\n    end loop ;\n    return iCovMatrix ;\n  end function GenCross ;\n\n  ------------------------------------------------------------\n  function GenCross( AtLeast : integer ; Bin1, Bin2, Bin3, Bin4, Bin5, Bin6, Bin7, Bin8, Bin9 : CovBinType ) return CovMatrix9Type is\n  ------------------------------------------------------------\n  begin\n    return GenCross(AtLeast, 1, Bin1, Bin2, Bin3, Bin4, Bin5, Bin6, Bin7, Bin8, Bin9) ;\n  end function GenCross ;\n\n  ------------------------------------------------------------\n  function GenCross( Bin1, Bin2, Bin3, Bin4, Bin5, Bin6, Bin7, Bin8, Bin9 : CovBinType ) return CovMatrix9Type is\n  ------------------------------------------------------------\n  begin\n    return GenCross(1, 1, Bin1, Bin2, Bin3, Bin4, Bin5, Bin6, Bin7, Bin8, Bin9) ;\n  end function GenCross ;\n\n  ------------------------------------------------------------\n  function to_integer ( B : boolean ) return integer is\n  ------------------------------------------------------------\n  begin\n    if B then\n      return 1 ;\n    else\n      return 0 ;\n    end if ;\n  end function to_integer ;\n\n  ------------------------------------------------------------\n  function CheckInteger_1_0 ( I : integer ) return boolean is\n  -------------------------------------------------------------\n  begin\n    case I is\n      when 0 | 1 =>   return TRUE ;\n      when others =>  return FALSE ;\n    end case ;\n  end function CheckInteger_1_0 ;\n\n  ------------------------------------------------------------\n  function local_to_boolean ( I : integer ) return boolean is\n  ------------------------------------------------------------\n  begin\n    case I is\n      when 1 =>  return TRUE ;\n      when 0 =>  return FALSE ;\n      when others =>\n        return FALSE ;\n    end case ;\n  end function local_to_boolean ;\n\n  ------------------------------------------------------------\n  function to_boolean ( I : integer ) return boolean is\n  ------------------------------------------------------------\n  begin\n    if not CheckInteger_1_0(I) then\n      report\n        \"CoveragePkg.to_boolean: invalid integer value: \" & to_string(I) &\n        \" returning FALSE\" severity WARNING ;\n    end if ;\n\n    return local_to_boolean(I) ;\n  end function to_boolean ;\n\n  ------------------------------------------------------------\n  function to_integer ( SL : std_logic ) return integer is\n  -------------------------------------------------------------\n  begin\n    case SL is\n      when '1' | 'H' =>  return 1 ;\n      when '0' | 'L' =>  return 0 ;\n      when others    =>  return -1 ;\n    end case ;\n  end function to_integer ;\n\n  ------------------------------------------------------------\n  function local_to_std_logic ( I : integer ) return std_logic is\n  -------------------------------------------------------------\n  begin\n    case I is\n      when 1 =>       return '1' ;\n      when 0 =>       return '0' ;\n      when others =>  return 'X' ;\n    end case ;\n  end function local_to_std_logic ;\n\n  ------------------------------------------------------------\n  function to_std_logic ( I : integer ) return std_logic is\n  -------------------------------------------------------------\n  begin\n    if not CheckInteger_1_0(I) then\n      report\n        \"CoveragePkg.to_std_logic: invalid integer value: \" & to_string(I) &\n        \" returning X\" severity WARNING ;\n    end if ;\n\n    return local_to_std_logic(I) ;\n  end function to_std_logic ;\n\n  ------------------------------------------------------------\n  function to_integer_vector ( BV : boolean_vector ) return integer_vector is\n  ------------------------------------------------------------\n    variable result : integer_vector(BV'range) ;\n  begin\n    for i in BV'range loop\n      result(i) := to_integer(BV(i)) ;\n    end loop ;\n    return result ;\n  end function to_integer_vector ;\n\n  ------------------------------------------------------------\n  function to_boolean_vector ( IV : integer_vector ) return boolean_vector is\n  ------------------------------------------------------------\n    variable result : boolean_vector(IV'range) ;\n    variable HasError : boolean := FALSE ;\n  begin\n    for i in IV'range loop\n      result(i) := local_to_boolean(IV(i)) ;\n      if not CheckInteger_1_0(IV(i)) then\n        HasError := TRUE ;\n      end if ;\n    end loop ;\n\n    if HasError then\n      report\n        \"CoveragePkg.to_boolean_vector: invalid integer value\" &\n        \" returning FALSE\" severity WARNING ;\n    end if ;\n\n    return result ;\n  end function to_boolean_vector ;\n\n  ------------------------------------------------------------\n  function to_integer_vector ( SLV : std_logic_vector ) return integer_vector is\n  -------------------------------------------------------------\n    variable result : integer_vector(SLV'range) ;\n  begin\n    for i in SLV'range loop\n      result(i) := to_integer(SLV(i)) ;\n    end loop ;\n    return result ;\n  end function to_integer_vector ;\n\n  ------------------------------------------------------------\n  function to_std_logic_vector ( IV : integer_vector ) return std_logic_vector is\n  -------------------------------------------------------------\n    variable result : std_logic_vector(IV'range) ;\n    variable HasError : boolean := FALSE ;\n  begin\n    for i in IV'range loop\n      result(i) := local_to_std_logic(IV(i)) ;\n      if not CheckInteger_1_0(IV(i)) then\n        HasError := TRUE ;\n      end if ;\n    end loop ;\n\n    if HasError then\n      report\n        \"CoveragePkg.to_std_logic_vector: invalid integer value\" &\n        \" returning FALSE\" severity WARNING ;\n    end if ;\n\n    return result ;\n  end function to_std_logic_vector ;\nend package body CoveragePkg ;","lang":"vhdl"};
processSrcData(g_data);
var g_data = {"name":"C:/OsvvmLibraries/osvvm/NamePkg.vhd","src":"--\n--  File Name:         NamePkg.vhd\n--  Design Unit Name:  NamePkg\n--  Revision:          STANDARD VERSION\n--\n--  Maintainer:        Jim Lewis      email:  jim@synthworks.com\n--  Contributor(s):\n--     Jim Lewis          SynthWorks\n--\n--\n--  Package Defines\n--      Data structure for name. \n--\n--  Developed for:\n--        SynthWorks Design Inc.\n--        VHDL Training Classes\n--        11898 SW 128th Ave.  Tigard, Or  97223\n--        http://www.SynthWorks.com\n--\n--  Revision History:\n--    Date      Version    Description\n--    02/2022   2022.02    Added NameLength method to NamePType\n--    01/2020   2020.01    Updated Licenses to Apache\n--    05/2015   2015.06    Added input to Get to return when not initialized\n--    12/2014:  2014.07a   Removed initialized pointers which can lead to memory leaks.\n--    07/2014:  2014.07    Moved specialization required by CoveragePkg to CoveragePkg\n--                         Separated name handling from message handling to simplify naming\n--    06/2010:  0.1        Initial revision\n--\n--\n--  This file is part of OSVVM.\n--  \n--  Copyright (c) 2010 - 2020 by SynthWorks Design Inc.  \n--  \n--  Licensed under the Apache License, Version 2.0 (the \"License\");\n--  you may not use this file except in compliance with the License.\n--  You may obtain a copy of the License at\n--  \n--      https://www.apache.org/licenses/LICENSE-2.0\n--  \n--  Unless required by applicable law or agreed to in writing, software\n--  distributed under the License is distributed on an \"AS IS\" BASIS,\n--  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n--  See the License for the specific language governing permissions and\n--  limitations under the License.\n--  \n\nuse std.textio.all ;\n\npackage NamePkg is\n\n  type NamePType is protected\n    procedure Set (NameIn : String) ;\n    impure function Get (DefaultName : string := \"\") return string ;\n    impure function GetOpt return string ;\n    impure function IsSet return boolean ; \n    impure function NameLength return integer ; \n    procedure Clear ; -- clear name\n    procedure Deallocate ; -- effectively alias to clear name\n  end protected NamePType ;\n\nend package NamePkg ;\n\n--- ///////////////////////////////////////////////////////////////////////////\n--- ///////////////////////////////////////////////////////////////////////////\n--- ///////////////////////////////////////////////////////////////////////////\n\npackage body NamePkg is\n  type NamePType is protected body\n  \n    variable NamePtr   : line ;\n\n    ------------------------------------------------------------\n    procedure Set (NameIn : String) is\n    ------------------------------------------------------------\n    begin\n      if NamePtr /= NULL then \n        deallocate(NamePtr) ;\n      end if ; \n      NamePtr := new string'(NameIn) ;\n    end procedure Set ;\n\n    ------------------------------------------------------------\n    impure function Get (DefaultName : string := \"\") return string is\n    ------------------------------------------------------------\n    begin\n      if NamePtr = NULL then \n        return DefaultName ; \n      else\n        return NamePtr.all ; \n      end if ; \n    end function Get ;\n\n    ------------------------------------------------------------\n    impure function GetOpt return string is\n    ------------------------------------------------------------\n    begin\n      if NamePtr = NULL then \n        return NUL & \"\" ; \n      else\n        return NamePtr.all ; \n      end if ; \n    end function GetOpt ;\n\n    ------------------------------------------------------------\n    impure function IsSet return boolean is \n    ------------------------------------------------------------\n    begin\n      return NamePtr /= NULL ; \n    end function IsSet ;      \n    \n    ------------------------------------------------------------\n    impure function NameLength return integer is\n    ------------------------------------------------------------\n    begin\n      if NamePtr = NULL then \n        return 0 ; \n      else\n        return NamePtr.all'length ; \n      end if ; \n    end function NameLength ;\n\n    ------------------------------------------------------------\n    procedure Clear is  -- clear name\n    ------------------------------------------------------------\n    begin\n      deallocate(NamePtr) ;\n    end procedure Clear ;\n    \n    ------------------------------------------------------------\n    procedure Deallocate is  -- clear name\n    ------------------------------------------------------------\n    begin\n      Clear ; \n    end procedure Deallocate ;\n\n  end protected body NamePType ;\n\nend package body NamePkg ;","lang":"vhdl"};
processSrcData(g_data);
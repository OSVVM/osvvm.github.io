var g_data = {"name":"C:/OsvvmLibraries/osvvm/OsvvmGlobalPkg.vhd","src":"--\n--  File Name:         OsvvmGlobalPkg.vhd\n--  Design Unit Name:  OsvvmGlobalPkg\n--  Revision:          STANDARD VERSION,  revision 2015.01\n--\n--  Maintainer:        Jim Lewis      email:  jim@synthworks.com\n--  Contributor(s):\n--     Jim Lewis      jim@synthworks.com\n--\n--\n--  Description:\n--        Global Settings for OSVVM packages\n--\n--\n--  Developed for:\n--        SynthWorks Design Inc.\n--        VHDL Training Classes\n--        11898 SW 128th Ave.  Tigard, Or  97223\n--        http://www.SynthWorks.com\n--\n--  Revision History:\n--    Date      Version    Description\n--    03/2024   2024.03    Most of package functionality replaced by constants in OsvvmSettingsPkg_default.vhd\n--    06/2022   2022.06    Minor reordering of constants\n--    02/2022   2022.02    Added support for IdSeparator.  \n--                         Supports PrintParent mode PRINT_NAME_AND_PARENT.  <Parent Name> <IdSeparator> <AlertLogID Name>.   \n--    01/2020   2020.01    Updated Licenses to Apache\n--    01/2014   2015.01    Initial revision\n--\n--\n--  This file is part of OSVVM.\n--  \n--  Copyright (c) 2015 - 2020 by SynthWorks Design Inc.  \n--  \n--  Licensed under the Apache License, Version 2.0 (the \"License\");\n--  you may not use this file except in compliance with the License.\n--  You may obtain a copy of the License at\n--  \n--      https://www.apache.org/licenses/LICENSE-2.0\n--  \n--  Unless required by applicable law or agreed to in writing, software\n--  distributed under the License is distributed on an \"AS IS\" BASIS,\n--  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n--  See the License for the specific language governing permissions and\n--  limitations under the License.\n--  \n\nlibrary ieee ;\nuse std.textio.all ;\n\nuse work.NamePkg.all ; \n\npackage OsvvmGlobalPkg is\n  -- Shared Options Type used in OSVVM\n  type OsvvmOptionsType is (OPT_INIT_PARM_DETECT, OPT_USE_DEFAULT, DISABLED, FALSE, ENABLED, TRUE) ;\n  function IsEnabled (A : OsvvmOptionsType) return boolean ;  -- Requires that TRUE is last and ENABLED is 2nd to last\n  function to_OsvvmOptionsType (A : boolean) return OsvvmOptionsType ;\n\n  -- Defaults for String values\n  constant OSVVM_STRING_INIT_PARM_DETECT  : string := NUL & NUL & NUL ; \n  constant OSVVM_STRING_USE_DEFAULT       : string := NUL & \"\" ; \n  \n  function IsOsvvmStringSet (A : string) return boolean ;\n\n-- The remaining capability has been replaced by OsvvmSettingsPkg.vhd / OsvvmSettingsPkg_default.vhd\n-- These provide a lighter weight implementation of this capability\n--\n--!!  procedure SetOsvvmDefaultTimeUnits (A : time) ; \n--!!  impure function GetOsvvmDefaultTimeUnits return time ;\n--!!\n--!!  type OsvvmDefaultTimeUnitsPType is protected \n--!!    procedure Set (A: time) ; \n--!!    impure function get return time ;\n--!!  end protected OsvvmDefaultTimeUnitsPType ;\n--!!\n--!!  -- AlertLog Settings - See OsvvmSettingsPkg\n--!!  constant OSVVM_DEFAULT_WRITE_PREFIX     : string := \"%% \" ;\n--!!  constant OSVVM_DEFAULT_ALERT_PREFIX     : string := \"Alert\" ;\n--!!  constant OSVVM_DEFAULT_LOG_PREFIX       : string := \"Log  \" ;\n--!!  constant OSVVM_DEFAULT_DONE_NAME        : string := \"DONE\" ;\n--!!  constant OSVVM_DEFAULT_PASS_NAME        : string := \"PASSED\" ;\n--!!  constant OSVVM_DEFAULT_FAIL_NAME        : string := \"FAILED\" ;\n--!!  constant OSVVM_DEFAULT_ID_SEPARATOR     : string := \": \" ; \n--!!\n--!!  -- Coverage Settings\n--!!  constant OSVVM_DEFAULT_WRITE_PASS_FAIL   : OsvvmOptionsType := FALSE ;\n--!!  constant OSVVM_DEFAULT_WRITE_BIN_INFO    : OsvvmOptionsType := TRUE ;\n--!!  constant OSVVM_DEFAULT_WRITE_COUNT       : OsvvmOptionsType := TRUE ;\n--!!  constant OSVVM_DEFAULT_WRITE_ANY_ILLEGAL : OsvvmOptionsType := FALSE ;\n--!!\n--!!  ------------------------------------------------------------\n--!!  procedure SetOsvvmGlobalOptions (\n--!!  ------------------------------------------------------------\n--!!    WritePassFail   : OsvvmOptionsType := OPT_INIT_PARM_DETECT ;\n--!!    WriteBinInfo    : OsvvmOptionsType := OPT_INIT_PARM_DETECT ;\n--!!    WriteCount      : OsvvmOptionsType := OPT_INIT_PARM_DETECT ;\n--!!    WriteAnyIllegal : OsvvmOptionsType := OPT_INIT_PARM_DETECT ;\n--!!    WritePrefix     : string := OSVVM_STRING_INIT_PARM_DETECT ;\n--!!    DoneName        : string := OSVVM_STRING_INIT_PARM_DETECT ;\n--!!    PassName        : string := OSVVM_STRING_INIT_PARM_DETECT ;\n--!!    FailName        : string := OSVVM_STRING_INIT_PARM_DETECT ;\n--!!    IdSeparator     : string := OSVVM_STRING_INIT_PARM_DETECT\n--!!  ) ;\n--!!  \n--!!  ------------------------------------------------------------\n--!!  -- Accessor Functions\n--!!  function ResolveOsvvmOption(A, B, C : OsvvmOptionsType) return OsvvmOptionsType ; \n--!!  function ResolveOsvvmOption(A, B, C, D : OsvvmOptionsType) return OsvvmOptionsType ; \n--!!  function ResolveOsvvmOption(A, B : string) return string ; \n--!!  function ResolveOsvvmOption(A, B, C : string) return string ; \n--!!  function ResolveOsvvmOption(A, B, C, D : string) return string ; \n--!!  \n--!!  impure function ResolveOsvvmWritePrefix  (A : String)  return string ; \n--!!  impure function ResolveOsvvmDoneName     (A : String)  return string ; \n--!!  impure function ResolveOsvvmPassName     (A : String)  return string ; \n--!!  impure function ResolveOsvvmFailName     (A : String)  return string ; \n--!!  impure function ResolveOsvvmIdSeparator  (A : String)  return string ; \n--!!  \n--!!  impure function ResolveCovWritePassFail  (A : OsvvmOptionsType) return OsvvmOptionsType ;  -- Cov\n--!!  impure function ResolveCovWriteBinInfo   (A : OsvvmOptionsType) return OsvvmOptionsType ; -- Cov\n--!!  impure function ResolveCovWriteCount     (A : OsvvmOptionsType) return OsvvmOptionsType ; -- Cov\n--!!  impure function ResolveCovWriteAnyIllegal(A : OsvvmOptionsType) return OsvvmOptionsType ;  -- Cov\n--!!  \n--!!  impure function ResolveOsvvmWritePrefix  (A, B : String)  return string ; \n--!!  impure function ResolveOsvvmDoneName     (A, B : String)  return string ; \n--!!  impure function ResolveOsvvmPassName     (A, B : String)  return string ; \n--!!  impure function ResolveOsvvmFailName     (A, B : String)  return string ; \n--!!\n--!!  impure function ResolveCovWritePassFail  (A, B : OsvvmOptionsType) return OsvvmOptionsType ;  -- Cov\n--!!  impure function ResolveCovWriteBinInfo   (A, B : OsvvmOptionsType) return OsvvmOptionsType ; -- Cov\n--!!  impure function ResolveCovWriteCount     (A, B : OsvvmOptionsType) return OsvvmOptionsType ; -- Cov\n--!!  impure function ResolveCovWriteAnyIllegal(A, B : OsvvmOptionsType) return OsvvmOptionsType ;  -- Cov\n--!!  \n--!!\n--!!  procedure OsvvmDeallocate ;\n--!!  \n--!!  type OptionsPType is protected \n--!!    procedure Set (A: OsvvmOptionsType) ; \n--!!    impure function get return OsvvmOptionsType ;\n--!!  end protected OptionsPType ;\nend OsvvmGlobalPkg ;\n\n--- ///////////////////////////////////////////////////////////////////////////\n--- ///////////////////////////////////////////////////////////////////////////\n--- ///////////////////////////////////////////////////////////////////////////\n\npackage body OsvvmGlobalPkg is\n  function IsEnabled (A : OsvvmOptionsType) return boolean is\n  begin\n    return A >= ENABLED ; \n  end function IsEnabled ; \n  \n  function to_OsvvmOptionsType (A : boolean) return OsvvmOptionsType is\n  begin\n    if A then \n      return TRUE ; \n    else \n      return FALSE ;\n    end if ; \n  end function to_OsvvmOptionsType ; \n  \n  function IsOsvvmStringSet (A : string) return boolean is\n  begin\n    if A'length = 0 then   -- Null strings permitted\n      return TRUE ;     \n    else \n      return A(A'left) /= NUL ;\n    end if; \n  end function IsOsvvmStringSet ;\n  \n--!!  type OptionsPType is protected body\n--!!    variable GlobalVar : OsvvmOptionsType ; \n--!!    procedure Set (A : OsvvmOptionsType) is\n--!!    begin\n--!!       GlobalVar := A ; \n--!!    end procedure Set ; \n--!!    impure function get return OsvvmOptionsType is\n--!!    begin\n--!!      return GlobalVar ; \n--!!    end function get ; \n--!!  end protected body OptionsPType ; \n--!!\n--!!  type OsvvmDefaultTimeUnitsPType is protected body\n--!!--    variable GlobalVar : time := std.env.resolution_limit ;  -- VHDL-2008\n--!!    variable GlobalVar : time := 1 ns ;  -- compatibility with LocalPrint in AlertLogPkg\n--!!    procedure Set (A : time) is\n--!!    begin\n--!!      if A >= std.env.resolution_limit then\n--!!        GlobalVar := A ; \n--!!      elsif A < std.env.resolution_limit then \n--!!        report \"SetOsvvmDefaultTimeUnits:  time unit parameter too small\" severity warning ;\n--!!      end if ; \n--!!    end procedure Set ; \n--!!    impure function get return time is\n--!!    begin\n--!!      return GlobalVar ; \n--!!    end function get ; \n--!!  end protected body OsvvmDefaultTimeUnitsPType ; \n--!!  \n--!!  shared variable OsvvmDefaultTimeUnitsVar : OsvvmDefaultTimeUnitsPType ; \n--!!\n--!!  procedure SetOsvvmDefaultTimeUnits (A : time) is \n--!!  begin\n--!!    OsvvmDefaultTimeUnitsVar.Set(A) ; \n--!!  end procedure SetOsvvmDefaultTimeUnits ; \n--!!\n--!!  impure function GetOsvvmDefaultTimeUnits return time is \n--!!  begin\n--!!    return OsvvmDefaultTimeUnitsVar.Get ; \n--!!  end function GetOsvvmDefaultTimeUnits ; \n--!!\n--!!  shared variable WritePrefixVar           : NamePType ;\n--!!  shared variable DoneNameVar              : NamePType ;\n--!!  shared variable PassNameVar              : NamePType ;\n--!!  shared variable FailNameVar              : NamePType ;\n--!!  shared variable IdSeparatorVar           : NamePType ;\n--!!  shared variable WritePassFailVar         : OptionsPType ; -- := FALSE ;\n--!!  shared variable WriteBinInfoVar          : OptionsPType ; -- := TRUE ;\n--!!  shared variable WriteCountVar            : OptionsPType ; -- := TRUE ;\n--!!  shared variable WriteAnyIllegalVar       : OptionsPType ; -- := FALSE ;\n--!!\n--!!  ------------------------------------------------------------\n--!!  procedure SetOsvvmGlobalOptions (\n--!!  ------------------------------------------------------------\n--!!    WritePassFail   : OsvvmOptionsType := OPT_INIT_PARM_DETECT ;\n--!!    WriteBinInfo    : OsvvmOptionsType := OPT_INIT_PARM_DETECT ;\n--!!    WriteCount      : OsvvmOptionsType := OPT_INIT_PARM_DETECT ;\n--!!    WriteAnyIllegal : OsvvmOptionsType := OPT_INIT_PARM_DETECT ;\n--!!    WritePrefix     : string := OSVVM_STRING_INIT_PARM_DETECT ;\n--!!    DoneName        : string := OSVVM_STRING_INIT_PARM_DETECT ;\n--!!    PassName        : string := OSVVM_STRING_INIT_PARM_DETECT ;\n--!!    FailName        : string := OSVVM_STRING_INIT_PARM_DETECT ;\n--!!    IdSeparator     : string := OSVVM_STRING_INIT_PARM_DETECT\n--!!  ) is\n--!!  begin\n--!!    if WritePassFail /= OPT_INIT_PARM_DETECT then\n--!!      WritePassFailVar.Set(WritePassFail) ;\n--!!    end if ;\n--!!    if WriteBinInfo /= OPT_INIT_PARM_DETECT then\n--!!      WriteBinInfoVar.Set(WriteBinInfo) ;\n--!!    end if ;\n--!!    if WriteCount /= OPT_INIT_PARM_DETECT then\n--!!      WriteCountVar.Set(WriteCount) ;\n--!!    end if ;\n--!!    if WriteAnyIllegal /= OPT_INIT_PARM_DETECT then\n--!!      WriteAnyIllegalVar.Set(WriteAnyIllegal) ;\n--!!    end if ;\n--!!    if WritePrefix /= OSVVM_STRING_INIT_PARM_DETECT then\n--!!      WritePrefixVar.Set(WritePrefix) ; \n--!!    end if ;\n--!!    if DoneName /= OSVVM_STRING_INIT_PARM_DETECT then\n--!!      DoneNameVar.Set(DoneName) ; \n--!!    end if ;\n--!!    if PassName /= OSVVM_STRING_INIT_PARM_DETECT then\n--!!      PassNameVar.Set(PassName) ; \n--!!    end if ;\n--!!    if FailName /= OSVVM_STRING_INIT_PARM_DETECT then\n--!!      FailNameVar.Set(FailName) ; \n--!!    end if ;\n--!!    if IdSeparator /= OSVVM_STRING_INIT_PARM_DETECT then\n--!!      IdSeparatorVar.Set(IdSeparator) ; \n--!!    end if ;\n--!!  end procedure SetOsvvmGlobalOptions ;  \n--!!\n--!!  ------------------------------------------------------------\n--!!  -- Accessor Functions\n--!!  -- Local Function\n--!!  function IsOsvvmOptionSet (A : OsvvmOptionsType) return boolean is\n--!!  begin\n--!!    return A > OPT_USE_DEFAULT ; \n--!!  end function IsOsvvmOptionSet ;\n--!!\n--!!  function ResolveOsvvmOption(A, B, C : OsvvmOptionsType) return OsvvmOptionsType is\n--!!  begin\n--!!    if IsOsvvmOptionSet(A) then\n--!!      return A ;\n--!!    elsif IsOsvvmOptionSet(B) then\n--!!      return B ;\n--!!    else\n--!!      return C ;\n--!!    end if ;\n--!!  end function ResolveOsvvmOption ;\n--!! \n--!!  function ResolveOsvvmOption(A, B, C, D : OsvvmOptionsType) return OsvvmOptionsType is\n--!!  begin\n--!!    if IsOsvvmOptionSet(A) then\n--!!      return A ;\n--!!    elsif IsOsvvmOptionSet(B) then\n--!!      return B ;\n--!!    elsif IsOsvvmOptionSet(C) then\n--!!      return C ;\n--!!    else\n--!!      return D ;\n--!!    end if ;\n--!!  end function ResolveOsvvmOption ;\n--!!  \n--!!  function ResolveOsvvmOption(A, B : string) return string is\n--!!  begin\n--!!    if IsOsvvmStringSet(A) then\n--!!      return A ;\n--!!    else\n--!!      return B ;\n--!!    end if ;\n--!!  end function ResolveOsvvmOption ; \n--!!  \n--!!  function ResolveOsvvmOption(A, B, C : string) return string is\n--!!  begin\n--!!    if IsOsvvmStringSet(A) then\n--!!      return A ;\n--!!    elsif IsOsvvmStringSet(B) then\n--!!      return B ;\n--!!    else\n--!!      return C ;\n--!!    end if ;\n--!!  end function ResolveOsvvmOption ; \n--!!  \n--!!  function ResolveOsvvmOption(A, B, C, D : string) return string is\n--!!  begin\n--!!    if IsOsvvmStringSet(A) then\n--!!      return A ;\n--!!    elsif IsOsvvmStringSet(B) then\n--!!      return B ;\n--!!    elsif IsOsvvmStringSet(C) then\n--!!      return C ;\n--!!    else\n--!!      return D ;\n--!!    end if ;\n--!!  end function ResolveOsvvmOption ;\n--!!\n--!!  impure function ResolveOsvvmWritePrefix(A : String)  return string is\n--!!  begin\n--!!    return ResolveOsvvmOption(A, WritePrefixVar.GetOpt, OSVVM_DEFAULT_WRITE_PREFIX) ;\n--!!  end function ResolveOsvvmWritePrefix ; \n--!!  \n--!!  impure function ResolveOsvvmDoneName(A : String)  return string is\n--!!  begin\n--!!    return ResolveOsvvmOption(A, DoneNameVar.GetOpt, OSVVM_DEFAULT_DONE_NAME) ;\n--!!  end function ResolveOsvvmDoneName ; \n--!!  \n--!!  impure function ResolveOsvvmPassName(A : String)  return string is\n--!!  begin\n--!!    return ResolveOsvvmOption(A, PassNameVar.GetOpt, OSVVM_DEFAULT_PASS_NAME) ;\n--!!  end function ResolveOsvvmPassName ; \n--!!  \n--!!  impure function ResolveOsvvmFailName(A : String)  return string is\n--!!  begin\n--!!    return ResolveOsvvmOption(A, FailNameVar.GetOpt, OSVVM_DEFAULT_FAIL_NAME) ;\n--!!  end function ResolveOsvvmFailName ;  \n--!!  \n--!!  impure function ResolveOsvvmIdSeparator(A : String)  return string is\n--!!  begin\n--!!    return ResolveOsvvmOption(A, IdSeparatorVar.GetOpt, OSVVM_DEFAULT_ID_SEPARATOR) ;\n--!!  end function ResolveOsvvmIdSeparator ;  \n--!!  \n--!! \n--!!  impure function ResolveCovWritePassFail(A : OsvvmOptionsType) return OsvvmOptionsType is\n--!!  begin\n--!!    return ResolveOsvvmOption(A, WritePassFailVar.Get, OSVVM_DEFAULT_WRITE_PASS_FAIL) ;\n--!!  end function ResolveCovWritePassFail ;  -- Cov\n--!!  \n--!!  impure function ResolveCovWriteBinInfo(A : OsvvmOptionsType) return OsvvmOptionsType is\n--!!  begin\n--!!    return ResolveOsvvmOption(A, WriteBinInfoVar.Get, OSVVM_DEFAULT_WRITE_BIN_INFO) ;\n--!!  end function ResolveCovWriteBinInfo ;  -- Cov\n--!!\n--!!  impure function ResolveCovWriteCount(A : OsvvmOptionsType) return OsvvmOptionsType is\n--!!  begin\n--!!    return ResolveOsvvmOption(A, WriteCountVar.Get, OSVVM_DEFAULT_WRITE_COUNT) ;\n--!!  end function ResolveCovWriteCount ;  -- Cov\n--!!\n--!!  impure function ResolveCovWriteAnyIllegal(A : OsvvmOptionsType) return OsvvmOptionsType is\n--!!  begin\n--!!    return ResolveOsvvmOption(A, WriteAnyIllegalVar.Get, OSVVM_DEFAULT_WRITE_ANY_ILLEGAL) ;\n--!!  end function ResolveCovWriteAnyIllegal ;  -- Cov\n--!!  \n--!!\n--!!  impure function ResolveOsvvmWritePrefix(A, B : String)  return string is\n--!!  begin\n--!!    return ResolveOsvvmOption(A, B, WritePrefixVar.GetOpt, OSVVM_DEFAULT_WRITE_PREFIX) ;\n--!!  end function ResolveOsvvmWritePrefix ; \n--!!  \n--!!  impure function ResolveOsvvmDoneName(A, B : String)  return string is\n--!!  begin\n--!!    return ResolveOsvvmOption(A, DoneNameVar.GetOpt, OSVVM_DEFAULT_DONE_NAME) ;\n--!!  end function ResolveOsvvmDoneName ; \n--!!  \n--!!  impure function ResolveOsvvmPassName(A, B : String)  return string is\n--!!  begin\n--!!    return ResolveOsvvmOption(A, B, PassNameVar.GetOpt, OSVVM_DEFAULT_PASS_NAME) ;\n--!!  end function ResolveOsvvmPassName ; \n--!!\n--!!  impure function ResolveOsvvmFailName(A, B : String)  return string is\n--!!  begin\n--!!    return ResolveOsvvmOption(A, B, FailNameVar.GetOpt, OSVVM_DEFAULT_FAIL_NAME) ;\n--!!  end function ResolveOsvvmFailName ;  \n--!!\n--!!\n--!!  impure function ResolveCovWritePassFail(A, B : OsvvmOptionsType) return OsvvmOptionsType is\n--!!  begin\n--!!    return ResolveOsvvmOption(A, B, WritePassFailVar.Get, OSVVM_DEFAULT_WRITE_PASS_FAIL) ;\n--!!  end function ResolveCovWritePassFail ;  -- Cov\n--!!  \n--!!  impure function ResolveCovWriteBinInfo(A, B : OsvvmOptionsType) return OsvvmOptionsType is\n--!!  begin\n--!!    return ResolveOsvvmOption(A, B, WriteBinInfoVar.Get, OSVVM_DEFAULT_WRITE_BIN_INFO) ;\n--!!  end function ResolveCovWriteBinInfo ;  -- Cov\n--!!\n--!!  impure function ResolveCovWriteCount(A, B : OsvvmOptionsType) return OsvvmOptionsType is\n--!!  begin\n--!!    return ResolveOsvvmOption(A, B, WriteCountVar.Get, OSVVM_DEFAULT_WRITE_COUNT) ;\n--!!  end function ResolveCovWriteCount ;  -- Cov\n--!!\n--!!  impure function ResolveCovWriteAnyIllegal(A, B : OsvvmOptionsType) return OsvvmOptionsType is\n--!!  begin\n--!!    return ResolveOsvvmOption(A, B, WriteAnyIllegalVar.Get, OSVVM_DEFAULT_WRITE_ANY_ILLEGAL) ;\n--!!  end function ResolveCovWriteAnyIllegal ;  -- Cov\n--!!  \n--!!  procedure OsvvmDeallocate is\n--!!  begin\n--!!    -- Free up space used by NamePType within OsvvmGlobalPkg\n--!!    WritePrefixVar.Deallocate ;\n--!!    DoneNameVar.Deallocate ;\n--!!    PassNameVar.Deallocate ;\n--!!    FailNameVar.Deallocate ;\n--!!    WritePassFailVar.Set(FALSE) ; -- := FALSE ;\n--!!    WriteBinInfoVar.Set(TRUE ) ; -- := TRUE  ;\n--!!    WriteCountVar.Set(TRUE ) ; -- := TRUE  ;\n--!!    WriteAnyIllegalVar.Set(FALSE) ; -- := FALSE ;\n--!!\n--!!  end procedure OsvvmDeallocate ; \nend package body OsvvmGlobalPkg ;","lang":"vhdl"};
processSrcData(g_data);
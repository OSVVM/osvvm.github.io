var g_data = {"name":"C:/OsvvmLibraries/AXI4/common/src/Axi4OptionsPkg.vhd","src":"--\n--  File Name:         Axi4OptionsPkg.vhd\n--  Design Unit Name:  Axi4OptionsPkg\n--  Revision:          OSVVM MODELS STANDARD VERSION\n--\n--  Maintainer:        Jim Lewis      email:  jim@synthworks.com\n--  Contributor(s):\n--     Jim Lewis      jim@synthworks.com\n--\n--\n--  Description:\n--      Defines types, constants, and subprograms used by\n--      OSVVM Address Bus Transaction Based Models (aka: TBM, TLM, VVC)\n--\n--\n--  Developed by:\n--        SynthWorks Design Inc.\n--        VHDL Training Classes\n--        http://www.SynthWorks.com\n--\n--  Revision History:\n--    Date      Version    Description\n--    02/2022   2022.02    Added SetAxi4LiteInterfaceDefault, GetAxi4LiteInterfaceDefault\n--    01/2020   2020.02    Refactored from Axi4MasterTransactionPkg.vhd\n--\n--\n--  This file is part of OSVVM.\n--\n--  Copyright (c) 2017 - 2020 by SynthWorks Design Inc.\n--\n--  Licensed under the Apache License, Version 2.0 (the \"License\");\n--  you may not use this file except in compliance with the License.\n--  You may obtain a copy of the License at\n--\n--      https://www.apache.org/licenses/LICENSE-2.0\n--\n--  Unless required by applicable law or agreed to in writing, software\n--  distributed under the License is distributed on an \"AS IS\" BASIS,\n--  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n--  See the License for the specific language governing permissions and\n--  limitations under the License.\n--\nlibrary ieee ;\n  use ieee.std_logic_1164.all ;\n  use ieee.numeric_std.all ;\n  use ieee.numeric_std_unsigned.all ;\n  use ieee.math_real.all ;\n\nlibrary osvvm ;\n    context osvvm.OsvvmContext ;\n\nlibrary OSVVM_Common ;\n    context OSVVM_Common.OsvvmCommonContext ;\n\nuse work.Axi4InterfaceCommonPkg.all ;\nuse work.Axi4InterfacePkg.all ;\nuse work.Axi4LiteInterfacePkg.all ; \n\npackage Axi4OptionsPkg is\n\n  type Axi4UnresolvedOptionsType is (\n    -- AXI4 Model Options\n    -- Ready timeout\n    WRITE_ADDRESS_READY_TIME_OUT,\n    WRITE_DATA_READY_TIME_OUT,\n    WRITE_RESPONSE_READY_TIME_OUT,      -- S\n    READ_ADDRESS_READY_TIME_OUT,\n    READ_DATA_READY_TIME_OUT,           -- S\n\n    -- Ready Controls\n    WRITE_ADDRESS_READY_BEFORE_VALID,   -- S\n    WRITE_DATA_READY_BEFORE_VALID,      -- S\n    WRITE_RESPONSE_READY_BEFORE_VALID,\n    READ_ADDRESS_READY_BEFORE_VALID,    -- S\n    READ_DATA_READY_BEFORE_VALID,\n\n    -- Ready Delays\n    WRITE_ADDRESS_READY_DELAY_CYCLES,   -- S\n    WRITE_DATA_READY_DELAY_CYCLES,      -- S\n    WRITE_RESPONSE_READY_DELAY_CYCLES,\n    READ_ADDRESS_READY_DELAY_CYCLES,    -- S\n    READ_DATA_READY_DELAY_CYCLES,\n\n    -- Valid Timeouts\n    WRITE_RESPONSE_VALID_TIME_OUT,\n    READ_DATA_VALID_TIME_OUT,\n\n    -- Valid Delays\n    WRITE_ADDRESS_VALID_DELAY_CYCLES,\n    WRITE_DATA_VALID_DELAY_CYCLES,\n    WRITE_DATA_VALID_BURST_DELAY_CYCLES,\n    WRITE_RESPONSE_VALID_DELAY_CYCLES,  -- S\n    READ_ADDRESS_VALID_DELAY_CYCLES,\n    READ_DATA_VALID_DELAY_CYCLES,       -- S\n    READ_DATA_VALID_BURST_DELAY_CYCLES, -- S\n\n    -- Write Data Filtering\n    WRITE_DATA_FILTER_UNDRIVEN,\n    WRITE_DATA_UNDRIVEN_VALUE,\n\n    -- Marker\n    OPTIONS_MARKER,\n\n-- AXI Interface Settings\n    -- AXI\n--    AWADDR,\n    AWPROT,\n--    AWVALID,\n--    AWREADY,\n    -- Axi4 Full\n    AWID,\n--    AWLEN,\n    AWSIZE,\n    AWBURST,\n    AWLOCK,\n    AWCACHE,\n    AWQOS,\n    AWREGION,\n    AWUSER,\n\n    -- Write Data\n--    WDATA,\n--    WSTRB,\n--    WVALID,\n--    WREADY,\n    -- AXI4 Full\n    WLAST,\n    WUSER,\n    -- AXI3\n    WID,\n\n    -- Write Response\n    BRESP,\n--    BVALID,\n--    BREADY,\n    -- AXI4 Full\n    BID,\n    BUSER,\n\n    -- Read Address\n--    ARADDR,\n    ARPROT,\n--    ARVALID,\n--    ARREADY,\n    -- Axi4 Full\n    ARID,\n    -- BURSTLength = AxLen+1.  AXI4,\n--    ARLEN,\n    -- #Bytes in transfer = 2**AxSize\n    ARSIZE,\n    -- AxBURST = (Fixed, Incr, Wrap, NotDefined)\n    ARBURST,\n    ARLOCK,\n    -- AxCACHE One-hot (Write-Allocate, Read-Allocate, Modifiable, Bufferable)\n    ARCACHE,\n    ARQOS,\n    ARREGION,\n    ARUSER,\n\n    -- Read DATA\n--    RDATA,\n    RRESP,\n--    RVALID,\n--    RREADY,\n    -- AXI4 Full\n    RID,\n    RLAST,\n    RUSER,\n    --\n    -- The End -- Done\n    THE_END\n  ) ;\n  type Axi4UnresolvedOptionsVectorType is array (natural range <>) of Axi4UnresolvedOptionsType ;\n  -- alias resolved_max is maximum[ Axi4UnresolvedOptionsVectorType return Axi4UnresolvedOptionsType] ;\n  function resolved_max(A : Axi4UnresolvedOptionsVectorType) return Axi4UnresolvedOptionsType ;\n\n  subtype Axi4OptionsType is resolved_max Axi4UnresolvedOptionsType ;\n\n  --                         00    01      10      11\n  type  Axi4RespEnumType is (OKAY, EXOKAY, SLVERR, DECERR) ;\n--  type  Axi4UnresolvedRespEnumType is (OKAY, EXOKAY, SLVERR, DECERR) ;\n--  type Axi4UnresolvedRespVectorEnumType is array (natural range <>) of Axi4UnresolvedRespEnumType ;\n--  -- alias resolved_max is maximum[ Axi4UnresolvedRespVectorEnumType return Axi4UnresolvedRespEnumType] ;\n--  -- Maximum is implicitly defined for any array type in VHDL-2008.   Function resolved_max is a fall back.\n--  function resolved_max ( s : Axi4UnresolvedRespVectorEnumType) return Axi4UnresolvedRespEnumType ;\n--  subtype Axi4RespEnumType is resolved_max Axi4UnresolvedRespEnumType ;\n\n  function from_Axi4RespType (a: Axi4RespType) return Axi4RespEnumType ;\n  function to_Axi4RespType (a: Axi4RespEnumType) return Axi4RespType ;\n  \n\n--!  type AxiParamsType is array (Axi4OptionsType range <>) of integer ;\n--! Need init Parms for default values - many parms all init with ignore values &\n--! call via named association\n\n  --\n  --  Abstraction Layer to support SetModelOptions using enumerated values\n  --\n  ------------------------------------------------------------\n  procedure SetAxi4Options (\n  ------------------------------------------------------------\n    signal   TransactionRec : InOut AddressBusRecType ;\n    constant Option         : In    Axi4OptionsType ;\n    constant OptVal         : In    boolean\n  ) ;\n\n  ------------------------------------------------------------\n  procedure SetAxi4Options (\n  ------------------------------------------------------------\n    signal   TransactionRec : InOut AddressBusRecType ;\n    constant Option         : In    Axi4OptionsType ;\n    constant OptVal         : In    std_logic\n  ) ;\n\n  ------------------------------------------------------------\n  procedure SetAxi4Options (\n  ------------------------------------------------------------\n    signal   TransactionRec : InOut AddressBusRecType ;\n    constant Option         : In    Axi4OptionsType ;\n    constant OptVal         : In    integer\n  ) ;\n\n  ------------------------------------------------------------\n  procedure SetAxi4Options (\n  ------------------------------------------------------------\n    signal   TransactionRec : InOut AddressBusRecType ;\n    constant Option         : In    Axi4OptionsType ;\n    constant OptVal         : In    std_logic_vector\n  ) ;\n\n  ------------------------------------------------------------\n  procedure SetAxi4Options (\n  ------------------------------------------------------------\n    signal   TransactionRec : InOut AddressBusRecType ;\n    constant Option         : In    Axi4OptionsType ;\n    constant OptVal         : In    Axi4RespEnumType\n  ) ;\n\n  ------------------------------------------------------------\n  procedure GetAxi4Options (\n  ------------------------------------------------------------\n    signal   TransactionRec : InOut AddressBusRecType ;\n    constant Option         : In    Axi4OptionsType ;\n    variable OptVal         : Out   boolean\n  ) ;\n\n  ------------------------------------------------------------\n  procedure GetAxi4Options (\n  ------------------------------------------------------------\n    signal   TransactionRec : InOut AddressBusRecType ;\n    constant Option         : In    Axi4OptionsType ;\n    variable OptVal         : Out   std_logic\n  ) ;\n\n  ------------------------------------------------------------\n  procedure GetAxi4Options (\n  ------------------------------------------------------------\n    signal   TransactionRec : InOut AddressBusRecType ;\n    constant Option         : In    Axi4OptionsType ;\n    variable OptVal         : Out   integer\n  ) ;\n\n  ------------------------------------------------------------\n  procedure GetAxi4Options (\n  ------------------------------------------------------------\n    signal   TransactionRec : InOut AddressBusRecType ;\n    constant Option         : In    Axi4OptionsType ;\n    variable OptVal         : Out   std_logic_vector\n  ) ;\n  \n  ------------------------------------------------------------\n  procedure GetAxi4Options (\n  ------------------------------------------------------------\n    signal   TransactionRec : InOut AddressBusRecType ;\n    constant Option         : In    Axi4OptionsType ;\n    variable OptVal         : Out   Axi4RespEnumType\n  ) ;\n\n\n  --\n  --  Support for revisions prior to 2020.12\n  --  This overloading cannot be supported in general as if two VCs\n  --  use the same enumerated value for an Option, calls to it will be ambiguous.\n  --  Hence, to support VC types, a VC specific Set...Options is required.\n  --\n  alias SetModelOptions is SetAxi4Options[AddressBusRecType, Axi4OptionsType, boolean];\n  alias SetModelOptions is SetAxi4Options[AddressBusRecType, Axi4OptionsType, integer];\n  alias SetModelOptions is SetAxi4Options[AddressBusRecType, Axi4OptionsType, std_logic_vector];\n\n\n  --\n  -- Axi4 Verification Component Support Subprograms\n  --\n  ------------------------------------------------------------\n  impure function to_integer (Operation : Axi4OptionsType) return integer ;\n  function IsAxiParameter (Operation : Axi4OptionsType) return boolean ;\n  function IsAxiInterface (Operation : Axi4OptionsType) return boolean ; \n\n  ------------------------------------------------------------\n  procedure SetAxi4Parameter (\n  -----------------------------------------------------------\n    constant Params        : in    ModelParametersIDType ;\n    constant Operation     : in    Axi4OptionsType ;\n    constant OptVal        : in    boolean\n  ) ;\n\n  ------------------------------------------------------------\n  procedure SetAxi4Parameter (\n  -----------------------------------------------------------\n    constant Params        : in    ModelParametersIDType ;\n    constant Operation     : in    Axi4OptionsType ;\n    constant OptVal        : in    std_logic\n  ) ;\n\n  ------------------------------------------------------------\n  procedure SetAxi4Parameter (\n  -----------------------------------------------------------\n    constant Params        : in    ModelParametersIDType ;\n    constant Operation     : in    Axi4OptionsType ;\n    constant OptVal        : in    integer\n  ) ;\n\n  ------------------------------------------------------------\n  procedure SetAxi4Parameter (\n  -----------------------------------------------------------\n    constant Params        : in    ModelParametersIDType ;\n    constant Operation     : in    Axi4OptionsType ;\n    constant OptVal        : in    std_logic_vector\n  ) ;\n\n  ------------------------------------------------------------\n  impure function GetAxi4Parameter (\n  -----------------------------------------------------------\n    constant Params        : in    ModelParametersIDType ;\n    constant Operation     : in    Axi4OptionsType \n  ) return boolean ;\n\n  ------------------------------------------------------------\n  impure function GetAxi4Parameter (\n  -----------------------------------------------------------\n    constant Params        : in    ModelParametersIDType ;\n    constant Operation     : in    Axi4OptionsType \n  ) return std_logic ;\n\n  ------------------------------------------------------------\n  impure function GetAxi4Parameter (\n  -----------------------------------------------------------\n    constant Params        : in    ModelParametersIDType ;\n    constant Operation     : in    Axi4OptionsType \n  ) return integer ;\n\n  ------------------------------------------------------------\n  impure function GetAxi4Parameter (\n  -----------------------------------------------------------\n    constant Params        : in    ModelParametersIDType ;\n    constant Operation     : in    Axi4OptionsType \n  ) return std_logic_vector ;\n  \n  ------------------------------------------------------------\n  impure function GetAxi4Parameter (\n  -----------------------------------------------------------\n    constant Params        : in    ModelParametersIDType ;\n    constant Operation     : in    Axi4OptionsType ;\n    constant Size          : in    natural\n  ) return std_logic_vector ;\n  \n  ------------------------------------------------------------\n  procedure InitAxiOptions (\n  -----------------------------------------------------------\n    constant Params        : in ModelParametersIDType \n  ) ;\n\n  ------------------------------------------------------------\n  procedure InitAxiOptions (\n  -----------------------------------------------------------\n    signal Params        : InOut ModelParametersIDType ;\n           Name          : in    string ; \n           ParentID      : in    AlertLogIDType\n  ) ;\n  \n  ------------------------------------------------------------\n  procedure SetAxi4InterfaceDefault (\n  -----------------------------------------------------------\n    variable AxiBus        : InOut Axi4BaseRecType ;\n    constant Operation     : In    Axi4OptionsType ;\n    constant OptVal        : In    integer\n  ) ;\n  alias SetAxiParameter is SetAxi4InterfaceDefault[Axi4BaseRecType, Axi4OptionsType, integer];\n\n  ------------------------------------------------------------\n  impure function GetAxi4InterfaceDefault (\n  -----------------------------------------------------------\n    constant AxiBus        : in  Axi4BaseRecType ;\n    constant Operation     : in  Axi4OptionsType\n  ) return integer ;\n  alias GetAxiParameter is GetAxi4InterfaceDefault[Axi4BaseRecType, Axi4OptionsType return integer] ;\n\n  ------------------------------------------------------------\n  procedure SetAxi4LiteInterfaceDefault (\n  -----------------------------------------------------------\n    variable AxiBus        : InOut Axi4LiteRecType ;\n    constant Operation     : In    Axi4OptionsType ;\n    constant OptVal        : In    integer\n  ) ;\n\n  ------------------------------------------------------------\n  impure function GetAxi4LiteInterfaceDefault (\n  -----------------------------------------------------------\n    constant AxiBus        : in  Axi4LiteRecType ;\n    constant Operation     : in  Axi4OptionsType\n  ) return integer ;\n\n--!! These are Deprecated !!\n--!! These are Deprecated !!\n--!! These are Deprecated !!\n  ------------------------------------------------------------\n  procedure SetAxi4Parameter (\n  -----------------------------------------------------------\n    variable Params        : InOut ModelParametersPType ;\n    constant Operation     : in    Axi4OptionsType ;\n    constant OptVal        : in    boolean\n  ) ;\n\n  ------------------------------------------------------------\n  procedure SetAxi4Parameter (\n  -----------------------------------------------------------\n    variable Params        : InOut ModelParametersPType ;\n    constant Operation     : in    Axi4OptionsType ;\n    constant OptVal        : in    std_logic\n  ) ;\n\n  ------------------------------------------------------------\n  procedure SetAxi4Parameter (\n  -----------------------------------------------------------\n    variable Params        : InOut ModelParametersPType ;\n    constant Operation     : in    Axi4OptionsType ;\n    constant OptVal        : in    integer\n  ) ;\n\n  ------------------------------------------------------------\n  procedure SetAxi4Parameter (\n  -----------------------------------------------------------\n    variable Params        : InOut ModelParametersPType ;\n    constant Operation     : in    Axi4OptionsType ;\n    constant OptVal        : in    std_logic_vector\n  ) ;\n\n  ------------------------------------------------------------\n  procedure GetAxi4Parameter (\n  -----------------------------------------------------------\n    variable Params        : InOut ModelParametersPType ;\n    constant Operation     : in    Axi4OptionsType ;\n    variable OptVal        : out   boolean\n  ) ;\n\n  ------------------------------------------------------------\n  procedure GetAxi4Parameter (\n  -----------------------------------------------------------\n    variable Params        : InOut ModelParametersPType ;\n    constant Operation     : in    Axi4OptionsType ;\n    variable OptVal        : out   std_logic\n  ) ;\n\n  ------------------------------------------------------------\n  procedure GetAxi4Parameter (\n  -----------------------------------------------------------\n    variable Params        : InOut ModelParametersPType ;\n    constant Operation     : in    Axi4OptionsType ;\n    variable OptVal        : out   integer\n  ) ;\n\n  ------------------------------------------------------------\n  procedure GetAxi4Parameter (\n  -----------------------------------------------------------\n    variable Params        : InOut ModelParametersPType ;\n    constant Operation     : in    Axi4OptionsType ;\n    variable OptVal        : out   std_logic_vector\n  ) ;\n  --\n  -- Remove after updating Axi4Lite VC\n  --\n--!!  alias SetAxiOption is SetAxi4Parameter[ModelParametersPType, Axi4OptionsType, boolean];\n--!!  alias SetAxiOption is SetAxi4Parameter[ModelParametersPType, Axi4OptionsType, integer];\n--!!  alias SetAxiOption is SetAxi4Parameter[ModelParametersPType, Axi4OptionsType, std_logic_vector];\n--!!  alias GetAxiOption is GetAxi4Parameter[ModelParametersPType, Axi4OptionsType, boolean];\n--!!  alias GetAxiOption is GetAxi4Parameter[ModelParametersPType, Axi4OptionsType, integer];\n--!!  alias GetAxiOption is GetAxi4Parameter[ModelParametersPType, Axi4OptionsType, std_logic_vector];\n\n\nend package Axi4OptionsPkg ;\n\n-- /////////////////////////////////////////////////////////////////////////////////////////\n-- /////////////////////////////////////////////////////////////////////////////////////////\n-- /////////////////////////////////////////////////////////////////////////////////////////\n-- /////////////////////////////////////////////////////////////////////////////////////////\n-- /////////////////////////////////////////////////////////////////////////////////////////\n-- /////////////////////////////////////////////////////////////////////////////////////////\n\npackage body Axi4OptionsPkg is\n\n  function resolved_max(A : Axi4UnresolvedOptionsVectorType) return Axi4UnresolvedOptionsType is\n  begin\n    return maximum(A) ;\n  end function resolved_max ;\n\n--   function resolved_max ( s : Axi4UnresolvedRespVectorEnumType) return Axi4UnresolvedRespEnumType is\n--   begin\n--     return maximum(s) ;\n--   end function resolved_max ; \n\n  ------------------------------------------------------------\n  type TbRespType_indexby_Integer is array (integer range <>) of Axi4RespEnumType;\n  constant RESP_TYPE_TB_TABLE : TbRespType_indexby_Integer := (\n      0   => OKAY,\n      1   => EXOKAY,\n      2   => SLVERR,\n      3   => DECERR\n    ) ;\n  function from_Axi4RespType (a: Axi4RespType) return Axi4RespEnumType is\n  begin\n    return RESP_TYPE_TB_TABLE(to_integer(a)) ;\n  end function from_Axi4RespType ;\n  \n  ------------------------------------------------------------\n  type RespType_indexby_TbRespType is array (Axi4RespEnumType) of Axi4RespType;\n  constant TB_TO_RESP_TYPE_TABLE : RespType_indexby_TbRespType := (\n      OKAY     => \"00\",\n      EXOKAY   => \"01\",\n      SLVERR   => \"10\",\n      DECERR   => \"11\"\n    ) ;\n  function to_Axi4RespType (a: Axi4RespEnumType) return Axi4RespType is\n  begin\n    return TB_TO_RESP_TYPE_TABLE(a) ; \n  end function to_Axi4RespType ;\n\n\n  --\n  --  Abstraction Layer to support SetModelOptions using enumerated values\n  --\n  ------------------------------------------------------------\n  procedure SetAxi4Options (\n  ------------------------------------------------------------\n    signal   TransactionRec : InOut AddressBusRecType ;\n    constant Option         : In    Axi4OptionsType ;\n    constant OptVal         : In    boolean\n  ) is\n  begin\n    SetModelOptions(TransactionRec, Axi4OptionsType'POS(Option), boolean'pos(OptVal)) ;\n  end procedure SetAxi4Options ;\n\n  ------------------------------------------------------------\n  procedure SetAxi4Options (\n  ------------------------------------------------------------\n    signal   TransactionRec : InOut AddressBusRecType ;\n    constant Option         : In    Axi4OptionsType ;\n    constant OptVal         : In    std_logic\n  ) is\n  begin\n    SetModelOptions(TransactionRec, Axi4OptionsType'POS(Option), std_logic'pos(OptVal)) ;\n  end procedure SetAxi4Options ;\n\n  ------------------------------------------------------------\n  procedure SetAxi4Options (\n  ------------------------------------------------------------\n    signal   TransactionRec : InOut AddressBusRecType ;\n    constant Option         : In    Axi4OptionsType ;\n    constant OptVal         : In    integer\n  ) is\n  begin\n    SetModelOptions(TransactionRec, Axi4OptionsType'POS(Option), OptVal) ;\n  end procedure SetAxi4Options ;\n\n  ------------------------------------------------------------\n  procedure SetAxi4Options (\n  ------------------------------------------------------------\n    signal   TransactionRec : InOut AddressBusRecType ;\n    constant Option         : In    Axi4OptionsType ;\n    constant OptVal         : In    std_logic_vector\n  ) is\n  begin\n    SetModelOptions(TransactionRec, Axi4OptionsType'POS(Option), OptVal) ;\n  end procedure SetAxi4Options ;\n\n  ------------------------------------------------------------\n  procedure SetAxi4Options (\n  ------------------------------------------------------------\n    signal   TransactionRec : InOut AddressBusRecType ;\n    constant Option         : In    Axi4OptionsType ;\n    constant OptVal         : In    Axi4RespEnumType\n  ) is\n  begin\n    SetModelOptions(TransactionRec, Axi4OptionsType'POS(Option), Axi4RespEnumType'pos(OptVal)) ;\n  end procedure SetAxi4Options ;\n\n  ------------------------------------------------------------\n  procedure GetAxi4Options (\n  ------------------------------------------------------------\n    signal   TransactionRec : InOut AddressBusRecType ;\n    constant Option         : In    Axi4OptionsType ;\n    variable OptVal         : Out   boolean\n  ) is\n    variable IntOptVal : integer ;\n  begin\n    GetModelOptions(TransactionRec, Axi4OptionsType'POS(Option), IntOptVal) ;\n    OptVal := IntOptVal >= 1 ;\n  end procedure GetAxi4Options ;\n\n  ------------------------------------------------------------\n  procedure GetAxi4Options (\n  ------------------------------------------------------------\n    signal   TransactionRec : InOut AddressBusRecType ;\n    constant Option         : In    Axi4OptionsType ;\n    variable OptVal         : Out   std_logic\n  ) is\n    variable IntOptVal : integer ;\n  begin\n    GetModelOptions(TransactionRec, Axi4OptionsType'POS(Option), IntOptVal) ;\n    OptVal := std_logic'val(IntOptVal) ;\n  end procedure GetAxi4Options ;\n\n  ------------------------------------------------------------\n  procedure GetAxi4Options (\n  ------------------------------------------------------------\n    signal   TransactionRec : InOut AddressBusRecType ;\n    constant Option         : In    Axi4OptionsType ;\n    variable OptVal         : Out   integer\n  ) is\n  begin\n    GetModelOptions(TransactionRec, Axi4OptionsType'POS(Option), OptVal) ;\n  end procedure GetAxi4Options ;\n\n  ------------------------------------------------------------\n  procedure GetAxi4Options (\n  ------------------------------------------------------------\n    signal   TransactionRec : InOut AddressBusRecType ;\n    constant Option         : In    Axi4OptionsType ;\n    variable OptVal         : Out   std_logic_vector\n  ) is\n  begin\n    GetModelOptions(TransactionRec, Axi4OptionsType'POS(Option), OptVal) ;\n  end procedure GetAxi4Options ;\n\n  ------------------------------------------------------------\n  procedure GetAxi4Options (\n  ------------------------------------------------------------\n    signal   TransactionRec : InOut AddressBusRecType ;\n    constant Option         : In    Axi4OptionsType ;\n    variable OptVal         : Out   Axi4RespEnumType\n  ) is\n    variable IntOptVal : integer ;\n  begin\n    GetModelOptions(TransactionRec, Axi4OptionsType'POS(Option), IntOptVal) ;\n    OptVal := Axi4RespEnumType'val(IntOptVal) ;\n  end procedure GetAxi4Options ;\n\n  --\n  -- Axi4 Verification Component Support Subprograms\n  --\n  ------------------------------------------------------------\n  impure function to_integer (Operation : Axi4OptionsType) return integer is \n  -----------------------------------------------------------\n  begin\n    return Axi4OptionsType'POS(Operation) ;\n  end function to_integer ;\n\n  ------------------------------------------------------------\n  function IsAxiParameter (Operation : Axi4OptionsType) return boolean is \n  -----------------------------------------------------------\n  begin\n    return (Operation < OPTIONS_MARKER) ;\n  end function IsAxiParameter ;\n\n  ------------------------------------------------------------\n  function IsAxiInterface (Operation : Axi4OptionsType) return boolean is \n  ------------------------------------------------------------\n  begin\n    return (Operation > OPTIONS_MARKER) ;\n  end function IsAxiInterface ;\n\n  ------------------------------------------------------------\n  procedure SetAxi4Parameter (\n  -----------------------------------------------------------\n    constant Params        : in    ModelParametersIDType ;\n    constant Operation     : in    Axi4OptionsType ;\n    constant OptVal        : in    boolean\n  ) is\n  begin\n    Set(Params, Axi4OptionsType'POS(Operation), OptVal) ;\n  end procedure SetAxi4Parameter ;\n\n  ------------------------------------------------------------\n  procedure SetAxi4Parameter (\n  -----------------------------------------------------------\n    constant Params        : in    ModelParametersIDType ;\n    constant Operation     : in    Axi4OptionsType ;\n    constant OptVal        : in    std_logic\n  ) is\n  begin\n    Set(Params, Axi4OptionsType'POS(Operation), std_logic'pos(OptVal)) ;\n  end procedure SetAxi4Parameter ;\n\n  ------------------------------------------------------------\n  procedure SetAxi4Parameter (\n  -----------------------------------------------------------\n    constant Params        : in    ModelParametersIDType ;\n    constant Operation     : in    Axi4OptionsType ;\n    constant OptVal        : in    integer\n  ) is\n  begin\n    Set(Params, Axi4OptionsType'POS(Operation), OptVal) ;\n  end procedure SetAxi4Parameter ;\n\n  ------------------------------------------------------------\n  procedure SetAxi4Parameter (\n  -----------------------------------------------------------\n    constant Params        : in    ModelParametersIDType ;\n    constant Operation     : in    Axi4OptionsType ;\n    constant OptVal        : in    std_logic_vector\n  ) is\n  begin\n    Set(Params, Axi4OptionsType'POS(Operation), OptVal) ;\n  end procedure SetAxi4Parameter ;\n\n  ------------------------------------------------------------\n  impure function GetAxi4Parameter (\n  -----------------------------------------------------------\n    constant Params        : in    ModelParametersIDType ;\n    constant Operation     : in    Axi4OptionsType \n  ) return boolean is\n  begin\n    return Get(Params, Axi4OptionsType'POS(Operation)) ;\n  end function GetAxi4Parameter ;\n\n  ------------------------------------------------------------\n  impure function GetAxi4Parameter (\n  -----------------------------------------------------------\n    constant Params        : in    ModelParametersIDType ;\n    constant Operation     : in    Axi4OptionsType \n  ) return std_logic is\n    variable IntOptval : integer ;\n  begin\n    IntOptVal:= Get(Params, Axi4OptionsType'POS(Operation)) ;\n    return std_logic'val(IntOptVal) ;\n  end function GetAxi4Parameter ;\n\n  ------------------------------------------------------------\n  impure function GetAxi4Parameter (\n  -----------------------------------------------------------\n    constant Params        : in    ModelParametersIDType ;\n    constant Operation     : in    Axi4OptionsType \n  ) return integer is\n  begin\n    return Get(Params, Axi4OptionsType'POS(Operation)) ;\n  end function GetAxi4Parameter ;\n\n  ------------------------------------------------------------\n  impure function GetAxi4Parameter (\n  -----------------------------------------------------------\n    constant Params        : in    ModelParametersIDType ;\n    constant Operation     : in    Axi4OptionsType \n  ) return std_logic_vector is \n  begin\n    return Get(Params, Axi4OptionsType'POS(Operation)) ;\n  end function GetAxi4Parameter ;\n  \n  ------------------------------------------------------------\n  impure function GetAxi4Parameter (\n  -----------------------------------------------------------\n    constant Params        : in    ModelParametersIDType ;\n    constant Operation     : in    Axi4OptionsType ;\n    constant Size          : in    natural\n  ) return std_logic_vector is \n  begin\n    return Get(Params, Axi4OptionsType'POS(Operation), Size) ;\n  end function GetAxi4Parameter ;\n  \n  ------------------------------------------------------------\n  procedure InitAxiOptions (\n  -----------------------------------------------------------\n    constant Params        : in ModelParametersIDType \n  ) is\n  begin\n    -- AXI4 Model Options\n    -- Ready timeout\n    SetAxi4Parameter(Params, WRITE_ADDRESS_READY_TIME_OUT,       25 ) ;\n    SetAxi4Parameter(Params, WRITE_DATA_READY_TIME_OUT,          25 ) ;\n    SetAxi4Parameter(Params, WRITE_RESPONSE_READY_TIME_OUT,      25 ) ; -- S\n    SetAxi4Parameter(Params, READ_ADDRESS_READY_TIME_OUT,        25 ) ;\n    SetAxi4Parameter(Params, READ_DATA_READY_TIME_OUT,           25 ) ; -- S\n\n    -- Ready Controls\n    SetAxi4Parameter(Params, WRITE_ADDRESS_READY_BEFORE_VALID,   TRUE) ; -- S\n    SetAxi4Parameter(Params, WRITE_DATA_READY_BEFORE_VALID,      TRUE) ; -- S\n    SetAxi4Parameter(Params, WRITE_RESPONSE_READY_BEFORE_VALID,  TRUE) ;\n    SetAxi4Parameter(Params, READ_ADDRESS_READY_BEFORE_VALID,    TRUE) ; -- S\n    SetAxi4Parameter(Params, READ_DATA_READY_BEFORE_VALID,       TRUE) ;\n\n    -- Ready Delay\n    SetAxi4Parameter(Params, WRITE_ADDRESS_READY_DELAY_CYCLES,   0) ;  -- S\n    SetAxi4Parameter(Params, WRITE_DATA_READY_DELAY_CYCLES,      0) ;  -- S\n    SetAxi4Parameter(Params, WRITE_RESPONSE_READY_DELAY_CYCLES,  0) ;\n    SetAxi4Parameter(Params, READ_ADDRESS_READY_DELAY_CYCLES,    0) ;  -- S\n    SetAxi4Parameter(Params, READ_DATA_READY_DELAY_CYCLES,       0) ;\n\n    -- Valid Timeouts\n    SetAxi4Parameter(Params, WRITE_RESPONSE_VALID_TIME_OUT,      8192) ;\n    SetAxi4Parameter(Params, READ_DATA_VALID_TIME_OUT,           25) ;\n\n    -- Valid Delays\n    SetAxi4Parameter(Params, WRITE_ADDRESS_VALID_DELAY_CYCLES,     0) ;\n    SetAxi4Parameter(Params, WRITE_DATA_VALID_DELAY_CYCLES,        0) ;\n    SetAxi4Parameter(Params, WRITE_DATA_VALID_BURST_DELAY_CYCLES,  0) ;\n    SetAxi4Parameter(Params, WRITE_RESPONSE_VALID_DELAY_CYCLES,    0) ;  -- S\n    SetAxi4Parameter(Params, READ_ADDRESS_VALID_DELAY_CYCLES,      0) ;\n    SetAxi4Parameter(Params, READ_DATA_VALID_DELAY_CYCLES,         0) ;  -- S\n    SetAxi4Parameter(Params, READ_DATA_VALID_BURST_DELAY_CYCLES,   0) ;  -- S\n\n    -- Write Data Filtering\n    SetAxi4Parameter(Params, WRITE_DATA_FILTER_UNDRIVEN,            TRUE) ;\n    SetAxi4Parameter(Params, WRITE_DATA_UNDRIVEN_VALUE,             '0') ;\n  end procedure InitAxiOptions ;\n\n  ------------------------------------------------------------\n  procedure InitAxiOptions (\n  -----------------------------------------------------------\n    signal Params        : InOut ModelParametersIDType ;\n           Name          : in    string ; \n           ParentID      : in    AlertLogIDType\n  ) is\n    variable vParams : ModelParametersIDType ; \n  begin\n    -- \n    -- Size the Data structure, such that it creates 1 parameter for each option\n    vParams := NewID(Name, to_integer(OPTIONS_MARKER), ParentID); \n    Params  <= vParams ; \n    InitAxiOptions(vParams) ; \n    \n  end procedure InitAxiOptions ;\n\n\n  ------------------------------------------------------------\n  procedure SetAxi4InterfaceDefault (\n  -----------------------------------------------------------\n    variable AxiBus        : InOut Axi4BaseRecType ;\n    constant Operation     : In    Axi4OptionsType ;\n    constant OptVal        : In    integer\n  ) is\n  begin\n    case Operation is\n      -- AXI\n      when AWPROT =>       AxiBus.WriteAddress.Prot   := to_slv(OptVal, AxiBus.WriteAddress.Prot'length) ;\n\n      -- AXI4 Full\n      when AWID =>         AxiBus.WriteAddress.ID     := to_slv(OptVal, AxiBus.WriteAddress.ID'length) ;\n      when AWSIZE =>       AxiBus.WriteAddress.Size   := to_slv(OptVal, AxiBus.WriteAddress.Size'length) ;\n      when AWBURST =>      AxiBus.WriteAddress.Burst  := to_slv(OptVal, AxiBus.WriteAddress.Burst'length) ;\n      when AWLOCK =>       AxiBus.WriteAddress.Lock   := '1' when OptVal mod 2 = 1 else '0' ;\n      when AWCACHE =>      AxiBus.WriteAddress.Cache  := to_slv(OptVal, AxiBus.WriteAddress.Cache'length) ;\n      when AWQOS =>        AxiBus.WriteAddress.QOS    := to_slv(OptVal, AxiBus.WriteAddress.QOS'length) ;\n      when AWREGION =>     AxiBus.WriteAddress.Region := to_slv(OptVal, AxiBus.WriteAddress.Region'length) ;\n      when AWUSER =>       AxiBus.WriteAddress.User   := to_slv(OptVal, AxiBus.WriteAddress.User'length) ;\n\n      -- Write Data:  AXI\n      -- AXI4 Full\n      when WLAST =>        AxiBus.WriteData.Last       := '1' when OptVal mod 2 = 1 else '0' ;\n      when WUSER =>        AxiBus.WriteData.User       := to_slv(OptVal, AxiBus.WriteData.User'length) ;\n\n      -- AXI3\n      when WID =>          AxiBus.WriteData.ID         := to_slv(OptVal, AxiBus.WriteData.ID'length) ;\n\n      -- Write Response:  AXI\n      when BRESP =>        AxiBus.WriteResponse.Resp   := to_slv(OptVal, AxiBus.WriteResponse.Resp'length) ;\n\n      -- AXI4 Full\n      when BID =>          AxiBus.WriteResponse.ID     := to_slv(OptVal, AxiBus.WriteResponse.ID'length) ;\n      when BUSER =>        AxiBus.WriteResponse.User   := to_slv(OptVal, AxiBus.WriteResponse.User'length) ;\n\n      -- Read Address:  AXI\n      when ARPROT =>       AxiBus.ReadAddress.Prot    := to_slv(OptVal, AxiBus.ReadAddress.Prot'length) ;\n\n      -- AXI4 Full\n      when ARID =>         AxiBus.ReadAddress.ID      := to_slv(OptVal, AxiBus.ReadAddress.ID'length) ;\n      when ARSIZE =>       AxiBus.ReadAddress.Size    := to_slv(OptVal, AxiBus.ReadAddress.Size'length) ;\n      when ARBURST =>      AxiBus.ReadAddress.Burst   := to_slv(OptVal, AxiBus.ReadAddress.Burst'length) ;\n      when ARLOCK =>       AxiBus.ReadAddress.Lock    := '1' when OptVal mod 2 = 1 else '0' ;\n      when ARCACHE =>      AxiBus.ReadAddress.Cache   := to_slv(OptVal, AxiBus.ReadAddress.Cache'length) ;\n      when ARQOS =>        AxiBus.ReadAddress.QOS     := to_slv(OptVal, AxiBus.ReadAddress.QOS'length) ;\n      when ARREGION =>     AxiBus.ReadAddress.Region  := to_slv(OptVal, AxiBus.ReadAddress.Region'length) ;\n      when ARUSER =>       AxiBus.ReadAddress.User    := to_slv(OptVal, AxiBus.ReadAddress.User'length) ;\n\n      -- Read Data: AXI\n      when RRESP =>         AxiBus.ReadData.Resp       := to_slv(OptVal, AxiBus.ReadData.Resp'length) ;\n\n      -- AXI4 Full\n      when RID =>           AxiBus.ReadData.ID         := to_slv(OptVal, AxiBus.ReadData.ID'length) ;\n      when RLAST =>         AxiBus.ReadData.Last       := '1' when OptVal mod 2 = 1 else '0' ;\n      when RUSER =>         AxiBus.ReadData.User       := to_slv(OptVal, AxiBus.ReadData.User'length) ;\n\n      -- The End -- Done\n      when others =>\n        Alert(\"Unknown model option\", FAILURE) ;\n\n    end case ;\n  end procedure SetAxi4InterfaceDefault ;\n\n  ------------------------------------------------------------\n  impure function GetAxi4InterfaceDefault (\n  -----------------------------------------------------------\n    constant AxiBus        : in  Axi4BaseRecType ;\n    constant Operation     : in  Axi4OptionsType\n  ) return integer is\n  begin\n    case Operation is\n      -- Write Address\n      -- AXI\n      when AWPROT =>             return to_integer(AxiBus.WriteAddress.Prot);\n\n      -- AXI4 Full\n      when AWID =>               return to_integer(AxiBus.WriteAddress.ID    ) ;\n      when AWSIZE =>             return to_integer(AxiBus.WriteAddress.Size  ) ;\n      when AWBURST =>            return to_integer(AxiBus.WriteAddress.Burst ) ;\n      when AWLOCK =>             return to_integer(AxiBus.WriteAddress.Lock  ) ;\n      when AWCACHE =>            return to_integer(AxiBus.WriteAddress.Cache ) ;\n      when AWQOS =>              return to_integer(AxiBus.WriteAddress.QOS   ) ;\n      when AWREGION =>           return to_integer(AxiBus.WriteAddress.Region) ;\n      when AWUSER =>             return to_integer(AxiBus.WriteAddress.User  ) ;\n\n      -- Write Data\n      -- AXI4 Full\n      when WLAST =>              return to_integer(AxiBus.WriteData.Last) ;\n      when WUSER =>              return to_integer(AxiBus.WriteData.User) ;\n\n      -- AXI3\n      when WID =>                return to_integer(AxiBus.WriteData.ID) ;\n\n      -- Write Response\n      when BRESP =>              return to_integer(AxiBus.WriteResponse.Resp) ;\n\n      -- AXI4 Full\n      when BID =>                return to_integer(AxiBus.WriteResponse.ID  ) ;\n      when BUSER =>              return to_integer(AxiBus.WriteResponse.User) ;\n\n      -- Read Address\n      when ARPROT =>             return to_integer(AxiBus.ReadAddress.Prot) ;\n\n      -- AXI4 Full\n      when ARID =>               return to_integer(AxiBus.ReadAddress.ID    ) ;\n      when ARSIZE =>             return to_integer(AxiBus.ReadAddress.Size  ) ;\n      when ARBURST =>            return to_integer(AxiBus.ReadAddress.Burst ) ;\n      when ARLOCK =>             return to_integer(AxiBus.ReadAddress.Lock  ) ;\n      when ARCACHE =>            return to_integer(AxiBus.ReadAddress.Cache ) ;\n      when ARQOS =>              return to_integer(AxiBus.ReadAddress.QOS   ) ;\n      when ARREGION =>           return to_integer(AxiBus.ReadAddress.Region) ;\n      when ARUSER =>             return to_integer(AxiBus.ReadAddress.User  ) ;\n\n      -- Read Data\n      when RRESP =>              return to_integer(AxiBus.ReadData.Resp) ;\n\n      -- AXI4 Full\n      when RID =>                return to_integer(AxiBus.ReadData.ID   ) ;\n      when RLAST =>              return to_integer(AxiBus.ReadData.Last ) ;\n      when RUSER =>              return to_integer(AxiBus.ReadData.User ) ;\n\n      -- The End -- Done\n      when others =>\n--        Alert(ModelID, \"Unknown model option\", FAILURE) ;\n        Alert(\"Unknown model option\", FAILURE) ;\n        return integer'left ;\n\n    end case ;\n  end function GetAxi4InterfaceDefault ;\n\n  ------------------------------------------------------------\n  procedure SetAxi4LiteInterfaceDefault (\n  -----------------------------------------------------------\n    variable AxiBus        : InOut Axi4LiteRecType ;\n    constant Operation     : In    Axi4OptionsType ;\n    constant OptVal        : In    integer\n  ) is\n  begin\n    case Operation is\n      -- AXI\n      when AWPROT =>       AxiBus.WriteAddress.Prot   := to_slv(OptVal, AxiBus.WriteAddress.Prot'length) ;\n\n      -- Write Response:  AXI\n      when BRESP =>        AxiBus.WriteResponse.Resp   := to_slv(OptVal, AxiBus.WriteResponse.Resp'length) ;\n\n      -- Read Address:  AXI\n      when ARPROT =>       AxiBus.ReadAddress.Prot    := to_slv(OptVal, AxiBus.ReadAddress.Prot'length) ;\n\n      -- Read Data: AXI\n      when RRESP =>         AxiBus.ReadData.Resp       := to_slv(OptVal, AxiBus.ReadData.Resp'length) ;\n\n      -- The End -- Done\n      when others =>\n        Alert(\"Unknown model option\", FAILURE) ;\n\n    end case ;\n  end procedure SetAxi4LiteInterfaceDefault ;\n\n  ------------------------------------------------------------\n  impure function GetAxi4LiteInterfaceDefault (\n  -----------------------------------------------------------\n    constant AxiBus        : in  Axi4LiteRecType ;\n    constant Operation     : in  Axi4OptionsType\n  ) return integer is\n  begin\n    case Operation is\n      -- Write Address\n      when AWPROT =>             return to_integer(AxiBus.WriteAddress.Prot);\n\n      -- Write Response\n      when BRESP =>              return to_integer(AxiBus.WriteResponse.Resp) ;\n\n      -- Read Address\n      when ARPROT =>             return to_integer(AxiBus.ReadAddress.Prot) ;\n\n      -- Read Data\n      when RRESP =>              return to_integer(AxiBus.ReadData.Resp) ;\n\n      -- The End -- Done\n      when others =>\n--        Alert(ModelID, \"Unknown model option\", FAILURE) ;\n        Alert(\"Unknown model option\", FAILURE) ;\n        return integer'left ;\n\n    end case ;\n  end function GetAxi4LiteInterfaceDefault ;\n\n-- !! These are deprecated\n-- !! These are deprecated\n-- !! These are deprecated\n  ------------------------------------------------------------\n  procedure SetAxi4Parameter (\n  -----------------------------------------------------------\n    variable Params        : InOut ModelParametersPType ;\n    constant Operation     : in    Axi4OptionsType ;\n    constant OptVal        : in    boolean\n  ) is\n  begin\n    Params.Set(Axi4OptionsType'POS(Operation), OptVal) ;\n  end procedure SetAxi4Parameter ;\n\n  ------------------------------------------------------------\n  procedure SetAxi4Parameter (\n  -----------------------------------------------------------\n    variable Params        : InOut ModelParametersPType ;\n    constant Operation     : in    Axi4OptionsType ;\n    constant OptVal        : in    std_logic\n  ) is\n  begin\n    Params.Set(Axi4OptionsType'POS(Operation), std_logic'pos(OptVal)) ;\n  end procedure SetAxi4Parameter ;\n\n  ------------------------------------------------------------\n  procedure SetAxi4Parameter (\n  -----------------------------------------------------------\n    variable Params        : InOut ModelParametersPType ;\n    constant Operation     : in    Axi4OptionsType ;\n    constant OptVal        : in    integer\n  ) is\n  begin\n    Params.Set(Axi4OptionsType'POS(Operation), OptVal) ;\n  end procedure SetAxi4Parameter ;\n\n  ------------------------------------------------------------\n  procedure SetAxi4Parameter (\n  -----------------------------------------------------------\n    variable Params        : InOut ModelParametersPType ;\n    constant Operation     : in    Axi4OptionsType ;\n    constant OptVal        : in    std_logic_vector\n  ) is\n  begin\n    Params.Set(Axi4OptionsType'POS(Operation), OptVal) ;\n  end procedure SetAxi4Parameter ;\n\n  ------------------------------------------------------------\n  procedure GetAxi4Parameter (\n  -----------------------------------------------------------\n    variable Params        : InOut ModelParametersPType ;\n    constant Operation     : in    Axi4OptionsType ;\n    variable OptVal        : out   boolean\n  ) is\n  begin\n    OptVal:= Params.Get(Axi4OptionsType'POS(Operation)) ;\n  end procedure GetAxi4Parameter ;\n\n  ------------------------------------------------------------\n  procedure GetAxi4Parameter (\n  -----------------------------------------------------------\n    variable Params        : InOut ModelParametersPType ;\n    constant Operation     : in    Axi4OptionsType ;\n    variable OptVal        : out   std_logic\n  ) is\n    variable IntOptval : integer ;\n  begin\n    IntOptVal:= Params.Get(Axi4OptionsType'POS(Operation)) ;\n    OptVal := std_logic'val(IntOptVal) ;\n  end procedure GetAxi4Parameter ;\n\n  ------------------------------------------------------------\n  procedure GetAxi4Parameter (\n  -----------------------------------------------------------\n    variable Params        : InOut ModelParametersPType ;\n    constant Operation     : in    Axi4OptionsType ;\n    variable OptVal        : out   integer\n  ) is\n  begin\n    OptVal:= Params.Get(Axi4OptionsType'POS(Operation)) ;\n  end procedure GetAxi4Parameter ;\n\n  ------------------------------------------------------------\n  procedure GetAxi4Parameter (\n  -----------------------------------------------------------\n    variable Params        : InOut ModelParametersPType ;\n    constant Operation     : in    Axi4OptionsType ;\n    variable OptVal        : out   std_logic_vector\n  ) is\n  begin\n    OptVal:= Params.Get(Axi4OptionsType'POS(Operation), OptVal'length) ;\n  end procedure GetAxi4Parameter ;\n\n  ------------------------------------------------------------\n  procedure InitAxiOptions (\n  -----------------------------------------------------------\n    variable Params        : InOut ModelParametersPType --;\n--    signal   AxiBus        : In    Axi4BaseRecType\n  ) is\n  begin\n    -- Size the Data structure, such that it creates 1 parameter for each option\n    Params.Init(Axi4OptionsType'POS(OPTIONS_MARKER)) ;\n\n    -- AXI4 Model Options\n    -- Ready timeout\n    SetAxi4Parameter(Params, WRITE_ADDRESS_READY_TIME_OUT,       25 ) ;\n    SetAxi4Parameter(Params, WRITE_DATA_READY_TIME_OUT,          25 ) ;\n    SetAxi4Parameter(Params, WRITE_RESPONSE_READY_TIME_OUT,      25 ) ; -- S\n    SetAxi4Parameter(Params, READ_ADDRESS_READY_TIME_OUT,        25 ) ;\n    SetAxi4Parameter(Params, READ_DATA_READY_TIME_OUT,           25 ) ; -- S\n\n    -- Ready Controls\n    SetAxi4Parameter(Params, WRITE_ADDRESS_READY_BEFORE_VALID,   TRUE) ; -- S\n    SetAxi4Parameter(Params, WRITE_DATA_READY_BEFORE_VALID,      TRUE) ; -- S\n    SetAxi4Parameter(Params, WRITE_RESPONSE_READY_BEFORE_VALID,  TRUE) ;\n    SetAxi4Parameter(Params, READ_ADDRESS_READY_BEFORE_VALID,    TRUE) ; -- S\n    SetAxi4Parameter(Params, READ_DATA_READY_BEFORE_VALID,       TRUE) ;\n\n    -- Ready Delay\n    SetAxi4Parameter(Params, WRITE_ADDRESS_READY_DELAY_CYCLES,   0) ;  -- S\n    SetAxi4Parameter(Params, WRITE_DATA_READY_DELAY_CYCLES,      0) ;  -- S\n    SetAxi4Parameter(Params, WRITE_RESPONSE_READY_DELAY_CYCLES,  0) ;\n    SetAxi4Parameter(Params, READ_ADDRESS_READY_DELAY_CYCLES,    0) ;  -- S\n    SetAxi4Parameter(Params, READ_DATA_READY_DELAY_CYCLES,       0) ;\n\n    -- Valid Timeouts\n    SetAxi4Parameter(Params, WRITE_RESPONSE_VALID_TIME_OUT,      8192) ;\n    SetAxi4Parameter(Params, READ_DATA_VALID_TIME_OUT,           25) ;\n\n    -- Valid Delays\n    SetAxi4Parameter(Params, WRITE_ADDRESS_VALID_DELAY_CYCLES,     0) ;\n    SetAxi4Parameter(Params, WRITE_DATA_VALID_DELAY_CYCLES,        0) ;\n    SetAxi4Parameter(Params, WRITE_DATA_VALID_BURST_DELAY_CYCLES,  0) ;\n    SetAxi4Parameter(Params, WRITE_RESPONSE_VALID_DELAY_CYCLES,    0) ;  -- S\n    SetAxi4Parameter(Params, READ_ADDRESS_VALID_DELAY_CYCLES,      0) ;\n    SetAxi4Parameter(Params, READ_DATA_VALID_DELAY_CYCLES,         0) ;  -- S\n    SetAxi4Parameter(Params, READ_DATA_VALID_BURST_DELAY_CYCLES,   0) ;  -- S\n\n    -- Write Data Filtering\n    SetAxi4Parameter(Params, WRITE_DATA_FILTER_UNDRIVEN,            TRUE) ;\n    SetAxi4Parameter(Params, WRITE_DATA_UNDRIVEN_VALUE,             '0') ;\n\n--    -- AXI Interface Settings\n--    -- Set all AXI bus parameters to 0 and Size them to match the corresponding AXI Bus signal.\n--    -- Write Address\n--    SetAxi4Parameter(Params, AWPROT,    to_slv(0, AxiBus.WriteAddress.Prot'length)) ;\n--    SetAxi4Parameter(Params, AWID,      to_slv(0, AxiBus.WriteAddress.ID'length)) ;\n--    SetAxi4Parameter(Params, AWSIZE,    to_slv(0, AxiBus.WriteAddress.Size'length)) ;\n--    SetAxi4Parameter(Params, AWBURST,   to_slv(0, AxiBus.WriteAddress.Burst'length)) ;\n--    SetAxi4Parameter(Params, AWLOCK,    to_slv(0, 1)) ;\n--    SetAxi4Parameter(Params, AWCACHE,   to_slv(0, AxiBus.WriteAddress.Cache'length)) ;\n--    SetAxi4Parameter(Params, AWQOS,     to_slv(0, AxiBus.WriteAddress.Region'length)) ;\n--    SetAxi4Parameter(Params, AWREGION,  to_slv(0, AxiBus.WriteAddress.Size'length)) ;\n--    SetAxi4Parameter(Params, AWUSER,    to_slv(0, AxiBus.WriteAddress.User'length)) ;\n--    -- Write Data\n--    SetAxi4Parameter(Params, WLAST,     to_slv(0, 1)) ;\n--    SetAxi4Parameter(Params, WUSER,     to_slv(0, AxiBus.WriteData.User'length)) ;\n--    SetAxi4Parameter(Params, WID,       to_slv(0, AxiBus.WriteData.ID'length)) ;\n--    -- Write Response\n--    SetAxi4Parameter(Params, BRESP,     to_slv(0, AxiBus.WriteResponse.Resp'length)) ;\n--    SetAxi4Parameter(Params, BID,       to_slv(0, AxiBus.WriteResponse.ID'length)) ;\n--    SetAxi4Parameter(Params, BUSER,     to_slv(0, AxiBus.WriteResponse.User'length)) ;\n--    -- Read Address\n--    SetAxi4Parameter(Params, ARPROT,    to_slv(0, AxiBus.ReadAddress.Prot'length)) ;\n--    SetAxi4Parameter(Params, ARID,      to_slv(0, AxiBus.ReadAddress.ID'length)) ;\n--    SetAxi4Parameter(Params, ARSIZE,    to_slv(0, AxiBus.ReadAddress.Size'length)) ;\n--    SetAxi4Parameter(Params, ARBURST,   to_slv(0, AxiBus.ReadAddress.Burst'length)) ;\n--    SetAxi4Parameter(Params, ARLOCK,    to_slv(0, 1)) ;\n--    SetAxi4Parameter(Params, ARCACHE,   to_slv(0, AxiBus.ReadAddress.Cache'length)) ;\n--    SetAxi4Parameter(Params, ARQOS,     to_slv(0, AxiBus.ReadAddress.QOS'length)) ;\n--    SetAxi4Parameter(Params, ARREGION,  to_slv(0, AxiBus.ReadAddress.Region'length)) ;\n--    SetAxi4Parameter(Params, ARUSER,    to_slv(0, AxiBus.ReadAddress.User'length)) ;\n--    -- Read Data\n--    SetAxi4Parameter(Params, RRESP,     to_slv(0, AxiBus.ReadData.Resp'length)) ;\n--    SetAxi4Parameter(Params, RID,       to_slv(0, AxiBus.ReadData.ID'length)) ;\n--    SetAxi4Parameter(Params, RLAST,     to_slv(0, 1)) ;\n--    SetAxi4Parameter(Params, RUSER,     to_slv(0, AxiBus.ReadData.User'length)) ;\n  end procedure InitAxiOptions ;\n\nend package body Axi4OptionsPkg ;","lang":"vhdl"};
processSrcData(g_data);
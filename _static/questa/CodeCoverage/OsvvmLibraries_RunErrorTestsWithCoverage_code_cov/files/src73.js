var g_data = {"name":"C:/OsvvmLibraries/Ethernet/TestStandAlone/TbStandAlone.vhd","src":"--\n--  File Name:         TbStandAlone.vhd\n--  Design Unit Name:  TbStandAlone\n--  Revision:          OSVVM MODELS STANDARD VERSION\n--\n--  Maintainer:        Jim Lewis      email:  jim@synthworks.com\n--  Contributor(s):\n--     Jim Lewis      jim@synthworks.com\n--\n--\n--  Description:\n--      Top level testbench for AxiStreamTransmitter and AxiStreamReceiver\n--\n--\n--  Developed by:\n--        SynthWorks Design Inc.\n--        VHDL Training Classes\n--        http://www.SynthWorks.com\n--\n--  Revision History:\n--    Date      Version    Description\n--    10/2011   2022.10    Initial revision\n--\n--\n--  This file is part of OSVVM.\n--  \n--  Copyright (c) 2022 by SynthWorks Design Inc.  \n--  \n--  Licensed under the Apache License, Version 2.0 (the \"License\");\n--  you may not use this file except in compliance with the License.\n--  You may obtain a copy of the License at\n--  \n--      https://www.apache.org/licenses/LICENSE-2.0\n--  \n--  Unless required by applicable law or agreed to in writing, software\n--  distributed under the License is distributed on an \"AS IS\" BASIS,\n--  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n--  See the License for the specific language governing permissions and\n--  limitations under the License.\n--  \nlibrary ieee ;\n  use ieee.std_logic_1164.all ;\n  use ieee.numeric_std.all ;\n  use ieee.numeric_std_unsigned.all ;\n\nlibrary osvvm ;\n    context osvvm.OsvvmContext ;\n    \nlibrary osvvm_ethernet ;\n    context osvvm_ethernet.xMiiContext ;\n    \nentity TbStandAlone is\n  generic (\n    MII_INTERFACE : xMiiInterfaceType := GMII ;\n    MII_BPS       : xMiiBpsType       := BPS_1G \n  ) ;\nend entity TbStandAlone ; \narchitecture TestHarness of TbStandAlone is\n\n  constant tpd : time := 1 ns ; \n\n  component TestCtrl is\n    port (\n      -- Transaction Interfaces\n      MacTxRec     : inout StreamRecType ;  -- Output from MAC\n      MacRxRec     : inout StreamRecType ;  -- Input to MAC\n\n      PhyTxRec     : inout StreamRecType ;  -- Input to Phy\n      PhyRxRec     : inout StreamRecType    -- Output from Phy\n    ) ;\n  end component TestCtrl ;\n\n  -- xMii Transmitter Functional Interface\n  signal GTx_Clk   : std_logic ;  -- GMII, RGMII\n  signal Tx_Clk    : std_logic ;  -- MII\n  signal TxD       : std_logic_vector(0 to 7) ; \n  signal Tx_En     : std_logic ; \n  signal Tx_Er     : std_logic ; \n  signal Tx_Ctl    : std_logic ; \n  \n  -- xMii Receiver Interface\n  signal Rx_Clk    : std_logic ; \n  signal RxD       : std_logic_vector(0 to 7) ; \n  signal Rx_Dv     : std_logic ; \n  signal Rx_Er     : std_logic ; \n  signal Rx_Ctl    : std_logic ; \n  signal Crs       : std_logic ; \n  signal Col       : std_logic ; \n  \n  -- Testbench Transaction Interface\n  signal PhyTxRec     : EthernetRecType ;  -- input to Phy\n  signal PhyRxRec     : EthernetRecType ;  -- output from Phy\n  signal MacRxRec     : EthernetRecType ;  -- input to MAC\n  signal MacTxRec     : EthernetRecType ;  -- output from MAC\n\nbegin\n\n  process \n  begin\n    log(\"Generic settings.  MII_INTERFACE = \" & to_string(MII_INTERFACE) & \".   MII_BPS = \" & to_string(MII_BPS)) ; \n    wait ; \n  end process ; \n \n  xMiiPhy_1 : xMiiPhy \n    generic map (\n      MII_INTERFACE  => MII_INTERFACE,\n      MII_BPS        => MII_BPS, \n      DEFAULT_DELAY  => tpd\n    ) \n    port map (\n      -- xMii Transmitter Functional Interface\n      GTx_Clk       => GTx_Clk      ,\n      Tx_Clk        => Tx_Clk       ,\n      TxD           => TxD          ,\n      Tx_En         => Tx_En        ,\n      Tx_Er         => Tx_Er        ,\n      Tx_Ctl        => Tx_Ctl       ,\n      \n      -- xMii Receiver Interface\n      Rx_Clk        => Rx_Clk       ,\n      RxD           => RxD          ,\n      Rx_Dv         => Rx_Dv        ,\n      Rx_Er         => Rx_Er        ,\n      Rx_Ctl        => Rx_Ctl       ,\n      Crs           => Crs          ,\n      Col           => Col          ,\n      \n      -- Testbench Transaction Interface\n      PhyTxRec     => PhyTxRec    ,\n      PhyRxRec     => PhyRxRec\n    ) ;\n\n  xMiiMac_1 : xMiiMac \n    generic map (\n      MII_INTERFACE  => MII_INTERFACE,\n      MII_BPS        => MII_BPS, \n      DEFAULT_DELAY  => tpd\n    ) \n    port map (\n      -- xMii Transmitter Functional Interface\n      GTx_Clk       => GTx_Clk      ,\n      Tx_Clk        => Tx_Clk       ,\n      TxD           => TxD          ,\n      Tx_En         => Tx_En        ,\n      Tx_Er         => Tx_Er        ,\n      Tx_Ctl        => Tx_Ctl       ,\n      \n      -- xMii Receiver Interface\n      Rx_Clk        => Rx_Clk       ,\n      RxD           => RxD          ,\n      Rx_Dv         => Rx_Dv        ,\n      Rx_Er         => Rx_Er        ,\n      Rx_Ctl        => Rx_Ctl       ,\n      Crs           => Crs          ,\n      Col           => Col          ,\n      \n      -- Testbench Transaction Interface\n      MacTxRec     => MacTxRec    ,\n      MacRxRec     => MacRxRec\n    ) ;\n  \n  \n  TestCtrl_1 : TestCtrl\n  port map ( \n    -- Testbench Transaction Interfaces\n      MacTxRec     => MacTxRec,\n      MacRxRec     => MacRxRec,\n\n      PhyTxRec     => PhyTxRec,\n      PhyRxRec     => PhyRxRec\n  ) ; \n\nend architecture TestHarness ;","lang":"vhdl"};
processSrcData(g_data);
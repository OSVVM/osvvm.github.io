var g_data = {"name":"C:/OsvvmLibraries/Common/src/ModelParametersSingletonPkg.vhd","src":"--\n--  File Name:         ModelParametersSingletonPkg.vhd\n--  Design Unit Name:  ModelParametersSingletonPkg\n--  Revision:          OSVVM MODELS STANDARD VERSION\n--\n--  Author:      Rob Gaddi  <rgaddi@highlandtechnology.com>\n--  Company      Highland Technology, Inc.\n--\n--  Contributor(s):\n--     Jim Lewis      jim@synthworks.com\n--\n--\n--  Description:\n--      Defines ModelParametersPType\n--\n--  Revision History:\n--    Date      Version    Description\n--    09/2023   2023.09    Made into Singleton\n--    05/2020   2020.05    Added handling to also store std_logic_vector values\n--                         Added AlertLogID for error handling\n--    05/2020   NONE       Refactored from AbstractMmPkg.vhd\n--                      \n--\n--\n--  This file is part of OSVVM.\n--\n--  Copyright (c) 2020 by Highland Technology\n--  Copyright (c) 2020-2023 by SynthWorks Design Inc.\n--\n--\n--  Licensed under the Apache License, Version 2.0 (the \"License\");\n--  you may not use this file except in compliance with the License.\n--  You may obtain a copy of the License at\n--\n--      https://www.apache.org/licenses/LICENSE-2.0\n--\n--  Unless required by applicable law or agreed to in writing, software\n--  distributed under the License is distributed on an \"AS IS\" BASIS,\n--  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n--  See the License for the specific language governing permissions and\n--  limitations under the License.\n--\n\nlibrary ieee;\nuse ieee.std_logic_1164.all;\nuse ieee.numeric_std.all;\nuse ieee.numeric_std_unsigned.all;\nuse std.textio.all ; \n\nlibrary osvvm;\ncontext osvvm.OsvvmContext ; \n\n\npackage ModelParametersSingletonPkg is\n\n  type ModelParametersIDType is record\n      ID             : integer_max ;\n  end record ModelParametersIDType ; \n  \n  constant OSVVM_MODEL_PARAM_ALERTLOG_ID : AlertLogIDType := OSVVM_ALERTLOG_ID ;\n  \n  type ModelParametersIDArrayType is array (integer range <>) of ModelParametersIDType ;  \n  \n  ------------------------------------------------------------\n  --- ///////////////////////////////////////////////////////////////////////////\n  ------------------------------------------------------------\n  impure function NewID (\n    Name                : String ;\n    NumParams           : positive ; \n    ParentID            : AlertLogIDType          := OSVVM_MODEL_PARAM_ALERTLOG_ID ;\n    ReportMode          : AlertLogReportModeType  := DISABLED ;\n    Search              : NameSearchType          := PRIVATE_NAME ;\n    PrintParent         : AlertLogPrintParentType := PRINT_NAME_AND_PARENT\n  ) return ModelParametersIDType ;\n  \n  procedure Init(ID : ModelParametersIDType; NumParams : in positive);\n  \n  procedure Set(ID : ModelParametersIDType; Index: in natural; Data: in integer);\n  procedure Set(ID : ModelParametersIDType; Data:  in integer_vector);\n  procedure Set(ID : ModelParametersIDType; Index: in natural; Data: in integer; Size: positive);\n  procedure Set(ID : ModelParametersIDType; Index: in natural; Data: in boolean);\n  procedure Set(ID : ModelParametersIDType; Index: in natural; Data: in std_logic_vector);\n  \n  impure function Get(ID : ModelParametersIDType; Index: natural) return integer;\n  impure function Get(ID : ModelParametersIDType; Index: natural) return boolean;\n  impure function Get(ID : ModelParametersIDType; Index: natural) return std_logic_vector;\n  impure function Get(ID : ModelParametersIDType; Index: natural; Size: natural) return std_logic_vector;\n  \n  ------------------------------------------------------------\n  impure function GetAlertLogID (ID : ModelParametersIDType) return AlertLogIDType ;\n\nend package ModelParametersSingletonPkg;\n\npackage body ModelParametersSingletonPkg is\n	\n	type ModelParametersSingletonType is protected\n    impure function NewID (\n      Name                : String ;\n      NumParams           : positive ; \n      ParentID            : AlertLogIDType          := OSVVM_MODEL_PARAM_ALERTLOG_ID ;\n      ReportMode          : AlertLogReportModeType  := DISABLED ;\n      Search              : NameSearchType          := PRIVATE_NAME ;\n      PrintParent         : AlertLogPrintParentType := PRINT_NAME_AND_PARENT\n    ) return ModelParametersIDType ;\n\n		procedure Init(ID : ModelParametersIDType; NumParams : in positive);\n		\n		procedure Set(ID : ModelParametersIDType; Index: in natural; Data: in integer);\n		procedure Set(ID : ModelParametersIDType; Data:  in integer_vector);\n		procedure Set(ID : ModelParametersIDType; Index: in natural; Data: in integer; Size: positive);\n		procedure Set(ID : ModelParametersIDType; Index: in natural; Data: in boolean);\n		procedure Set(ID : ModelParametersIDType; Index: in natural; Data: in std_logic_vector);\n--		procedure Set(ID : ModelParametersIDType; Index: in natural; Data: in string);\n		\n		impure function Get(ID : ModelParametersIDType; Index: natural) return integer;\n		impure function Get(ID : ModelParametersIDType; Index: natural) return boolean;\n		impure function Get(ID : ModelParametersIDType; Index: natural) return std_logic_vector;\n    impure function Get(ID : ModelParametersIDType; Index: natural; Size: natural) return std_logic_vector;\n--		impure function Get(ID : ModelParametersIDType; Index: natural) return string;\n\n    ------------------------------------------------------------\n    impure function GetAlertLogID(ID : ModelParametersIDType) return AlertLogIDType ;\n	end protected ModelParametersSingletonType;\n\n	type ModelParametersSingletonType is protected body\n		type SlvPtrType is access std_logic_vector;\n    \n    type ParamTypeType is (NONE, eSLV, eINT, eSTR) ; \n\n    type ParameterRecType is record \n      ParamType : ParamTypeType ; \n      IntParam  : integer ; \n      SlvParam  : SlvPtrType ;\n      StrParam  : Line ;\n    end record ParameterRecType ; \n    type ParameterRecArrayType is array (natural range <>) of ParameterRecType ; \n		type ParamPtrType is access ParameterRecArrayType ;\n    \n    type SingletonStructType is record\n      ParamPtr     : ParamPtrType ; \n      AlertLogID   : AlertLogIDType ;\n    end record SingletonStructType ; \n    \n    type     SingletonArrayType    is array (integer range <>) of SingletonStructType ;\n    type     SingletonArrayPtrType is access SingletonArrayType ;\n\n    variable SingletonArrayPtr : SingletonArrayPtrType ;   \n    variable NumItems          : integer := 0 ; \n    constant MIN_NUM_ITEMS     : integer := 32 ; -- Min amount to resize array\n    variable LocalNameStore    : NameStorePType ;\n\n    ------------------------------------------------------------\n    -- Package Local\n    function NormalizeArraySize( NewNumItems, MinNumItems : integer ) return integer is\n    ------------------------------------------------------------\n      variable NormNumItems : integer ;\n      variable ModNumItems  : integer ;\n    begin\n      NormNumItems := NewNumItems ; \n      ModNumItems  := NewNumItems mod MinNumItems ; \n      if ModNumItems > 0 then \n        NormNumItems := NormNumItems + (MinNumItems - ModNumItems) ; \n      end if ; \n      return NormNumItems ; \n    end function NormalizeArraySize ;\n\n    ------------------------------------------------------------\n    -- Package Local\n    procedure GrowNumberItems (\n    ------------------------------------------------------------\n      variable SingletonArrayPtr : InOut SingletonArrayPtrType ;\n      variable NumItems          : InOut integer ;\n      constant GrowAmount        : in    integer ;\n      constant MinNumItems       : in    integer \n    ) is\n      variable oldSingletonArrayPtr : SingletonArrayPtrType ;\n      variable NewNumItems     : integer ;\n      variable NewSize         : integer ;\n    begin\n      NewNumItems := NumItems + GrowAmount ; \n      NewSize     := NormalizeArraySize(NewNumItems, MinNumItems) ;\n      if SingletonArrayPtr = NULL then\n        SingletonArrayPtr := new SingletonArrayType(1 to NewSize) ;\n      elsif NewNumItems > SingletonArrayPtr'length then\n        oldSingletonArrayPtr := SingletonArrayPtr ;\n        SingletonArrayPtr    := new SingletonArrayType(1 to NewSize) ;\n        SingletonArrayPtr.all(1 to NumItems) := oldSingletonArrayPtr.all(1 to NumItems) ;\n        deallocate(oldSingletonArrayPtr) ;\n      end if ;\n      NumItems := NewNumItems ; \n    end procedure GrowNumberItems ;\n\n    ------------------------------------------------------------\n    impure function NewID (\n    ------------------------------------------------------------\n      Name                : String ;\n      NumParams           : positive ; \n      ParentID            : AlertLogIDType          := OSVVM_MODEL_PARAM_ALERTLOG_ID ;\n      ReportMode          : AlertLogReportModeType  := DISABLED ;\n      Search              : NameSearchType          := PRIVATE_NAME ;\n      PrintParent         : AlertLogPrintParentType := PRINT_NAME_AND_PARENT\n    ) return ModelParametersIDType is\n      variable NameID              : integer ;\n      variable ResolvedSearch      : NameSearchType ;\n      variable ResolvedPrintParent : AlertLogPrintParentType ;\n      variable NewModelID          : ModelParametersIDType ;\n    begin\n      ResolvedSearch      := ResolveSearch     (ParentID /= OSVVM_MODEL_PARAM_ALERTLOG_ID, Search) ;\n      ResolvedPrintParent := ResolvePrintParent(ParentID /= OSVVM_MODEL_PARAM_ALERTLOG_ID, PrintParent) ;\n\n      NameID := LocalNameStore.find(Name, ParentID, ResolvedSearch) ;\n\n      if NameID /= ID_NOT_FOUND.ID then\n        NewModelID := (ID => NameID) ;\n        return NewModelID ;\n      else\n        -- Add New Item to Singleton to Structure\n        GrowNumberItems(SingletonArrayPtr, NumItems, 1, MIN_NUM_ITEMS) ;\n        NewModelID := (ID => NumItems) ;\n        -- Create AlertLogID\n        SingletonArrayPtr(NumItems).AlertLogID := NewID(Name, ParentID, ReportMode, ResolvedPrintParent, CreateHierarchy => FALSE) ;\n        -- Add item to NameStore\n        NameID := LocalNameStore.NewID(Name, ParentID, ResolvedSearch) ;\n        -- Initialize \n        Init(NewModelID, NumParams) ; \n        -- Check NameStore Index vs NumItems\n        AlertIfNotEqual(SingletonArrayPtr(NumItems).AlertLogID, NameID, NumItems, \"NewID: NewID /= NameStoreID\") ;  \n        return NewModelID ; \n      end if ;\n    end function NewID ;\n	\n    ------------------------------------------------------------\n    procedure Deallocate(ID : ModelParametersIDType) is\n    ------------------------------------------------------------\n    begin\n      for i in SingletonArrayPtr(ID.ID).ParamPtr'range loop  \n        deallocate(SingletonArrayPtr(ID.ID).ParamPtr(i).SlvParam) ;\n        deallocate(SingletonArrayPtr(ID.ID).ParamPtr(i).StrParam) ;\n      end loop ;\n      deallocate(SingletonArrayPtr(ID.ID).ParamPtr);\n    end procedure Deallocate ; \n    \n    ------------------------------------------------------------\n		--	Create storage for NumParams parameters\n		procedure Init(ID : ModelParametersIDType; NumParams : in positive) is\n    ------------------------------------------------------------\n		begin\n			if SingletonArrayPtr(ID.ID).ParamPtr /= NULL then\n-- probably a mistake to do this\n-- Should instead do a resize of the structure like in ScoreboardPkg.\n        Deallocate(SingletonArrayPtr(ID.ID).ParamPtr) ; \n      end if; \n			SingletonArrayPtr(ID.ID).ParamPtr := new ParameterRecArrayType(0 to NumParams-1);\n			for i in SingletonArrayPtr(ID.ID).ParamPtr'range loop\n				SingletonArrayPtr(ID.ID).ParamPtr(i).IntParam := 0;\n			end loop;\n		end procedure Init;\n		\n		\n    ------------------------------------------------------------\n		procedure Set(ID : ModelParametersIDType; Index: in natural; Data: in integer) is\n    ------------------------------------------------------------\n		begin\n      case SingletonArrayPtr(ID.ID).ParamPtr(Index).ParamType is \n        when NONE | eINT =>\n          SingletonArrayPtr(ID.ID).ParamPtr(Index).IntParam     := Data;\n          SingletonArrayPtr(ID.ID).ParamPtr(Index).ParamType  := eINT;\n        \n        when eSLV =>\n          SingletonArrayPtr(ID.ID).ParamPtr(Index).SlvParam.all := std_logic_vector(to_signed(Data, SingletonArrayPtr(ID.ID).ParamPtr(Index).SlvParam'length));\n          SingletonArrayPtr(ID.ID).ParamPtr(Index).ParamType  := eSLV;\n\n        when eSTR =>\n          Alert(SingletonArrayPtr(ID.ID).AlertLogID, \"Set: Require Type String\") ; \n\n      end case ; \n    end procedure Set;\n		\n    ------------------------------------------------------------\n		procedure Set(ID : ModelParametersIDType; Data: in integer_vector) is\n    ------------------------------------------------------------\n      alias aData : integer_vector(0 to Data'length -1) is Data ; \n		begin\n      for i in aData'range loop \n        Set(ID, i, aData(i)) ; \n      end loop ;\n    end procedure Set ; \n		\n    ------------------------------------------------------------\n		procedure Set(ID : ModelParametersIDType; Index: in natural; Data: in boolean) is\n    ------------------------------------------------------------\n		begin\n      case SingletonArrayPtr(ID.ID).ParamPtr(Index).ParamType is \n        when NONE | eINT =>\n          SingletonArrayPtr(ID.ID).ParamPtr(Index).IntParam     := 1 when Data else 0 ;\n          SingletonArrayPtr(ID.ID).ParamPtr(Index).ParamType  := eINT;\n        \n        when eSLV =>\n          SingletonArrayPtr(ID.ID).ParamPtr(Index).SlvParam.all := (SingletonArrayPtr(ID.ID).ParamPtr(Index).SlvParam'range => '0') ;\n          SingletonArrayPtr(ID.ID).ParamPtr(Index).SlvParam(0) := '1' when Data else '0';\n          SingletonArrayPtr(ID.ID).ParamPtr(Index).ParamType  := eSLV;\n\n        when eSTR =>\n          Alert(SingletonArrayPtr(ID.ID).AlertLogID, \"Set: Require Type String\") ; \n\n      end case ; \n		end procedure Set;\n		\n    ------------------------------------------------------------\n		procedure Set(ID : ModelParametersIDType; Index: in natural; Data: in integer; Size: positive) is\n    ------------------------------------------------------------\n      -- to_signed correctly handles non-negative integers up Size in length\n      constant SlvVal : std_logic_vector(Size-1 downto 0) := std_logic_vector(to_signed(Data, Size));\n		begin\n      case SingletonArrayPtr(ID.ID).ParamPtr(Index).ParamType is \n        when NONE =>\n          SingletonArrayPtr(ID.ID).ParamPtr(Index).SlvParam    := new std_logic_vector'(SlvVal);\n          SingletonArrayPtr(ID.ID).ParamPtr(Index).ParamType := eSLV;\n\n        when eSLV  =>\n--? What if parameters do not match in size?\n          SingletonArrayPtr(ID.ID).ParamPtr(Index).SlvParam.all := resize(SlvVal, SingletonArrayPtr(ID.ID).ParamPtr(Index).SlvParam'length);\n        \n        when eINT =>\n          SingletonArrayPtr(ID.ID).ParamPtr(Index).IntParam    := Data;\n          SingletonArrayPtr(ID.ID).ParamPtr(Index).ParamType   := eINT;\n\n        when eSTR =>\n          Alert(SingletonArrayPtr(ID.ID).AlertLogID, \"Set: Require Type String\") ; \n\n      end case ; \n		end procedure Set;\n\n    ------------------------------------------------------------\n		procedure Set(ID : ModelParametersIDType; Index: in natural; Data: in std_logic_vector) is\n    ------------------------------------------------------------\n      alias aData : std_logic_vector(Data'length-1 downto 0) is Data ; \n		begin\n      case SingletonArrayPtr(ID.ID).ParamPtr(Index).ParamType is \n        when NONE =>\n          SingletonArrayPtr(ID.ID).ParamPtr(Index).SlvParam    := new std_logic_vector'(aData)  ;\n          SingletonArrayPtr(ID.ID).ParamPtr(Index).ParamType := eSLV;\n        \n        when eSLV  =>\n--? What if parameters do not match in size?\n          SingletonArrayPtr(ID.ID).ParamPtr(Index).SlvParam.all := resize(aData, SingletonArrayPtr(ID.ID).ParamPtr(Index).SlvParam'length);\n\n        when eINT =>\n          SingletonArrayPtr(ID.ID).ParamPtr(Index).IntParam    := to_integer(signed(Data));\n          SingletonArrayPtr(ID.ID).ParamPtr(Index).ParamType := eINT;\n\n        when eSTR =>\n          Alert(SingletonArrayPtr(ID.ID).AlertLogID, \"Set: Require Type String\") ; \n\n      end case ; \n		end procedure Set;\n		\n    ------------------------------------------------------------\n		impure function Get(ID : ModelParametersIDType; Index: natural) return integer is\n    ------------------------------------------------------------\n		begin\n      case SingletonArrayPtr(ID.ID).ParamPtr(Index).ParamType is \n        when NONE =>\n          alert(SingletonArrayPtr(ID.ID).AlertLogID, \"ModelParametersSingletonType.Get[natural, return integer] No value set\");\n          return integer'left;\n        \n        when eINT =>\n          return SingletonArrayPtr(ID.ID).ParamPtr(Index).IntParam;\n\n        when eSLV =>\n-- std_logic_vector values are unsigned\n          return to_integer(unsigned(SingletonArrayPtr(ID.ID).ParamPtr(Index).SlvParam.all));\n\n        when eSTR =>\n          Alert(SingletonArrayPtr(ID.ID).AlertLogID, \"Expecting Type String\") ; \n          return integer'left;\n\n      end case ; \n		end function Get;\n		\n    ------------------------------------------------------------\n		impure function Get(ID : ModelParametersIDType; Index: natural) return boolean is\n    ------------------------------------------------------------\n		begin\n      case SingletonArrayPtr(ID.ID).ParamPtr(Index).ParamType is \n        when NONE =>\n          alert(SingletonArrayPtr(ID.ID).AlertLogID, \"ModelParametersSingletonType.Get[natural, return boolean] No value set\");\n          return boolean'left;\n        \n        when eINT =>\n          return (SingletonArrayPtr(ID.ID).ParamPtr(Index).IntParam /= 0);\n\n        when eSLV =>\n          return (SingletonArrayPtr(ID.ID).ParamPtr(Index).SlvParam(0) /= '0');\n\n        when eSTR =>\n          Alert(SingletonArrayPtr(ID.ID).AlertLogID, \"Expecting Type String\") ; \n          return boolean'left;\n\n      end case ; \n		end function Get;\n		\n    ------------------------------------------------------------\n		impure function Get(ID : ModelParametersIDType; Index: natural) return std_logic_vector is\n    ------------------------------------------------------------\n		begin\n      case SingletonArrayPtr(ID.ID).ParamPtr(Index).ParamType is \n        when NONE =>\n          alert(SingletonArrayPtr(ID.ID).AlertLogID, \"ModelParametersSingletonType.Get[natural, return std_logic_vector] No value set\");\n          return 32SB\"U\";\n        \n        when eINT =>\n          return std_logic_vector(to_signed(SingletonArrayPtr(ID.ID).ParamPtr(Index).IntParam, 32));\n\n        when eSLV =>\n          return SingletonArrayPtr(ID.ID).ParamPtr(Index).SlvParam.all;\n\n        when eSTR =>\n          Alert(SingletonArrayPtr(ID.ID).AlertLogID, \"Expecting Type String\") ; \n          return 32SB\"U\";\n\n      end case ; \n		end function Get;\n		\n    ------------------------------------------------------------\n    impure function Get(ID : ModelParametersIDType; Index: natural; Size: natural) return std_logic_vector is\n    ------------------------------------------------------------\n      constant AllU   : std_logic_vector(Size-1 downto 0) := (others => 'U') ; \n      variable Result : signed(31 downto 0) ;\n		begin\n      case SingletonArrayPtr(ID.ID).ParamPtr(Index).ParamType is \n        when NONE =>\n          alert(SingletonArrayPtr(ID.ID).AlertLogID, \"ModelParametersSingletonType.Get[natural, positive return std_logic_vector] No value set\");\n          return AllU;\n        \n        when eINT =>\n          Result := to_signed(SingletonArrayPtr(ID.ID).ParamPtr(Index).IntParam, 32) ;\n          return std_logic_vector(Result(Size-1 downto 0));\n\n        when eSLV =>\n          return resize(SingletonArrayPtr(ID.ID).ParamPtr(Index).SlvParam.all, Size);\n\n        when eSTR =>\n          Alert(SingletonArrayPtr(ID.ID).AlertLogID, \"Expecting Type String\") ; \n          return AllU;\n\n      end case ; \n		end function Get;\n    \n    ------------------------------------------------------------\n    impure function GetAlertLogID(ID : ModelParametersIDType) return AlertLogIDType is\n    ------------------------------------------------------------\n    begin\n      return SingletonArrayPtr(ID.ID).AlertLogID ; \n    end function GetAlertLogID ;\n    \n				\n	end protected body ModelParametersSingletonType;\n  \n-- /////////////////////////////////////////\n-- /////////////////////////////////////////\n-- Singleton Data Structure\n-- /////////////////////////////////////////\n-- /////////////////////////////////////////\n  shared variable ModelParameters : ModelParametersSingletonType ;\n \n  impure function NewID (\n    Name                : String ;\n    NumParams           : positive ; \n    ParentID            : AlertLogIDType          := OSVVM_MODEL_PARAM_ALERTLOG_ID ;\n    ReportMode          : AlertLogReportModeType  := DISABLED ;\n    Search              : NameSearchType          := PRIVATE_NAME ;\n    PrintParent         : AlertLogPrintParentType := PRINT_NAME_AND_PARENT\n  ) return ModelParametersIDType is\n    variable Result : ModelParametersIDType ; \n  begin\n    Result := ModelParameters.NewID(Name, NumParams, ParentID, ReportMode, Search, PrintParent) ; \n    return Result ; \n  end function NewID ; \n  \n  procedure Init(ID : ModelParametersIDType; NumParams : in positive) is\n  begin\n    ModelParameters.Init(ID, NumParams) ; \n  end procedure Init ;\n  \n  procedure Set(ID : ModelParametersIDType; Index: in natural; Data: in integer) is\n  begin\n    ModelParameters.Set(ID, Index, Data) ; \n  end procedure Set ; \n  \n  procedure Set(ID : ModelParametersIDType; Data: in integer_vector) is\n  begin\n    ModelParameters.Set(ID, Data) ; \n  end procedure Set ; \n\n  procedure Set(ID : ModelParametersIDType; Index: in natural; Data: in integer; Size: positive) is\n  begin\n    ModelParameters.Set(ID, Index, Data, Size) ; \n  end procedure Set ; \n  \n  procedure Set(ID : ModelParametersIDType; Index: in natural; Data: in boolean) is\n  begin\n    ModelParameters.Set(ID, Index, Data) ; \n  end procedure Set ; \n  \n  procedure Set(ID : ModelParametersIDType; Index: in natural; Data: in std_logic_vector) is\n  begin\n    ModelParameters.Set(ID, Index, Data) ; \n  end procedure Set ; \n  \n  \n  impure function Get(ID : ModelParametersIDType; Index: natural) return integer is\n  begin\n    return ModelParameters.Get(ID, Index) ; \n  end function Get ; \n  \n  impure function Get(ID : ModelParametersIDType; Index: natural) return boolean is\n  begin\n    return ModelParameters.Get(ID, Index) ; \n  end function Get ; \n  \n  impure function Get(ID : ModelParametersIDType; Index: natural) return std_logic_vector is\n  begin\n    return ModelParameters.Get(ID, Index) ; \n  end function Get ; \n  \n  impure function Get(ID : ModelParametersIDType; Index: natural; Size: natural) return std_logic_vector is\n  begin\n    return ModelParameters.Get(ID, Index, Size) ; \n  end function Get ; \n  \n  \n  ------------------------------------------------------------\n  impure function GetAlertLogID (ID : ModelParametersIDType) return AlertLogIDType  is\n  begin\n    return ModelParameters.GetAlertLogID(ID) ; \n  end function GetAlertLogID ; \n  \n	\nend package body ModelParametersSingletonPkg;\n","lang":"vhdl"};
processSrcData(g_data);
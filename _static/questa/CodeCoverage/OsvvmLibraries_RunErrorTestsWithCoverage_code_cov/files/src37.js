var g_data = {"name":"C:/OsvvmLibraries/osvvm/ResolutionPkg.vhd","src":"--\n--  File Name:         ResolutionPkg.vhd\n--  Design Unit Name:  ResolutionPkg\n--  Revision:          STANDARD VERSION\n--\n--  Maintainer:        Jim Lewis      email:  jim@SynthWorks.com\n--  Contributor(s):\n--     Jim Lewis      email:  jim@SynthWorks.com\n--\n--  Package Defines\n--      resolved resolution functions for integer, real, and time\n--      types resolved_integer, resolved_real, resolved_time\n--\n--  Developed for:\n--        SynthWorks Design Inc.\n--        VHDL Training Classes\n--        11898 SW 128th Ave.  Tigard, Or  97223\n--        http://www.SynthWorks.com\n--\n--  Revision History:\n--    Date      Version    Description\n--    06/2021   2021.06    Moved To/FromTransaction and SafeResize to Resize package\n--    12/2020   2020.12    Updated ToTransaction and FromTransaction with length parameter.\n--                         Downsizing now permitted when it does not change the value.\n--    01/2020   2020.01    Updated Licenses to Apache\n--    11/2016   2016.11    Removed Asserts as they are not working as intended.\n--                         See ResolutionPkg_debug as it uses Alerts to correctly detect errors\n--    05/2015   2015.05    Added Alerts\n--    --                   Replaced Alerts with asserts as alerts are illegal in pure functions\n--    02/2009   1.0        VHDL-2008 STANDARD VERSION\n--    09/2006   0.1        Initial revision\n--                         Numerous revisions for VHDL Testbenches and Verification\n--\n--\n--  This file is part of OSVVM.\n--\n--  Copyright (c) 2005 - 2021 by SynthWorks Design Inc.\n--\n--  Licensed under the Apache License, Version 2.0 (the \"License\");\n--  you may not use this file except in compliance with the License.\n--  You may obtain a copy of the License at\n--\n--      https://www.apache.org/licenses/LICENSE-2.0\n--\n--  Unless required by applicable law or agreed to in writing, software\n--  distributed under the License is distributed on an \"AS IS\" BASIS,\n--  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n--  See the License for the specific language governing permissions and\n--  limitations under the License.\n--\n\nlibrary ieee ;\nuse ieee.std_logic_1164.all ;\nuse ieee.numeric_std.all ;\n\npackage ResolutionPkg is\n  constant MULTIPLE_DRIVER_SEVERITY : severity_level := ERROR ;\n\n--\n-- Note that not all simulators support resolution functions of the form:\n--    subtype  std_logic_vector_max is (resolved_max) std_ulogic_vector ;\n--\n-- Hence, types of the form are offered as a temporary workaround until they do:\n--    std_logic_vector_max_c is array (natural range <>) of std_logic_max ; -- for non VHDL-2008\n--\n\n  -- resolved_max\n  --   return maximum value.\n  --   No initializations required on ports, default of type'left is ok\n  function resolved_max ( s : std_ulogic_vector) return std_ulogic ;\n  subtype  std_logic_max is resolved_max std_ulogic ;\n  subtype  std_logic_vector_max is (resolved_max) std_ulogic_vector ;\n  type     std_logic_vector_max_c is array (natural range <>) of std_logic_max ; -- for non VHDL-2008\n\n  subtype  unsigned_max is (resolved_max) unresolved_unsigned ;\n  type     unsigned_max_c is array (natural range <>) of std_logic_max ; -- for non VHDL-2008\n  subtype  signed_max   is (resolved_max) unresolved_signed ;\n  type     signed_max_c is array (natural range <>) of std_logic_max ; -- for non VHDL-2008\n\n  function resolved_max ( s : bit_vector) return bit ;\n  subtype  bit_max is resolved_max bit ;\n  subtype  bit_vector_max is (resolved_max) bit_vector ;\n  type     bit_vector_max_c is array (natural range <>) of bit_max ; -- for non VHDL-2008\n\n  function resolved_max ( s : integer_vector ) return integer ;\n  subtype  integer_max is resolved_max integer ;\n  subtype  integer_vector_max is (resolved_max) integer_vector ;\n  type     integer_vector_max_c is array (natural range <>) of integer_max ; -- for non VHDL-2008\n\n  function resolved_max ( s : time_vector ) return time ;\n  subtype  time_max is resolved_max time ;\n  subtype  time_vector_max is (resolved_max) time_vector ;\n  type     time_vector_max_c is array (natural range <>) of time_max ; -- for non VHDL-2008\n\n  function resolved_max ( s : real_vector ) return real ;\n  subtype  real_max is resolved_max real ;\n  subtype  real_vector_max is (resolved_max) real_vector ;\n  type     real_vector_max_c is array (natural range <>) of real_max ; -- for non VHDL-2008\n\n  function resolved_max ( s : string) return character ;\n  subtype  character_max is resolved_max character ;\n  subtype  string_max is (resolved_max) string ;\n  type     string_max_c is array (positive range <>) of character_max ; -- for non VHDL-2008\n\n  function resolved_max ( s : boolean_vector) return boolean ;\n  subtype  boolean_max is resolved_max boolean ;\n  subtype  boolean_vector_max is (resolved_max) boolean_vector ;\n  type     boolean_vector_max_c is array (natural range <>) of boolean_max ; -- for non VHDL-2008\n\n  -- return sum of values that /= type'left\n  -- No initializations required on ports, default of type'left is ok\n  function resolved_sum ( s : integer_vector ) return integer ;\n  subtype  integer_sum is resolved_sum integer ;\n  subtype  integer_vector_sum is (resolved_sum) integer_vector ;\n  type     integer_vector_sum_c is array (natural range <>) of integer_sum ; -- for non VHDL-2008\n\n  function resolved_sum ( s : time_vector ) return time ;\n  subtype  time_sum is resolved_sum time ;\n  subtype  time_vector_sum is (resolved_sum) time_vector ;\n  type     time_vector_sum_c is array (natural range <>) of time_sum ; -- for non VHDL-2008\n\n  function resolved_sum ( s : real_vector ) return real ;\n  subtype  real_sum is resolved_sum real ;\n  subtype  real_vector_sum is (resolved_sum) real_vector ;\n  type     real_vector_sum_c is array (natural range <>) of real_sum ; -- for non VHDL-2008\n\n\n  -- resolved_weak\n  -- Special just for std_ulogic\n  -- No initializations required on ports, default of type'left is ok\n  function resolved_weak (s : std_ulogic_vector) return std_ulogic ;  -- no init, type'left\n  subtype  std_logic_weak is resolved_weak std_ulogic ;\n  subtype  std_logic_vector_weak is (resolved_weak) std_ulogic_vector ;\n\n\n  -- legacy stuff\n  -- requires ports to be initialized to 0 in the appropriate type.\n  function resolved ( s : integer_vector ) return integer ;\n  subtype  resolved_integer is resolved integer ;\n\n  function resolved ( s : time_vector ) return time ;\n  subtype  resolved_time is resolved time ;\n\n  function resolved ( s : real_vector ) return real ;\n  subtype  resolved_real is resolved real ;\n\n  function resolved (s : string) return character ;      -- same as resolved_max\n  subtype  resolved_character is resolved character ;\n  -- subtype  resolved_string is (resolved) string ;  -- subtype will replace type later\n  type resolved_string is array (positive range <>) of resolved_character;  -- will change to subtype -- assert but no init\n\n  function resolved ( s : boolean_vector) return boolean ;  --same as resolved_max\n  subtype  resolved_boolean is resolved boolean ;\n\nend package ResolutionPkg ;\npackage body ResolutionPkg is\n\n  -- resolved_max\n  -- return maximum value.  Assert FAILURE if more than 1 /= type'left\n  -- No initializations required on ports, default of type'left is ok\n\n  -- Optimized version is just the following:\n  --  ------------------------------------------------------------\n  --  function resolved_max ( s : <array_type> ) return <element_type> is\n  --  ------------------------------------------------------------\n  --  begin\n  --    return maximum(s) ;\n  --  end function resolved_max ;\n\n  ------------------------------------------------------------\n  function resolved_max (s : std_ulogic_vector) return std_ulogic is\n  ------------------------------------------------------------\n  begin\n    return maximum(s) ;\n  end function resolved_max ;\n\n  ------------------------------------------------------------\n  function resolved_max ( s : bit_vector ) return bit is\n  ------------------------------------------------------------\n  begin\n    return maximum(s) ;\n  end function resolved_max ;\n\n  ------------------------------------------------------------\n  function resolved_max ( s : integer_vector ) return integer is\n  ------------------------------------------------------------\n  begin\n    return maximum(s) ;\n  end function resolved_max ;\n\n  ------------------------------------------------------------\n  function resolved_max ( s : time_vector ) return time is\n  ------------------------------------------------------------\n  begin\n    return maximum(s) ;\n  end function resolved_max ;\n\n  ------------------------------------------------------------\n  function resolved_max ( s : real_vector ) return real is\n  ------------------------------------------------------------\n  begin\n    return maximum(s) ;\n  end function resolved_max ;\n\n  ------------------------------------------------------------\n  function resolved_max ( s : string ) return character is\n  ------------------------------------------------------------\n  begin\n    return maximum(s) ;\n  end function resolved_max ;\n\n  ------------------------------------------------------------\n  function resolved_max ( s : boolean_vector) return boolean is\n  ------------------------------------------------------------\n  begin\n    return maximum(s) ;\n  end function resolved_max ;\n\n\n  -- resolved_sum - appropriate for numeric types\n  -- return sum of values that /= type'left\n  -- No initializations required on ports, default of type'left is ok\n  ------------------------------------------------------------\n  function resolved_sum ( s : integer_vector ) return integer is\n  ------------------------------------------------------------\n    variable result : integer := 0 ;\n  begin\n    for i in s'RANGE loop\n      if s(i) /= integer'left then\n        result := s(i) + result;\n      end if ;\n    end loop ;\n    return result ;\n  end function resolved_sum ;\n\n  ------------------------------------------------------------\n  function resolved_sum ( s : time_vector ) return time is\n  ------------------------------------------------------------\n    variable result : time := 0 sec ;\n  begin\n    for i in s'RANGE loop\n      if s(i) /= time'left then\n        result := s(i) + result;\n      end if ;\n    end loop ;\n    return result ;\n  end function resolved_sum ;\n\n  ------------------------------------------------------------\n  function resolved_sum ( s : real_vector ) return real is\n  ------------------------------------------------------------\n    variable result : real := 0.0 ;\n  begin\n    for i in s'RANGE loop\n      if s(i) /= real'left then\n        result := s(i) + result;\n      end if ;\n    end loop ;\n    return result ;\n  end function resolved_sum ;\n\n\n  -- resolved_weak\n  -- Special just for std_ulogic\n  -- No initializations required on ports, default of type'left is ok\n  type stdlogic_table is array(STD_ULOGIC, STD_ULOGIC) of STD_ULOGIC;\n\n  constant weak_resolution_table : stdlogic_table := (\n    --  Resolution order:  Z < U < W < X < - < L < H < 0 < 1\n    --      ---------------------------------------------------------\n    --      |  U    X    0    1    Z    W    L    H    -        |   |\n    --      ---------------------------------------------------------\n             ('U', 'X', '0', '1', 'U', 'W', 'L', 'H', '-'),  -- | U |\n             ('X', 'X', '0', '1', 'X', 'X', 'L', 'H', '-'),  -- | X |\n             ('0', '0', '0', '1', '0', '0', '0', '0', '0'),  -- | 0 |\n             ('1', '1', '1', '1', '1', '1', '1', '1', '1'),  -- | 1 |\n             ('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-'),  -- | Z |\n             ('W', 'X', '0', '1', 'W', 'W', 'L', 'H', '-'),  -- | W |\n             ('L', 'L', '0', '1', 'L', 'L', 'L', 'H', 'L'),  -- | L |\n             ('H', 'H', '0', '1', 'H', 'H', 'W', 'H', 'H'),  -- | H |\n             ('-', '-', '0', '1', '-', '-', 'L', 'H', '-')   -- | - |\n             );\n\n  ------------------------------------------------------------\n  function resolved_weak (s : std_ulogic_vector) return std_ulogic is\n  ------------------------------------------------------------\n    variable result : std_ulogic := 'Z' ;\n  begin\n    for i in s'RANGE loop\n      result := weak_resolution_table(result, s(i)) ;\n    end loop ;\n    return result ;\n  end function resolved_weak ;\n\n\n  -- legacy stuff.\n  -- requires ports to be initialized to 0 in the appropriate type.\n\n  ------------------------------------------------------------\n  function resolved ( s : integer_vector ) return integer is\n  -- requires interface to be initialized to 0\n  ------------------------------------------------------------\n    variable result : integer := 0 ;\n    variable failed : boolean := FALSE ;\n  begin\n    for i in s'RANGE loop\n      if s(i) /= 0 then\n        failed := failed or (result /= 0) ;\n        result := maximum(s(i),result);\n      end if ;\n    end loop ;\n    assert not failed report \"ResolutionPkg.resolved: multiple drivers on integer\" severity MULTIPLE_DRIVER_SEVERITY ;\n    -- AlertIf(OSVVM_ALERTLOG_ID, failed, \"ResolutionPkg.resolved: multiple drivers on integer\") ;\n    return result ;\n  end function resolved ;\n\n  ------------------------------------------------------------\n  function resolved ( s : time_vector ) return time is\n  -- requires interface to be initialized to 0 ns\n  ------------------------------------------------------------\n    variable result : time := 0 ns ;\n    variable failed : boolean := FALSE ;\n  begin\n    for i in s'RANGE loop\n      if s(i) > 0 ns then\n        failed := failed or (result /= 0 ns) ;\n        result := maximum(s(i),result);\n      end if ;\n    end loop ;\n    assert not failed report \"ResolutionPkg.resolved: multiple drivers on time\" severity MULTIPLE_DRIVER_SEVERITY ;\n    -- AlertIf(OSVVM_ALERTLOG_ID, failed, \"ResolutionPkg.resolved: multiple drivers on time\") ;\n    return result ;\n  end function resolved ;\n\n  ------------------------------------------------------------\n  function resolved ( s : real_vector ) return real is\n  -- requires interface to be initialized to 0.0\n  ------------------------------------------------------------\n    variable result : real := 0.0 ;\n    variable failed : boolean := FALSE ;\n  begin\n    for i in s'RANGE loop\n      if s(i) /= 0.0 then\n        failed := failed or (result /= 0.0) ;\n        result := maximum(s(i),result);\n      end if ;\n    end loop ;\n    assert not failed report \"ResolutionPkg.resolved: multiple drivers on real\" severity MULTIPLE_DRIVER_SEVERITY ;\n    -- AlertIf(OSVVM_ALERTLOG_ID, failed, \"ResolutionPkg.resolved: multiple drivers on real\") ;\n    return result ;\n  end function resolved ;\n\n  ------------------------------------------------------------\n  function resolved (s : string) return character is\n  -- same as resolved_max\n  ------------------------------------------------------------\n    variable result : character := NUL ;\n    variable failed : boolean := FALSE ;\n  begin\n    for i in s'RANGE loop\n      if s(i) /= NUL then\n        failed := failed or (result /= NUL) ;\n        result := maximum(result, s(i)) ;\n      end if ;\n    end loop ;\n    assert not failed report \"ResolutionPkg.resolved: multiple drivers on character\" severity MULTIPLE_DRIVER_SEVERITY ;\n    -- AlertIf(OSVVM_ALERTLOG_ID, failed, \"ResolutionPkg.resolved: multiple drivers on character\") ;\n    return result ;\n  end function resolved ;\n\n  ------------------------------------------------------------\n  function resolved ( s : boolean_vector) return boolean is\n  -- same as resolved_max\n  ------------------------------------------------------------\n    variable result : boolean := FALSE ;\n    variable failed : boolean := FALSE ;\n  begin\n    for i in s'RANGE loop\n      if s(i) then\n        failed := failed or result ;\n        result := TRUE ;\n      end if ;\n    end loop ;\n    assert not failed report \"ResolutionPkg.resolved: multiple drivers on boolean\" severity MULTIPLE_DRIVER_SEVERITY ;\n    -- AlertIf(OSVVM_ALERTLOG_ID, failed, \"ResolutionPkg.resolved: multiple drivers on boolean\") ;\n    return result ;\n  end function resolved ;\n\nend package body ResolutionPkg ;\n","lang":"vhdl"};
processSrcData(g_data);
Report.sources['./../../../SynthWorks/Dev/_osvvm/OsvvmLibraries/osvvm/SortListPkg_int.vhd'] = '--\n--&nbsp;&nbsp;File&nbsp;Name:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SortListPkg_int.vhd\n--&nbsp;&nbsp;Design&nbsp;Unit&nbsp;Name:&nbsp;&nbsp;SortListPkg_int\n--&nbsp;&nbsp;Revision:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;STANDARD&nbsp;VERSION\n--\n--&nbsp;&nbsp;Maintainer:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Jim&nbsp;Lewis&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;email:&nbsp;&nbsp;jim@synthworks.com\n--&nbsp;&nbsp;Contributor(s):\n--&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Jim&nbsp;Lewis&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;jim@synthworks.com\n--\n--&nbsp;&nbsp;Description:\n--&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sorting&nbsp;utility&nbsp;for&nbsp;array&nbsp;of&nbsp;scalars\n--&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Uses&nbsp;protected&nbsp;type&nbsp;so&nbsp;as&nbsp;to&nbsp;shrink&nbsp;and&nbsp;expand&nbsp;the&nbsp;data&nbsp;structure\n--\n--&nbsp;&nbsp;Developed&nbsp;for:\n--&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SynthWorks&nbsp;Design&nbsp;Inc.\n--&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;VHDL&nbsp;Training&nbsp;Classes\n--&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;11898&nbsp;SW&nbsp;128th&nbsp;Ave.&nbsp;&nbsp;Tigard,&nbsp;Or&nbsp;&nbsp;97223\n--&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;http://www.SynthWorks.com\n--\n--&nbsp;&nbsp;Revision&nbsp;History:\n--&nbsp;&nbsp;&nbsp;&nbsp;Date&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Version&nbsp;&nbsp;&nbsp;&nbsp;Description\n--&nbsp;&nbsp;&nbsp;&nbsp;06/2008:&nbsp;&nbsp;&nbsp;0.1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Initial&nbsp;revision\n--&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Numerous&nbsp;revisions&nbsp;for&nbsp;VHDL&nbsp;Testbenches&nbsp;and&nbsp;Verification\n--&nbsp;&nbsp;&nbsp;&nbsp;02/2009:&nbsp;&nbsp;&nbsp;1.0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;First&nbsp;Public&nbsp;Released&nbsp;Version\n--&nbsp;&nbsp;&nbsp;&nbsp;02/25/2009&nbsp;1.1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Replaced&nbsp;reference&nbsp;to&nbsp;std_2008&nbsp;with&nbsp;a&nbsp;reference&nbsp;to\n--&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ieee_proposed.standard_additions.all&nbsp;;\n--&nbsp;&nbsp;&nbsp;&nbsp;06/16/2010&nbsp;1.2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Added&nbsp;EraseList&nbsp;parameter&nbsp;to&nbsp;to_array\n--&nbsp;&nbsp;&nbsp;&nbsp;3/2011&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2.0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;added&nbsp;inside&nbsp;as&nbsp;non&nbsp;protected&nbsp;type\n--&nbsp;&nbsp;&nbsp;&nbsp;6/2011&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2.1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;added&nbsp;sort&nbsp;as&nbsp;non&nbsp;protected&nbsp;type\n--&nbsp;&nbsp;&nbsp;&nbsp;4/2013&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2013.04&nbsp;&nbsp;&nbsp;&nbsp;No&nbsp;Changes\n--&nbsp;&nbsp;&nbsp;&nbsp;5/2013&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2013.05&nbsp;&nbsp;&nbsp;&nbsp;No&nbsp;changes&nbsp;of&nbsp;substance.&nbsp;\n--&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Deleted&nbsp;extra&nbsp;variable&nbsp;declaration&nbsp;in&nbsp;procedure&nbsp;remove\n--&nbsp;&nbsp;&nbsp;&nbsp;1/2014&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2014.01&nbsp;&nbsp;&nbsp;&nbsp;Added&nbsp;RevSort.&nbsp;&nbsp;Added&nbsp;AllowDuplicate&nbsp;paramter&nbsp;to&nbsp;Add&nbsp;procedure\n--&nbsp;&nbsp;&nbsp;&nbsp;1/2015&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2015.01&nbsp;&nbsp;&nbsp;&nbsp;Changed&nbsp;Assert/Report&nbsp;to&nbsp;Alert\n--&nbsp;&nbsp;&nbsp;&nbsp;11/2016&nbsp;&nbsp;&nbsp;&nbsp;2016.11&nbsp;&nbsp;&nbsp;&nbsp;Revised&nbsp;Add.&nbsp;&nbsp;When&nbsp;AllowDuplicate,&nbsp;add&nbsp;a&nbsp;matching&nbsp;value&nbsp;last.\n--&nbsp;&nbsp;&nbsp;&nbsp;01/2020&nbsp;&nbsp;&nbsp;&nbsp;2020.01&nbsp;&nbsp;&nbsp;&nbsp;Updated&nbsp;Licenses&nbsp;to&nbsp;Apache\n--\n--\n--&nbsp;&nbsp;This&nbsp;file&nbsp;is&nbsp;part&nbsp;of&nbsp;OSVVM.\n--&nbsp;&nbsp;\n--&nbsp;&nbsp;Copyright&nbsp;(c)&nbsp;2008&nbsp;-&nbsp;2020&nbsp;by&nbsp;SynthWorks&nbsp;Design&nbsp;Inc.&nbsp;&nbsp;\n--&nbsp;&nbsp;\n--&nbsp;&nbsp;Licensed&nbsp;under&nbsp;the&nbsp;Apache&nbsp;License,&nbsp;Version&nbsp;2.0&nbsp;(the&nbsp;&quot;License&quot;);\n--&nbsp;&nbsp;you&nbsp;may&nbsp;not&nbsp;use&nbsp;this&nbsp;file&nbsp;except&nbsp;in&nbsp;compliance&nbsp;with&nbsp;the&nbsp;License.\n--&nbsp;&nbsp;You&nbsp;may&nbsp;obtain&nbsp;a&nbsp;copy&nbsp;of&nbsp;the&nbsp;License&nbsp;at\n--&nbsp;&nbsp;\n--&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;https://www.apache.org/licenses/LICENSE-2.0\n--&nbsp;&nbsp;\n--&nbsp;&nbsp;Unless&nbsp;required&nbsp;by&nbsp;applicable&nbsp;law&nbsp;or&nbsp;agreed&nbsp;to&nbsp;in&nbsp;writing,&nbsp;software\n--&nbsp;&nbsp;distributed&nbsp;under&nbsp;the&nbsp;License&nbsp;is&nbsp;distributed&nbsp;on&nbsp;an&nbsp;&quot;AS&nbsp;IS&quot;&nbsp;BASIS,\n--&nbsp;&nbsp;WITHOUT&nbsp;WARRANTIES&nbsp;OR&nbsp;CONDITIONS&nbsp;OF&nbsp;ANY&nbsp;KIND,&nbsp;either&nbsp;express&nbsp;or&nbsp;implied.\n--&nbsp;&nbsp;See&nbsp;the&nbsp;License&nbsp;for&nbsp;the&nbsp;specific&nbsp;language&nbsp;governing&nbsp;permissions&nbsp;and\n--&nbsp;&nbsp;limitations&nbsp;under&nbsp;the&nbsp;License.\n--&nbsp;&nbsp;\n&nbsp;\nuse&nbsp;work.OsvvmGlobalPkg.all&nbsp;;&nbsp;\nuse&nbsp;work.AlertLogPkg.all&nbsp;;&nbsp;\nuse&nbsp;std.textio.all&nbsp;;\n&nbsp;\nlibrary&nbsp;ieee&nbsp;;\nuse&nbsp;ieee.std_logic_1164.all&nbsp;;\nuse&nbsp;ieee.numeric_std.all&nbsp;;\nuse&nbsp;ieee.std_logic_textio.all&nbsp;;\n&nbsp;\n--&nbsp;comment&nbsp;out&nbsp;following&nbsp;2&nbsp;lines&nbsp;with&nbsp;VHDL-2008.&nbsp;&nbsp;Leave&nbsp;in&nbsp;for&nbsp;VHDL-2002&nbsp;\n--&nbsp;library&nbsp;ieee_proposed&nbsp;;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;remove&nbsp;with&nbsp;VHDL-2008\n--&nbsp;use&nbsp;ieee_proposed.standard_additions.all&nbsp;;&nbsp;&nbsp;&nbsp;--&nbsp;remove&nbsp;with&nbsp;VHDL-2008\n&nbsp;\n&nbsp;\npackage&nbsp;SortListPkg_int&nbsp;is\n&nbsp;&nbsp;--&nbsp;with&nbsp;VHDL-2008,&nbsp;convert&nbsp;package&nbsp;to&nbsp;generic&nbsp;package\n&nbsp;&nbsp;--&nbsp;convert&nbsp;subtypes&nbsp;ElementType&nbsp;and&nbsp;ArrayofElementType&nbsp;to&nbsp;generics\n&nbsp;&nbsp;--&nbsp;package&nbsp;SortListGenericPkg&nbsp;is\n&nbsp;&nbsp;subtype&nbsp;ElementType&nbsp;is&nbsp;integer&nbsp;;\n&nbsp;&nbsp;subtype&nbsp;ArrayofElementType&nbsp;is&nbsp;integer_vector&nbsp;;\n&nbsp;\n&nbsp;&nbsp;impure&nbsp;function&nbsp;inside&nbsp;(constant&nbsp;E&nbsp;:&nbsp;ElementType;&nbsp;constant&nbsp;A&nbsp;:&nbsp;in&nbsp;ArrayofElementType)&nbsp;return&nbsp;boolean&nbsp;;\n&nbsp;&nbsp;impure&nbsp;function&nbsp;sort&nbsp;(constant&nbsp;A&nbsp;:&nbsp;in&nbsp;ArrayofElementType)&nbsp;return&nbsp;ArrayofElementType&nbsp;;\n&nbsp;&nbsp;impure&nbsp;function&nbsp;revsort&nbsp;(constant&nbsp;A&nbsp;:&nbsp;in&nbsp;ArrayofElementType)&nbsp;return&nbsp;ArrayofElementType&nbsp;;\n&nbsp;\n&nbsp;&nbsp;type&nbsp;SortListPType&nbsp;is&nbsp;protected\n&nbsp;&nbsp;&nbsp;&nbsp;procedure&nbsp;add&nbsp;(&nbsp;constant&nbsp;A&nbsp;:&nbsp;in&nbsp;ElementType&nbsp;;&nbsp;constant&nbsp;AllowDuplicate&nbsp;:&nbsp;Boolean&nbsp;:=&nbsp;FALSE&nbsp;)&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;procedure&nbsp;add&nbsp;(&nbsp;constant&nbsp;A&nbsp;:&nbsp;in&nbsp;ArrayofElementType&nbsp;)&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;procedure&nbsp;add&nbsp;(&nbsp;constant&nbsp;A&nbsp;:&nbsp;in&nbsp;ArrayofElementType&nbsp;;&nbsp;Min,&nbsp;Max&nbsp;:&nbsp;ElementType&nbsp;)&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;procedure&nbsp;add&nbsp;(&nbsp;variable&nbsp;A&nbsp;:&nbsp;inout&nbsp;SortListPType&nbsp;)&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;Count&nbsp;items&nbsp;in&nbsp;list\n&nbsp;&nbsp;&nbsp;&nbsp;impure&nbsp;function&nbsp;&nbsp;count&nbsp;return&nbsp;integer&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;impure&nbsp;function&nbsp;&nbsp;find_index&nbsp;(&nbsp;constant&nbsp;A&nbsp;:&nbsp;ElementType)&nbsp;return&nbsp;integer&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;impure&nbsp;function&nbsp;inside&nbsp;(constant&nbsp;A&nbsp;:&nbsp;ElementType)&nbsp;return&nbsp;boolean&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;procedure&nbsp;insert&nbsp;(&nbsp;constant&nbsp;A&nbsp;:&nbsp;in&nbsp;ElementType;&nbsp;constant&nbsp;index&nbsp;:&nbsp;in&nbsp;integer&nbsp;:=&nbsp;1&nbsp;)&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;impure&nbsp;function&nbsp;get&nbsp;(&nbsp;constant&nbsp;index&nbsp;:&nbsp;in&nbsp;integer&nbsp;:=&nbsp;1&nbsp;)&nbsp;return&nbsp;ElementType&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;procedure&nbsp;erase&nbsp;&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;impure&nbsp;function&nbsp;Empty&nbsp;return&nbsp;boolean&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;procedure&nbsp;print&nbsp;;\n&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;procedure&nbsp;remove&nbsp;(&nbsp;constant&nbsp;A&nbsp;:&nbsp;in&nbsp;ElementType&nbsp;)&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;procedure&nbsp;remove&nbsp;(&nbsp;constant&nbsp;A&nbsp;:&nbsp;in&nbsp;ArrayofElementType&nbsp;)&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;procedure&nbsp;remove&nbsp;(&nbsp;variable&nbsp;A&nbsp;:&nbsp;inout&nbsp;SortListPType&nbsp;)&nbsp;;\n&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;impure&nbsp;function&nbsp;to_array&nbsp;(constant&nbsp;EraseList&nbsp;:&nbsp;boolean&nbsp;:=&nbsp;FALSE)&nbsp;return&nbsp;ArrayofElementType&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;impure&nbsp;function&nbsp;to_rev_array&nbsp;(constant&nbsp;EraseList&nbsp;:&nbsp;boolean&nbsp;:=&nbsp;FALSE)&nbsp;return&nbsp;ArrayofElementType&nbsp;;\n&nbsp;&nbsp;end&nbsp;protected&nbsp;SortListPType&nbsp;;\n&nbsp;\nend&nbsp;SortListPkg_int&nbsp;;\n&nbsp;\n---&nbsp;///////////////////////////////////////////////////////////////////////////\n---&nbsp;///////////////////////////////////////////////////////////////////////////\n---&nbsp;///////////////////////////////////////////////////////////////////////////\n&nbsp;\npackage&nbsp;body&nbsp;SortListPkg_int&nbsp;is\n&nbsp;\n&nbsp;&nbsp;impure&nbsp;function&nbsp;inside&nbsp;(constant&nbsp;E&nbsp;:&nbsp;ElementType;&nbsp;constant&nbsp;A&nbsp;:&nbsp;in&nbsp;ArrayofElementType)&nbsp;return&nbsp;boolean&nbsp;is\n&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;i&nbsp;in&nbsp;A&apos;range&nbsp;loop\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;E&nbsp;=&nbsp;A(i)&nbsp;then\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;TRUE&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;if&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;loop&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;FALSE&nbsp;;\n&nbsp;&nbsp;end&nbsp;function&nbsp;inside&nbsp;;\n&nbsp;&nbsp;\n&nbsp;&nbsp;type&nbsp;SortListPType&nbsp;is&nbsp;protected&nbsp;body\n&nbsp;&nbsp;&nbsp;&nbsp;type&nbsp;ListType&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;type&nbsp;ListPointerType&nbsp;is&nbsp;access&nbsp;ListType&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;type&nbsp;ListType&nbsp;is&nbsp;record\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;ElementType&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;item_num&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;integer&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;NextPtr&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;ListPointerType&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;PrevPtr&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;ListPointerType&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;record&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;HeadPointer&nbsp;:&nbsp;ListPointerType&nbsp;:=&nbsp;NULL&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;variable&nbsp;TailPointer&nbsp;:&nbsp;ListPointerType&nbsp;:=&nbsp;NULL&nbsp;;\n&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;procedure&nbsp;add&nbsp;(&nbsp;constant&nbsp;A&nbsp;:&nbsp;in&nbsp;ElementType&nbsp;;&nbsp;constant&nbsp;AllowDuplicate&nbsp;:&nbsp;Boolean&nbsp;:=&nbsp;FALSE&nbsp;)&nbsp;is\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;CurPtr,&nbsp;tempPtr&nbsp;:&nbsp;ListPointerType&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;HeadPointer&nbsp;=&nbsp;NULL&nbsp;then\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;HeadPointer&nbsp;&nbsp;:=&nbsp;new&nbsp;ListType&apos;(A,&nbsp;NULL)&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elsif&nbsp;A&nbsp;=&nbsp;HeadPointer.A&nbsp;then&nbsp;--&nbsp;ignore&nbsp;duplicates\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;AllowDuplicate&nbsp;then\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tempPtr&nbsp;:=&nbsp;HeadPointer&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;HeadPointer&nbsp;&nbsp;&nbsp;:=&nbsp;new&nbsp;ListType&apos;(A,&nbsp;tempPtr)&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;if&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elsif&nbsp;A&nbsp;&lt;&nbsp;HeadPointer.A&nbsp;&nbsp;then\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tempPtr&nbsp;:=&nbsp;HeadPointer&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;HeadPointer&nbsp;&nbsp;&nbsp;:=&nbsp;new&nbsp;ListType&apos;(A,&nbsp;tempPtr)&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CurPtr&nbsp;:=&nbsp;HeadPointer&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AddLoop&nbsp;:&nbsp;loop\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;exit&nbsp;AddLoop&nbsp;when&nbsp;CurPtr.NextPtr&nbsp;=&nbsp;NULL&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;exit&nbsp;AddLoop&nbsp;when&nbsp;A&nbsp;&lt;&nbsp;CurPtr.NextPtr.A&nbsp;&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;A&nbsp;=&nbsp;CurPtr.NextPtr.A&nbsp;then&nbsp;\n--&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;AllowDuplicate&nbsp;then&nbsp;&nbsp;--&nbsp;changed&nbsp;s.t.&nbsp;insert&nbsp;at&nbsp;after&nbsp;match&nbsp;rather&nbsp;than&nbsp;before\n--&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;exit&nbsp;AddLoop&nbsp;;&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;insert&nbsp;\n--&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;not&nbsp;AllowDuplicate&nbsp;then&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;;&nbsp;&nbsp;--&nbsp;return&nbsp;without&nbsp;insert\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;if;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;if&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CurPtr&nbsp;:=&nbsp;CurPtr.NextPtr&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;loop&nbsp;AddLoop&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tempPtr&nbsp;:=&nbsp;CurPtr.NextPtr&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CurPtr.NextPtr&nbsp;:=&nbsp;new&nbsp;ListType&apos;(A,&nbsp;tempPtr)&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;if&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;procedure&nbsp;add&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;procedure&nbsp;add&nbsp;(&nbsp;constant&nbsp;A&nbsp;:&nbsp;in&nbsp;ArrayofElementType&nbsp;)&nbsp;is\n&nbsp;&nbsp;&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;i&nbsp;in&nbsp;A&apos;range&nbsp;loop\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add(A(i))&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;loop&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;procedure&nbsp;add&nbsp;;\n&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;procedure&nbsp;add&nbsp;(&nbsp;constant&nbsp;A&nbsp;:&nbsp;in&nbsp;ArrayofElementType&nbsp;;&nbsp;Min,&nbsp;Max&nbsp;:&nbsp;ElementType&nbsp;)&nbsp;is\n&nbsp;&nbsp;&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;i&nbsp;in&nbsp;A&apos;range&nbsp;loop\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;A(i)&nbsp;&gt;=&nbsp;Min&nbsp;and&nbsp;A(i)&nbsp;&lt;=&nbsp;Max&nbsp;then\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add(A(i))&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;if&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;loop&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;procedure&nbsp;add&nbsp;;\n&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;procedure&nbsp;add&nbsp;(&nbsp;variable&nbsp;A&nbsp;:&nbsp;inout&nbsp;SortListPType&nbsp;)&nbsp;is\n&nbsp;&nbsp;&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;i&nbsp;in&nbsp;1&nbsp;to&nbsp;A.Count&nbsp;loop\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add(A.Get(i))&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;loop&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;procedure&nbsp;add&nbsp;;\n&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;Count&nbsp;items&nbsp;in&nbsp;list\n&nbsp;&nbsp;&nbsp;&nbsp;impure&nbsp;function&nbsp;count&nbsp;return&nbsp;integer&nbsp;is\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;result&nbsp;:&nbsp;positive&nbsp;:=&nbsp;1&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;CurPtr&nbsp;:&nbsp;ListPointerType&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;HeadPointer&nbsp;=&nbsp;NULL&nbsp;then\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;0&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CurPtr&nbsp;:=&nbsp;HeadPointer&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;loop\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;exit&nbsp;when&nbsp;CurPtr.NextPtr&nbsp;=&nbsp;NULL&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;result&nbsp;:=&nbsp;result&nbsp;+&nbsp;1&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CurPtr&nbsp;:=&nbsp;CurPtr.NextPtr&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;loop&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;result&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;if&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;function&nbsp;count&nbsp;;\n&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;impure&nbsp;function&nbsp;find_index&nbsp;(constant&nbsp;A&nbsp;:&nbsp;ElementType)&nbsp;return&nbsp;integer&nbsp;is\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;result&nbsp;:&nbsp;positive&nbsp;:=&nbsp;2&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;CurPtr&nbsp;:&nbsp;ListPointerType&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;HeadPointer&nbsp;=&nbsp;NULL&nbsp;then\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;0&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elsif&nbsp;A&nbsp;&lt;=&nbsp;HeadPointer.A&nbsp;then\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;1&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CurPtr&nbsp;:=&nbsp;HeadPointer&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;loop\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;exit&nbsp;when&nbsp;CurPtr.NextPtr&nbsp;=&nbsp;NULL&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;exit&nbsp;when&nbsp;A&nbsp;&lt;=&nbsp;CurPtr.NextPtr.A&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;result&nbsp;:=&nbsp;result&nbsp;+&nbsp;1&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CurPtr&nbsp;:=&nbsp;CurPtr.NextPtr&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;loop&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;result&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;if&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;function&nbsp;find_index&nbsp;;\n&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;impure&nbsp;function&nbsp;inside&nbsp;(constant&nbsp;A&nbsp;:&nbsp;ElementType)&nbsp;return&nbsp;boolean&nbsp;is\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;CurPtr&nbsp;:&nbsp;ListPointerType&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;HeadPointer&nbsp;=&nbsp;NULL&nbsp;then\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;FALSE&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;if&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;A&nbsp;=&nbsp;HeadPointer.A&nbsp;then\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;TRUE&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CurPtr&nbsp;:=&nbsp;HeadPointer&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;loop\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;exit&nbsp;when&nbsp;CurPtr.NextPtr&nbsp;=&nbsp;NULL&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;exit&nbsp;when&nbsp;A&nbsp;&lt;&nbsp;CurPtr.NextPtr.A&nbsp;&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;A&nbsp;=&nbsp;CurPtr.NextPtr.A&nbsp;then\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;TRUE&nbsp;;&nbsp;&nbsp;--&nbsp;exit\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;if;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CurPtr&nbsp;:=&nbsp;CurPtr.NextPtr&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;loop&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;if&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;FALSE&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;function&nbsp;inside&nbsp;;\n&nbsp;\n&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;procedure&nbsp;insert(&nbsp;constant&nbsp;A&nbsp;:&nbsp;in&nbsp;ElementType;&nbsp;constant&nbsp;index&nbsp;:&nbsp;in&nbsp;integer&nbsp;:=&nbsp;1&nbsp;)&nbsp;is\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;CurPtr,&nbsp;tempPtr&nbsp;:&nbsp;ListPointerType&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;index&nbsp;&lt;=&nbsp;1&nbsp;then\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tempPtr&nbsp;:=&nbsp;HeadPointer&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;HeadPointer&nbsp;&nbsp;&nbsp;:=&nbsp;new&nbsp;ListType&apos;(A,&nbsp;tempPtr)&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CurPtr&nbsp;:=&nbsp;HeadPointer&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;i&nbsp;in&nbsp;3&nbsp;to&nbsp;index&nbsp;loop\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;exit&nbsp;when&nbsp;CurPtr.NextPtr&nbsp;=&nbsp;NULL&nbsp;;&nbsp;--&nbsp;end&nbsp;of&nbsp;list\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CurPtr&nbsp;:=&nbsp;CurPtr.NextPtr&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;loop&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tempPtr&nbsp;:=&nbsp;CurPtr.NextPtr&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CurPtr.NextPtr&nbsp;:=&nbsp;new&nbsp;ListType&apos;(A,&nbsp;tempPtr)&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;if;\n&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;procedure&nbsp;insert&nbsp;;\n&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;impure&nbsp;function&nbsp;get&nbsp;(&nbsp;constant&nbsp;index&nbsp;:&nbsp;in&nbsp;integer&nbsp;:=&nbsp;1&nbsp;)&nbsp;return&nbsp;ElementType&nbsp;is\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;CurPtr&nbsp;:&nbsp;ListPointerType&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;index&nbsp;&gt;&nbsp;Count&nbsp;then\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Alert(OSVVM_ALERTLOG_ID,&nbsp;&quot;SortLIstPkg_int.get&nbsp;index&nbsp;out&nbsp;of&nbsp;range&quot;,&nbsp;FAILURE)&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;ElementType&apos;left&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elsif&nbsp;HeadPointer&nbsp;=&nbsp;NULL&nbsp;then\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;ElementType&apos;left&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elsif&nbsp;index&nbsp;&lt;=&nbsp;1&nbsp;then\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;HeadPointer.A&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CurPtr&nbsp;:=&nbsp;HeadPointer&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;i&nbsp;in&nbsp;2&nbsp;to&nbsp;index&nbsp;loop\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CurPtr&nbsp;:=&nbsp;CurPtr.NextPtr&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;loop&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;CurPtr.A&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;if;\n&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;function&nbsp;get&nbsp;;\n&nbsp;\n&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;procedure&nbsp;erase&nbsp;(variable&nbsp;CurPtr&nbsp;:&nbsp;inout&nbsp;ListPointerType&nbsp;)&nbsp;is\n&nbsp;&nbsp;&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;CurPtr.NextPtr&nbsp;/=&nbsp;NULL&nbsp;then\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;erase&nbsp;(CurPtr.NextPtr)&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;if&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;deallocate&nbsp;(CurPtr)&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;procedure&nbsp;erase&nbsp;;\n&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;procedure&nbsp;erase&nbsp;is\n&nbsp;&nbsp;&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;HeadPointer&nbsp;/=&nbsp;NULL&nbsp;then\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;erase(HeadPointer)&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;deallocate&nbsp;(HeadPointer)&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;HeadPointer&nbsp;:=&nbsp;NULL&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;if;\n&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;procedure&nbsp;erase&nbsp;;\n&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;impure&nbsp;function&nbsp;Empty&nbsp;return&nbsp;boolean&nbsp;is\n&nbsp;&nbsp;&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;HeadPointer&nbsp;=&nbsp;NULL&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;Empty&nbsp;;\n&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;procedure&nbsp;print&nbsp;is\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;buf&nbsp;:&nbsp;line&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;CurPtr&nbsp;:&nbsp;ListPointerType&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;HeadPointer&nbsp;=&nbsp;NULL&nbsp;then\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;write&nbsp;(buf,&nbsp;string&apos;(&quot;(&nbsp;)&quot;))&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CurPtr&nbsp;:=&nbsp;HeadPointer&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;write&nbsp;(buf,&nbsp;string&apos;(&quot;(&quot;))&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;loop\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;write&nbsp;(buf,&nbsp;CurPtr.A)&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;exit&nbsp;when&nbsp;CurPtr.NextPtr&nbsp;=&nbsp;NULL&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;write&nbsp;(buf,&nbsp;string&apos;(&quot;,&nbsp;&quot;))&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CurPtr&nbsp;:=&nbsp;CurPtr.NextPtr&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;loop&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;write&nbsp;(buf,&nbsp;string&apos;(&quot;)&quot;))&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;if&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;writeline(OUTPUT,&nbsp;buf)&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;procedure&nbsp;print&nbsp;;\n&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;procedure&nbsp;remove&nbsp;(&nbsp;constant&nbsp;A&nbsp;:&nbsp;in&nbsp;ElementType&nbsp;)&nbsp;is\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;CurPtr,&nbsp;tempPtr&nbsp;:&nbsp;ListPointerType&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;HeadPointer&nbsp;=&nbsp;NULL&nbsp;then\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elsif&nbsp;A&nbsp;=&nbsp;HeadPointer.A&nbsp;then\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tempPtr&nbsp;:=&nbsp;HeadPointer&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;HeadPointer&nbsp;:=&nbsp;HeadPointer.NextPtr&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;deallocate&nbsp;(tempPtr)&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CurPtr&nbsp;:=&nbsp;HeadPointer&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;loop\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;exit&nbsp;when&nbsp;CurPtr.NextPtr&nbsp;=&nbsp;NULL&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;A&nbsp;=&nbsp;CurPtr.NextPtr.A&nbsp;then\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tempPtr&nbsp;:=&nbsp;CurPtr.NextPtr&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CurPtr.NextPtr&nbsp;:=&nbsp;CurPtr.NextPtr.NextPtr&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;deallocate&nbsp;(tempPtr)&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;exit&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;if&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;exit&nbsp;when&nbsp;A&nbsp;&lt;&nbsp;CurPtr.NextPtr.A&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CurPtr&nbsp;:=&nbsp;CurPtr.NextPtr&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;loop&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;if&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;procedure&nbsp;remove&nbsp;;\n&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;procedure&nbsp;remove&nbsp;(&nbsp;constant&nbsp;A&nbsp;:&nbsp;in&nbsp;ArrayofElementType&nbsp;)&nbsp;is\n&nbsp;&nbsp;&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;i&nbsp;in&nbsp;A&apos;range&nbsp;loop\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;remove(A(i))&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;loop&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;procedure&nbsp;remove&nbsp;;\n&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;procedure&nbsp;remove&nbsp;(&nbsp;variable&nbsp;A&nbsp;:&nbsp;inout&nbsp;SortListPType&nbsp;)&nbsp;is\n&nbsp;&nbsp;&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;i&nbsp;in&nbsp;1&nbsp;to&nbsp;A.Count&nbsp;loop\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;remove(A.Get(i))&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;loop&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;procedure&nbsp;remove&nbsp;;\n&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;impure&nbsp;function&nbsp;to_array&nbsp;(constant&nbsp;EraseList&nbsp;:&nbsp;boolean&nbsp;:=&nbsp;FALSE)&nbsp;return&nbsp;ArrayofElementType&nbsp;is\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;result&nbsp;:&nbsp;ArrayofElementType(1&nbsp;to&nbsp;Count)&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;i&nbsp;in&nbsp;1&nbsp;to&nbsp;Count&nbsp;loop\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;result(i)&nbsp;:=&nbsp;Get(i)&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;loop&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;EraseList&nbsp;then\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;erase&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;if&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;result&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;function&nbsp;to_array&nbsp;;\n&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;impure&nbsp;function&nbsp;to_rev_array&nbsp;(constant&nbsp;EraseList&nbsp;:&nbsp;boolean&nbsp;:=&nbsp;FALSE)&nbsp;return&nbsp;ArrayofElementType&nbsp;is\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;result&nbsp;:&nbsp;ArrayofElementType(Count&nbsp;downto&nbsp;1)&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;i&nbsp;in&nbsp;1&nbsp;to&nbsp;Count&nbsp;loop\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;result(i)&nbsp;:=&nbsp;Get(i)&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;loop&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;EraseList&nbsp;then\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;erase&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;if&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;result&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;function&nbsp;to_rev_array&nbsp;;\n&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;protected&nbsp;body&nbsp;SortListPType&nbsp;;\n&nbsp;\n&nbsp;\n&nbsp;&nbsp;impure&nbsp;function&nbsp;sort&nbsp;(constant&nbsp;A&nbsp;:&nbsp;in&nbsp;ArrayofElementType)&nbsp;return&nbsp;ArrayofElementType&nbsp;is\n&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;Result&nbsp;:&nbsp;SortListPType&nbsp;;\n&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;i&nbsp;in&nbsp;A&apos;range&nbsp;loop&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Result.Add(A(i),&nbsp;TRUE)&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;loop&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;Result.to_array(EraseList&nbsp;=&gt;&nbsp;TRUE)&nbsp;&nbsp;;&nbsp;\n&nbsp;&nbsp;end&nbsp;function&nbsp;sort&nbsp;;\n&nbsp;\n&nbsp;&nbsp;impure&nbsp;function&nbsp;revsort&nbsp;(constant&nbsp;A&nbsp;:&nbsp;in&nbsp;ArrayofElementType)&nbsp;return&nbsp;ArrayofElementType&nbsp;is\n&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;Result&nbsp;:&nbsp;SortListPType&nbsp;;\n&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;i&nbsp;in&nbsp;A&apos;range&nbsp;loop&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Result.Add(A(i),&nbsp;TRUE)&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;loop&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;Result.to_rev_array(EraseList&nbsp;=&gt;&nbsp;TRUE)&nbsp;&nbsp;;&nbsp;\n&nbsp;&nbsp;end&nbsp;function&nbsp;revsort&nbsp;;\nend&nbsp;SortListPkg_int&nbsp;;\n&nbsp;\n';
Report.brushes['./../../../SynthWorks/Dev/_osvvm/OsvvmLibraries/osvvm/SortListPkg_int.vhd'] = 'vhdl'

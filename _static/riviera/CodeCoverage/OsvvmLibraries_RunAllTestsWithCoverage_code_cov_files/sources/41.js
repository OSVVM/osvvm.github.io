Report.sources['./../../../SynthWorks/Dev/_osvvm/OsvvmLibraries/AXI4/common/src/Axi4ModelPkg.vhd'] = '--\n--&nbsp;&nbsp;File&nbsp;Name:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Axi4ModelPkg.vhd\n--&nbsp;&nbsp;Design&nbsp;Unit&nbsp;Name:&nbsp;&nbsp;Axi4ModelPkg\n--&nbsp;&nbsp;Revision:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;OSVVM&nbsp;MODELS&nbsp;STANDARD&nbsp;VERSION\n--\n--&nbsp;&nbsp;Maintainer:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Jim&nbsp;Lewis&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;email:&nbsp;&nbsp;jim@synthworks.com\n--&nbsp;&nbsp;Contributor(s):\n--&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Jim&nbsp;Lewis&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;jim@synthworks.com\n--\n--\n--&nbsp;&nbsp;Description:\n--&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Defines&nbsp;procedures&nbsp;to&nbsp;support&nbsp;Valid&nbsp;and&nbsp;Ready&nbsp;handshaking\n--&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n--\n--&nbsp;&nbsp;Developed&nbsp;by:\n--&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SynthWorks&nbsp;Design&nbsp;Inc.\n--&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;VHDL&nbsp;Training&nbsp;Classes\n--&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;http://www.SynthWorks.com\n--\n--&nbsp;&nbsp;Revision&nbsp;History:\n--&nbsp;&nbsp;&nbsp;&nbsp;Date&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Version&nbsp;&nbsp;&nbsp;&nbsp;Description\n--&nbsp;&nbsp;&nbsp;&nbsp;03/2022&nbsp;&nbsp;&nbsp;2022.03&nbsp;&nbsp;&nbsp;&nbsp;Removed&nbsp;deprecated&nbsp;items\n--&nbsp;&nbsp;&nbsp;&nbsp;01/2020&nbsp;&nbsp;&nbsp;2020.01&nbsp;&nbsp;&nbsp;&nbsp;Updated&nbsp;license&nbsp;notice\n--&nbsp;&nbsp;&nbsp;&nbsp;09/2017&nbsp;&nbsp;&nbsp;2017&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Initial&nbsp;revision\n--\n--\n--&nbsp;&nbsp;This&nbsp;file&nbsp;is&nbsp;part&nbsp;of&nbsp;OSVVM.\n--&nbsp;&nbsp;\n--&nbsp;&nbsp;Copyright&nbsp;(c)&nbsp;2017&nbsp;-&nbsp;2020&nbsp;by&nbsp;SynthWorks&nbsp;Design&nbsp;Inc.&nbsp;&nbsp;\n--&nbsp;&nbsp;\n--&nbsp;&nbsp;Licensed&nbsp;under&nbsp;the&nbsp;Apache&nbsp;License,&nbsp;Version&nbsp;2.0&nbsp;(the&nbsp;&quot;License&quot;);\n--&nbsp;&nbsp;you&nbsp;may&nbsp;not&nbsp;use&nbsp;this&nbsp;file&nbsp;except&nbsp;in&nbsp;compliance&nbsp;with&nbsp;the&nbsp;License.\n--&nbsp;&nbsp;You&nbsp;may&nbsp;obtain&nbsp;a&nbsp;copy&nbsp;of&nbsp;the&nbsp;License&nbsp;at\n--&nbsp;&nbsp;\n--&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;https://www.apache.org/licenses/LICENSE-2.0\n--&nbsp;&nbsp;\n--&nbsp;&nbsp;Unless&nbsp;required&nbsp;by&nbsp;applicable&nbsp;law&nbsp;or&nbsp;agreed&nbsp;to&nbsp;in&nbsp;writing,&nbsp;software\n--&nbsp;&nbsp;distributed&nbsp;under&nbsp;the&nbsp;License&nbsp;is&nbsp;distributed&nbsp;on&nbsp;an&nbsp;&quot;AS&nbsp;IS&quot;&nbsp;BASIS,\n--&nbsp;&nbsp;WITHOUT&nbsp;WARRANTIES&nbsp;OR&nbsp;CONDITIONS&nbsp;OF&nbsp;ANY&nbsp;KIND,&nbsp;either&nbsp;express&nbsp;or&nbsp;implied.\n--&nbsp;&nbsp;See&nbsp;the&nbsp;License&nbsp;for&nbsp;the&nbsp;specific&nbsp;language&nbsp;governing&nbsp;permissions&nbsp;and\n--&nbsp;&nbsp;limitations&nbsp;under&nbsp;the&nbsp;License.\n--&nbsp;&nbsp;\nlibrary&nbsp;ieee&nbsp;;&nbsp;\n&nbsp;&nbsp;use&nbsp;ieee.std_logic_1164.all&nbsp;;\n&nbsp;&nbsp;use&nbsp;ieee.numeric_std.all&nbsp;;\n&nbsp;&nbsp;use&nbsp;ieee.numeric_std_unsigned.all&nbsp;;\n&nbsp;&nbsp;use&nbsp;ieee.math_real.all&nbsp;;\n&nbsp;&nbsp;\nlibrary&nbsp;osvvm&nbsp;;&nbsp;\n&nbsp;&nbsp;context&nbsp;osvvm.OsvvmContext&nbsp;;&nbsp;\n&nbsp;&nbsp;use&nbsp;osvvm.ScoreboardPkg_slv.all&nbsp;;\n&nbsp;&nbsp;\nlibrary&nbsp;osvvm_common&nbsp;;&nbsp;\n&nbsp;&nbsp;context&nbsp;osvvm_common.OsvvmCommonContext&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;\nuse&nbsp;work.Axi4InterfaceCommonPkg.all&nbsp;;\nuse&nbsp;work.Axi4InterfacePkg.all&nbsp;;&nbsp;\n&nbsp;&nbsp;\npackage&nbsp;Axi4ModelPkg&nbsp;is&nbsp;\n&nbsp;\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;function&nbsp;CalculateByteAddress&nbsp;(\n&nbsp;&nbsp;--&nbsp;Fetch&nbsp;the&nbsp;address&nbsp;and&nbsp;data&nbsp;the&nbsp;slave&nbsp;sees&nbsp;for&nbsp;a&nbsp;write&nbsp;\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;Address&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;In&nbsp;&nbsp;std_logic_vector&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;AddrBitsPerWord&nbsp;:&nbsp;In&nbsp;&nbsp;integer&nbsp;\n&nbsp;&nbsp;)&nbsp;return&nbsp;integer&nbsp;;&nbsp;\n&nbsp;\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;function&nbsp;CalculateBurstLen(\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;NumBytes&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;In&nbsp;&nbsp;integer&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;ByteAddress&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;In&nbsp;&nbsp;integer&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;ByteWidth&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;In&nbsp;&nbsp;integer&nbsp;\n&nbsp;&nbsp;)&nbsp;return&nbsp;integer&nbsp;;\n&nbsp;\n--!!&nbsp;&nbsp;--&nbsp;Keep&nbsp;for&nbsp;now\n--!!&nbsp;&nbsp;------------------------------------------------------------\n--!!&nbsp;&nbsp;function&nbsp;CalculateWriteStrobe&nbsp;(\n--!!&nbsp;&nbsp;------------------------------------------------------------\n--!!&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;ByteAddr&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;In&nbsp;&nbsp;integer&nbsp;;\n--!!&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;NumberOfBytes&nbsp;:&nbsp;In&nbsp;&nbsp;integer&nbsp;;&nbsp;\n--!!&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;MaxBytes&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;In&nbsp;&nbsp;integer&nbsp;\n--!!&nbsp;&nbsp;)&nbsp;return&nbsp;std_logic_vector&nbsp;;&nbsp;\n&nbsp;\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;function&nbsp;CalculateWriteStrobe&nbsp;(\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;Data&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;In&nbsp;&nbsp;std_logic_vector&nbsp;\n&nbsp;&nbsp;)&nbsp;return&nbsp;std_logic_vector&nbsp;;\n&nbsp;\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;function&nbsp;AlignBytesToDataBus&nbsp;(\n&nbsp;&nbsp;--&nbsp;Shift&nbsp;Data&nbsp;to&nbsp;Align&nbsp;it.&nbsp;\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;Data&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;In&nbsp;&nbsp;&nbsp;&nbsp;std_logic_vector&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;DataWidth&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;In&nbsp;&nbsp;&nbsp;&nbsp;integer&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;ByteAddr&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;In&nbsp;&nbsp;&nbsp;&nbsp;integer&nbsp;\n&nbsp;&nbsp;)&nbsp;return&nbsp;std_logic_vector&nbsp;;&nbsp;\n&nbsp;\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;procedure&nbsp;FilterUndrivenData&nbsp;(\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;Data&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;InOut&nbsp;std_logic_vector&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;Strb&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;In&nbsp;&nbsp;&nbsp;&nbsp;std_logic_vector&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;DefaultData&nbsp;&nbsp;&nbsp;:&nbsp;In&nbsp;&nbsp;&nbsp;&nbsp;std_logic&nbsp;\n&nbsp;&nbsp;)&nbsp;;\n&nbsp;\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;procedure&nbsp;CheckDataIsBytes&nbsp;(\n&nbsp;&nbsp;--&nbsp;Check&nbsp;AXI&nbsp;Write&nbsp;Data&nbsp;Width&nbsp;-&nbsp;BYTE&nbsp;and&nbsp;&lt;&nbsp;WordWidth&nbsp;adjusted&nbsp;for&nbsp;ByteAddr&nbsp;\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;ModelID&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;In&nbsp;&nbsp;&nbsp;&nbsp;AlertLogIDType&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;DataWidth&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;In&nbsp;&nbsp;&nbsp;&nbsp;integer&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;MessagePrefix&nbsp;&nbsp;&nbsp;:&nbsp;In&nbsp;&nbsp;&nbsp;&nbsp;string&nbsp;&nbsp;:=&nbsp;&quot;&quot;&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;TransferNumber&nbsp;&nbsp;:&nbsp;In&nbsp;&nbsp;&nbsp;&nbsp;integer&nbsp;:=&nbsp;-1\n&nbsp;&nbsp;)&nbsp;;&nbsp;\n&nbsp;&nbsp;\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;procedure&nbsp;CheckDataWidth&nbsp;(\n&nbsp;&nbsp;--&nbsp;Check&nbsp;AXI&nbsp;Write&nbsp;Data&nbsp;Width&nbsp;-&nbsp;BYTE&nbsp;and&nbsp;&lt;&nbsp;WordWidth&nbsp;adjusted&nbsp;for&nbsp;ByteAddr&nbsp;\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;ModelID&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;In&nbsp;&nbsp;&nbsp;&nbsp;AlertLogIDType&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;DataWidth&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;In&nbsp;&nbsp;&nbsp;&nbsp;integer&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;ByteAddr&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;In&nbsp;&nbsp;&nbsp;&nbsp;integer&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;MaxDataBits&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;In&nbsp;&nbsp;&nbsp;&nbsp;integer&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;MessagePrefix&nbsp;&nbsp;&nbsp;:&nbsp;In&nbsp;&nbsp;&nbsp;&nbsp;string&nbsp;&nbsp;:=&nbsp;&quot;&quot;&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;TransferNumber&nbsp;&nbsp;:&nbsp;In&nbsp;&nbsp;&nbsp;&nbsp;integer&nbsp;:=&nbsp;-1\n&nbsp;&nbsp;)&nbsp;;\n&nbsp;\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;procedure&nbsp;PopWriteBurstData&nbsp;(\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;WriteBurstFifo&nbsp;&nbsp;:&nbsp;In&nbsp;&nbsp;&nbsp;&nbsp;osvvm.ScoreboardPkg_slv.ScoreboardIdType&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;BurstFifoMode&nbsp;&nbsp;&nbsp;:&nbsp;In&nbsp;&nbsp;&nbsp;&nbsp;AddressBusFifoBurstModeType&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;WriteData&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;InOut&nbsp;std_logic_vector&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;WriteStrb&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;InOut&nbsp;std_logic_vector&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;BytesToSend&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;InOut&nbsp;integer&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;ByteAddress&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;In&nbsp;&nbsp;&nbsp;&nbsp;integer&nbsp;:=&nbsp;0&nbsp;\n&nbsp;&nbsp;)&nbsp;;\n&nbsp;\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;procedure&nbsp;PushReadBurstData&nbsp;(\n&nbsp;&nbsp;--&nbsp;Push&nbsp;Burst&nbsp;Data&nbsp;into&nbsp;Byte&nbsp;Burst&nbsp;FIFO.&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;ReadBurstFifo&nbsp;&nbsp;:&nbsp;In&nbsp;&nbsp;&nbsp;&nbsp;osvvm.ScoreboardPkg_slv.ScoreboardIdType&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;BurstFifoMode&nbsp;&nbsp;:&nbsp;In&nbsp;&nbsp;&nbsp;&nbsp;AddressBusFifoBurstModeType&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;ReadData&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;InOut&nbsp;std_logic_vector&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;BytesToReceive&nbsp;:&nbsp;InOut&nbsp;integer&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;ByteAddress&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;In&nbsp;&nbsp;&nbsp;&nbsp;integer&nbsp;:=&nbsp;0&nbsp;\n&nbsp;&nbsp;)&nbsp;;\n&nbsp;\n--&nbsp;====&nbsp;&nbsp;Older&nbsp;Version&nbsp;Directed&nbsp;FIFO&nbsp;intereaction\n&nbsp;\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;procedure&nbsp;PopWriteBurstData&nbsp;(\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;WriteBurstFifo&nbsp;&nbsp;:&nbsp;InOut&nbsp;osvvm.ScoreboardPkg_slv.ScoreboardPType&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;BurstFifoMode&nbsp;&nbsp;&nbsp;:&nbsp;In&nbsp;&nbsp;&nbsp;&nbsp;AddressBusFifoBurstModeType&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;WriteData&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;InOut&nbsp;std_logic_vector&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;WriteStrb&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;InOut&nbsp;std_logic_vector&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;BytesToSend&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;InOut&nbsp;integer&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;ByteAddress&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;In&nbsp;&nbsp;&nbsp;&nbsp;integer&nbsp;:=&nbsp;0&nbsp;\n&nbsp;&nbsp;)&nbsp;;\n&nbsp;\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;procedure&nbsp;PushReadBurstData&nbsp;(\n&nbsp;&nbsp;--&nbsp;Push&nbsp;Burst&nbsp;Data&nbsp;into&nbsp;Byte&nbsp;Burst&nbsp;FIFO.&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;ReadBurstFifo&nbsp;&nbsp;:&nbsp;InOut&nbsp;osvvm.ScoreboardPkg_slv.ScoreboardPType&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;BurstFifoMode&nbsp;&nbsp;:&nbsp;In&nbsp;&nbsp;&nbsp;&nbsp;AddressBusFifoBurstModeType&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;ReadData&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;InOut&nbsp;std_logic_vector&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;BytesToReceive&nbsp;:&nbsp;InOut&nbsp;integer&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;ByteAddress&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;In&nbsp;&nbsp;&nbsp;&nbsp;integer&nbsp;:=&nbsp;0&nbsp;\n&nbsp;&nbsp;)&nbsp;;\n&nbsp;&nbsp;\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;function&nbsp;AlignDataBusToBytes&nbsp;(\n&nbsp;&nbsp;--&nbsp;Shift&nbsp;Data&nbsp;Right&nbsp;and&nbsp;MASK&nbsp;unused&nbsp;bytes.&nbsp;\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;Data&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;In&nbsp;&nbsp;&nbsp;&nbsp;std_logic_vector&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;DataWidth&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;In&nbsp;&nbsp;&nbsp;&nbsp;integer&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;ByteAddr&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;In&nbsp;&nbsp;&nbsp;&nbsp;integer&nbsp;\n&nbsp;&nbsp;)&nbsp;return&nbsp;std_logic_vector&nbsp;;\n&nbsp;&nbsp;\nend&nbsp;package&nbsp;Axi4ModelPkg&nbsp;;\n&nbsp;\n--&nbsp;/////////////////////////////////////////////////////////////////////////////////////////\n--&nbsp;/////////////////////////////////////////////////////////////////////////////////////////\n&nbsp;\npackage&nbsp;body&nbsp;Axi4ModelPkg&nbsp;is\n&nbsp;\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;function&nbsp;CalculateByteAddress&nbsp;(\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;Address&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;In&nbsp;&nbsp;std_logic_vector&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;AddrBitsPerWord&nbsp;:&nbsp;In&nbsp;&nbsp;integer&nbsp;\n&nbsp;&nbsp;)&nbsp;return&nbsp;integer&nbsp;is\n&nbsp;&nbsp;&nbsp;&nbsp;alias&nbsp;&nbsp;&nbsp;&nbsp;aAddr&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;std_logic_vector(Address&apos;length&nbsp;downto&nbsp;1)&nbsp;is&nbsp;Address&nbsp;;&nbsp;\n&nbsp;&nbsp;begin&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;to_integer(aAddr(AddrBitsPerWord&nbsp;downto&nbsp;1)&nbsp;)&nbsp;;\n&nbsp;&nbsp;end&nbsp;function&nbsp;CalculateByteAddress&nbsp;;&nbsp;\n&nbsp;&nbsp;\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;function&nbsp;CalculateBurstLen(\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;NumBytes&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;In&nbsp;&nbsp;integer&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;ByteAddress&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;In&nbsp;&nbsp;integer&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;ByteWidth&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;In&nbsp;&nbsp;integer&nbsp;\n&nbsp;&nbsp;)&nbsp;return&nbsp;integer&nbsp;is\n&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;BytesInFirstTransfer&nbsp;:&nbsp;integer&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;BytesAfterFirstTransfer&nbsp;:&nbsp;integer&nbsp;;&nbsp;\n&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;BytesInFirstTransfer&nbsp;:=&nbsp;ByteWidth&nbsp;-&nbsp;ByteAddress&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;BytesInFirsttransfer&nbsp;&nbsp;&gt;&nbsp;NumBytes&nbsp;then\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;0&nbsp;;&nbsp;--&nbsp;only&nbsp;one&nbsp;word&nbsp;in&nbsp;transfer\n&nbsp;&nbsp;&nbsp;&nbsp;else\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;BytesAfterFirstTransfer&nbsp;:=&nbsp;NumBytes&nbsp;-&nbsp;BytesInFirstTransfer&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;0&nbsp;+&nbsp;integer(ceil(real(BytesAfterFirstTransfer)/real(ByteWidth)))&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;if&nbsp;;&nbsp;\n&nbsp;&nbsp;end&nbsp;function&nbsp;CalculateBurstLen&nbsp;;&nbsp;\n&nbsp;&nbsp;\n--!!&nbsp;--&nbsp;Keep&nbsp;for&nbsp;now.&nbsp;&nbsp;&nbsp;Capability&nbsp;is&nbsp;in&nbsp;AlignBytesToDataBus&nbsp;as&nbsp;it&nbsp;fills&nbsp;RHS&nbsp;with&nbsp;U\n--!!&nbsp;&nbsp;------------------------------------------------------------\n--!!&nbsp;&nbsp;function&nbsp;CalculateWriteStrobe&nbsp;(\n--!!&nbsp;&nbsp;------------------------------------------------------------\n--!!&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;ByteAddr&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;In&nbsp;&nbsp;integer&nbsp;;\n--!!&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;NumberOfBytes&nbsp;:&nbsp;In&nbsp;&nbsp;integer&nbsp;;&nbsp;\n--!!&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;MaxBytes&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;In&nbsp;&nbsp;integer&nbsp;\n--!!&nbsp;&nbsp;)&nbsp;return&nbsp;std_logic_vector&nbsp;is\n--!!&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;WriteStrobe&nbsp;&nbsp;&nbsp;:&nbsp;std_logic_vector(MaxBytes&nbsp;downto&nbsp;1)&nbsp;:=&nbsp;(others&nbsp;=&gt;&nbsp;&apos;0&apos;)&nbsp;;&nbsp;\n--!!&nbsp;&nbsp;begin\n--!!&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;Calculate&nbsp;Initial&nbsp;WriteStrobe&nbsp;based&nbsp;on&nbsp;number&nbsp;of&nbsp;bytes\n--!!&nbsp;&nbsp;&nbsp;&nbsp;WriteStrobe(NumberOfBytes&nbsp;downto&nbsp;1)&nbsp;:=&nbsp;(others&nbsp;=&gt;&nbsp;&apos;1&apos;)&nbsp;;\n--!!&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n--!!&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;Adjust&nbsp;WriteStrobe&nbsp;for&nbsp;Address\n--!!&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;replace&nbsp;by&nbsp;sll?&nbsp;WriteStrobe&nbsp;sll&nbsp;ByteAddr&nbsp;\n--!!&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;WriteStrobe(MaxBytes&nbsp;-&nbsp;ByteAddr&nbsp;downto&nbsp;1)&nbsp;&amp;&nbsp;(ByteAddr&nbsp;downto&nbsp;1&nbsp;=&gt;&nbsp;&apos;0&apos;)&nbsp;;\n--!!&nbsp;&nbsp;end&nbsp;function&nbsp;CalculateWriteStrobe&nbsp;;&nbsp;\n&nbsp;&nbsp;\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;function&nbsp;CalculateWriteStrobe&nbsp;(\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;Data&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;In&nbsp;&nbsp;std_logic_vector&nbsp;\n&nbsp;&nbsp;)&nbsp;return&nbsp;std_logic_vector&nbsp;is\n&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;WriteStrobe&nbsp;:&nbsp;std_logic_vector(Data&apos;length/8-1&nbsp;downto&nbsp;0)&nbsp;:=&nbsp;(others&nbsp;=&gt;&nbsp;&apos;0&apos;)&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;alias&nbsp;aData&nbsp;:&nbsp;std_logic_vector(Data&apos;length-1&nbsp;downto&nbsp;0)&nbsp;is&nbsp;Data&nbsp;;&nbsp;\n&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;i&nbsp;in&nbsp;WriteStrobe&apos;reverse_range&nbsp;loop\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;aData(i*8)&nbsp;/=&nbsp;&apos;U&apos;&nbsp;then&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;WriteStrobe(i)&nbsp;:=&nbsp;&apos;1&apos;&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;if&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;loop&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;WriteStrobe&nbsp;;\n&nbsp;&nbsp;end&nbsp;function&nbsp;CalculateWriteStrobe&nbsp;;&nbsp;\n&nbsp;&nbsp;\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;function&nbsp;AlignBytesToDataBus&nbsp;(\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;Data&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;In&nbsp;&nbsp;&nbsp;&nbsp;std_logic_vector&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;DataWidth&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;In&nbsp;&nbsp;&nbsp;&nbsp;integer&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;ByteAddr&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;In&nbsp;&nbsp;&nbsp;&nbsp;integer&nbsp;\n&nbsp;&nbsp;)&nbsp;return&nbsp;std_logic_vector&nbsp;is\n&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;DATA_LEFT&nbsp;:&nbsp;integer&nbsp;:=&nbsp;Data&apos;length-1&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;alias&nbsp;&nbsp;&nbsp;&nbsp;aData&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;std_logic_vector(DATA_LEFT&nbsp;downto&nbsp;0)&nbsp;is&nbsp;Data&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;result&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;std_logic_vector(DATA_LEFT&nbsp;downto&nbsp;0)&nbsp;:=&nbsp;(others&nbsp;=&gt;&nbsp;&apos;U&apos;)&nbsp;;&nbsp;\n&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;DataWidth&nbsp;&lt;&nbsp;Data&apos;length&nbsp;then&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Result(DataWidth&nbsp;+&nbsp;ByteAddr*8&nbsp;-&nbsp;1&nbsp;downto&nbsp;ByteAddr*8)&nbsp;:=&nbsp;aData(DataWidth-1&nbsp;downto&nbsp;0)&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;Result&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;else&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;Make&nbsp;Bits&nbsp;to&nbsp;the&nbsp;Right&nbsp;of&nbsp;ByteAddr&nbsp;a&nbsp;U\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Result(DATA_LEFT&nbsp;downto&nbsp;ByteAddr*8)&nbsp;:=&nbsp;aData(DATA_LEFT&nbsp;downto&nbsp;ByteAddr*8)&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;Result&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;if&nbsp;;&nbsp;\n&nbsp;&nbsp;end&nbsp;function&nbsp;AlignBytesToDataBus&nbsp;;&nbsp;\n&nbsp;&nbsp;\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;function&nbsp;AlignDataBusToBytes&nbsp;(\n&nbsp;&nbsp;--&nbsp;Shift&nbsp;Data&nbsp;Right&nbsp;and&nbsp;MASK&nbsp;unused&nbsp;bytes.&nbsp;\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;Data&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;In&nbsp;&nbsp;&nbsp;&nbsp;std_logic_vector&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;DataWidth&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;In&nbsp;&nbsp;&nbsp;&nbsp;integer&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;ByteAddr&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;In&nbsp;&nbsp;&nbsp;&nbsp;integer&nbsp;\n&nbsp;&nbsp;)&nbsp;return&nbsp;std_logic_vector&nbsp;is\n&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;DATA_LEFT&nbsp;:&nbsp;integer&nbsp;:=&nbsp;Data&apos;length-1&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;alias&nbsp;&nbsp;&nbsp;&nbsp;aData&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;std_logic_vector(DATA_LEFT&nbsp;downto&nbsp;0)&nbsp;is&nbsp;Data&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;Result&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;std_logic_vector(DATA_LEFT&nbsp;downto&nbsp;0)&nbsp;:=&nbsp;(others&nbsp;=&gt;&nbsp;&apos;0&apos;)&nbsp;;&nbsp;\n&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;DataWidth&nbsp;&lt;&nbsp;Data&apos;length&nbsp;then&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Result(DataWidth-1&nbsp;downto&nbsp;0)&nbsp;:=&nbsp;aData(DataWidth&nbsp;+&nbsp;ByteAddr*8&nbsp;-&nbsp;1&nbsp;downto&nbsp;ByteAddr*8)&nbsp;;&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;Result&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;else\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;Make&nbsp;Bits&nbsp;to&nbsp;the&nbsp;Right&nbsp;of&nbsp;ByteAddr&nbsp;a&nbsp;0\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Result(DATA_LEFT&nbsp;downto&nbsp;ByteAddr*8)&nbsp;:=&nbsp;aData(DATA_LEFT&nbsp;downto&nbsp;ByteAddr*8)&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;Result&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;if&nbsp;;&nbsp;\n&nbsp;&nbsp;end&nbsp;function&nbsp;AlignDataBusToBytes&nbsp;;&nbsp;\n&nbsp;\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;procedure&nbsp;FilterUndrivenData&nbsp;(\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;Data&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;InOut&nbsp;std_logic_vector&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;Strb&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;In&nbsp;&nbsp;&nbsp;&nbsp;std_logic_vector&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;DefaultData&nbsp;&nbsp;&nbsp;:&nbsp;In&nbsp;&nbsp;&nbsp;&nbsp;std_logic&nbsp;\n&nbsp;&nbsp;)&nbsp;is\n&nbsp;&nbsp;&nbsp;&nbsp;alias&nbsp;aData&nbsp;:&nbsp;std_logic_vector(Data&apos;length-1&nbsp;downto&nbsp;0)&nbsp;is&nbsp;Data&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;alias&nbsp;aStrb&nbsp;:&nbsp;std_logic_vector(Strb&apos;length-1&nbsp;downto&nbsp;0)&nbsp;is&nbsp;Strb&nbsp;;&nbsp;\n&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;i&nbsp;in&nbsp;aStrb&apos;range&nbsp;loop\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;aStrb(i)&nbsp;=&nbsp;&apos;0&apos;&nbsp;then&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;aData(i*8+7&nbsp;downto&nbsp;i*8)&nbsp;:=&nbsp;(others&nbsp;=&gt;&nbsp;DefaultData)&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;if&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;loop&nbsp;;&nbsp;\n&nbsp;&nbsp;end&nbsp;procedure&nbsp;FilterUndrivenData&nbsp;;&nbsp;\n&nbsp;&nbsp;\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;procedure&nbsp;CheckDataIsBytes&nbsp;(\n&nbsp;&nbsp;--&nbsp;Check&nbsp;that&nbsp;DataWidth&nbsp;is&nbsp;byte&nbsp;oriented\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;ModelID&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;In&nbsp;&nbsp;&nbsp;&nbsp;AlertLogIDType&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;DataWidth&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;In&nbsp;&nbsp;&nbsp;&nbsp;integer&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;MessagePrefix&nbsp;&nbsp;&nbsp;:&nbsp;In&nbsp;&nbsp;&nbsp;&nbsp;string&nbsp;&nbsp;:=&nbsp;&quot;&quot;&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;TransferNumber&nbsp;&nbsp;:&nbsp;In&nbsp;&nbsp;&nbsp;&nbsp;integer&nbsp;:=&nbsp;-1\n&nbsp;&nbsp;)&nbsp;is\n&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;DataWidth&nbsp;mod&nbsp;8&nbsp;/=&nbsp;0&nbsp;then&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;TransferNumber&nbsp;&gt;&nbsp;0&nbsp;then&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Alert(ModelID,&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MessagePrefix&nbsp;&nbsp;&amp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;Data&nbsp;not&nbsp;on&nbsp;a&nbsp;byte&nbsp;boundary.&quot;&nbsp;&amp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;&nbsp;&nbsp;DataWidth:&nbsp;&quot;&nbsp;&amp;&nbsp;to_string(DataWidth)&nbsp;&amp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;&nbsp;&nbsp;TransferNumber:&nbsp;&quot;&nbsp;&amp;&nbsp;to_string(TransferNumber),&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FAILURE)&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Alert(ModelID,&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MessagePrefix&nbsp;&nbsp;&amp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;Data&nbsp;not&nbsp;on&nbsp;a&nbsp;byte&nbsp;boundary.&quot;&nbsp;&amp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;&nbsp;&nbsp;DataWidth:&nbsp;&quot;&nbsp;&amp;&nbsp;to_string(DataWidth)&nbsp;,&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FAILURE)&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;if&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;if&nbsp;;&nbsp;\n&nbsp;&nbsp;end&nbsp;procedure&nbsp;CheckDataIsBytes&nbsp;;&nbsp;\n&nbsp;&nbsp;\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;procedure&nbsp;CheckDataWidth&nbsp;(\n&nbsp;&nbsp;--&nbsp;Check&nbsp;AXI&nbsp;Write&nbsp;Data&nbsp;Width&nbsp;-&nbsp;BYTE&nbsp;and&nbsp;&lt;&nbsp;WordWidth&nbsp;adjusted&nbsp;for&nbsp;ByteAddr&nbsp;\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;ModelID&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;In&nbsp;&nbsp;&nbsp;&nbsp;AlertLogIDType&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;DataWidth&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;In&nbsp;&nbsp;&nbsp;&nbsp;integer&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;ByteAddr&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;In&nbsp;&nbsp;&nbsp;&nbsp;integer&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;MaxDataBits&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;In&nbsp;&nbsp;&nbsp;&nbsp;integer&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;MessagePrefix&nbsp;&nbsp;&nbsp;:&nbsp;In&nbsp;&nbsp;&nbsp;&nbsp;string&nbsp;&nbsp;:=&nbsp;&quot;&quot;&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;TransferNumber&nbsp;&nbsp;:&nbsp;In&nbsp;&nbsp;&nbsp;&nbsp;integer&nbsp;:=&nbsp;-1\n&nbsp;&nbsp;)&nbsp;is\n&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;DataWidth&nbsp;+&nbsp;ByteAddr*8&nbsp;&gt;&nbsp;MaxDataBits&nbsp;and&nbsp;DataWidth&nbsp;/=&nbsp;MaxDataBits&nbsp;then\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AlertIf(ModelID,&nbsp;DataWidth&nbsp;+&nbsp;ByteAddr*8&nbsp;&gt;&nbsp;MaxDataBits,&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MessagePrefix&nbsp;&nbsp;&amp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;Data&nbsp;length&nbsp;too&nbsp;large.&quot;&nbsp;&amp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;&nbsp;&nbsp;ByteAddr:&nbsp;&quot;&nbsp;&amp;&nbsp;to_string(ByteAddr)&nbsp;&amp;&nbsp;&quot;&nbsp;*&nbsp;8&quot;&nbsp;&amp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;&nbsp;&nbsp;+&nbsp;DataWidth:&nbsp;&quot;&nbsp;&amp;&nbsp;to_string(DataWidth)&nbsp;&amp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;&nbsp;&nbsp;&gt;&nbsp;MaxDataBits:&nbsp;&quot;&nbsp;&amp;&nbsp;to_string(MaxDataBits)&nbsp;&amp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;&nbsp;&nbsp;TransferNumber:&nbsp;&quot;&nbsp;&amp;&nbsp;to_string(TransferNumber),\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FAILURE)&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;if&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;procedure&nbsp;CheckDataWidth&nbsp;;&nbsp;\n&nbsp;\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;--&nbsp;Local\n&nbsp;&nbsp;procedure&nbsp;PopWriteBurstByteData&nbsp;(\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;WriteBurstFifo&nbsp;&nbsp;:&nbsp;In&nbsp;&nbsp;&nbsp;&nbsp;osvvm.ScoreboardPkg_slv.ScoreboardIdType&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;WriteData&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;InOut&nbsp;std_logic_vector&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;WriteStrb&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;InOut&nbsp;std_logic_vector&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;BytesToSend&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;InOut&nbsp;integer&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;ByteAddress&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;In&nbsp;&nbsp;&nbsp;&nbsp;integer&nbsp;:=&nbsp;0&nbsp;\n&nbsp;&nbsp;)&nbsp;is\n&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;DataLeft&nbsp;:&nbsp;integer&nbsp;:=&nbsp;WriteData&apos;length-1;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;alias&nbsp;aWriteData&nbsp;:&nbsp;std_logic_vector(DataLeft&nbsp;downto&nbsp;0)&nbsp;is&nbsp;WriteData&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;alias&nbsp;aWriteStrb&nbsp;:&nbsp;std_logic_vector(WriteStrb&apos;length-1&nbsp;downto&nbsp;0)&nbsp;is&nbsp;WriteStrb&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;DataIndex&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;integer&nbsp;:=&nbsp;ByteAddress&nbsp;*&nbsp;8&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;StrbIndex&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;integer&nbsp;:=&nbsp;ByteAddress&nbsp;;&nbsp;\n&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;aWriteData&nbsp;:=&nbsp;(others&nbsp;=&gt;&nbsp;&apos;U&apos;)&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;aWriteStrb&nbsp;:=&nbsp;(others&nbsp;=&gt;&nbsp;&apos;0&apos;)&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;First&nbsp;Byte&nbsp;is&nbsp;put&nbsp;in&nbsp;right&nbsp;side&nbsp;of&nbsp;word\n&nbsp;&nbsp;&nbsp;&nbsp;PopByte&nbsp;:&nbsp;while&nbsp;DataIndex&nbsp;&lt;=&nbsp;DataLeft&nbsp;loop&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;aWriteData(DataIndex+7&nbsp;downto&nbsp;DataIndex)&nbsp;:=&nbsp;Pop(WriteBurstFifo)&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;aWriteData(DataIndex)&nbsp;/=&nbsp;&apos;U&apos;&nbsp;then&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;aWriteStrb(StrbIndex)&nbsp;:=&nbsp;&apos;1&apos;&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;if&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;BytesToSend&nbsp;:=&nbsp;BytesToSend&nbsp;-&nbsp;1&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;exit&nbsp;when&nbsp;BytesToSend&nbsp;=&nbsp;0&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DataIndex&nbsp;:=&nbsp;DataIndex&nbsp;+&nbsp;8&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;StrbIndex&nbsp;:=&nbsp;StrbIndex&nbsp;+&nbsp;1&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;loop&nbsp;PopByte&nbsp;;\n&nbsp;&nbsp;end&nbsp;procedure&nbsp;PopWriteBurstByteData&nbsp;;&nbsp;\n&nbsp;\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;--&nbsp;Local\n&nbsp;&nbsp;procedure&nbsp;PopWriteBurstWordData&nbsp;(\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;WriteBurstFifo&nbsp;&nbsp;:&nbsp;In&nbsp;&nbsp;&nbsp;&nbsp;osvvm.ScoreboardPkg_slv.ScoreboardIdType&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;WriteData&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;InOut&nbsp;std_logic_vector&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;WriteStrb&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;InOut&nbsp;std_logic_vector&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;ByteAddress&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;In&nbsp;&nbsp;&nbsp;&nbsp;integer&nbsp;:=&nbsp;0&nbsp;\n&nbsp;&nbsp;)&nbsp;is\n&nbsp;&nbsp;&nbsp;&nbsp;alias&nbsp;aWriteData&nbsp;:&nbsp;std_logic_vector(WriteData&apos;length-1&nbsp;downto&nbsp;0)&nbsp;is&nbsp;WriteData&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;alias&nbsp;aWriteStrb&nbsp;:&nbsp;std_logic_vector(WriteStrb&apos;length-1&nbsp;downto&nbsp;0)&nbsp;is&nbsp;WriteStrb&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;DataIndex&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;integer&nbsp;:=&nbsp;0&nbsp;;&nbsp;\n&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;aWriteData&nbsp;:=&nbsp;Pop(WriteBurstFifo)&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;aWriteStrb&nbsp;:=&nbsp;(others&nbsp;=&gt;&nbsp;&apos;0&apos;)&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;i&nbsp;in&nbsp;0&nbsp;to&nbsp;ByteAddress-1&nbsp;loop&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;aWriteData(DataIndex&nbsp;+&nbsp;7&nbsp;downto&nbsp;DataIndex)&nbsp;:=&nbsp;(others&nbsp;=&gt;&nbsp;&apos;U&apos;)&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DataIndex&nbsp;:=&nbsp;DataIndex&nbsp;+&nbsp;8&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;loop&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;i&nbsp;in&nbsp;ByteAddress&nbsp;to&nbsp;WriteStrb&apos;length-1&nbsp;loop&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;aWriteData(DataIndex)&nbsp;/=&nbsp;&apos;U&apos;&nbsp;then&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;aWriteStrb(i)&nbsp;:=&nbsp;&apos;1&apos;&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;if&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DataIndex&nbsp;:=&nbsp;DataIndex&nbsp;+&nbsp;8&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;loop&nbsp;;\n&nbsp;&nbsp;end&nbsp;procedure&nbsp;PopWriteBurstWordData&nbsp;;&nbsp;\n&nbsp;&nbsp;\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;procedure&nbsp;PopWriteBurstData&nbsp;(\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;WriteBurstFifo&nbsp;&nbsp;:&nbsp;In&nbsp;&nbsp;&nbsp;&nbsp;osvvm.ScoreboardPkg_slv.ScoreboardIdType&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;BurstFifoMode&nbsp;&nbsp;&nbsp;:&nbsp;In&nbsp;&nbsp;&nbsp;&nbsp;AddressBusFifoBurstModeType&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;WriteData&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;InOut&nbsp;std_logic_vector&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;WriteStrb&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;InOut&nbsp;std_logic_vector&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;BytesToSend&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;InOut&nbsp;integer&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;ByteAddress&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;In&nbsp;&nbsp;&nbsp;&nbsp;integer&nbsp;:=&nbsp;0&nbsp;\n&nbsp;&nbsp;)&nbsp;is\n&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;case&nbsp;BurstFifoMode&nbsp;is\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;when&nbsp;ADDRESS_BUS_BURST_BYTE_MODE&nbsp;=&gt;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PopWriteBurstByteData(WriteBurstFifo,&nbsp;WriteData,&nbsp;WriteStrb,&nbsp;BytesToSend,&nbsp;ByteAddress)&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;when&nbsp;ADDRESS_BUS_BURST_WORD_MODE&nbsp;=&gt;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PopWriteBurstWordData(WriteBurstFifo,&nbsp;WriteData,&nbsp;WriteStrb,&nbsp;ByteAddress)&nbsp;;\n&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;when&nbsp;others&nbsp;=&gt;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;Already&nbsp;checked,&nbsp;this&nbsp;should&nbsp;never&nbsp;happen\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Alert(&quot;PopWriteBurstData:&nbsp;BurstFifoMode&nbsp;Invalid&nbsp;Mode:&nbsp;&quot;&nbsp;&amp;&nbsp;to_string(BurstFifoMode),&nbsp;FAILURE)&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;case&nbsp;;&nbsp;\n&nbsp;&nbsp;end&nbsp;procedure&nbsp;PopWriteBurstData&nbsp;;&nbsp;\n&nbsp;\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;procedure&nbsp;PushReadBurstByteData&nbsp;(\n&nbsp;&nbsp;--&nbsp;Push&nbsp;Burst&nbsp;Data&nbsp;into&nbsp;Byte&nbsp;Burst&nbsp;FIFO.&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;ReadBurstFifo&nbsp;&nbsp;:&nbsp;In&nbsp;&nbsp;&nbsp;&nbsp;osvvm.ScoreboardPkg_slv.ScoreboardIdType&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;ReadData&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;InOut&nbsp;std_logic_vector&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;BytesToReceive&nbsp;:&nbsp;InOut&nbsp;integer&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;ByteAddress&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;In&nbsp;&nbsp;&nbsp;&nbsp;integer&nbsp;:=&nbsp;0&nbsp;\n&nbsp;&nbsp;)&nbsp;is\n&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;DataLeft&nbsp;:&nbsp;integer&nbsp;:=&nbsp;ReadData&apos;length-1;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;alias&nbsp;aReadData&nbsp;:&nbsp;std_logic_vector(DataLeft&nbsp;downto&nbsp;0)&nbsp;is&nbsp;ReadData&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;DataIndex&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;integer&nbsp;:=&nbsp;ByteAddress&nbsp;*&nbsp;8&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;StrbIndex&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;integer&nbsp;:=&nbsp;ByteAddress&nbsp;;&nbsp;\n&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;First&nbsp;Byte&nbsp;is&nbsp;put&nbsp;in&nbsp;right&nbsp;side&nbsp;of&nbsp;word\n&nbsp;&nbsp;&nbsp;&nbsp;PushByte&nbsp;:&nbsp;while&nbsp;DataIndex&nbsp;&lt;=&nbsp;DataLeft&nbsp;loop&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Push(ReadBurstFifo,&nbsp;aReadData(DataIndex+7&nbsp;downto&nbsp;DataIndex))&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;BytesToReceive&nbsp;:=&nbsp;BytesToReceive&nbsp;-&nbsp;1&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;exit&nbsp;when&nbsp;BytesToReceive&nbsp;=&nbsp;0&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DataIndex&nbsp;:=&nbsp;DataIndex&nbsp;+&nbsp;8&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;loop&nbsp;PushByte&nbsp;;\n&nbsp;&nbsp;end&nbsp;procedure&nbsp;PushReadBurstByteData&nbsp;;&nbsp;\n&nbsp;\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;procedure&nbsp;PushReadBurstData&nbsp;(\n&nbsp;&nbsp;--&nbsp;Push&nbsp;Burst&nbsp;Data&nbsp;into&nbsp;Byte&nbsp;Burst&nbsp;FIFO.&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;ReadBurstFifo&nbsp;&nbsp;:&nbsp;In&nbsp;&nbsp;&nbsp;&nbsp;osvvm.ScoreboardPkg_slv.ScoreboardIdType&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;BurstFifoMode&nbsp;&nbsp;:&nbsp;In&nbsp;&nbsp;&nbsp;&nbsp;AddressBusFifoBurstModeType&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;ReadData&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;InOut&nbsp;std_logic_vector&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;BytesToReceive&nbsp;:&nbsp;InOut&nbsp;integer&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;ByteAddress&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;In&nbsp;&nbsp;&nbsp;&nbsp;integer&nbsp;:=&nbsp;0&nbsp;\n&nbsp;&nbsp;)&nbsp;is\n&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;case&nbsp;BurstFifoMode&nbsp;is\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;when&nbsp;ADDRESS_BUS_BURST_BYTE_MODE&nbsp;=&gt;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PushReadBurstByteData(ReadBurstFifo,&nbsp;ReadData,&nbsp;BytesToReceive,&nbsp;ByteAddress)&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;when&nbsp;ADDRESS_BUS_BURST_WORD_MODE&nbsp;=&gt;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Push(ReadBurstFifo,&nbsp;ReadData)&nbsp;;&nbsp;\n&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;when&nbsp;others&nbsp;=&gt;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;Already&nbsp;checked,&nbsp;this&nbsp;should&nbsp;never&nbsp;happen\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Alert(&quot;PushReadBurstData:&nbsp;BurstFifoMode&nbsp;Invalid&nbsp;Mode:&nbsp;&quot;&nbsp;&amp;&nbsp;to_string(BurstFifoMode),&nbsp;FAILURE)&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;case&nbsp;;&nbsp;\n&nbsp;&nbsp;end&nbsp;procedure&nbsp;PushReadBurstData&nbsp;;&nbsp;\n&nbsp;\n&nbsp;\n--&nbsp;====&nbsp;&nbsp;Older&nbsp;Version&nbsp;Directed&nbsp;FIFO&nbsp;intereaction\n&nbsp;&nbsp;\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;--&nbsp;Local\n&nbsp;&nbsp;procedure&nbsp;PopWriteBurstByteData&nbsp;(\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;WriteBurstFifo&nbsp;&nbsp;:&nbsp;InOut&nbsp;osvvm.ScoreboardPkg_slv.ScoreboardPType&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;WriteData&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;InOut&nbsp;std_logic_vector&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;WriteStrb&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;InOut&nbsp;std_logic_vector&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;BytesToSend&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;InOut&nbsp;integer&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;ByteAddress&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;In&nbsp;&nbsp;&nbsp;&nbsp;integer&nbsp;:=&nbsp;0&nbsp;\n&nbsp;&nbsp;)&nbsp;is\n&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;DataLeft&nbsp;:&nbsp;integer&nbsp;:=&nbsp;WriteData&apos;length-1;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;alias&nbsp;aWriteData&nbsp;:&nbsp;std_logic_vector(DataLeft&nbsp;downto&nbsp;0)&nbsp;is&nbsp;WriteData&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;alias&nbsp;aWriteStrb&nbsp;:&nbsp;std_logic_vector(WriteStrb&apos;length-1&nbsp;downto&nbsp;0)&nbsp;is&nbsp;WriteStrb&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;DataIndex&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;integer&nbsp;:=&nbsp;ByteAddress&nbsp;*&nbsp;8&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;StrbIndex&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;integer&nbsp;:=&nbsp;ByteAddress&nbsp;;&nbsp;\n&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;aWriteData&nbsp;:=&nbsp;(others&nbsp;=&gt;&nbsp;&apos;U&apos;)&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;aWriteStrb&nbsp;:=&nbsp;(others&nbsp;=&gt;&nbsp;&apos;0&apos;)&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;First&nbsp;Byte&nbsp;is&nbsp;put&nbsp;in&nbsp;right&nbsp;side&nbsp;of&nbsp;word\n&nbsp;&nbsp;&nbsp;&nbsp;PopByte&nbsp;:&nbsp;while&nbsp;DataIndex&nbsp;&lt;=&nbsp;DataLeft&nbsp;loop&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;aWriteData(DataIndex+7&nbsp;downto&nbsp;DataIndex)&nbsp;:=&nbsp;WriteBurstFifo.Pop&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;aWriteData(DataIndex)&nbsp;/=&nbsp;&apos;U&apos;&nbsp;then&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;aWriteStrb(StrbIndex)&nbsp;:=&nbsp;&apos;1&apos;&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;if&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;BytesToSend&nbsp;:=&nbsp;BytesToSend&nbsp;-&nbsp;1&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;exit&nbsp;when&nbsp;BytesToSend&nbsp;=&nbsp;0&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DataIndex&nbsp;:=&nbsp;DataIndex&nbsp;+&nbsp;8&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;StrbIndex&nbsp;:=&nbsp;StrbIndex&nbsp;+&nbsp;1&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;loop&nbsp;PopByte&nbsp;;\n&nbsp;&nbsp;end&nbsp;procedure&nbsp;PopWriteBurstByteData&nbsp;;&nbsp;\n&nbsp;\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;--&nbsp;Local\n&nbsp;&nbsp;procedure&nbsp;PopWriteBurstWordData&nbsp;(\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;WriteBurstFifo&nbsp;&nbsp;:&nbsp;InOut&nbsp;osvvm.ScoreboardPkg_slv.ScoreboardPType&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;WriteData&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;InOut&nbsp;std_logic_vector&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;WriteStrb&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;InOut&nbsp;std_logic_vector&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;ByteAddress&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;In&nbsp;&nbsp;&nbsp;&nbsp;integer&nbsp;:=&nbsp;0&nbsp;\n&nbsp;&nbsp;)&nbsp;is\n&nbsp;&nbsp;&nbsp;&nbsp;alias&nbsp;aWriteData&nbsp;:&nbsp;std_logic_vector(WriteData&apos;length-1&nbsp;downto&nbsp;0)&nbsp;is&nbsp;WriteData&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;alias&nbsp;aWriteStrb&nbsp;:&nbsp;std_logic_vector(WriteStrb&apos;length-1&nbsp;downto&nbsp;0)&nbsp;is&nbsp;WriteStrb&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;DataIndex&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;integer&nbsp;:=&nbsp;0&nbsp;;&nbsp;\n&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;aWriteData&nbsp;:=&nbsp;WriteBurstFifo.pop&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;aWriteStrb&nbsp;:=&nbsp;(others&nbsp;=&gt;&nbsp;&apos;0&apos;)&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;i&nbsp;in&nbsp;0&nbsp;to&nbsp;ByteAddress-1&nbsp;loop&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;aWriteData(DataIndex&nbsp;+&nbsp;7&nbsp;downto&nbsp;DataIndex)&nbsp;:=&nbsp;(others&nbsp;=&gt;&nbsp;&apos;U&apos;)&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DataIndex&nbsp;:=&nbsp;DataIndex&nbsp;+&nbsp;8&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;loop&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;i&nbsp;in&nbsp;ByteAddress&nbsp;to&nbsp;WriteStrb&apos;length-1&nbsp;loop&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;aWriteData(DataIndex)&nbsp;/=&nbsp;&apos;U&apos;&nbsp;then&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;aWriteStrb(i)&nbsp;:=&nbsp;&apos;1&apos;&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;if&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DataIndex&nbsp;:=&nbsp;DataIndex&nbsp;+&nbsp;8&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;loop&nbsp;;\n&nbsp;&nbsp;end&nbsp;procedure&nbsp;PopWriteBurstWordData&nbsp;;&nbsp;\n&nbsp;&nbsp;\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;procedure&nbsp;PopWriteBurstData&nbsp;(\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;WriteBurstFifo&nbsp;&nbsp;:&nbsp;InOut&nbsp;osvvm.ScoreboardPkg_slv.ScoreboardPType&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;BurstFifoMode&nbsp;&nbsp;&nbsp;:&nbsp;In&nbsp;&nbsp;&nbsp;&nbsp;AddressBusFifoBurstModeType&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;WriteData&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;InOut&nbsp;std_logic_vector&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;WriteStrb&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;InOut&nbsp;std_logic_vector&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;BytesToSend&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;InOut&nbsp;integer&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;ByteAddress&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;In&nbsp;&nbsp;&nbsp;&nbsp;integer&nbsp;:=&nbsp;0&nbsp;\n&nbsp;&nbsp;)&nbsp;is\n&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;case&nbsp;BurstFifoMode&nbsp;is\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;when&nbsp;ADDRESS_BUS_BURST_BYTE_MODE&nbsp;=&gt;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PopWriteBurstByteData(WriteBurstFifo,&nbsp;WriteData,&nbsp;WriteStrb,&nbsp;BytesToSend,&nbsp;ByteAddress)&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;when&nbsp;ADDRESS_BUS_BURST_WORD_MODE&nbsp;=&gt;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PopWriteBurstWordData(WriteBurstFifo,&nbsp;WriteData,&nbsp;WriteStrb,&nbsp;ByteAddress)&nbsp;;\n&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;when&nbsp;others&nbsp;=&gt;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;Already&nbsp;checked,&nbsp;this&nbsp;should&nbsp;never&nbsp;happen\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Alert(&quot;PopWriteBurstData:&nbsp;BurstFifoMode&nbsp;Invalid&nbsp;Mode:&nbsp;&quot;&nbsp;&amp;&nbsp;to_string(BurstFifoMode),&nbsp;FAILURE)&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;case&nbsp;;&nbsp;\n&nbsp;&nbsp;end&nbsp;procedure&nbsp;PopWriteBurstData&nbsp;;&nbsp;\n&nbsp;\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;procedure&nbsp;PushReadBurstByteData&nbsp;(\n&nbsp;&nbsp;--&nbsp;Push&nbsp;Burst&nbsp;Data&nbsp;into&nbsp;Byte&nbsp;Burst&nbsp;FIFO.&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;ReadBurstFifo&nbsp;&nbsp;:&nbsp;InOut&nbsp;osvvm.ScoreboardPkg_slv.ScoreboardPType&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;ReadData&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;InOut&nbsp;std_logic_vector&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;BytesToReceive&nbsp;:&nbsp;InOut&nbsp;integer&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;ByteAddress&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;In&nbsp;&nbsp;&nbsp;&nbsp;integer&nbsp;:=&nbsp;0&nbsp;\n&nbsp;&nbsp;)&nbsp;is\n&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;DataLeft&nbsp;:&nbsp;integer&nbsp;:=&nbsp;ReadData&apos;length-1;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;alias&nbsp;aReadData&nbsp;:&nbsp;std_logic_vector(DataLeft&nbsp;downto&nbsp;0)&nbsp;is&nbsp;ReadData&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;DataIndex&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;integer&nbsp;:=&nbsp;ByteAddress&nbsp;*&nbsp;8&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;StrbIndex&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;integer&nbsp;:=&nbsp;ByteAddress&nbsp;;&nbsp;\n&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;First&nbsp;Byte&nbsp;is&nbsp;put&nbsp;in&nbsp;right&nbsp;side&nbsp;of&nbsp;word\n&nbsp;&nbsp;&nbsp;&nbsp;PushByte&nbsp;:&nbsp;while&nbsp;DataIndex&nbsp;&lt;=&nbsp;DataLeft&nbsp;loop&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ReadBurstFifo.push(aReadData(DataIndex+7&nbsp;downto&nbsp;DataIndex))&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;BytesToReceive&nbsp;:=&nbsp;BytesToReceive&nbsp;-&nbsp;1&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;exit&nbsp;when&nbsp;BytesToReceive&nbsp;=&nbsp;0&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DataIndex&nbsp;:=&nbsp;DataIndex&nbsp;+&nbsp;8&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;loop&nbsp;PushByte&nbsp;;\n&nbsp;&nbsp;end&nbsp;procedure&nbsp;PushReadBurstByteData&nbsp;;&nbsp;\n&nbsp;\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;procedure&nbsp;PushReadBurstData&nbsp;(\n&nbsp;&nbsp;--&nbsp;Push&nbsp;Burst&nbsp;Data&nbsp;into&nbsp;Byte&nbsp;Burst&nbsp;FIFO.&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;ReadBurstFifo&nbsp;&nbsp;:&nbsp;InOut&nbsp;osvvm.ScoreboardPkg_slv.ScoreboardPType&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;BurstFifoMode&nbsp;&nbsp;:&nbsp;In&nbsp;&nbsp;&nbsp;&nbsp;AddressBusFifoBurstModeType&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;ReadData&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;InOut&nbsp;std_logic_vector&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;BytesToReceive&nbsp;:&nbsp;InOut&nbsp;integer&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;ByteAddress&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;In&nbsp;&nbsp;&nbsp;&nbsp;integer&nbsp;:=&nbsp;0&nbsp;\n&nbsp;&nbsp;)&nbsp;is\n&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;case&nbsp;BurstFifoMode&nbsp;is\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;when&nbsp;ADDRESS_BUS_BURST_BYTE_MODE&nbsp;=&gt;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PushReadBurstByteData(ReadBurstFifo,&nbsp;ReadData,&nbsp;BytesToReceive,&nbsp;ByteAddress)&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;when&nbsp;ADDRESS_BUS_BURST_WORD_MODE&nbsp;=&gt;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ReadBurstFifo.Push(ReadData)&nbsp;;&nbsp;\n&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;when&nbsp;others&nbsp;=&gt;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;Already&nbsp;checked,&nbsp;this&nbsp;should&nbsp;never&nbsp;happen\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Alert(&quot;PushReadBurstData:&nbsp;BurstFifoMode&nbsp;Invalid&nbsp;Mode:&nbsp;&quot;&nbsp;&amp;&nbsp;to_string(BurstFifoMode),&nbsp;FAILURE)&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;case&nbsp;;&nbsp;\n&nbsp;&nbsp;end&nbsp;procedure&nbsp;PushReadBurstData&nbsp;;&nbsp;\n&nbsp;\nend&nbsp;package&nbsp;body&nbsp;Axi4ModelPkg&nbsp;;&nbsp;';
Report.brushes['./../../../SynthWorks/Dev/_osvvm/OsvvmLibraries/AXI4/common/src/Axi4ModelPkg.vhd'] = 'vhdl'

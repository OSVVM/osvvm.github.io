Report.sources['./../../../SynthWorks/Dev/_osvvm/OsvvmLibraries/osvvm/TextUtilPkg.vhd'] = '--\n--&nbsp;&nbsp;File&nbsp;Name:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TextUtilPkg.vhd\n--&nbsp;&nbsp;Design&nbsp;Unit&nbsp;Name:&nbsp;&nbsp;TextUtilPkg\n--&nbsp;&nbsp;Revision:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;STANDARD&nbsp;VERSION\n--\n--&nbsp;&nbsp;Maintainer:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Jim&nbsp;Lewis&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;email:&nbsp;&nbsp;jim@synthworks.com\n--&nbsp;&nbsp;Contributor(s):\n--&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Jim&nbsp;Lewis&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;jim@synthworks.com\n--\n--\n--&nbsp;&nbsp;Description:\n--&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Shared&nbsp;Utilities&nbsp;for&nbsp;handling&nbsp;text&nbsp;files\n--&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n--\n--&nbsp;&nbsp;Developed&nbsp;for:\n--&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SynthWorks&nbsp;Design&nbsp;Inc.\n--&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;VHDL&nbsp;Training&nbsp;Classes\n--&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;11898&nbsp;SW&nbsp;128th&nbsp;Ave.&nbsp;&nbsp;Tigard,&nbsp;Or&nbsp;&nbsp;97223\n--&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;http://www.SynthWorks.com\n--\n--&nbsp;&nbsp;Revision&nbsp;History:\n--&nbsp;&nbsp;&nbsp;&nbsp;Date&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Version&nbsp;&nbsp;&nbsp;&nbsp;Description\n--&nbsp;&nbsp;&nbsp;&nbsp;08/2022&nbsp;&nbsp;&nbsp;2022.08&nbsp;&nbsp;&nbsp;&nbsp;Added&nbsp;IsHexOrStdLogic.&nbsp;&nbsp;Updated&nbsp;ReadHexToken&nbsp;to&nbsp;support&nbsp;reading&nbsp;&quot;UWLH-&quot;\n--&nbsp;&nbsp;&nbsp;&nbsp;02/2022&nbsp;&nbsp;&nbsp;2022.02&nbsp;&nbsp;&nbsp;&nbsp;Updated&nbsp;to_hxstring&nbsp;to&nbsp;print&nbsp;U,&nbsp;X,&nbsp;Z,&nbsp;W,&nbsp;-&nbsp;when&nbsp;there&nbsp;are&nbsp;4&nbsp;in&nbsp;a&nbsp;row&nbsp;and&nbsp;?&nbsp;for&nbsp;mixed&nbsp;meta\n--&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Added&nbsp;Justify&nbsp;that&nbsp;aligns&nbsp;LEFT,&nbsp;RIGHT,&nbsp;and&nbsp;CENTER&nbsp;with&nbsp;parameters&nbsp;in&nbsp;a&nbsp;sensible&nbsp;order.\n--&nbsp;&nbsp;&nbsp;&nbsp;01/2022&nbsp;&nbsp;&nbsp;2022.01&nbsp;&nbsp;&nbsp;&nbsp;Added&nbsp;to_hxstring&nbsp;-&nbsp;based&nbsp;on&nbsp;hxwrite&nbsp;(in&nbsp;TbUtilPkg&nbsp;prior&nbsp;to&nbsp;release)\n--&nbsp;&nbsp;&nbsp;&nbsp;08/2020&nbsp;&nbsp;&nbsp;2020.08&nbsp;&nbsp;&nbsp;&nbsp;Added&nbsp;ReadUntilDelimiterOrEOL&nbsp;and&nbsp;FindDelimiter\n--&nbsp;&nbsp;&nbsp;&nbsp;01/2020&nbsp;&nbsp;&nbsp;2020.01&nbsp;&nbsp;&nbsp;&nbsp;Updated&nbsp;Licenses&nbsp;to&nbsp;Apache\n--&nbsp;&nbsp;&nbsp;&nbsp;11/2016&nbsp;&nbsp;&nbsp;2016.11&nbsp;&nbsp;&nbsp;&nbsp;Added&nbsp;IsUpper,&nbsp;IsLower,&nbsp;to_upper,&nbsp;to_lower\n--&nbsp;&nbsp;&nbsp;&nbsp;01/2016&nbsp;&nbsp;&nbsp;2016.01&nbsp;&nbsp;&nbsp;&nbsp;Update&nbsp;for&nbsp;L.all(L&apos;left)\n--&nbsp;&nbsp;&nbsp;&nbsp;01/2015&nbsp;&nbsp;&nbsp;2015.05&nbsp;&nbsp;&nbsp;&nbsp;Initial&nbsp;revision\n--\n--\n--&nbsp;&nbsp;This&nbsp;file&nbsp;is&nbsp;part&nbsp;of&nbsp;OSVVM.\n--&nbsp;&nbsp;\n--&nbsp;&nbsp;Copyright&nbsp;(c)&nbsp;2015&nbsp;-&nbsp;2020&nbsp;by&nbsp;SynthWorks&nbsp;Design&nbsp;Inc.&nbsp;&nbsp;\n--&nbsp;&nbsp;\n--&nbsp;&nbsp;Licensed&nbsp;under&nbsp;the&nbsp;Apache&nbsp;License,&nbsp;Version&nbsp;2.0&nbsp;(the&nbsp;&quot;License&quot;);\n--&nbsp;&nbsp;you&nbsp;may&nbsp;not&nbsp;use&nbsp;this&nbsp;file&nbsp;except&nbsp;in&nbsp;compliance&nbsp;with&nbsp;the&nbsp;License.\n--&nbsp;&nbsp;You&nbsp;may&nbsp;obtain&nbsp;a&nbsp;copy&nbsp;of&nbsp;the&nbsp;License&nbsp;at\n--&nbsp;&nbsp;\n--&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;https://www.apache.org/licenses/LICENSE-2.0\n--&nbsp;&nbsp;\n--&nbsp;&nbsp;Unless&nbsp;required&nbsp;by&nbsp;applicable&nbsp;law&nbsp;or&nbsp;agreed&nbsp;to&nbsp;in&nbsp;writing,&nbsp;software\n--&nbsp;&nbsp;distributed&nbsp;under&nbsp;the&nbsp;License&nbsp;is&nbsp;distributed&nbsp;on&nbsp;an&nbsp;&quot;AS&nbsp;IS&quot;&nbsp;BASIS,\n--&nbsp;&nbsp;WITHOUT&nbsp;WARRANTIES&nbsp;OR&nbsp;CONDITIONS&nbsp;OF&nbsp;ANY&nbsp;KIND,&nbsp;either&nbsp;express&nbsp;or&nbsp;implied.\n--&nbsp;&nbsp;See&nbsp;the&nbsp;License&nbsp;for&nbsp;the&nbsp;specific&nbsp;language&nbsp;governing&nbsp;permissions&nbsp;and\n--&nbsp;&nbsp;limitations&nbsp;under&nbsp;the&nbsp;License.\n--&nbsp;&nbsp;\n&nbsp;\nuse&nbsp;std.textio.all&nbsp;;\nlibrary&nbsp;ieee&nbsp;;&nbsp;\nuse&nbsp;ieee.std_logic_1164.all&nbsp;;&nbsp;\nuse&nbsp;ieee.numeric_std.all&nbsp;;&nbsp;\n&nbsp;\npackage&nbsp;TextUtilPkg&nbsp;is\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;function&nbsp;IsUpper&nbsp;(constant&nbsp;Char&nbsp;:&nbsp;character&nbsp;)&nbsp;return&nbsp;boolean&nbsp;;\n&nbsp;&nbsp;function&nbsp;IsLower&nbsp;(constant&nbsp;Char&nbsp;:&nbsp;character&nbsp;)&nbsp;return&nbsp;boolean&nbsp;;\n&nbsp;&nbsp;function&nbsp;to_lower&nbsp;(constant&nbsp;Char&nbsp;:&nbsp;character&nbsp;)&nbsp;return&nbsp;character&nbsp;;\n&nbsp;&nbsp;function&nbsp;to_lower&nbsp;(constant&nbsp;Str&nbsp;:&nbsp;string&nbsp;)&nbsp;return&nbsp;string&nbsp;;\n&nbsp;&nbsp;function&nbsp;to_upper&nbsp;(constant&nbsp;Char&nbsp;:&nbsp;character&nbsp;)&nbsp;return&nbsp;character&nbsp;;\n&nbsp;&nbsp;function&nbsp;to_upper&nbsp;(constant&nbsp;Str&nbsp;:&nbsp;string&nbsp;)&nbsp;return&nbsp;string&nbsp;;\n&nbsp;&nbsp;function&nbsp;IsHex&nbsp;(constant&nbsp;Char&nbsp;:&nbsp;character&nbsp;)&nbsp;return&nbsp;boolean&nbsp;;&nbsp;\n&nbsp;&nbsp;function&nbsp;IsHexOrStdLogic&nbsp;(constant&nbsp;Char&nbsp;:&nbsp;character&nbsp;)&nbsp;return&nbsp;boolean&nbsp;;\n&nbsp;&nbsp;function&nbsp;IsNumber&nbsp;(constant&nbsp;Char&nbsp;:&nbsp;character&nbsp;)&nbsp;return&nbsp;boolean&nbsp;;&nbsp;\n&nbsp;&nbsp;function&nbsp;IsNumber&nbsp;(Name&nbsp;:&nbsp;string&nbsp;)&nbsp;return&nbsp;boolean&nbsp;;&nbsp;\n&nbsp;\n&nbsp;&nbsp;function&nbsp;isstd_logic&nbsp;(constant&nbsp;Char&nbsp;:&nbsp;character&nbsp;)&nbsp;return&nbsp;boolean&nbsp;;\n&nbsp;&nbsp;\n&nbsp;&nbsp;--&nbsp;Crutch&nbsp;until&nbsp;VHDL-2019&nbsp;conditional&nbsp;initialization\n&nbsp;&nbsp;function&nbsp;IfElse(Expr&nbsp;:&nbsp;boolean&nbsp;;&nbsp;A,&nbsp;B&nbsp;:&nbsp;string)&nbsp;return&nbsp;string&nbsp;;&nbsp;\n&nbsp;\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;procedure&nbsp;SkipWhiteSpace&nbsp;(\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;L&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;InOut&nbsp;line&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;Empty&nbsp;:&nbsp;out&nbsp;&nbsp;&nbsp;boolean\n&nbsp;&nbsp;)&nbsp;;\n&nbsp;&nbsp;procedure&nbsp;SkipWhiteSpace&nbsp;(variable&nbsp;L&nbsp;:&nbsp;InOut&nbsp;line)&nbsp;;\n&nbsp;&nbsp;\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;procedure&nbsp;EmptyOrCommentLine&nbsp;(\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;L&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;InOut&nbsp;&nbsp;line&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;Empty&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;InOut&nbsp;&nbsp;boolean&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;MultiLineComment&nbsp;:&nbsp;inout&nbsp;&nbsp;boolean&nbsp;\n&nbsp;&nbsp;)&nbsp;;\n&nbsp;&nbsp;\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;procedure&nbsp;ReadUntilDelimiterOrEOL(\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;L&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;InOut&nbsp;line&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;Name&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;InOut&nbsp;line&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;Delimiter&nbsp;:&nbsp;In&nbsp;&nbsp;&nbsp;&nbsp;character&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;ReadValid&nbsp;:&nbsp;Out&nbsp;&nbsp;&nbsp;boolean&nbsp;\n&nbsp;&nbsp;)&nbsp;;\n&nbsp;\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;procedure&nbsp;FindDelimiter(\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;L&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;InOut&nbsp;line&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;Delimiter&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;In&nbsp;&nbsp;&nbsp;&nbsp;character&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;Found&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;Out&nbsp;&nbsp;&nbsp;boolean&nbsp;\n&nbsp;&nbsp;)&nbsp;;\n&nbsp;\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;procedure&nbsp;ReadHexToken&nbsp;(\n&nbsp;&nbsp;--&nbsp;Reads&nbsp;Upto&nbsp;Result&apos;length&nbsp;values,&nbsp;less&nbsp;is&nbsp;ok.\n&nbsp;&nbsp;--&nbsp;Does&nbsp;not&nbsp;skip&nbsp;white&nbsp;space\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;L&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;InOut&nbsp;line&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;Result&nbsp;:&nbsp;Out&nbsp;&nbsp;&nbsp;std_logic_vector&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;StrLen&nbsp;:&nbsp;Out&nbsp;&nbsp;&nbsp;integer&nbsp;\n&nbsp;&nbsp;)&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;procedure&nbsp;ReadBinaryToken&nbsp;(\n&nbsp;&nbsp;--&nbsp;Reads&nbsp;Upto&nbsp;Result&apos;length&nbsp;values,&nbsp;less&nbsp;is&nbsp;ok.\n&nbsp;&nbsp;--&nbsp;Does&nbsp;not&nbsp;skip&nbsp;white&nbsp;space\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;L&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;InOut&nbsp;line&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;Result&nbsp;:&nbsp;Out&nbsp;&nbsp;&nbsp;std_logic_vector&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;StrLen&nbsp;:&nbsp;Out&nbsp;&nbsp;&nbsp;integer&nbsp;\n&nbsp;&nbsp;)&nbsp;;&nbsp;&nbsp;&nbsp;\n&nbsp;\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;--&nbsp;to_hxstring\n&nbsp;&nbsp;--&nbsp;&nbsp;&nbsp;print&nbsp;in&nbsp;hex.&nbsp;&nbsp;If&nbsp;string&nbsp;contains&nbsp;X,&nbsp;then&nbsp;also&nbsp;print&nbsp;in&nbsp;binary\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;function&nbsp;to_hxstring&nbsp;(&nbsp;A&nbsp;:&nbsp;std_ulogic_vector)&nbsp;return&nbsp;string&nbsp;;\n&nbsp;&nbsp;function&nbsp;to_hxstring&nbsp;(&nbsp;A&nbsp;:&nbsp;unsigned)&nbsp;return&nbsp;string&nbsp;;\n&nbsp;&nbsp;function&nbsp;to_hxstring&nbsp;(&nbsp;A&nbsp;:&nbsp;signed)&nbsp;return&nbsp;string&nbsp;;&nbsp;\n&nbsp;&nbsp;\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;--&nbsp;Justify\n&nbsp;&nbsp;--&nbsp;&nbsp;&nbsp;w/&nbsp;Fill&nbsp;Character\n&nbsp;&nbsp;--&nbsp;&nbsp;&nbsp;w/o&nbsp;Fill&nbsp;character,&nbsp;Parameter&nbsp;order&nbsp;&amp;&nbsp;names&nbsp;sensible\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;type&nbsp;AlignType&nbsp;is&nbsp;(RIGHT,&nbsp;LEFT,&nbsp;CENTER)&nbsp;;\n&nbsp;&nbsp;\n&nbsp;&nbsp;function&nbsp;Justify&nbsp;(\n&nbsp;&nbsp;&nbsp;&nbsp;S&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;string&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;Amount&nbsp;&nbsp;:&nbsp;natural&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;Align&nbsp;&nbsp;&nbsp;:&nbsp;AlignType&nbsp;:=&nbsp;LEFT\n&nbsp;&nbsp;)&nbsp;return&nbsp;string&nbsp;;&nbsp;&nbsp;\n&nbsp;\n&nbsp;&nbsp;function&nbsp;Justify&nbsp;(\n&nbsp;&nbsp;&nbsp;&nbsp;S&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;string&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;Fill&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;character&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;Amount&nbsp;&nbsp;:&nbsp;natural&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;Align&nbsp;&nbsp;&nbsp;:&nbsp;AlignType&nbsp;:=&nbsp;LEFT\n&nbsp;&nbsp;)&nbsp;return&nbsp;string&nbsp;;\n&nbsp;\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;--&nbsp;FileExists\n&nbsp;&nbsp;--&nbsp;&nbsp;&nbsp;&nbsp;Return&nbsp;TRUE&nbsp;if&nbsp;file&nbsp;exists\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;impure&nbsp;function&nbsp;FileExists(FileName&nbsp;:&nbsp;string)&nbsp;return&nbsp;boolean&nbsp;;&nbsp;\n&nbsp;\n&nbsp;\nend&nbsp;TextUtilPkg&nbsp;;\n&nbsp;&nbsp;\n---&nbsp;///////////////////////////////////////////////////////////////////////////\n---&nbsp;///////////////////////////////////////////////////////////////////////////\n---&nbsp;///////////////////////////////////////////////////////////////////////////\n&nbsp;\npackage&nbsp;body&nbsp;TextUtilPkg&nbsp;is\n&nbsp;&nbsp;type&nbsp;stdulogic_indexby_stdulogic&nbsp;is&nbsp;array&nbsp;(std_ulogic)&nbsp;of&nbsp;std_ulogic;\n&nbsp;\n&nbsp;&nbsp;constant&nbsp;LOWER_TO_UPPER_OFFSET&nbsp;:&nbsp;integer&nbsp;:=&nbsp;character&apos;POS(&apos;a&apos;)&nbsp;-&nbsp;character&apos;POS(&apos;A&apos;)&nbsp;;\n&nbsp;&nbsp;\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;function&nbsp;&quot;-&quot;&nbsp;(R&nbsp;:&nbsp;character&nbsp;;&nbsp;L&nbsp;:&nbsp;integer&nbsp;)&nbsp;return&nbsp;character&nbsp;is\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;character&apos;VAL(character&apos;pos(R)&nbsp;-&nbsp;L)&nbsp;;&nbsp;&nbsp;\n&nbsp;&nbsp;end&nbsp;function&nbsp;&quot;-&quot;&nbsp;;&nbsp;\n&nbsp;&nbsp;\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;function&nbsp;&quot;+&quot;&nbsp;(R&nbsp;:&nbsp;character&nbsp;;&nbsp;L&nbsp;:&nbsp;integer&nbsp;)&nbsp;return&nbsp;character&nbsp;is\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;character&apos;VAL(character&apos;pos(R)&nbsp;+&nbsp;L)&nbsp;;&nbsp;&nbsp;\n&nbsp;&nbsp;end&nbsp;function&nbsp;&quot;+&quot;&nbsp;;&nbsp;\n&nbsp;\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;function&nbsp;IsUpper&nbsp;(constant&nbsp;Char&nbsp;:&nbsp;character&nbsp;)&nbsp;return&nbsp;boolean&nbsp;is\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;Char&nbsp;&gt;=&nbsp;&apos;A&apos;&nbsp;and&nbsp;Char&nbsp;&lt;=&nbsp;&apos;Z&apos;&nbsp;then&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;TRUE&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;else\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;FALSE&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;if&nbsp;;&nbsp;\n&nbsp;&nbsp;end&nbsp;function&nbsp;IsUpper&nbsp;;&nbsp;\n&nbsp;&nbsp;\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;function&nbsp;IsLower&nbsp;(constant&nbsp;Char&nbsp;:&nbsp;character&nbsp;)&nbsp;return&nbsp;boolean&nbsp;is\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;Char&nbsp;&gt;=&nbsp;&apos;a&apos;&nbsp;and&nbsp;Char&nbsp;&lt;=&nbsp;&apos;z&apos;&nbsp;then&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;TRUE&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;else\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;FALSE&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;if&nbsp;;&nbsp;\n&nbsp;&nbsp;end&nbsp;function&nbsp;IsLower&nbsp;;\n&nbsp;\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;function&nbsp;to_lower&nbsp;(constant&nbsp;Char&nbsp;:&nbsp;character&nbsp;)&nbsp;return&nbsp;character&nbsp;is\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;IsUpper(Char)&nbsp;then&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;Char&nbsp;+&nbsp;LOWER_TO_UPPER_OFFSET&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;else\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;Char&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;if&nbsp;;&nbsp;\n&nbsp;&nbsp;end&nbsp;function&nbsp;to_lower&nbsp;;\n&nbsp;\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;function&nbsp;to_lower&nbsp;(constant&nbsp;Str&nbsp;:&nbsp;string&nbsp;)&nbsp;return&nbsp;string&nbsp;is\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;result&nbsp;:&nbsp;string(Str&apos;range)&nbsp;;\n&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;i&nbsp;in&nbsp;Str&apos;range&nbsp;loop&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;result(i)&nbsp;:=&nbsp;to_lower(Str(i))&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;loop&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;result&nbsp;;&nbsp;\n&nbsp;&nbsp;end&nbsp;function&nbsp;to_lower&nbsp;;\n&nbsp;\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;function&nbsp;to_upper&nbsp;(constant&nbsp;Char&nbsp;:&nbsp;character&nbsp;)&nbsp;return&nbsp;character&nbsp;is\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;IsLower(Char)&nbsp;then&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;Char&nbsp;-&nbsp;LOWER_TO_UPPER_OFFSET&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;else\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;Char&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;if&nbsp;;&nbsp;\n&nbsp;&nbsp;end&nbsp;function&nbsp;to_upper&nbsp;;\n&nbsp;\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;function&nbsp;to_upper&nbsp;(constant&nbsp;Str&nbsp;:&nbsp;string&nbsp;)&nbsp;return&nbsp;string&nbsp;is\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;result&nbsp;:&nbsp;string(Str&apos;range)&nbsp;;\n&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;i&nbsp;in&nbsp;Str&apos;range&nbsp;loop&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;result(i)&nbsp;:=&nbsp;to_upper(Str(i))&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;loop&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;result&nbsp;;&nbsp;\n&nbsp;&nbsp;end&nbsp;function&nbsp;to_upper&nbsp;;\n&nbsp;\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;function&nbsp;IsHex&nbsp;(constant&nbsp;Char&nbsp;:&nbsp;character&nbsp;)&nbsp;return&nbsp;boolean&nbsp;is\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;case&nbsp;Char&nbsp;is&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;when&nbsp;&apos;0&apos;&nbsp;to&nbsp;&apos;9&apos;&nbsp;=&gt;&nbsp;&nbsp;&nbsp;return&nbsp;TRUE&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;when&nbsp;&apos;a&apos;&nbsp;to&nbsp;&apos;f&apos;&nbsp;=&gt;&nbsp;&nbsp;&nbsp;return&nbsp;TRUE&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;when&nbsp;&apos;A&apos;&nbsp;to&nbsp;&apos;F&apos;&nbsp;=&gt;&nbsp;&nbsp;&nbsp;return&nbsp;TRUE&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;when&nbsp;others&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&gt;&nbsp;&nbsp;&nbsp;return&nbsp;FALSE&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;case&nbsp;;&nbsp;\n&nbsp;&nbsp;end&nbsp;function&nbsp;IsHex&nbsp;;&nbsp;\n&nbsp;\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;function&nbsp;IsHexOrStdLogic&nbsp;(constant&nbsp;Char&nbsp;:&nbsp;character&nbsp;)&nbsp;return&nbsp;boolean&nbsp;is\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;case&nbsp;Char&nbsp;is&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;when&nbsp;&apos;0&apos;&nbsp;to&nbsp;&apos;9&apos;&nbsp;=&gt;&nbsp;&nbsp;&nbsp;return&nbsp;TRUE&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;when&nbsp;&apos;a&apos;&nbsp;to&nbsp;&apos;f&apos;&nbsp;=&gt;&nbsp;&nbsp;&nbsp;return&nbsp;TRUE&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;when&nbsp;&apos;A&apos;&nbsp;to&nbsp;&apos;F&apos;&nbsp;=&gt;&nbsp;&nbsp;&nbsp;return&nbsp;TRUE&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;when&nbsp;&apos;U&apos;&nbsp;|&nbsp;&apos;X&apos;&nbsp;|&nbsp;&apos;Z&apos;&nbsp;|&nbsp;&apos;W&apos;&nbsp;|&nbsp;&apos;L&apos;&nbsp;|&nbsp;&apos;H&apos;&nbsp;|&nbsp;&apos;-&apos;&nbsp;=&gt;&nbsp;return&nbsp;TRUE&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;when&nbsp;others&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&gt;&nbsp;&nbsp;&nbsp;return&nbsp;FALSE&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;case&nbsp;;&nbsp;\n&nbsp;&nbsp;end&nbsp;function&nbsp;IsHexOrStdLogic&nbsp;;&nbsp;\n&nbsp;&nbsp;\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;function&nbsp;IsNumber&nbsp;(constant&nbsp;Char&nbsp;:&nbsp;character&nbsp;)&nbsp;return&nbsp;boolean&nbsp;is&nbsp;\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;Char&nbsp;&gt;=&nbsp;&apos;0&apos;&nbsp;and&nbsp;Char&nbsp;&lt;=&nbsp;&apos;9&apos;&nbsp;;\n&nbsp;&nbsp;end&nbsp;function&nbsp;IsNumber&nbsp;;&nbsp;\n&nbsp;&nbsp;\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;function&nbsp;IsNumber&nbsp;(Name&nbsp;:&nbsp;string&nbsp;)&nbsp;return&nbsp;boolean&nbsp;is\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;i&nbsp;in&nbsp;Name&apos;range&nbsp;loop&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;not&nbsp;IsNumber(Name(i))&nbsp;then&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;FALSE&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;if&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;loop&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;TRUE&nbsp;;&nbsp;\n&nbsp;&nbsp;end&nbsp;function&nbsp;IsNumber&nbsp;;&nbsp;\n&nbsp;\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;function&nbsp;isstd_logic&nbsp;(constant&nbsp;Char&nbsp;:&nbsp;character&nbsp;)&nbsp;return&nbsp;boolean&nbsp;is\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;case&nbsp;Char&nbsp;is\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;when&nbsp;&apos;U&apos;&nbsp;|&nbsp;&apos;X&apos;&nbsp;|&nbsp;&apos;0&apos;&nbsp;|&nbsp;&apos;1&apos;&nbsp;|&nbsp;&apos;Z&apos;&nbsp;|&nbsp;&apos;W&apos;&nbsp;|&nbsp;&apos;L&apos;&nbsp;|&nbsp;&apos;H&apos;&nbsp;|&nbsp;&apos;-&apos;&nbsp;=&gt;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;TRUE&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;when&nbsp;others&nbsp;=&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;FALSE&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;case&nbsp;;&nbsp;\n&nbsp;&nbsp;end&nbsp;function&nbsp;isstd_logic&nbsp;;\n&nbsp;&nbsp;\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;function&nbsp;IfElse(Expr&nbsp;:&nbsp;boolean&nbsp;;&nbsp;A,&nbsp;B&nbsp;:&nbsp;string)&nbsp;return&nbsp;string&nbsp;is&nbsp;\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;Expr&nbsp;then&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;A&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;else\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;B&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;if&nbsp;;&nbsp;\n&nbsp;&nbsp;end&nbsp;function&nbsp;IfElse&nbsp;;&nbsp;\n&nbsp;&nbsp;\n--&nbsp;&nbsp;------------------------------------------------------------\n--&nbsp;&nbsp;function&nbsp;iscomment&nbsp;(constant&nbsp;Char&nbsp;:&nbsp;character&nbsp;)&nbsp;return&nbsp;boolean&nbsp;is\n--&nbsp;&nbsp;------------------------------------------------------------\n--&nbsp;&nbsp;begin\n--&nbsp;&nbsp;&nbsp;&nbsp;case&nbsp;Char&nbsp;is\n--&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;when&nbsp;&apos;#&apos;&nbsp;|&nbsp;&apos;/&apos;&nbsp;|&nbsp;&apos;-&apos;&nbsp;&nbsp;=&gt;&nbsp;\n--&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;TRUE&nbsp;;&nbsp;\n--&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;when&nbsp;others&nbsp;=&gt;\n--&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;FALSE&nbsp;;&nbsp;\n--&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;case&nbsp;;&nbsp;\n--&nbsp;&nbsp;end&nbsp;function&nbsp;iscomment&nbsp;;\n&nbsp;\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;procedure&nbsp;SkipWhiteSpace&nbsp;(\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;L&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;InOut&nbsp;line&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;Empty&nbsp;:&nbsp;out&nbsp;&nbsp;&nbsp;boolean\n&nbsp;&nbsp;)&nbsp;is\n&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;Valid&nbsp;:&nbsp;boolean&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;Char&nbsp;&nbsp;:&nbsp;character&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;NBSP&nbsp;&nbsp;:&nbsp;CHARACTER&nbsp;:=&nbsp;CHARACTER&apos;val(160);&nbsp;&nbsp;--&nbsp;space&nbsp;character\n&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;Empty&nbsp;:=&nbsp;TRUE&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;WhiteSpLoop&nbsp;:&nbsp;while&nbsp;L&nbsp;/=&nbsp;null&nbsp;and&nbsp;L.all&apos;length&nbsp;&gt;&nbsp;0&nbsp;loop\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(L.all(L&apos;left)&nbsp;=&nbsp;&apos;&nbsp;&apos;&nbsp;or&nbsp;L.all(L&apos;left)&nbsp;=&nbsp;NBSP&nbsp;or&nbsp;L.all(L&apos;left)&nbsp;=&nbsp;HT)&nbsp;then\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;read&nbsp;(L,&nbsp;Char,&nbsp;Valid)&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;exit&nbsp;when&nbsp;not&nbsp;Valid&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Empty&nbsp;:=&nbsp;FALSE&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;if&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;loop&nbsp;WhiteSpLoop&nbsp;;\n&nbsp;&nbsp;end&nbsp;procedure&nbsp;SkipWhiteSpace&nbsp;;\n&nbsp;\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;procedure&nbsp;SkipWhiteSpace&nbsp;(\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;L&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;InOut&nbsp;line&nbsp;\n&nbsp;&nbsp;)&nbsp;is\n&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;Empty&nbsp;:&nbsp;boolean&nbsp;;\n&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;SkipWhiteSpace(L,&nbsp;Empty)&nbsp;;&nbsp;\n&nbsp;&nbsp;end&nbsp;procedure&nbsp;SkipWhiteSpace&nbsp;;\n&nbsp;&nbsp;\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;--&nbsp;Package&nbsp;Local&nbsp;\n&nbsp;&nbsp;procedure&nbsp;FindCommentEnd&nbsp;(\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;L&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;InOut&nbsp;line&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;Empty&nbsp;:&nbsp;out&nbsp;&nbsp;&nbsp;boolean&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;MultiLineComment&nbsp;:&nbsp;inout&nbsp;boolean&nbsp;\n&nbsp;&nbsp;)&nbsp;is\n&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;Valid&nbsp;:&nbsp;boolean&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;Char&nbsp;&nbsp;:&nbsp;character&nbsp;;\n&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;MultiLineComment&nbsp;:=&nbsp;TRUE&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;Empty&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:=&nbsp;TRUE&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;FindEndOfCommentLoop&nbsp;:&nbsp;while&nbsp;L&nbsp;/=&nbsp;null&nbsp;and&nbsp;L.all&apos;length&nbsp;&gt;&nbsp;1&nbsp;loop\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;read(L,&nbsp;Char,&nbsp;Valid)&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;Char&nbsp;=&nbsp;&apos;*&apos;&nbsp;and&nbsp;L.all(L&apos;left)&nbsp;=&nbsp;&apos;/&apos;&nbsp;then\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;read(L,&nbsp;Char,&nbsp;Valid)&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Empty&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:=&nbsp;FALSE&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MultiLineComment&nbsp;:=&nbsp;FALSE&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;exit&nbsp;FindEndOfCommentLoop&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;if&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;loop&nbsp;;&nbsp;\n&nbsp;&nbsp;end&nbsp;procedure&nbsp;FindCommentEnd&nbsp;;\n&nbsp;&nbsp;\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;procedure&nbsp;EmptyOrCommentLine&nbsp;(\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;L&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;InOut&nbsp;&nbsp;line&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;Empty&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;InOut&nbsp;&nbsp;boolean&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;MultiLineComment&nbsp;:&nbsp;inout&nbsp;&nbsp;boolean&nbsp;\n&nbsp;&nbsp;)&nbsp;is\n&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;Valid&nbsp;:&nbsp;boolean&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;Next2Char&nbsp;&nbsp;:&nbsp;string(1&nbsp;to&nbsp;2)&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;NBSP&nbsp;&nbsp;:&nbsp;CHARACTER&nbsp;:=&nbsp;CHARACTER&apos;val(160);&nbsp;&nbsp;--&nbsp;space&nbsp;character\n&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;MultiLineComment&nbsp;then&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FindCommentEnd(L,&nbsp;Empty,&nbsp;MultiLineComment)&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;if&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;EmptyCheckLoop&nbsp;:&nbsp;while&nbsp;not&nbsp;MultiLineComment&nbsp;loop&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SkipWhiteSpace(L,&nbsp;Empty)&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;exit&nbsp;when&nbsp;Empty&nbsp;;&nbsp;--&nbsp;line&nbsp;null&nbsp;or&nbsp;0&nbsp;in&nbsp;length&nbsp;detected&nbsp;by&nbsp;SkipWhite\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Empty&nbsp;:=&nbsp;TRUE&nbsp;;&nbsp;\n&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;exit&nbsp;when&nbsp;L.all(L&apos;left)&nbsp;=&nbsp;&apos;#&apos;&nbsp;;&nbsp;--&nbsp;shell&nbsp;style&nbsp;comment\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;L.all&apos;length&nbsp;&gt;=&nbsp;2&nbsp;then&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;L&apos;ascending&nbsp;then&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Next2Char&nbsp;:=&nbsp;L.all(L&apos;left&nbsp;to&nbsp;L&apos;left+1)&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Next2Char&nbsp;:=&nbsp;L.all(L&apos;left&nbsp;downto&nbsp;L&apos;left-1)&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;if;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;exit&nbsp;when&nbsp;Next2Char&nbsp;=&nbsp;&quot;//&quot;&nbsp;;&nbsp;--&nbsp;C&nbsp;style&nbsp;comment\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;exit&nbsp;when&nbsp;Next2Char&nbsp;=&nbsp;&quot;--&quot;&nbsp;;&nbsp;--&nbsp;VHDL&nbsp;style&nbsp;comment\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;Next2Char&nbsp;=&nbsp;&quot;/*&quot;&nbsp;then&nbsp;&nbsp;&nbsp;--&nbsp;C&nbsp;style&nbsp;multi&nbsp;line&nbsp;comment\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FindCommentEnd(L,&nbsp;Empty,&nbsp;MultiLineComment)&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;exit&nbsp;when&nbsp;Empty&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;next&nbsp;EmptyCheckLoop&nbsp;;&nbsp;--&nbsp;Found&nbsp;end&nbsp;of&nbsp;comment,&nbsp;restart&nbsp;processing&nbsp;line\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;if&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;if&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Empty&nbsp;:=&nbsp;FALSE&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;exit&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;loop&nbsp;EmptyCheckLoop&nbsp;;\n&nbsp;&nbsp;end&nbsp;procedure&nbsp;EmptyOrCommentLine&nbsp;;\n&nbsp;&nbsp;\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;procedure&nbsp;ReadUntilDelimiterOrEOL(\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;L&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;InOut&nbsp;line&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;Name&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;InOut&nbsp;line&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;Delimiter&nbsp;:&nbsp;In&nbsp;&nbsp;&nbsp;&nbsp;character&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;ReadValid&nbsp;:&nbsp;Out&nbsp;&nbsp;&nbsp;boolean&nbsp;\n&nbsp;&nbsp;)&nbsp;is\n&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;NameStr&nbsp;&nbsp;&nbsp;:&nbsp;string(1&nbsp;to&nbsp;L&apos;length)&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;ReadLen&nbsp;&nbsp;&nbsp;:&nbsp;integer&nbsp;:=&nbsp;1&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;Good&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;boolean&nbsp;;&nbsp;\n&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;ReadValid&nbsp;:=&nbsp;TRUE&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;i&nbsp;in&nbsp;NameStr&apos;range&nbsp;loop\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Read(L,&nbsp;NameStr(i),&nbsp;Good)&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ReadValid&nbsp;:=&nbsp;ReadValid&nbsp;and&nbsp;Good&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;NameStr(i)&nbsp;=&nbsp;Delimiter&nbsp;then&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;Read(L,&nbsp;NameStr(1&nbsp;to&nbsp;i),&nbsp;ReadValid)&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Name&nbsp;:=&nbsp;new&nbsp;string&apos;(NameStr(1&nbsp;to&nbsp;i-1))&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;exit&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elsif&nbsp;i&nbsp;=&nbsp;NameStr&apos;length&nbsp;then&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;Read(L,&nbsp;NameStr(1&nbsp;to&nbsp;i),&nbsp;ReadValid)&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Name&nbsp;:=&nbsp;new&nbsp;string&apos;(NameStr(1&nbsp;to&nbsp;i))&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;exit&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;if&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;loop&nbsp;;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;end&nbsp;procedure&nbsp;ReadUntilDelimiterOrEOL&nbsp;;&nbsp;\n&nbsp;&nbsp;\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;procedure&nbsp;FindDelimiter(\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;L&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;InOut&nbsp;line&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;Delimiter&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;In&nbsp;&nbsp;&nbsp;&nbsp;character&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;Found&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;Out&nbsp;&nbsp;&nbsp;boolean&nbsp;\n&nbsp;&nbsp;)&nbsp;is\n&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;Char&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;Character&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;ReadValid&nbsp;&nbsp;:&nbsp;boolean&nbsp;;&nbsp;\n&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;Found&nbsp;:=&nbsp;FALSE&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;ReadLoop&nbsp;:&nbsp;loop&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;Delimiter&nbsp;/=&nbsp;&apos;&nbsp;&apos;&nbsp;then&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SkipWhiteSpace(L)&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;if&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Read(L,&nbsp;Char,&nbsp;ReadValid)&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;exit&nbsp;when&nbsp;ReadValid&nbsp;=&nbsp;FALSE&nbsp;or&nbsp;Char&nbsp;/=&nbsp;Delimiter&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Found&nbsp;:=&nbsp;TRUE&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;exit&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;loop&nbsp;;\n&nbsp;&nbsp;end&nbsp;procedure&nbsp;FindDelimiter&nbsp;;&nbsp;\n&nbsp;\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;procedure&nbsp;ReadHexToken&nbsp;(\n&nbsp;&nbsp;--&nbsp;Reads&nbsp;Upto&nbsp;Result&apos;length&nbsp;values,&nbsp;less&nbsp;is&nbsp;ok.\n&nbsp;&nbsp;--&nbsp;Does&nbsp;not&nbsp;skip&nbsp;white&nbsp;space\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;L&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;InOut&nbsp;line&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;Result&nbsp;:&nbsp;Out&nbsp;&nbsp;&nbsp;std_logic_vector&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;StrLen&nbsp;:&nbsp;Out&nbsp;&nbsp;&nbsp;integer&nbsp;\n&nbsp;&nbsp;)&nbsp;is\n&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;NumHexChars&nbsp;&nbsp;&nbsp;:&nbsp;integer&nbsp;:=&nbsp;(Result&apos;length+3)/4&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;ResultNormLen&nbsp;:&nbsp;integer&nbsp;:=&nbsp;NumHexChars&nbsp;*&nbsp;4&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;NextChar&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;character&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;CharCount&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;integer&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;ReturnVal&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;std_logic_vector(ResultNormLen-1&nbsp;downto&nbsp;0)&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;ReadVal&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;std_logic_vector(3&nbsp;downto&nbsp;0)&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;ReadValSl&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;std_logic&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;ReadValid&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;boolean&nbsp;;&nbsp;\n&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;ReturnVal&nbsp;:=&nbsp;(others&nbsp;=&gt;&nbsp;&apos;0&apos;)&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;CharCount&nbsp;:=&nbsp;0&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;ReadLoop&nbsp;:&nbsp;while&nbsp;L&nbsp;/=&nbsp;null&nbsp;and&nbsp;L.all&apos;length&nbsp;&gt;&nbsp;0&nbsp;loop\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;NextChar&nbsp;:=&nbsp;L.all(L&apos;left)&nbsp;;&nbsp;\n--&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;ishex(NextChar)&nbsp;or&nbsp;NextChar&nbsp;=&nbsp;&apos;X&apos;&nbsp;or&nbsp;NextChar&nbsp;=&nbsp;&apos;Z&apos;&nbsp;then&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;IsHexOrStdLogic(NextChar)&nbsp;then&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;Currently&nbsp;hread&nbsp;only&nbsp;handles&nbsp;X&nbsp;or&nbsp;Z\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;IsHex(NextChar)&nbsp;then\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;hread(L,&nbsp;ReadVal,&nbsp;ReadValid)&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;read(L,&nbsp;ReadValSl,&nbsp;ReadValid)&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ReadVal&nbsp;:=&nbsp;ReadValSl&nbsp;&amp;&nbsp;ReadValSl&nbsp;&amp;&nbsp;ReadValSl&nbsp;&amp;&nbsp;ReadValSl&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;if&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ReturnVal&nbsp;:=&nbsp;ReturnVal(ResultNormLen-5&nbsp;downto&nbsp;0)&nbsp;&amp;&nbsp;ReadVal&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CharCount&nbsp;:=&nbsp;CharCount&nbsp;+&nbsp;1&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;exit&nbsp;ReadLoop&nbsp;when&nbsp;CharCount&nbsp;&gt;=&nbsp;NumHexChars&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elsif&nbsp;NextChar&nbsp;=&nbsp;&apos;_&apos;&nbsp;then&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;read(L,&nbsp;NextChar,&nbsp;ReadValid)&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;exit&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;if&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;loop&nbsp;ReadLoop&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;CharCount&nbsp;&gt;=&nbsp;NumHexChars&nbsp;then&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;StrLen&nbsp;:=&nbsp;Result&apos;length&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;else\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;StrLen&nbsp;:=&nbsp;CharCount&nbsp;*&nbsp;4&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;if&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;Result&nbsp;:=&nbsp;ReturnVal(Result&apos;length-1&nbsp;downto&nbsp;0)&nbsp;;&nbsp;\n&nbsp;&nbsp;end&nbsp;procedure&nbsp;ReadHexToken&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;procedure&nbsp;ReadBinaryToken&nbsp;(\n&nbsp;&nbsp;--&nbsp;Reads&nbsp;Upto&nbsp;Result&apos;length&nbsp;values,&nbsp;less&nbsp;is&nbsp;ok.\n&nbsp;&nbsp;--&nbsp;Does&nbsp;not&nbsp;skip&nbsp;white&nbsp;space\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;L&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;InOut&nbsp;line&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;Result&nbsp;:&nbsp;Out&nbsp;&nbsp;&nbsp;std_logic_vector&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;StrLen&nbsp;:&nbsp;Out&nbsp;&nbsp;&nbsp;integer&nbsp;\n&nbsp;&nbsp;)&nbsp;is\n&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;NextChar&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;character&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;CharCount&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;integer&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;ReadVal&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;std_logic&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;ReturnVal&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;std_logic_vector(Result&apos;length-1&nbsp;downto&nbsp;0)&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;ReadValid&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;boolean&nbsp;;&nbsp;\n&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;ReturnVal&nbsp;:=&nbsp;(others&nbsp;=&gt;&nbsp;&apos;0&apos;)&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;CharCount&nbsp;:=&nbsp;0&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;ReadLoop&nbsp;:&nbsp;while&nbsp;L&nbsp;/=&nbsp;null&nbsp;and&nbsp;L.all&apos;length&nbsp;&gt;&nbsp;0&nbsp;loop\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;NextChar&nbsp;:=&nbsp;L.all(L&apos;left)&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;isstd_logic(NextChar)&nbsp;then&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;read(L,&nbsp;ReadVal,&nbsp;ReadValid)&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ReturnVal&nbsp;:=&nbsp;ReturnVal(Result&apos;length-2&nbsp;downto&nbsp;0)&nbsp;&amp;&nbsp;ReadVal&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CharCount&nbsp;:=&nbsp;CharCount&nbsp;+&nbsp;1&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;exit&nbsp;ReadLoop&nbsp;when&nbsp;CharCount&nbsp;&gt;=&nbsp;Result&apos;length&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elsif&nbsp;NextChar&nbsp;=&nbsp;&apos;_&apos;&nbsp;then&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;read(L,&nbsp;NextChar,&nbsp;ReadValid)&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;exit&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;if&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;loop&nbsp;ReadLoop&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;StrLen&nbsp;:=&nbsp;CharCount&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;Result&nbsp;:=&nbsp;ReturnVal&nbsp;;\n&nbsp;&nbsp;end&nbsp;procedure&nbsp;ReadBinaryToken&nbsp;;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;--&nbsp;RemoveHLTable\n&nbsp;&nbsp;--&nbsp;&nbsp;&nbsp;Convert&nbsp;L&nbsp;to&nbsp;0&nbsp;and&nbsp;H&nbsp;to&nbsp;1,&nbsp;and&nbsp;nothing&nbsp;else\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;constant&nbsp;RemoveHLTable&nbsp;:&nbsp;stdulogic_indexby_stdulogic&nbsp;:=&nbsp;(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&apos;U&apos;&nbsp;&nbsp;&nbsp;=&gt;&nbsp;&apos;U&apos;,&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&apos;X&apos;&nbsp;&nbsp;&nbsp;=&gt;&nbsp;&apos;X&apos;,&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&apos;0&apos;&nbsp;&nbsp;&nbsp;=&gt;&nbsp;&apos;0&apos;,&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&apos;1&apos;&nbsp;&nbsp;&nbsp;=&gt;&nbsp;&apos;1&apos;,&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&apos;Z&apos;&nbsp;&nbsp;&nbsp;=&gt;&nbsp;&apos;Z&apos;,&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&apos;W&apos;&nbsp;&nbsp;&nbsp;=&gt;&nbsp;&apos;W&apos;,&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&apos;L&apos;&nbsp;&nbsp;&nbsp;=&gt;&nbsp;&apos;0&apos;,&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&apos;H&apos;&nbsp;&nbsp;&nbsp;=&gt;&nbsp;&apos;1&apos;,&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&apos;-&apos;&nbsp;&nbsp;&nbsp;=&gt;&nbsp;&apos;-&apos;\n&nbsp;&nbsp;);&nbsp;\n&nbsp;&nbsp;\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;--&nbsp;local\n&nbsp;&nbsp;function&nbsp;RemoveHL(A&nbsp;:&nbsp;std_ulogic_vector)&nbsp;return&nbsp;std_ulogic_vector&nbsp;is&nbsp;\n&nbsp;&nbsp;------------------------------------------------------------\n--&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;result&nbsp;:&nbsp;A&apos;subtype&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;result&nbsp;:&nbsp;std_ulogic_vector(A&apos;range)&nbsp;;\n&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;i&nbsp;in&nbsp;result&apos;range&nbsp;loop&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;result(i)&nbsp;:=&nbsp;RemoveHLTable(A(i))&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;loop&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;result&nbsp;;&nbsp;\n&nbsp;&nbsp;end&nbsp;function&nbsp;RemoveHL&nbsp;;\n&nbsp;&nbsp;\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;--&nbsp;local_to_hxstring&nbsp;&nbsp;\n&nbsp;&nbsp;function&nbsp;local_to_hxstring&nbsp;(&nbsp;A&nbsp;:&nbsp;std_ulogic_vector;&nbsp;IsSigned&nbsp;:&nbsp;Boolean&nbsp;:=&nbsp;TRUE&nbsp;)&nbsp;return&nbsp;string&nbsp;is\n&nbsp;&nbsp;--&nbsp;Code&nbsp;based&nbsp;on&nbsp;to_hstring&nbsp;from&nbsp;std_logic_1164-body.vhd\n&nbsp;&nbsp;--&nbsp;Copyright&nbsp;2019&nbsp;IEEE&nbsp;P1076&nbsp;WG&nbsp;Authors\n&nbsp;&nbsp;--&nbsp;License:&nbsp;&nbsp;Apache&nbsp;License&nbsp;2.0&nbsp;-&nbsp;same&nbsp;as&nbsp;this&nbsp;package\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;STRING_LEN&nbsp;&nbsp;&nbsp;:&nbsp;integer&nbsp;:=&nbsp;(A&apos;length+3)/4;\n&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;result&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;string(1&nbsp;to&nbsp;STRING_LEN);\n&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;EXTEND_A_LEN&nbsp;:&nbsp;integer&nbsp;:=&nbsp;STRING_LEN*4&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;ExtendedA&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;std_ulogic_vector(1&nbsp;to&nbsp;EXTEND_A_LEN)&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;PadA&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;std_ulogic_vector(1&nbsp;to&nbsp;EXTEND_A_LEN&nbsp;-&nbsp;A&apos;length)&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;HexVal&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;std_ulogic_vector(1&nbsp;to&nbsp;4)&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;PrintBinary&nbsp;&nbsp;:&nbsp;boolean&nbsp;:=&nbsp;FALSE&nbsp;;&nbsp;\n&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;A&apos;length&nbsp;=&nbsp;0&nbsp;then&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;&quot;&quot;&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;if&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;IsSigned&nbsp;or&nbsp;is_x(A(A&apos;left))&nbsp;then&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PadA&nbsp;:=&nbsp;(others&nbsp;=&gt;&nbsp;A(A&apos;left))&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;else\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PadA&nbsp;:=&nbsp;(others&nbsp;=&gt;&nbsp;&apos;0&apos;)&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;if&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;ExtendedA&nbsp;:=&nbsp;RemoveHL(PadA&nbsp;&amp;&nbsp;A)&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;i&nbsp;in&nbsp;result&apos;range&nbsp;loop\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;HexVal&nbsp;:=&nbsp;ExtendedA(4*i-3&nbsp;to&nbsp;4*i);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case&nbsp;HexVal&nbsp;is\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;when&nbsp;X&quot;0&quot;&nbsp;&nbsp;&nbsp;=&gt;&nbsp;result(i)&nbsp;:=&nbsp;&apos;0&apos;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;when&nbsp;X&quot;1&quot;&nbsp;&nbsp;&nbsp;=&gt;&nbsp;result(i)&nbsp;:=&nbsp;&apos;1&apos;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;when&nbsp;X&quot;2&quot;&nbsp;&nbsp;&nbsp;=&gt;&nbsp;result(i)&nbsp;:=&nbsp;&apos;2&apos;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;when&nbsp;X&quot;3&quot;&nbsp;&nbsp;&nbsp;=&gt;&nbsp;result(i)&nbsp;:=&nbsp;&apos;3&apos;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;when&nbsp;X&quot;4&quot;&nbsp;&nbsp;&nbsp;=&gt;&nbsp;result(i)&nbsp;:=&nbsp;&apos;4&apos;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;when&nbsp;X&quot;5&quot;&nbsp;&nbsp;&nbsp;=&gt;&nbsp;result(i)&nbsp;:=&nbsp;&apos;5&apos;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;when&nbsp;X&quot;6&quot;&nbsp;&nbsp;&nbsp;=&gt;&nbsp;result(i)&nbsp;:=&nbsp;&apos;6&apos;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;when&nbsp;X&quot;7&quot;&nbsp;&nbsp;&nbsp;=&gt;&nbsp;result(i)&nbsp;:=&nbsp;&apos;7&apos;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;when&nbsp;X&quot;8&quot;&nbsp;&nbsp;&nbsp;=&gt;&nbsp;result(i)&nbsp;:=&nbsp;&apos;8&apos;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;when&nbsp;X&quot;9&quot;&nbsp;&nbsp;&nbsp;=&gt;&nbsp;result(i)&nbsp;:=&nbsp;&apos;9&apos;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;when&nbsp;X&quot;A&quot;&nbsp;&nbsp;&nbsp;=&gt;&nbsp;result(i)&nbsp;:=&nbsp;&apos;A&apos;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;when&nbsp;X&quot;B&quot;&nbsp;&nbsp;&nbsp;=&gt;&nbsp;result(i)&nbsp;:=&nbsp;&apos;B&apos;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;when&nbsp;X&quot;C&quot;&nbsp;&nbsp;&nbsp;=&gt;&nbsp;result(i)&nbsp;:=&nbsp;&apos;C&apos;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;when&nbsp;X&quot;D&quot;&nbsp;&nbsp;&nbsp;=&gt;&nbsp;result(i)&nbsp;:=&nbsp;&apos;D&apos;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;when&nbsp;X&quot;E&quot;&nbsp;&nbsp;&nbsp;=&gt;&nbsp;result(i)&nbsp;:=&nbsp;&apos;E&apos;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;when&nbsp;X&quot;F&quot;&nbsp;&nbsp;&nbsp;=&gt;&nbsp;result(i)&nbsp;:=&nbsp;&apos;F&apos;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;when&nbsp;&quot;UUUU&quot;&nbsp;=&gt;&nbsp;result(i)&nbsp;:=&nbsp;&apos;U&apos;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;when&nbsp;&quot;XXXX&quot;&nbsp;=&gt;&nbsp;result(i)&nbsp;:=&nbsp;&apos;X&apos;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;when&nbsp;&quot;ZZZZ&quot;&nbsp;=&gt;&nbsp;result(i)&nbsp;:=&nbsp;&apos;Z&apos;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;when&nbsp;&quot;WWWW&quot;&nbsp;=&gt;&nbsp;result(i)&nbsp;:=&nbsp;&apos;W&apos;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;when&nbsp;&quot;----&quot;&nbsp;=&gt;&nbsp;result(i)&nbsp;:=&nbsp;&apos;-&apos;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;when&nbsp;others&nbsp;=&gt;&nbsp;result(i)&nbsp;:=&nbsp;&apos;?&apos;;&nbsp;&nbsp;PrintBinary&nbsp;:=&nbsp;TRUE&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;case;\n&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;loop;\n&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;PrintBinary&nbsp;then&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;result&nbsp;&amp;&nbsp;&quot;&nbsp;(&quot;&nbsp;&amp;&nbsp;to_string(A)&nbsp;&amp;&nbsp;&quot;)&quot;&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;else&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;result&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;if&nbsp;;&nbsp;\n&nbsp;&nbsp;end&nbsp;function&nbsp;local_to_hxstring;\n&nbsp;&nbsp;\n&nbsp;\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;--&nbsp;to_hxstring&nbsp;&nbsp;\n&nbsp;&nbsp;function&nbsp;to_hxstring&nbsp;(&nbsp;A&nbsp;:&nbsp;std_ulogic_vector)&nbsp;return&nbsp;string&nbsp;is&nbsp;\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;local_to_hxstring(A,&nbsp;IsSigned&nbsp;=&gt;&nbsp;FALSE)&nbsp;;&nbsp;\n&nbsp;&nbsp;end&nbsp;function&nbsp;to_hxstring&nbsp;;&nbsp;\n&nbsp;\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;--&nbsp;to_hxstring&nbsp;&nbsp;\n&nbsp;&nbsp;function&nbsp;to_hxstring&nbsp;(&nbsp;A&nbsp;:&nbsp;unsigned)&nbsp;return&nbsp;string&nbsp;is&nbsp;\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;local_to_hxstring(std_ulogic_vector(A),&nbsp;IsSigned&nbsp;=&gt;&nbsp;FALSE)&nbsp;;&nbsp;\n&nbsp;&nbsp;end&nbsp;function&nbsp;to_hxstring&nbsp;;&nbsp;\n&nbsp;\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;--&nbsp;to_hxstring&nbsp;&nbsp;\n&nbsp;&nbsp;function&nbsp;to_hxstring&nbsp;(A&nbsp;:&nbsp;signed)&nbsp;return&nbsp;string&nbsp;is&nbsp;\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;local_to_hxstring(std_ulogic_vector(A),&nbsp;IsSigned&nbsp;=&gt;&nbsp;TRUE)&nbsp;;&nbsp;\n&nbsp;&nbsp;end&nbsp;function&nbsp;to_hxstring&nbsp;;&nbsp;\n&nbsp;&nbsp;\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;--&nbsp;Justify\n&nbsp;&nbsp;--&nbsp;&nbsp;&nbsp;w/&nbsp;Fill&nbsp;Character\n&nbsp;&nbsp;--&nbsp;&nbsp;&nbsp;w/o&nbsp;Fill&nbsp;character,&nbsp;Parameter&nbsp;order&nbsp;&amp;&nbsp;names&nbsp;sensible\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;function&nbsp;Justify&nbsp;(\n&nbsp;&nbsp;&nbsp;&nbsp;S&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;string&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;Fill&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;character&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;Amount&nbsp;&nbsp;:&nbsp;natural&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;Align&nbsp;&nbsp;&nbsp;:&nbsp;AlignType&nbsp;:=&nbsp;LEFT\n&nbsp;&nbsp;)&nbsp;return&nbsp;string&nbsp;is\n&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;FillLen&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;integer&nbsp;:=&nbsp;maximum(1,&nbsp;Amount&nbsp;-&nbsp;S&apos;length)&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;HalfFillLen&nbsp;:&nbsp;integer&nbsp;:=&nbsp;(FillLen+1)/2&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;FillString&nbsp;&nbsp;:&nbsp;string(1&nbsp;to&nbsp;&nbsp;FillLen)&nbsp;:=&nbsp;(others&nbsp;=&gt;&nbsp;FILL)&nbsp;;\n&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;S&apos;length&nbsp;&gt;=&nbsp;Amount&nbsp;then\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;S&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;if&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;case&nbsp;Align&nbsp;is\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;when&nbsp;LEFT&nbsp;&nbsp;&nbsp;=&gt;&nbsp;&nbsp;return&nbsp;S&nbsp;&amp;&nbsp;FillString&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;when&nbsp;RIGHT&nbsp;&nbsp;=&gt;&nbsp;&nbsp;return&nbsp;FillString&nbsp;&amp;&nbsp;S&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;when&nbsp;CENTER&nbsp;=&gt;&nbsp;&nbsp;return&nbsp;FillString(1&nbsp;to&nbsp;HalfFillLen)&nbsp;&amp;&nbsp;S&nbsp;&amp;&nbsp;FillString(HalfFillLen+1&nbsp;to&nbsp;FillLen)&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;case&nbsp;;&nbsp;\n&nbsp;&nbsp;end&nbsp;function&nbsp;Justify&nbsp;;&nbsp;\n&nbsp;\n&nbsp;&nbsp;function&nbsp;Justify&nbsp;(\n&nbsp;&nbsp;&nbsp;&nbsp;S&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;string&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;Amount&nbsp;&nbsp;:&nbsp;natural&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;Align&nbsp;&nbsp;&nbsp;:&nbsp;AlignType&nbsp;:=&nbsp;LEFT\n&nbsp;&nbsp;)&nbsp;return&nbsp;string&nbsp;is\n&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;Justify(S,&nbsp;&apos;&nbsp;&apos;,&nbsp;Amount,&nbsp;Align)&nbsp;;&nbsp;\n&nbsp;&nbsp;end&nbsp;function&nbsp;Justify&nbsp;;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;--&nbsp;FileExists\n&nbsp;&nbsp;--&nbsp;&nbsp;&nbsp;&nbsp;Return&nbsp;TRUE&nbsp;if&nbsp;file&nbsp;exists\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;impure&nbsp;function&nbsp;FileExists(FileName&nbsp;:&nbsp;string)&nbsp;return&nbsp;boolean&nbsp;is&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;file&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FileID&nbsp;:&nbsp;text&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;status&nbsp;:&nbsp;file_open_status&nbsp;;\n&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;file_open(status,&nbsp;FileID,&nbsp;FileName,&nbsp;READ_MODE)&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;file_close(FileID)&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;status&nbsp;=&nbsp;OPEN_OK&nbsp;;&nbsp;\n&nbsp;&nbsp;end&nbsp;function&nbsp;FileExists&nbsp;;&nbsp;&nbsp;&nbsp;\n&nbsp;\nend&nbsp;package&nbsp;body&nbsp;TextUtilPkg&nbsp;;';
Report.brushes['./../../../SynthWorks/Dev/_osvvm/OsvvmLibraries/osvvm/TextUtilPkg.vhd'] = 'vhdl'

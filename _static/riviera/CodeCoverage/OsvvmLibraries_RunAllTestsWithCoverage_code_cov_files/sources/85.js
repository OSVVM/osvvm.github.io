Report.sources['./../../../OsvvmLibraries/DpRam/src/DpRam_Singleton.vhd'] = '--\n--&nbsp;&nbsp;File&nbsp;Name:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DpRam_Singleton.vhd\n--&nbsp;&nbsp;Block&nbsp;Name:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DpRam_Singleton\n--&nbsp;&nbsp;Revision:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;STANDARD&nbsp;VERSION\n--\n--&nbsp;&nbsp;Maintainer:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Jim&nbsp;Lewis&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;email:&nbsp;&nbsp;jim@synthworks.com&nbsp;\n--&nbsp;&nbsp;Contributor(s):&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n--&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Jim&nbsp;Lewis&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;email:&nbsp;&nbsp;jim@synthworks.com&nbsp;&nbsp;&nbsp;\n--\n--&nbsp;&nbsp;Description\n--&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Package&nbsp;defines&nbsp;a&nbsp;protected&nbsp;type,&nbsp;MemoryPType,&nbsp;and&nbsp;methods&nbsp;&nbsp;\n--&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;efficiently&nbsp;implementing&nbsp;memory&nbsp;data&nbsp;structures\n--&nbsp;&nbsp;&nbsp;&nbsp;\n--&nbsp;&nbsp;Developed&nbsp;for:&nbsp;\n--&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SynthWorks&nbsp;Design&nbsp;Inc.&nbsp;\n--&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;VHDL&nbsp;Training&nbsp;Classes\n--&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;11898&nbsp;SW&nbsp;128th&nbsp;Ave.&nbsp;&nbsp;Tigard,&nbsp;Or&nbsp;&nbsp;97223\n--&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;http://www.SynthWorks.com\n--\n--&nbsp;&nbsp;Revision&nbsp;History:\n--&nbsp;&nbsp;&nbsp;&nbsp;Date&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Version&nbsp;&nbsp;&nbsp;&nbsp;Description\n--&nbsp;&nbsp;&nbsp;&nbsp;12/2021&nbsp;&nbsp;&nbsp;2021.12&nbsp;&nbsp;&nbsp;&nbsp;Initial&nbsp;for&nbsp;PT\n--\n--\n--&nbsp;&nbsp;This&nbsp;file&nbsp;is&nbsp;part&nbsp;of&nbsp;OSVVM.\n--&nbsp;&nbsp;\n--&nbsp;&nbsp;Copyright&nbsp;(c)&nbsp;2021&nbsp;by&nbsp;SynthWorks&nbsp;Design&nbsp;Inc.&nbsp;&nbsp;\n--&nbsp;&nbsp;\n--&nbsp;&nbsp;Licensed&nbsp;under&nbsp;the&nbsp;Apache&nbsp;License,&nbsp;Version&nbsp;2.0&nbsp;(the&nbsp;&quot;License&quot;);\n--&nbsp;&nbsp;you&nbsp;may&nbsp;not&nbsp;use&nbsp;this&nbsp;file&nbsp;except&nbsp;in&nbsp;compliance&nbsp;with&nbsp;the&nbsp;License.\n--&nbsp;&nbsp;You&nbsp;may&nbsp;obtain&nbsp;a&nbsp;copy&nbsp;of&nbsp;the&nbsp;License&nbsp;at\n--&nbsp;&nbsp;\n--&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;https://www.apache.org/licenses/LICENSE-2.0\n--&nbsp;&nbsp;\n--&nbsp;&nbsp;Unless&nbsp;required&nbsp;by&nbsp;applicable&nbsp;law&nbsp;or&nbsp;agreed&nbsp;to&nbsp;in&nbsp;writing,&nbsp;software\n--&nbsp;&nbsp;distributed&nbsp;under&nbsp;the&nbsp;License&nbsp;is&nbsp;distributed&nbsp;on&nbsp;an&nbsp;&quot;AS&nbsp;IS&quot;&nbsp;BASIS,\n--&nbsp;&nbsp;WITHOUT&nbsp;WARRANTIES&nbsp;OR&nbsp;CONDITIONS&nbsp;OF&nbsp;ANY&nbsp;KIND,&nbsp;either&nbsp;express&nbsp;or&nbsp;implied.\n--&nbsp;&nbsp;See&nbsp;the&nbsp;License&nbsp;for&nbsp;the&nbsp;specific&nbsp;language&nbsp;governing&nbsp;permissions&nbsp;and\n--&nbsp;&nbsp;limitations&nbsp;under&nbsp;the&nbsp;License.\n--&nbsp;&nbsp;\n&nbsp;\nlibrary&nbsp;IEEE&nbsp;;\n&nbsp;&nbsp;use&nbsp;ieee.std_logic_1164.all&nbsp;;\nlibrary&nbsp;OSVVM&nbsp;;&nbsp;\n&nbsp;&nbsp;context&nbsp;OSVVM.OsvvmContext&nbsp;;\n&nbsp;\nentity&nbsp;DpRam&nbsp;is\n&nbsp;&nbsp;generic&nbsp;(&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;ADDR_WIDTH&nbsp;&nbsp;&nbsp;:&nbsp;integer&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;DATA_WIDTH&nbsp;&nbsp;&nbsp;:&nbsp;integer&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;REGA_OUT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;boolean&nbsp;:=&nbsp;FALSE&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;REGB_OUT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;boolean&nbsp;:=&nbsp;FALSE&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;MEMORY_NAME&nbsp;&nbsp;:&nbsp;string&nbsp;&nbsp;:=&nbsp;&quot;&quot;\n&nbsp;&nbsp;)&nbsp;;\n&nbsp;&nbsp;port&nbsp;(\n&nbsp;&nbsp;&nbsp;&nbsp;ClkA&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;In&nbsp;&nbsp;std_logic&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;WriteA&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;In&nbsp;&nbsp;std_logic&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;AddrA&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;In&nbsp;&nbsp;std_logic_vector(ADDR_WIDTH-1&nbsp;downto&nbsp;0)&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;DataInA&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;In&nbsp;&nbsp;std_logic_vector(DATA_WIDTH-1&nbsp;downto&nbsp;0)&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;DataOutA&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;Out&nbsp;std_logic_vector(DATA_WIDTH-1&nbsp;downto&nbsp;0)&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;ClkB&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;In&nbsp;&nbsp;std_logic&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;WriteB&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;In&nbsp;&nbsp;std_logic&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;AddrB&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;In&nbsp;&nbsp;std_logic_vector(ADDR_WIDTH-1&nbsp;downto&nbsp;0)&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;DataInB&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;In&nbsp;&nbsp;std_logic_vector(DATA_WIDTH-1&nbsp;downto&nbsp;0)&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;DataOutB&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;Out&nbsp;std_logic_vector(DATA_WIDTH-1&nbsp;downto&nbsp;0)&nbsp;\n&nbsp;&nbsp;)&nbsp;;&nbsp;\nend&nbsp;entity&nbsp;DPRam&nbsp;;\n&nbsp;\narchitecture&nbsp;Singleton&nbsp;of&nbsp;DpRam&nbsp;is\n&nbsp;&nbsp;constant&nbsp;RESOLVED_MEMORY_NAME&nbsp;:&nbsp;string&nbsp;:=\n&nbsp;&nbsp;&nbsp;&nbsp;IfElse(MEMORY_NAME&nbsp;/=&nbsp;&quot;&quot;,&nbsp;MEMORY_NAME,&nbsp;to_lower(PathTail(DpRam&apos;PATH_NAME)))&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;signal&nbsp;Mem&nbsp;:&nbsp;MemoryIdType&nbsp;;\n&nbsp;&nbsp;\n&nbsp;&nbsp;signal&nbsp;iDataOutA,&nbsp;iDataOutB&nbsp;:&nbsp;std_logic_vector(DATA_WIDTH-1&nbsp;downto&nbsp;0)&nbsp;;\nbegin\n&nbsp;&nbsp;Initialize&nbsp;:&nbsp;process\n&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;Mem&nbsp;&lt;=&nbsp;NewID(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Name&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&gt;&nbsp;RESOLVED_MEMORY_NAME,&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AddrWidth&nbsp;=&gt;&nbsp;ADDR_WIDTH,&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DataWidth&nbsp;=&gt;&nbsp;DATA_WIDTH,&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Search&nbsp;&nbsp;&nbsp;&nbsp;=&gt;&nbsp;NAME\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;wait&nbsp;;&nbsp;\n&nbsp;&nbsp;end&nbsp;process&nbsp;Initialize&nbsp;;&nbsp;\n&nbsp;&nbsp;\n&nbsp;&nbsp;MemProcA&nbsp;:&nbsp;process&nbsp;(ClkA)&nbsp;\n&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;rising_edge(ClkA)&nbsp;then&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;iDataOutA&nbsp;&lt;=&nbsp;MemRead(Mem,&nbsp;AddrA)&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;WriteA&nbsp;=&nbsp;&apos;1&apos;&nbsp;then&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MemWrite(Mem,&nbsp;AddrA,&nbsp;DataInA)&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;if&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;if&nbsp;;\n&nbsp;&nbsp;end&nbsp;process&nbsp;MemProcA&nbsp;;\n&nbsp;&nbsp;\n&nbsp;&nbsp;RegAOutGen&nbsp;:&nbsp;if&nbsp;REGA_OUT&nbsp;generate&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;RegAProc&nbsp;:&nbsp;process(ClkA)\n&nbsp;&nbsp;&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;rising_edge(ClkA)&nbsp;then&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DataOutA&nbsp;&lt;=&nbsp;iDataOutA&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;if&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;process&nbsp;RegAProc&nbsp;;&nbsp;\n&nbsp;&nbsp;else&nbsp;generate&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;DataOutA&nbsp;&lt;=&nbsp;iDataOutA&nbsp;;&nbsp;\n&nbsp;&nbsp;end&nbsp;generate&nbsp;;&nbsp;\n&nbsp;\n&nbsp;&nbsp;MemProcB&nbsp;:&nbsp;process&nbsp;(ClkB)&nbsp;\n&nbsp;&nbsp;begin&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;rising_edge(ClkB)&nbsp;then&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;iDataOutB&nbsp;&lt;=&nbsp;MemRead(Mem,&nbsp;AddrB)&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;WriteB&nbsp;=&nbsp;&apos;1&apos;&nbsp;then&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MemWrite(Mem,&nbsp;AddrB,&nbsp;DataInB)&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;if&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;if&nbsp;;\n&nbsp;&nbsp;end&nbsp;process&nbsp;MemProcB&nbsp;;\n&nbsp;&nbsp;\n&nbsp;&nbsp;RegBOutGen&nbsp;:&nbsp;if&nbsp;REGB_OUT&nbsp;generate&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;RegBProc&nbsp;:&nbsp;process(ClkB)\n&nbsp;&nbsp;&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;rising_edge(ClkB)&nbsp;then&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DataOutB&nbsp;&lt;=&nbsp;iDataOutB&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;if&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;process&nbsp;RegBProc&nbsp;;&nbsp;\n&nbsp;&nbsp;else&nbsp;generate&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;DataOutB&nbsp;&lt;=&nbsp;iDataOutB&nbsp;;&nbsp;\n&nbsp;&nbsp;end&nbsp;generate&nbsp;;&nbsp;\n&nbsp;\nend&nbsp;Singleton&nbsp;;\n';
Report.brushes['./../../../OsvvmLibraries/DpRam/src/DpRam_Singleton.vhd'] = 'vhdl'

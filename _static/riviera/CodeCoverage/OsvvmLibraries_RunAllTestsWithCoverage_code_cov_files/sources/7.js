Report.sources['./../../../SynthWorks/Dev/_osvvm/OsvvmLibraries/osvvm/TbUtilPkg.vhd'] = '--\n--&nbsp;&nbsp;File&nbsp;Name:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TbUtilPkg.vhd\n--&nbsp;&nbsp;Design&nbsp;Unit&nbsp;Name:&nbsp;&nbsp;TbUtilPkg\n--&nbsp;&nbsp;Revision:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;STANDARD&nbsp;VERSION\n--\n--&nbsp;&nbsp;Maintainer:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Jim&nbsp;Lewis&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;email:&nbsp;&nbsp;jim@SynthWorks.com\n--&nbsp;&nbsp;Contributor(s):\n--&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Jim&nbsp;Lewis&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;email:&nbsp;&nbsp;jim@SynthWorks.com\n--\n--&nbsp;&nbsp;Package&nbsp;Defines\n--\n--&nbsp;&nbsp;Developed&nbsp;for:\n--&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SynthWorks&nbsp;Design&nbsp;Inc.\n--&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;VHDL&nbsp;Training&nbsp;Classes\n--&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;11898&nbsp;SW&nbsp;128th&nbsp;Ave.&nbsp;&nbsp;Tigard,&nbsp;Or&nbsp;&nbsp;97223\n--&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;http://www.SynthWorks.com\n--\n--&nbsp;&nbsp;Revision&nbsp;History:\n--&nbsp;&nbsp;&nbsp;&nbsp;Date&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Version&nbsp;&nbsp;&nbsp;&nbsp;Description\n--&nbsp;&nbsp;&nbsp;&nbsp;09/2022&nbsp;&nbsp;&nbsp;2022.09&nbsp;&nbsp;&nbsp;&nbsp;Added&nbsp;WaitForTransactionOrIrq,&nbsp;FinishTransaction,&nbsp;and&nbsp;TransactionPending&nbsp;for&nbsp;AckType/RdyType\n--&nbsp;&nbsp;&nbsp;&nbsp;03/2022&nbsp;&nbsp;&nbsp;2022.03&nbsp;&nbsp;&nbsp;&nbsp;Added&nbsp;EdgeRose,&nbsp;EdgeFell,&nbsp;FindRisingEdge,&nbsp;FindFallingEdge.\n--&nbsp;&nbsp;&nbsp;&nbsp;01/2022&nbsp;&nbsp;&nbsp;2022.01&nbsp;&nbsp;&nbsp;&nbsp;Added&nbsp;MetaTo01.&nbsp;&nbsp;Added&nbsp;WaitForTransaction&nbsp;without&nbsp;clock&nbsp;for&nbsp;RdyType/AckType&nbsp;and&nbsp;bit.\n--&nbsp;&nbsp;&nbsp;&nbsp;02/2021&nbsp;&nbsp;&nbsp;2021.02&nbsp;&nbsp;&nbsp;&nbsp;Added&nbsp;AckType,&nbsp;RdyType,&nbsp;RequestTransaction,&nbsp;WaitForTransaction&nbsp;for&nbsp;AckType/RdyType\n--&nbsp;&nbsp;&nbsp;&nbsp;12/2020&nbsp;&nbsp;&nbsp;2020.12&nbsp;&nbsp;&nbsp;&nbsp;Added&nbsp;IfElse&nbsp;functions&nbsp;for&nbsp;string&nbsp;and&nbsp;integer.\n--&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Added&nbsp;Increment&nbsp;function&nbsp;for&nbsp;integer\n--&nbsp;&nbsp;&nbsp;&nbsp;01/2020&nbsp;&nbsp;&nbsp;2020.01&nbsp;&nbsp;&nbsp;&nbsp;Updated&nbsp;Licenses&nbsp;to&nbsp;Apache\n--&nbsp;&nbsp;&nbsp;&nbsp;08/2018&nbsp;&nbsp;&nbsp;2018.08&nbsp;&nbsp;&nbsp;&nbsp;Updated&nbsp;WaitForTransaction&nbsp;to&nbsp;allow&nbsp;0&nbsp;time&nbsp;transactions\n--&nbsp;&nbsp;&nbsp;&nbsp;04/2018&nbsp;&nbsp;&nbsp;2018.04&nbsp;&nbsp;&nbsp;&nbsp;Added&nbsp;RequestTransaction,&nbsp;WaitForTransaction,&nbsp;Toggle,&nbsp;WaitForToggle&nbsp;for&nbsp;bit.\n--&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Added&nbsp;Increment&nbsp;and&nbsp;WaitForToggle&nbsp;for&nbsp;integer.\n--&nbsp;&nbsp;&nbsp;&nbsp;11/2016&nbsp;&nbsp;&nbsp;2016.11&nbsp;&nbsp;&nbsp;&nbsp;First&nbsp;Public&nbsp;Release&nbsp;Version\n--&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Updated&nbsp;naming&nbsp;for&nbsp;consistency.\n--&nbsp;&nbsp;&nbsp;&nbsp;10/2013&nbsp;&nbsp;&nbsp;2013.10&nbsp;&nbsp;&nbsp;&nbsp;Split&nbsp;out&nbsp;Text&nbsp;Utilities\n--&nbsp;&nbsp;&nbsp;&nbsp;11/1999:&nbsp;&nbsp;0.1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Initial&nbsp;revision\n--&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Numerous&nbsp;revisions&nbsp;for&nbsp;VHDL&nbsp;Testbenches&nbsp;and&nbsp;Verification\n--\n--\n--&nbsp;&nbsp;This&nbsp;file&nbsp;is&nbsp;part&nbsp;of&nbsp;OSVVM.\n--\n--&nbsp;&nbsp;Copyright&nbsp;(c)&nbsp;1999&nbsp;-&nbsp;2021&nbsp;by&nbsp;SynthWorks&nbsp;Design&nbsp;Inc.\n--\n--&nbsp;&nbsp;Licensed&nbsp;under&nbsp;the&nbsp;Apache&nbsp;License,&nbsp;Version&nbsp;2.0&nbsp;(the&nbsp;&quot;License&quot;);\n--&nbsp;&nbsp;you&nbsp;may&nbsp;not&nbsp;use&nbsp;this&nbsp;file&nbsp;except&nbsp;in&nbsp;compliance&nbsp;with&nbsp;the&nbsp;License.\n--&nbsp;&nbsp;You&nbsp;may&nbsp;obtain&nbsp;a&nbsp;copy&nbsp;of&nbsp;the&nbsp;License&nbsp;at\n--\n--&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;https://www.apache.org/licenses/LICENSE-2.0\n--\n--&nbsp;&nbsp;Unless&nbsp;required&nbsp;by&nbsp;applicable&nbsp;law&nbsp;or&nbsp;agreed&nbsp;to&nbsp;in&nbsp;writing,&nbsp;software\n--&nbsp;&nbsp;distributed&nbsp;under&nbsp;the&nbsp;License&nbsp;is&nbsp;distributed&nbsp;on&nbsp;an&nbsp;&quot;AS&nbsp;IS&quot;&nbsp;BASIS,\n--&nbsp;&nbsp;WITHOUT&nbsp;WARRANTIES&nbsp;OR&nbsp;CONDITIONS&nbsp;OF&nbsp;ANY&nbsp;KIND,&nbsp;either&nbsp;express&nbsp;or&nbsp;implied.\n--&nbsp;&nbsp;See&nbsp;the&nbsp;License&nbsp;for&nbsp;the&nbsp;specific&nbsp;language&nbsp;governing&nbsp;permissions&nbsp;and\n--&nbsp;&nbsp;limitations&nbsp;under&nbsp;the&nbsp;License.\n--\n&nbsp;\nlibrary&nbsp;ieee&nbsp;;\n&nbsp;&nbsp;use&nbsp;ieee.std_logic_1164.all&nbsp;;\n&nbsp;\n&nbsp;&nbsp;use&nbsp;work.AlertLogPkg.all&nbsp;;\n&nbsp;&nbsp;use&nbsp;work.TranscriptPkg.all&nbsp;;\n&nbsp;&nbsp;use&nbsp;work.ResolutionPkg.all&nbsp;;\n&nbsp;&nbsp;use&nbsp;work.OsvvmGlobalPkg.all&nbsp;;\n&nbsp;\npackage&nbsp;TbUtilPkg&nbsp;is\n&nbsp;\n&nbsp;&nbsp;constant&nbsp;CLK_ACTIVE&nbsp;:&nbsp;std_logic&nbsp;:=&nbsp;&apos;1&apos;&nbsp;;\n&nbsp;\n&nbsp;&nbsp;constant&nbsp;t_sim_resolution&nbsp;:&nbsp;time&nbsp;:=&nbsp;std.env.resolution_limit&nbsp;;&nbsp;&nbsp;--&nbsp;VHDL-2008\n&nbsp;&nbsp;--&nbsp;constant&nbsp;t_sim_resolution&nbsp;:&nbsp;time&nbsp;:=&nbsp;1&nbsp;ns&nbsp;;&nbsp;&nbsp;--&nbsp;for&nbsp;non&nbsp;VHDL-2008&nbsp;simulators\n&nbsp;\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;--&nbsp;ZeroOneHot,&nbsp;OneHot\n&nbsp;&nbsp;--&nbsp;&nbsp;&nbsp;OneHot:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;true&nbsp;if&nbsp;exactly&nbsp;one&nbsp;value&nbsp;is&nbsp;1\n&nbsp;&nbsp;--&nbsp;&nbsp;&nbsp;ZeroOneHot:&nbsp;&nbsp;return&nbsp;false&nbsp;when&nbsp;more&nbsp;than&nbsp;one&nbsp;value&nbsp;is&nbsp;a&nbsp;1\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;function&nbsp;OneHot&nbsp;(&nbsp;constant&nbsp;A&nbsp;:&nbsp;in&nbsp;std_logic_vector&nbsp;)&nbsp;return&nbsp;boolean&nbsp;;\n&nbsp;&nbsp;function&nbsp;ZeroOneHot&nbsp;(&nbsp;constant&nbsp;A&nbsp;:&nbsp;in&nbsp;std_logic_vector&nbsp;)&nbsp;return&nbsp;boolean&nbsp;;\n&nbsp;\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;--&nbsp;EdgeRose,&nbsp;EdgeFell,&nbsp;FindRisingEdge,&nbsp;FindFallingEdge\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;function&nbsp;&nbsp;EdgeRose&nbsp;(&nbsp;signal&nbsp;C&nbsp;:&nbsp;in&nbsp;std_logic&nbsp;)&nbsp;return&nbsp;boolean&nbsp;;\n&nbsp;&nbsp;function&nbsp;&nbsp;EdgeFell&nbsp;(&nbsp;signal&nbsp;C&nbsp;:&nbsp;in&nbsp;std_logic&nbsp;)&nbsp;return&nbsp;boolean&nbsp;;\n&nbsp;&nbsp;function&nbsp;&nbsp;EdgeActive&nbsp;(&nbsp;signal&nbsp;C&nbsp;:&nbsp;in&nbsp;std_logic;&nbsp;A&nbsp;:&nbsp;std_logic&nbsp;)&nbsp;return&nbsp;boolean&nbsp;;\n&nbsp;&nbsp;procedure&nbsp;FindRisingEdge&nbsp;(&nbsp;signal&nbsp;C&nbsp;:&nbsp;in&nbsp;std_logic)&nbsp;;\n&nbsp;&nbsp;procedure&nbsp;FindFallingEdge&nbsp;(&nbsp;signal&nbsp;C&nbsp;:&nbsp;in&nbsp;std_logic&nbsp;)&nbsp;;\n&nbsp;&nbsp;procedure&nbsp;FindActiveEdge&nbsp;(&nbsp;signal&nbsp;C&nbsp;:&nbsp;in&nbsp;std_logic;&nbsp;A&nbsp;:&nbsp;std_logic&nbsp;)&nbsp;;\n&nbsp;\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;--&nbsp;MetaTo01\n&nbsp;&nbsp;--&nbsp;&nbsp;&nbsp;Convert&nbsp;Meta&nbsp;values&nbsp;to&nbsp;0\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;function&nbsp;MetaTo01&nbsp;(&nbsp;constant&nbsp;A&nbsp;:&nbsp;in&nbsp;std_ulogic&nbsp;)&nbsp;return&nbsp;std_ulogic&nbsp;;\n&nbsp;&nbsp;function&nbsp;MetaTo01&nbsp;(&nbsp;constant&nbsp;A&nbsp;:&nbsp;in&nbsp;std_ulogic_vector&nbsp;)&nbsp;return&nbsp;std_ulogic_vector&nbsp;;\n&nbsp;\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;--&nbsp;IfElse\n&nbsp;&nbsp;--&nbsp;&nbsp;&nbsp;Crutch&nbsp;until&nbsp;VHDL-2019&nbsp;conditional&nbsp;initialization\n&nbsp;&nbsp;--&nbsp;&nbsp;&nbsp;If&nbsp;condition&nbsp;is&nbsp;true&nbsp;return&nbsp;first&nbsp;parameter&nbsp;otherwise&nbsp;return&nbsp;second\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;function&nbsp;IfElse(Expr&nbsp;:&nbsp;boolean&nbsp;;&nbsp;A,&nbsp;B&nbsp;:&nbsp;std_logic_vector)&nbsp;return&nbsp;std_logic_vector&nbsp;;\n&nbsp;&nbsp;function&nbsp;IfElse(Expr&nbsp;:&nbsp;boolean&nbsp;;&nbsp;A,&nbsp;B&nbsp;:&nbsp;integer)&nbsp;return&nbsp;integer&nbsp;;\n&nbsp;\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;--&nbsp;RequestTransaction&nbsp;-&nbsp;WaitForTransaction\n&nbsp;&nbsp;--&nbsp;&nbsp;&nbsp;RequestTransaction&nbsp;-&nbsp;Transaction&nbsp;initiation&nbsp;in&nbsp;transaction&nbsp;procedure\n&nbsp;&nbsp;--&nbsp;&nbsp;&nbsp;WaitForTransaction&nbsp;-&nbsp;Transaction&nbsp;execution&nbsp;control&nbsp;in&nbsp;VC\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;--&nbsp;RequestTransaction&nbsp;-&nbsp;WaitForTransaction\n&nbsp;&nbsp;--&nbsp;&nbsp;&nbsp;std_logic\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;procedure&nbsp;RequestTransaction&nbsp;(\n&nbsp;&nbsp;&nbsp;&nbsp;signal&nbsp;Rdy&nbsp;&nbsp;:&nbsp;Out&nbsp;std_logic&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;signal&nbsp;Ack&nbsp;&nbsp;:&nbsp;In&nbsp;&nbsp;std_logic\n&nbsp;&nbsp;)&nbsp;;\n&nbsp;\n&nbsp;&nbsp;procedure&nbsp;WaitForTransaction&nbsp;(\n&nbsp;&nbsp;&nbsp;&nbsp;signal&nbsp;Clk&nbsp;&nbsp;:&nbsp;In&nbsp;&nbsp;std_logic&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;signal&nbsp;Rdy&nbsp;&nbsp;:&nbsp;In&nbsp;&nbsp;std_logic&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;signal&nbsp;Ack&nbsp;&nbsp;:&nbsp;Out&nbsp;std_logic\n&nbsp;&nbsp;)&nbsp;;\n&nbsp;\n&nbsp;&nbsp;--&nbsp;Only&nbsp;for&nbsp;clockless&nbsp;models\n&nbsp;&nbsp;procedure&nbsp;WaitForTransaction&nbsp;(\n&nbsp;&nbsp;&nbsp;&nbsp;signal&nbsp;Rdy&nbsp;:&nbsp;In&nbsp;&nbsp;std_logic&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;signal&nbsp;Ack&nbsp;:&nbsp;Out&nbsp;std_logic\n&nbsp;&nbsp;)&nbsp;;\n&nbsp;\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;--&nbsp;RequestTransaction&nbsp;-&nbsp;WaitForTransaction\n&nbsp;&nbsp;--&nbsp;&nbsp;&nbsp;bit\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;procedure&nbsp;RequestTransaction&nbsp;(\n&nbsp;&nbsp;&nbsp;&nbsp;signal&nbsp;Rdy&nbsp;&nbsp;:&nbsp;Out&nbsp;bit&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;signal&nbsp;Ack&nbsp;&nbsp;:&nbsp;In&nbsp;&nbsp;bit\n&nbsp;&nbsp;)&nbsp;;\n&nbsp;\n&nbsp;&nbsp;procedure&nbsp;WaitForTransaction&nbsp;(\n&nbsp;&nbsp;&nbsp;&nbsp;signal&nbsp;Clk&nbsp;&nbsp;:&nbsp;In&nbsp;&nbsp;std_logic&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;signal&nbsp;Rdy&nbsp;&nbsp;:&nbsp;In&nbsp;&nbsp;bit&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;signal&nbsp;Ack&nbsp;&nbsp;:&nbsp;Out&nbsp;bit\n&nbsp;&nbsp;)&nbsp;;\n&nbsp;&nbsp;\n&nbsp;&nbsp;--&nbsp;Only&nbsp;for&nbsp;clockless&nbsp;models\n&nbsp;&nbsp;procedure&nbsp;WaitForTransaction&nbsp;(\n&nbsp;&nbsp;&nbsp;&nbsp;signal&nbsp;Rdy&nbsp;:&nbsp;in&nbsp;&nbsp;bit&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;signal&nbsp;Ack&nbsp;:&nbsp;out&nbsp;bit\n&nbsp;&nbsp;)&nbsp;;\n&nbsp;\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;--&nbsp;RequestTransaction&nbsp;-&nbsp;WaitForTransaction\n&nbsp;&nbsp;--&nbsp;&nbsp;&nbsp;integer\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;subtype&nbsp;RdyType&nbsp;is&nbsp;resolved_max&nbsp;integer&nbsp;range&nbsp;&nbsp;0&nbsp;to&nbsp;integer&apos;high&nbsp;;\n&nbsp;&nbsp;subtype&nbsp;AckType&nbsp;is&nbsp;resolved_max&nbsp;integer&nbsp;range&nbsp;-1&nbsp;to&nbsp;integer&apos;high&nbsp;;\n&nbsp;\n&nbsp;&nbsp;procedure&nbsp;RequestTransaction&nbsp;(\n&nbsp;&nbsp;&nbsp;&nbsp;signal&nbsp;Rdy&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;InOut&nbsp;RdyType&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;signal&nbsp;Ack&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;In&nbsp;&nbsp;&nbsp;&nbsp;AckType\n&nbsp;&nbsp;)&nbsp;;\n&nbsp;\n&nbsp;&nbsp;procedure&nbsp;WaitForTransaction&nbsp;(\n&nbsp;&nbsp;&nbsp;&nbsp;signal&nbsp;Clk&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;In&nbsp;&nbsp;&nbsp;&nbsp;std_logic&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;signal&nbsp;Rdy&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;In&nbsp;&nbsp;&nbsp;&nbsp;RdyType&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;signal&nbsp;Ack&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;InOut&nbsp;AckType\n&nbsp;&nbsp;)&nbsp;;\n&nbsp;\n&nbsp;&nbsp;--&nbsp;Only&nbsp;for&nbsp;clockless&nbsp;models\n&nbsp;&nbsp;procedure&nbsp;WaitForTransaction&nbsp;(\n&nbsp;&nbsp;&nbsp;&nbsp;signal&nbsp;Rdy&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;In&nbsp;&nbsp;&nbsp;&nbsp;RdyType&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;signal&nbsp;Ack&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;InOut&nbsp;AckType\n&nbsp;&nbsp;);\n&nbsp;\n&nbsp;\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;--&nbsp;Interrupt&nbsp;handling&nbsp;variations&nbsp;of&nbsp;WaitForTransaction&nbsp;\n&nbsp;&nbsp;--&nbsp;&nbsp;&nbsp;std_logic&nbsp;/&nbsp;std_logic&nbsp;\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;procedure&nbsp;WaitForTransaction&nbsp;(\n&nbsp;&nbsp;&nbsp;&nbsp;signal&nbsp;&nbsp;&nbsp;Clk&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;In&nbsp;&nbsp;std_logic&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;signal&nbsp;&nbsp;&nbsp;Rdy&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;In&nbsp;&nbsp;std_logic&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;signal&nbsp;&nbsp;&nbsp;Ack&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;Out&nbsp;std_logic&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;signal&nbsp;&nbsp;&nbsp;TimeOut&nbsp;&nbsp;&nbsp;:&nbsp;In&nbsp;&nbsp;std_logic&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;Polarity&nbsp;&nbsp;:&nbsp;In&nbsp;&nbsp;std_logic&nbsp;:=&nbsp;&apos;1&apos;\n&nbsp;&nbsp;)&nbsp;;\n&nbsp;\n&nbsp;&nbsp;--&nbsp;Intended&nbsp;for&nbsp;models&nbsp;that&nbsp;need&nbsp;to&nbsp;switch&nbsp;between&nbsp;instruction&nbsp;streams\n&nbsp;&nbsp;--&nbsp;such&nbsp;as&nbsp;a&nbsp;CPU&nbsp;when&nbsp;interrupt&nbsp;is&nbsp;pending\n&nbsp;&nbsp;procedure&nbsp;WaitForTransactionOrIrq&nbsp;(\n&nbsp;&nbsp;&nbsp;&nbsp;signal&nbsp;Clk&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;In&nbsp;&nbsp;std_logic&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;signal&nbsp;Rdy&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;In&nbsp;&nbsp;std_logic&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;signal&nbsp;IntReq&nbsp;&nbsp;:&nbsp;In&nbsp;&nbsp;std_logic\n&nbsp;&nbsp;)&nbsp;;\n&nbsp;\n&nbsp;&nbsp;--&nbsp;Set&nbsp;Ack&nbsp;to&nbsp;Model&nbsp;starting&nbsp;value\n&nbsp;&nbsp;procedure&nbsp;StartTransaction&nbsp;&nbsp;(&nbsp;signal&nbsp;Ack&nbsp;:&nbsp;Out&nbsp;std_logic&nbsp;)&nbsp;;\n&nbsp;&nbsp;--&nbsp;Set&nbsp;Ack&nbsp;to&nbsp;Model&nbsp;finishing&nbsp;value\n&nbsp;&nbsp;procedure&nbsp;FinishTransaction&nbsp;(&nbsp;signal&nbsp;Ack&nbsp;:&nbsp;Out&nbsp;std_logic&nbsp;)&nbsp;;\n&nbsp;&nbsp;--&nbsp;If&nbsp;a&nbsp;transaction&nbsp;is&nbsp;pending,&nbsp;return&nbsp;true\n&nbsp;&nbsp;function&nbsp;TransactionPending&nbsp;(&nbsp;signal&nbsp;Rdy&nbsp;:&nbsp;In&nbsp;&nbsp;std_logic&nbsp;)&nbsp;return&nbsp;boolean&nbsp;;\n&nbsp;\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;--&nbsp;Interrupt&nbsp;handling&nbsp;variations&nbsp;of&nbsp;WaitForTransaction&nbsp;\n&nbsp;&nbsp;--&nbsp;&nbsp;&nbsp;RdyType/AckType&nbsp;\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;--&nbsp;Intended&nbsp;for&nbsp;models&nbsp;that&nbsp;need&nbsp;to&nbsp;switch&nbsp;between&nbsp;instruction&nbsp;streams\n&nbsp;&nbsp;--&nbsp;such&nbsp;as&nbsp;a&nbsp;CPU&nbsp;when&nbsp;interrupt&nbsp;is&nbsp;pending\n&nbsp;&nbsp;procedure&nbsp;WaitForTransactionOrIrq&nbsp;(\n&nbsp;&nbsp;&nbsp;&nbsp;signal&nbsp;&nbsp;&nbsp;Clk&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;In&nbsp;&nbsp;std_logic&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;signal&nbsp;&nbsp;&nbsp;Rdy&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;In&nbsp;&nbsp;RdyType&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;signal&nbsp;&nbsp;&nbsp;Ack&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;In&nbsp;&nbsp;AckType&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;signal&nbsp;&nbsp;&nbsp;IntReq&nbsp;&nbsp;&nbsp;:&nbsp;In&nbsp;&nbsp;std_logic&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;POLARITY&nbsp;:&nbsp;In&nbsp;&nbsp;std_logic&nbsp;:=&nbsp;&apos;1&apos;&nbsp;\n&nbsp;&nbsp;)&nbsp;;\n&nbsp;\n&nbsp;&nbsp;--&nbsp;StartTransaction&nbsp;not&nbsp;used,&nbsp;Ack&nbsp;is&nbsp;incremented&nbsp;at&nbsp;transaction&nbsp;completion\n--&nbsp;&nbsp;procedure&nbsp;StartTransaction&nbsp;&nbsp;(&nbsp;signal&nbsp;Ack&nbsp;:&nbsp;Out&nbsp;AckType&nbsp;)&nbsp;;&nbsp;\n&nbsp;\n&nbsp;&nbsp;--&nbsp;Increment&nbsp;Ack\n&nbsp;&nbsp;procedure&nbsp;FinishTransaction&nbsp;(&nbsp;signal&nbsp;Ack&nbsp;:&nbsp;InOut&nbsp;AckType&nbsp;)&nbsp;;\n&nbsp;\n&nbsp;&nbsp;--&nbsp;If&nbsp;a&nbsp;transaction&nbsp;is&nbsp;pending,&nbsp;return&nbsp;true\n&nbsp;&nbsp;--&nbsp;&nbsp;&nbsp;Used&nbsp;to&nbsp;detect&nbsp;presence&nbsp;of&nbsp;transaction&nbsp;stream,\n&nbsp;&nbsp;--&nbsp;&nbsp;&nbsp;such&nbsp;as&nbsp;an&nbsp;interrupt&nbsp;handler\n&nbsp;&nbsp;function&nbsp;TransactionPending&nbsp;(\n&nbsp;&nbsp;&nbsp;&nbsp;signal&nbsp;Rdy&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;In&nbsp;&nbsp;RdyType&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;signal&nbsp;Ack&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;In&nbsp;&nbsp;AckType\n&nbsp;&nbsp;)&nbsp;return&nbsp;boolean&nbsp;;\n&nbsp;\n&nbsp;\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;--&nbsp;Toggle,&nbsp;WaitForToggle\n&nbsp;&nbsp;--&nbsp;&nbsp;&nbsp;Used&nbsp;for&nbsp;communicating&nbsp;between&nbsp;processes\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;procedure&nbsp;Toggle&nbsp;(\n&nbsp;&nbsp;&nbsp;&nbsp;signal&nbsp;Sig&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;InOut&nbsp;std_logic&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;DelayVal&nbsp;:&nbsp;time\n&nbsp;&nbsp;)&nbsp;;\n&nbsp;&nbsp;procedure&nbsp;Toggle&nbsp;(&nbsp;signal&nbsp;Sig&nbsp;:&nbsp;InOut&nbsp;std_logic&nbsp;)&nbsp;;\n&nbsp;&nbsp;procedure&nbsp;ToggleHS&nbsp;(&nbsp;signal&nbsp;Sig&nbsp;:&nbsp;InOut&nbsp;std_logic&nbsp;)&nbsp;;\n&nbsp;&nbsp;function&nbsp;&nbsp;IsToggle&nbsp;(&nbsp;signal&nbsp;Sig&nbsp;:&nbsp;In&nbsp;std_logic&nbsp;)&nbsp;return&nbsp;boolean&nbsp;;\n&nbsp;&nbsp;procedure&nbsp;WaitForToggle&nbsp;(&nbsp;signal&nbsp;Sig&nbsp;:&nbsp;In&nbsp;std_logic&nbsp;)&nbsp;;\n&nbsp;\n&nbsp;&nbsp;--&nbsp;Bit&nbsp;type&nbsp;versions\n&nbsp;&nbsp;procedure&nbsp;Toggle&nbsp;(&nbsp;signal&nbsp;Sig&nbsp;:&nbsp;InOut&nbsp;bit&nbsp;;&nbsp;constant&nbsp;DelayVal&nbsp;:&nbsp;time&nbsp;)&nbsp;;\n&nbsp;&nbsp;procedure&nbsp;Toggle&nbsp;(&nbsp;signal&nbsp;Sig&nbsp;:&nbsp;InOut&nbsp;bit&nbsp;)&nbsp;;\n&nbsp;&nbsp;procedure&nbsp;ToggleHS&nbsp;(&nbsp;signal&nbsp;Sig&nbsp;:&nbsp;InOut&nbsp;bit&nbsp;)&nbsp;;\n&nbsp;&nbsp;function&nbsp;&nbsp;IsToggle&nbsp;(&nbsp;signal&nbsp;Sig&nbsp;:&nbsp;In&nbsp;bit&nbsp;)&nbsp;return&nbsp;boolean&nbsp;;\n&nbsp;&nbsp;procedure&nbsp;WaitForToggle&nbsp;(&nbsp;signal&nbsp;Sig&nbsp;:&nbsp;In&nbsp;bit&nbsp;)&nbsp;;\n&nbsp;\n&nbsp;&nbsp;--&nbsp;Integer&nbsp;type&nbsp;versions\n&nbsp;&nbsp;procedure&nbsp;Increment&nbsp;(&nbsp;signal&nbsp;Sig&nbsp;:&nbsp;InOut&nbsp;integer&nbsp;;&nbsp;constant&nbsp;RollOverValue&nbsp;:&nbsp;in&nbsp;integer&nbsp;:=&nbsp;0)&nbsp;;\n&nbsp;&nbsp;function&nbsp;&nbsp;Increment&nbsp;(constant&nbsp;Sig&nbsp;:&nbsp;in&nbsp;integer&nbsp;;&nbsp;constant&nbsp;Amount&nbsp;:&nbsp;in&nbsp;integer&nbsp;:=&nbsp;1)&nbsp;return&nbsp;integer&nbsp;;\n&nbsp;&nbsp;procedure&nbsp;WaitForToggle&nbsp;(&nbsp;signal&nbsp;Sig&nbsp;:&nbsp;In&nbsp;integer&nbsp;)&nbsp;;\n&nbsp;\n&nbsp;\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;--&nbsp;WaitForBarrier\n&nbsp;&nbsp;--&nbsp;&nbsp;&nbsp;Barrier&nbsp;Synchronization\n&nbsp;&nbsp;--&nbsp;&nbsp;&nbsp;Multiple&nbsp;processes&nbsp;call&nbsp;it,&nbsp;it&nbsp;finishes&nbsp;when&nbsp;all&nbsp;have&nbsp;called&nbsp;it\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;procedure&nbsp;WaitForBarrier&nbsp;(&nbsp;signal&nbsp;Sig&nbsp;:&nbsp;InOut&nbsp;std_logic&nbsp;)&nbsp;;\n&nbsp;&nbsp;procedure&nbsp;WaitForBarrier&nbsp;(&nbsp;signal&nbsp;Sig&nbsp;:&nbsp;InOut&nbsp;std_logic&nbsp;;&nbsp;signal&nbsp;TimeOut&nbsp;:&nbsp;std_logic&nbsp;;&nbsp;constant&nbsp;Polarity&nbsp;:&nbsp;in&nbsp;std_logic&nbsp;:=&nbsp;&apos;1&apos;)&nbsp;;\n&nbsp;&nbsp;procedure&nbsp;WaitForBarrier&nbsp;(&nbsp;signal&nbsp;Sig&nbsp;:&nbsp;InOut&nbsp;std_logic&nbsp;;&nbsp;constant&nbsp;TimeOut&nbsp;:&nbsp;time&nbsp;)&nbsp;;\n&nbsp;&nbsp;--&nbsp;resolved_barrier&nbsp;:&nbsp;summing&nbsp;resolution&nbsp;used&nbsp;in&nbsp;conjunction&nbsp;with&nbsp;integer&nbsp;based&nbsp;barriers\n&nbsp;&nbsp;function&nbsp;resolved_barrier&nbsp;(&nbsp;s&nbsp;:&nbsp;integer_vector&nbsp;)&nbsp;return&nbsp;integer&nbsp;;\n&nbsp;&nbsp;subtype&nbsp;&nbsp;integer_barrier&nbsp;is&nbsp;resolved_barrier&nbsp;integer&nbsp;;\n&nbsp;&nbsp;--&nbsp;Usage&nbsp;of&nbsp;integer&nbsp;barriers&nbsp;requires&nbsp;resolved_barrier.&nbsp;Initialization&nbsp;to&nbsp;1&nbsp;recommended,&nbsp;but&nbsp;not&nbsp;required\n&nbsp;&nbsp;--&nbsp;&nbsp;&nbsp;signal&nbsp;barrier1&nbsp;:&nbsp;resolved_barrier&nbsp;integer&nbsp;:=&nbsp;1&nbsp;;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;using&nbsp;the&nbsp;resolution&nbsp;function\n&nbsp;&nbsp;--&nbsp;&nbsp;&nbsp;signal&nbsp;barrier2&nbsp;:&nbsp;integer_barrier&nbsp;:=&nbsp;1&nbsp;;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;using&nbsp;the&nbsp;subtype&nbsp;that&nbsp;already&nbsp;applies&nbsp;the&nbsp;resolution&nbsp;function\n&nbsp;&nbsp;procedure&nbsp;WaitForBarrier&nbsp;(&nbsp;signal&nbsp;Sig&nbsp;:&nbsp;InOut&nbsp;integer&nbsp;)&nbsp;;\n&nbsp;&nbsp;procedure&nbsp;WaitForBarrier&nbsp;(&nbsp;signal&nbsp;Sig&nbsp;:&nbsp;InOut&nbsp;integer&nbsp;;&nbsp;signal&nbsp;TimeOut&nbsp;:&nbsp;std_logic&nbsp;;&nbsp;constant&nbsp;Polarity&nbsp;:&nbsp;in&nbsp;std_logic&nbsp;:=&nbsp;&apos;1&apos;)&nbsp;;\n&nbsp;&nbsp;procedure&nbsp;WaitForBarrier&nbsp;(&nbsp;signal&nbsp;Sig&nbsp;:&nbsp;InOut&nbsp;integer&nbsp;;&nbsp;constant&nbsp;TimeOut&nbsp;:&nbsp;time&nbsp;)&nbsp;;\n&nbsp;&nbsp;--&nbsp;Using&nbsp;separate&nbsp;signals\n&nbsp;&nbsp;procedure&nbsp;WaitForBarrier2&nbsp;(&nbsp;signal&nbsp;SyncOut&nbsp;:&nbsp;out&nbsp;std_logic&nbsp;;&nbsp;signal&nbsp;SyncIn&nbsp;:&nbsp;in&nbsp;&nbsp;std_logic&nbsp;)&nbsp;;\n&nbsp;&nbsp;procedure&nbsp;WaitForBarrier2&nbsp;(&nbsp;signal&nbsp;SyncOut&nbsp;:&nbsp;out&nbsp;std_logic&nbsp;;&nbsp;signal&nbsp;SyncInV&nbsp;:&nbsp;in&nbsp;&nbsp;std_logic_vector&nbsp;)&nbsp;;\n&nbsp;\n&nbsp;\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;--&nbsp;WaitForClock\n&nbsp;&nbsp;--&nbsp;&nbsp;&nbsp;Sync&nbsp;to&nbsp;Clock&nbsp;-&nbsp;after&nbsp;a&nbsp;delay,&nbsp;after&nbsp;a&nbsp;number&nbsp;of&nbsp;clocks\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;procedure&nbsp;WaitForClock&nbsp;(&nbsp;signal&nbsp;Clk&nbsp;:&nbsp;in&nbsp;std_logic&nbsp;;&nbsp;&nbsp;constant&nbsp;Delay&nbsp;:&nbsp;in&nbsp;time&nbsp;)&nbsp;;\n&nbsp;&nbsp;procedure&nbsp;WaitForClock&nbsp;(&nbsp;signal&nbsp;Clk&nbsp;:&nbsp;in&nbsp;std_logic&nbsp;;&nbsp;&nbsp;constant&nbsp;NumberOfClocks&nbsp;:&nbsp;in&nbsp;integer&nbsp;:=&nbsp;1)&nbsp;;\n&nbsp;&nbsp;procedure&nbsp;WaitForClock&nbsp;(&nbsp;signal&nbsp;Clk&nbsp;:&nbsp;in&nbsp;std_logic&nbsp;;&nbsp;&nbsp;signal&nbsp;Enable&nbsp;:&nbsp;in&nbsp;boolean&nbsp;)&nbsp;;\n&nbsp;&nbsp;procedure&nbsp;WaitForClock&nbsp;(&nbsp;signal&nbsp;Clk&nbsp;:&nbsp;in&nbsp;std_logic&nbsp;;&nbsp;&nbsp;signal&nbsp;Enable&nbsp;:&nbsp;in&nbsp;std_logic&nbsp;;&nbsp;constant&nbsp;Polarity&nbsp;:&nbsp;std_logic&nbsp;:=&nbsp;&apos;1&apos;&nbsp;)&nbsp;;\n&nbsp;\n&nbsp;\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;--&nbsp;WaitForLevel\n&nbsp;&nbsp;--&nbsp;&nbsp;&nbsp;Find&nbsp;a&nbsp;signal&nbsp;at&nbsp;a&nbsp;level\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;procedure&nbsp;WaitForLevel&nbsp;(&nbsp;signal&nbsp;A&nbsp;:&nbsp;in&nbsp;boolean&nbsp;)&nbsp;;\n&nbsp;&nbsp;procedure&nbsp;WaitForLevel&nbsp;(&nbsp;signal&nbsp;A&nbsp;:&nbsp;in&nbsp;std_logic&nbsp;;&nbsp;Polarity&nbsp;:&nbsp;std_logic&nbsp;:=&nbsp;&apos;1&apos;&nbsp;)&nbsp;;\n&nbsp;\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;--&nbsp;CreateClock,&nbsp;&nbsp;CreateReset\n&nbsp;&nbsp;--&nbsp;&nbsp;&nbsp;Note&nbsp;these&nbsp;do&nbsp;not&nbsp;exit\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;procedure&nbsp;CreateClock&nbsp;(\n&nbsp;&nbsp;&nbsp;&nbsp;signal&nbsp;&nbsp;&nbsp;Clk&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;inout&nbsp;std_logic&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;Period&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;time&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;DutyCycle&nbsp;&nbsp;:&nbsp;real&nbsp;:=&nbsp;0.5\n&nbsp;&nbsp;)&nbsp;&nbsp;;\n&nbsp;\n&nbsp;&nbsp;procedure&nbsp;CheckClockPeriod&nbsp;(\n&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;AlertLogID&nbsp;:&nbsp;AlertLogIDType&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;signal&nbsp;&nbsp;&nbsp;Clk&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;in&nbsp;&nbsp;std_logic&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;Period&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;time&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;ClkName&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;string&nbsp;:=&nbsp;&quot;Clock&quot;&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;HowMany&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;integer&nbsp;:=&nbsp;5\n&nbsp;&nbsp;)&nbsp;;\n&nbsp;\n&nbsp;&nbsp;procedure&nbsp;CheckClockPeriod&nbsp;(\n&nbsp;&nbsp;&nbsp;&nbsp;signal&nbsp;&nbsp;&nbsp;Clk&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;in&nbsp;&nbsp;std_logic&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;Period&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;time&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;ClkName&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;string&nbsp;:=&nbsp;&quot;Clock&quot;&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;HowMany&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;integer&nbsp;:=&nbsp;5\n&nbsp;&nbsp;)&nbsp;;\n&nbsp;\n&nbsp;&nbsp;procedure&nbsp;CreateReset&nbsp;(\n&nbsp;&nbsp;&nbsp;&nbsp;signal&nbsp;&nbsp;&nbsp;Reset&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;out&nbsp;std_logic&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;ResetActive&nbsp;:&nbsp;in&nbsp;&nbsp;std_logic&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;signal&nbsp;&nbsp;&nbsp;Clk&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;in&nbsp;&nbsp;std_logic&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;Period&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;time&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;tpd&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;time&nbsp;:=&nbsp;0&nbsp;ns\n&nbsp;&nbsp;)&nbsp;;\n&nbsp;\n&nbsp;&nbsp;procedure&nbsp;LogReset&nbsp;(\n&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;AlertLogID&nbsp;&nbsp;:&nbsp;AlertLogIDType&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;signal&nbsp;&nbsp;&nbsp;Reset&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;in&nbsp;&nbsp;std_logic&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;ResetActive&nbsp;:&nbsp;in&nbsp;&nbsp;std_logic&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;ResetName&nbsp;&nbsp;&nbsp;:&nbsp;in&nbsp;&nbsp;string&nbsp;:=&nbsp;&quot;Reset&quot;&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;LogLevel&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;in&nbsp;&nbsp;LogType&nbsp;:=&nbsp;ALWAYS\n&nbsp;&nbsp;)&nbsp;;\n&nbsp;\n&nbsp;&nbsp;procedure&nbsp;LogReset&nbsp;(\n&nbsp;&nbsp;&nbsp;&nbsp;signal&nbsp;&nbsp;&nbsp;Reset&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;in&nbsp;&nbsp;std_logic&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;ResetActive&nbsp;:&nbsp;in&nbsp;&nbsp;std_logic&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;ResetName&nbsp;&nbsp;&nbsp;:&nbsp;in&nbsp;&nbsp;string&nbsp;:=&nbsp;&quot;Reset&quot;&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;LogLevel&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;in&nbsp;&nbsp;LogType&nbsp;:=&nbsp;ALWAYS\n&nbsp;&nbsp;)&nbsp;;\n&nbsp;\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;--&nbsp;&nbsp;Deprecated&nbsp;subprogram&nbsp;names\n&nbsp;&nbsp;--&nbsp;&nbsp;&nbsp;&nbsp;Maintaining&nbsp;backward&nbsp;compatibility&nbsp;using&nbsp;aliases\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;--&nbsp;History&nbsp;of&nbsp;RequestTransaction&nbsp;/&nbsp;WaitForTransaction\n&nbsp;&nbsp;alias&nbsp;RequestAction&nbsp;is&nbsp;RequestTransaction&nbsp;[std_logic,&nbsp;std_logic]&nbsp;;\n&nbsp;&nbsp;alias&nbsp;WaitForRequest&nbsp;is&nbsp;WaitForTransaction&nbsp;[std_logic,&nbsp;std_logic,&nbsp;std_logic]&nbsp;;\n&nbsp;&nbsp;--&nbsp;History&nbsp;of&nbsp;WaitForToggle\n&nbsp;&nbsp;alias&nbsp;WaitOnToggle&nbsp;is&nbsp;WaitForToggle&nbsp;[std_logic]&nbsp;;\n&nbsp;&nbsp;--&nbsp;History&nbsp;of&nbsp;WaitForBarrier\n&nbsp;&nbsp;alias&nbsp;WayPointBlock&nbsp;is&nbsp;WaitForBarrier&nbsp;[std_logic]&nbsp;;\n&nbsp;&nbsp;alias&nbsp;SyncTo&nbsp;is&nbsp;WaitForBarrier2[std_logic,&nbsp;std_logic]&nbsp;;\n&nbsp;&nbsp;alias&nbsp;SyncTo&nbsp;is&nbsp;WaitForBarrier2[std_logic,&nbsp;std_logic_vector]&nbsp;;\n&nbsp;&nbsp;--&nbsp;Backward&nbsp;compatible&nbsp;name\n&nbsp;&nbsp;alias&nbsp;SyncToClk&nbsp;is&nbsp;WaitForClock&nbsp;[std_logic,&nbsp;time]&nbsp;;\n&nbsp;\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;--&nbsp;Deprecated\n&nbsp;&nbsp;--&nbsp;WaitForAck,&nbsp;StrobeAck\n&nbsp;&nbsp;--&nbsp;&nbsp;&nbsp;Replaced&nbsp;by&nbsp;WaitForToggle&nbsp;and&nbsp;Toggle\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;procedure&nbsp;WaitForAck&nbsp;(&nbsp;signal&nbsp;Ack&nbsp;:&nbsp;In&nbsp;&nbsp;std_logic&nbsp;)&nbsp;;\n&nbsp;&nbsp;procedure&nbsp;StrobeAck&nbsp;&nbsp;(&nbsp;signal&nbsp;Ack&nbsp;:&nbsp;Out&nbsp;std_logic&nbsp;)&nbsp;;\n&nbsp;\nend&nbsp;TbUtilPkg&nbsp;;\n&nbsp;\n--&nbsp;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n--&nbsp;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\npackage&nbsp;body&nbsp;TbUtilPkg&nbsp;is\n&nbsp;&nbsp;type&nbsp;stdulogic_indexby_stdulogic&nbsp;is&nbsp;array&nbsp;(std_ulogic)&nbsp;of&nbsp;std_ulogic;\n&nbsp;\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;--&nbsp;ZeroOneHot,&nbsp;OneHot\n&nbsp;&nbsp;--&nbsp;&nbsp;&nbsp;OneHot:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;true&nbsp;if&nbsp;exactly&nbsp;one&nbsp;value&nbsp;is&nbsp;1\n&nbsp;&nbsp;--&nbsp;&nbsp;&nbsp;ZeroOneHot:&nbsp;&nbsp;return&nbsp;false&nbsp;when&nbsp;more&nbsp;than&nbsp;one&nbsp;value&nbsp;is&nbsp;a&nbsp;1\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;function&nbsp;OneHot&nbsp;(&nbsp;constant&nbsp;A&nbsp;:&nbsp;in&nbsp;std_logic_vector&nbsp;)&nbsp;return&nbsp;boolean&nbsp;is\n&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;found_one&nbsp;:&nbsp;boolean&nbsp;:=&nbsp;FALSE&nbsp;;\n&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;i&nbsp;in&nbsp;A&apos;range&nbsp;loop\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;A(i)&nbsp;=&nbsp;&apos;1&apos;&nbsp;or&nbsp;A(i)&nbsp;=&nbsp;&apos;H&apos;&nbsp;then\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;found_one&nbsp;then\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;FALSE&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;if&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;found_one&nbsp;:=&nbsp;TRUE&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;if&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;loop&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;found_one&nbsp;;&nbsp;--&nbsp;found&nbsp;a&nbsp;one\n&nbsp;&nbsp;end&nbsp;function&nbsp;OneHot&nbsp;;\n&nbsp;\n&nbsp;&nbsp;function&nbsp;ZeroOneHot&nbsp;(&nbsp;constant&nbsp;A&nbsp;:&nbsp;in&nbsp;std_logic_vector&nbsp;)&nbsp;return&nbsp;boolean&nbsp;is\n&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;found_one&nbsp;:&nbsp;boolean&nbsp;:=&nbsp;FALSE&nbsp;;\n&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;i&nbsp;in&nbsp;A&apos;range&nbsp;loop\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;A(i)&nbsp;=&nbsp;&apos;1&apos;&nbsp;or&nbsp;A(i)&nbsp;=&nbsp;&apos;H&apos;&nbsp;then\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;found_one&nbsp;then\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;FALSE&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;if&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;found_one&nbsp;:=&nbsp;TRUE&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;if&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;loop&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;TRUE&nbsp;;&nbsp;&nbsp;--&nbsp;all&nbsp;zero&nbsp;or&nbsp;found&nbsp;a&nbsp;one\n&nbsp;&nbsp;end&nbsp;function&nbsp;ZeroOneHot&nbsp;;\n&nbsp;\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;--&nbsp;EdgeRose,&nbsp;EdgeFell,&nbsp;FindRisingEdge,&nbsp;FindFallingEdge\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;function&nbsp;EdgeRose&nbsp;(&nbsp;signal&nbsp;C&nbsp;:&nbsp;in&nbsp;std_logic&nbsp;)&nbsp;return&nbsp;boolean&nbsp;is\n&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;&nbsp;to_x01(C)=&apos;1&apos;&nbsp;and&nbsp;to_x01(C&apos;last_value)=&apos;0&apos;&nbsp;and&nbsp;C&apos;last_event=&nbsp;0&nbsp;sec&nbsp;;\n&nbsp;&nbsp;end&nbsp;function&nbsp;EdgeRose&nbsp;;\n&nbsp;\n&nbsp;&nbsp;function&nbsp;EdgeFell&nbsp;(&nbsp;signal&nbsp;C&nbsp;:&nbsp;in&nbsp;std_logic&nbsp;)&nbsp;return&nbsp;boolean&nbsp;is\n&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;&nbsp;to_x01(C)=&apos;0&apos;&nbsp;and&nbsp;to_x01(C&apos;last_value)=&apos;1&apos;&nbsp;and&nbsp;C&apos;last_event=&nbsp;0&nbsp;sec&nbsp;;\n&nbsp;&nbsp;end&nbsp;function&nbsp;EdgeFell&nbsp;;\n&nbsp;\n&nbsp;&nbsp;function&nbsp;EdgeActive&nbsp;(&nbsp;signal&nbsp;C&nbsp;:&nbsp;in&nbsp;std_logic;&nbsp;A&nbsp;:&nbsp;std_logic&nbsp;)&nbsp;return&nbsp;boolean&nbsp;is\n&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;&nbsp;to_x01(C)=A&nbsp;and&nbsp;to_x01(C&apos;last_value)=not&nbsp;A&nbsp;and&nbsp;C&apos;last_event=&nbsp;0&nbsp;sec&nbsp;;\n&nbsp;&nbsp;end&nbsp;function&nbsp;EdgeActive&nbsp;;\n&nbsp;\n&nbsp;&nbsp;procedure&nbsp;FindRisingEdge&nbsp;(&nbsp;signal&nbsp;C&nbsp;:&nbsp;in&nbsp;std_logic)&nbsp;is\n&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;not&nbsp;EdgeRose(C)&nbsp;then\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;wait&nbsp;until&nbsp;rising_edge(C)&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;if&nbsp;;\n&nbsp;&nbsp;end&nbsp;procedure&nbsp;FindRisingEdge&nbsp;;\n&nbsp;\n--!!&nbsp;&nbsp;Rejected&nbsp;as&nbsp;the&nbsp;semantic&nbsp;is&nbsp;confusing\n--!!&nbsp;&nbsp;procedure&nbsp;FindRisingEdge&nbsp;(&nbsp;signal&nbsp;C&nbsp;:&nbsp;in&nbsp;std_logic;&nbsp;Count&nbsp;:&nbsp;integer)&nbsp;is\n--!!&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;Start&nbsp;:&nbsp;integer&nbsp;:=&nbsp;1&nbsp;;\n--!!&nbsp;&nbsp;begin\n--!!&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;EdgeRose(C)&nbsp;then\n--!!&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Start&nbsp;:=&nbsp;2&nbsp;;\n--!!&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;if\n--!!&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;i&nbsp;in&nbsp;Start&nbsp;to&nbsp;Count&nbsp;loop\n--!!&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;wait&nbsp;until&nbsp;rising_edge(C)&nbsp;;\n--!!&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;loop&nbsp;;\n--!!&nbsp;&nbsp;end&nbsp;procedure&nbsp;FindRisingEdge&nbsp;;\n&nbsp;\n&nbsp;&nbsp;procedure&nbsp;FindFallingEdge&nbsp;(&nbsp;signal&nbsp;C&nbsp;:&nbsp;in&nbsp;std_logic&nbsp;)&nbsp;is\n&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;not&nbsp;EdgeFell(C)&nbsp;then\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;wait&nbsp;until&nbsp;falling_edge(C)&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;if&nbsp;;\n&nbsp;&nbsp;end&nbsp;procedure&nbsp;FindFallingEdge&nbsp;;\n&nbsp;\n&nbsp;&nbsp;procedure&nbsp;FindActiveEdge&nbsp;(&nbsp;signal&nbsp;C&nbsp;:&nbsp;in&nbsp;std_logic;&nbsp;A&nbsp;:&nbsp;std_logic&nbsp;)&nbsp;is\n&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;A&nbsp;=&nbsp;&apos;1&apos;&nbsp;then\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FindRisingEdge(C)&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;else\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FindFallingEdge(C)&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;if&nbsp;;\n&nbsp;&nbsp;end&nbsp;procedure&nbsp;FindActiveEdge&nbsp;;\n&nbsp;\n&nbsp;\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;--&nbsp;MetaTo01\n&nbsp;&nbsp;--&nbsp;&nbsp;&nbsp;Convert&nbsp;Meta&nbsp;values&nbsp;to&nbsp;0\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;constant&nbsp;MetaTo01Table&nbsp;:&nbsp;stdulogic_indexby_stdulogic&nbsp;:=&nbsp;(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&apos;1&apos;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&gt;&nbsp;&apos;1&apos;,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&apos;H&apos;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&gt;&nbsp;&apos;1&apos;,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;others&nbsp;&nbsp;=&gt;&nbsp;&apos;0&apos;\n&nbsp;&nbsp;);\n&nbsp;\n&nbsp;&nbsp;function&nbsp;MetaTo01&nbsp;(&nbsp;constant&nbsp;A&nbsp;:&nbsp;in&nbsp;std_ulogic&nbsp;)&nbsp;return&nbsp;std_ulogic&nbsp;is\n&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;MetaTo01Table(A)&nbsp;;\n&nbsp;&nbsp;end&nbsp;function&nbsp;MetaTo01&nbsp;;\n&nbsp;\n&nbsp;&nbsp;function&nbsp;MetaTo01&nbsp;(&nbsp;constant&nbsp;A&nbsp;:&nbsp;in&nbsp;std_ulogic_vector&nbsp;)&nbsp;return&nbsp;std_ulogic_vector&nbsp;is\n&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;result&nbsp;:&nbsp;std_logic_vector(A&apos;range)&nbsp;;\n&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;i&nbsp;in&nbsp;A&apos;range&nbsp;loop\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;result(i)&nbsp;:=&nbsp;MetaTo01Table(A(i))&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;loop&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;result&nbsp;;\n&nbsp;&nbsp;end&nbsp;function&nbsp;MetaTo01&nbsp;;\n&nbsp;\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;--&nbsp;IfElse\n&nbsp;&nbsp;--&nbsp;&nbsp;&nbsp;Crutch&nbsp;until&nbsp;VHDL-2019&nbsp;conditional&nbsp;initialization\n&nbsp;&nbsp;--&nbsp;&nbsp;&nbsp;If&nbsp;condition&nbsp;is&nbsp;true&nbsp;return&nbsp;first&nbsp;parameter&nbsp;otherwise&nbsp;return&nbsp;second\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;function&nbsp;IfElse(Expr&nbsp;:&nbsp;boolean&nbsp;;&nbsp;A,&nbsp;B&nbsp;:&nbsp;std_logic_vector)&nbsp;return&nbsp;std_logic_vector&nbsp;is\n&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;Expr&nbsp;then\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;A&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;else\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;B&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;if&nbsp;;\n&nbsp;&nbsp;end&nbsp;function&nbsp;IfElse&nbsp;;\n&nbsp;\n&nbsp;&nbsp;function&nbsp;IfElse(Expr&nbsp;:&nbsp;boolean&nbsp;;&nbsp;A,&nbsp;B&nbsp;:&nbsp;integer)&nbsp;return&nbsp;integer&nbsp;is\n&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;Expr&nbsp;then\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;A&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;else\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;B&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;if&nbsp;;\n&nbsp;&nbsp;end&nbsp;function&nbsp;IfElse&nbsp;;\n&nbsp;\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;--&nbsp;RequestTransaction&nbsp;-&nbsp;WaitForTransaction\n&nbsp;&nbsp;--&nbsp;&nbsp;&nbsp;RequestTransaction&nbsp;-&nbsp;Transaction&nbsp;initiation&nbsp;in&nbsp;transaction&nbsp;procedure\n&nbsp;&nbsp;--&nbsp;&nbsp;&nbsp;WaitForTransaction&nbsp;-&nbsp;Transaction&nbsp;execution&nbsp;control&nbsp;in&nbsp;VC\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;--&nbsp;RequestTransaction&nbsp;-&nbsp;WaitForTransaction\n&nbsp;&nbsp;--&nbsp;&nbsp;&nbsp;std_logic\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;procedure&nbsp;RequestTransaction&nbsp;(\n&nbsp;&nbsp;&nbsp;&nbsp;signal&nbsp;Rdy&nbsp;&nbsp;:&nbsp;Out&nbsp;std_logic&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;signal&nbsp;Ack&nbsp;&nbsp;:&nbsp;In&nbsp;&nbsp;std_logic\n&nbsp;&nbsp;)&nbsp;is\n&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;Record&nbsp;contains&nbsp;new&nbsp;transaction\n&nbsp;&nbsp;&nbsp;&nbsp;Rdy&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;=&nbsp;&apos;1&apos;&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;Find&nbsp;Ack&nbsp;low&nbsp;=&nbsp;&apos;0&apos;\n&nbsp;&nbsp;&nbsp;&nbsp;wait&nbsp;until&nbsp;Ack&nbsp;=&nbsp;&apos;0&apos;&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;Prepare&nbsp;for&nbsp;Next&nbsp;Transaction\n&nbsp;&nbsp;&nbsp;&nbsp;Rdy&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;=&nbsp;&apos;0&apos;&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;Transaction&nbsp;Done\n&nbsp;&nbsp;&nbsp;&nbsp;wait&nbsp;until&nbsp;Ack&nbsp;=&nbsp;&apos;1&apos;&nbsp;;\n&nbsp;&nbsp;end&nbsp;procedure&nbsp;RequestTransaction&nbsp;;\n&nbsp;\n&nbsp;&nbsp;procedure&nbsp;WaitForTransaction&nbsp;(\n&nbsp;&nbsp;&nbsp;&nbsp;signal&nbsp;Clk&nbsp;&nbsp;:&nbsp;In&nbsp;&nbsp;std_logic&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;signal&nbsp;Rdy&nbsp;&nbsp;:&nbsp;In&nbsp;&nbsp;std_logic&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;signal&nbsp;Ack&nbsp;&nbsp;:&nbsp;Out&nbsp;std_logic\n&nbsp;&nbsp;)&nbsp;is\n&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;AckTime&nbsp;:&nbsp;time&nbsp;;\n&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;End&nbsp;of&nbsp;Previous&nbsp;Cycle.&nbsp;&nbsp;Signal&nbsp;Done\n&nbsp;&nbsp;&nbsp;&nbsp;Ack&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;=&nbsp;&apos;1&apos;&nbsp;;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;&nbsp;#6\n&nbsp;&nbsp;&nbsp;&nbsp;AckTime&nbsp;&nbsp;&nbsp;&nbsp;:=&nbsp;NOW&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;Find&nbsp;Start&nbsp;of&nbsp;Transaction\n&nbsp;&nbsp;&nbsp;&nbsp;wait&nbsp;for&nbsp;0&nbsp;ns&nbsp;;&nbsp;--&nbsp;Allow&nbsp;Rdy&nbsp;from&nbsp;previous&nbsp;cycle&nbsp;to&nbsp;clear\n&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;Rdy&nbsp;/=&nbsp;&apos;1&apos;&nbsp;then&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;&nbsp;&nbsp;#2\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;wait&nbsp;until&nbsp;Rdy&nbsp;=&nbsp;&apos;1&apos;&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;else\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;wait&nbsp;for&nbsp;0&nbsp;ns&nbsp;;&nbsp;--&nbsp;allow&nbsp;Ack&nbsp;to&nbsp;update\n&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;if&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;align&nbsp;to&nbsp;clock&nbsp;if&nbsp;needed&nbsp;(not&nbsp;back-to-back&nbsp;transactions)\n&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;NOW&nbsp;/=&nbsp;AckTime&nbsp;then\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;wait&nbsp;until&nbsp;Clk&nbsp;=&nbsp;CLK_ACTIVE&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;if&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;Model&nbsp;active&nbsp;and&nbsp;owns&nbsp;the&nbsp;record\n&nbsp;&nbsp;&nbsp;&nbsp;Ack&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;=&nbsp;&apos;0&apos;&nbsp;;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;&nbsp;#3\n&nbsp;&nbsp;&nbsp;&nbsp;wait&nbsp;for&nbsp;0&nbsp;ns&nbsp;;&nbsp;--&nbsp;Allow&nbsp;transactions&nbsp;without&nbsp;time&nbsp;passing\n&nbsp;&nbsp;end&nbsp;procedure&nbsp;WaitForTransaction&nbsp;;\n&nbsp;\n&nbsp;&nbsp;--&nbsp;Only&nbsp;for&nbsp;clockless&nbsp;models&nbsp;\n&nbsp;&nbsp;procedure&nbsp;WaitForTransaction&nbsp;(\n&nbsp;&nbsp;&nbsp;&nbsp;signal&nbsp;Rdy&nbsp;&nbsp;:&nbsp;In&nbsp;&nbsp;std_logic&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;signal&nbsp;Ack&nbsp;&nbsp;:&nbsp;Out&nbsp;std_logic\n&nbsp;&nbsp;)&nbsp;is\n&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;End&nbsp;of&nbsp;Previous&nbsp;Cycle.&nbsp;&nbsp;Signal&nbsp;Done\n&nbsp;&nbsp;&nbsp;&nbsp;Ack&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;=&nbsp;&apos;1&apos;&nbsp;;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;&nbsp;#6\n&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;Find&nbsp;Start&nbsp;of&nbsp;Transaction\n&nbsp;&nbsp;&nbsp;&nbsp;wait&nbsp;for&nbsp;0&nbsp;ns&nbsp;;&nbsp;--&nbsp;Allow&nbsp;Rdy&nbsp;from&nbsp;previous&nbsp;cycle&nbsp;to&nbsp;clear\n&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;Rdy&nbsp;/=&nbsp;&apos;1&apos;&nbsp;then&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;&nbsp;&nbsp;#2\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;wait&nbsp;until&nbsp;Rdy&nbsp;=&nbsp;&apos;1&apos;&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;if&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;Model&nbsp;active&nbsp;and&nbsp;owns&nbsp;the&nbsp;record\n&nbsp;&nbsp;&nbsp;&nbsp;Ack&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;=&nbsp;&apos;0&apos;&nbsp;;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;&nbsp;#3\n&nbsp;&nbsp;&nbsp;&nbsp;wait&nbsp;for&nbsp;0&nbsp;ns&nbsp;;&nbsp;--&nbsp;allow&nbsp;0&nbsp;time&nbsp;transactions\n&nbsp;&nbsp;end&nbsp;procedure&nbsp;WaitForTransaction&nbsp;;\n&nbsp;\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;--&nbsp;RequestTransaction&nbsp;-&nbsp;WaitForTransaction\n&nbsp;&nbsp;--&nbsp;&nbsp;&nbsp;bit\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;procedure&nbsp;RequestTransaction&nbsp;(\n&nbsp;&nbsp;&nbsp;&nbsp;signal&nbsp;Rdy&nbsp;&nbsp;:&nbsp;Out&nbsp;bit&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;signal&nbsp;Ack&nbsp;&nbsp;:&nbsp;In&nbsp;&nbsp;bit\n&nbsp;&nbsp;)&nbsp;is\n&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;Record&nbsp;contains&nbsp;new&nbsp;transaction\n&nbsp;&nbsp;&nbsp;&nbsp;Rdy&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;=&nbsp;&apos;1&apos;&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;Find&nbsp;Ack&nbsp;low&nbsp;=&nbsp;&apos;0&apos;\n&nbsp;&nbsp;&nbsp;&nbsp;wait&nbsp;until&nbsp;Ack&nbsp;=&nbsp;&apos;0&apos;&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;Prepare&nbsp;for&nbsp;Next&nbsp;Transaction\n&nbsp;&nbsp;&nbsp;&nbsp;Rdy&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;=&nbsp;&apos;0&apos;&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;Transaction&nbsp;Done\n&nbsp;&nbsp;&nbsp;&nbsp;wait&nbsp;until&nbsp;Ack&nbsp;=&nbsp;&apos;1&apos;&nbsp;;\n&nbsp;&nbsp;end&nbsp;procedure&nbsp;RequestTransaction&nbsp;;\n&nbsp;\n&nbsp;&nbsp;procedure&nbsp;WaitForTransaction&nbsp;(\n&nbsp;&nbsp;&nbsp;&nbsp;signal&nbsp;Clk&nbsp;&nbsp;:&nbsp;In&nbsp;&nbsp;std_logic&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;signal&nbsp;Rdy&nbsp;&nbsp;:&nbsp;In&nbsp;&nbsp;bit&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;signal&nbsp;Ack&nbsp;&nbsp;:&nbsp;Out&nbsp;bit\n&nbsp;&nbsp;)&nbsp;is\n&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;AckTime&nbsp;:&nbsp;time&nbsp;;\n&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;End&nbsp;of&nbsp;Previous&nbsp;Cycle.&nbsp;&nbsp;Signal&nbsp;Done\n&nbsp;&nbsp;&nbsp;&nbsp;Ack&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;=&nbsp;&apos;1&apos;&nbsp;;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;&nbsp;#6\n&nbsp;&nbsp;&nbsp;&nbsp;AckTime&nbsp;&nbsp;&nbsp;&nbsp;:=&nbsp;NOW&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;Find&nbsp;Start&nbsp;of&nbsp;Transaction\n&nbsp;&nbsp;&nbsp;&nbsp;wait&nbsp;for&nbsp;0&nbsp;ns&nbsp;;&nbsp;--&nbsp;Allow&nbsp;Rdy&nbsp;from&nbsp;previous&nbsp;cycle&nbsp;to&nbsp;clear\n&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;Rdy&nbsp;/=&nbsp;&apos;1&apos;&nbsp;then&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;&nbsp;&nbsp;#2\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;wait&nbsp;until&nbsp;Rdy&nbsp;=&nbsp;&apos;1&apos;&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;else\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;wait&nbsp;for&nbsp;0&nbsp;ns&nbsp;;&nbsp;--&nbsp;allow&nbsp;Ack&nbsp;to&nbsp;update\n&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;if&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;align&nbsp;to&nbsp;clock&nbsp;if&nbsp;needed&nbsp;(not&nbsp;back-to-back&nbsp;transactions)\n&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;NOW&nbsp;/=&nbsp;AckTime&nbsp;then\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;wait&nbsp;until&nbsp;Clk&nbsp;=&nbsp;CLK_ACTIVE&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;if&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;Model&nbsp;active&nbsp;and&nbsp;owns&nbsp;the&nbsp;record\n&nbsp;&nbsp;&nbsp;&nbsp;Ack&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;=&nbsp;&apos;0&apos;&nbsp;;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;&nbsp;#3\n&nbsp;&nbsp;&nbsp;&nbsp;wait&nbsp;for&nbsp;0&nbsp;ns&nbsp;;&nbsp;--&nbsp;Allow&nbsp;transactions&nbsp;without&nbsp;time&nbsp;passing\n&nbsp;&nbsp;end&nbsp;procedure&nbsp;WaitForTransaction&nbsp;;\n&nbsp;\n&nbsp;&nbsp;--&nbsp;Only&nbsp;for&nbsp;clockless&nbsp;models&nbsp;\n&nbsp;&nbsp;procedure&nbsp;WaitForTransaction&nbsp;(\n&nbsp;&nbsp;&nbsp;&nbsp;signal&nbsp;Rdy&nbsp;&nbsp;:&nbsp;in&nbsp;&nbsp;bit&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;signal&nbsp;Ack&nbsp;&nbsp;:&nbsp;out&nbsp;bit\n&nbsp;&nbsp;)&nbsp;is\n&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;End&nbsp;of&nbsp;Previous&nbsp;Cycle.&nbsp;&nbsp;Signal&nbsp;Done\n&nbsp;&nbsp;&nbsp;&nbsp;Ack&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;=&nbsp;&apos;1&apos;&nbsp;;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;&nbsp;#6\n&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;Find&nbsp;Start&nbsp;of&nbsp;Transaction\n&nbsp;&nbsp;&nbsp;&nbsp;wait&nbsp;for&nbsp;0&nbsp;ns&nbsp;;&nbsp;--&nbsp;Allow&nbsp;Rdy&nbsp;from&nbsp;previous&nbsp;cycle&nbsp;to&nbsp;clear\n&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;Rdy&nbsp;/=&nbsp;&apos;1&apos;&nbsp;then&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;&nbsp;&nbsp;#2\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;wait&nbsp;until&nbsp;Rdy&nbsp;=&nbsp;&apos;1&apos;&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;if&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;Model&nbsp;active&nbsp;and&nbsp;owns&nbsp;the&nbsp;record\n&nbsp;&nbsp;&nbsp;&nbsp;Ack&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;=&nbsp;&apos;0&apos;&nbsp;;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;&nbsp;#3\n&nbsp;&nbsp;&nbsp;&nbsp;wait&nbsp;for&nbsp;0&nbsp;ns&nbsp;;&nbsp;--&nbsp;allow&nbsp;0&nbsp;time&nbsp;transactions\n&nbsp;&nbsp;end&nbsp;procedure&nbsp;WaitForTransaction&nbsp;;\n&nbsp;\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;--&nbsp;RequestTransaction&nbsp;-&nbsp;WaitForTransaction\n&nbsp;&nbsp;--&nbsp;&nbsp;&nbsp;integer\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;procedure&nbsp;RequestTransaction&nbsp;(\n&nbsp;&nbsp;&nbsp;&nbsp;signal&nbsp;Rdy&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;InOut&nbsp;RdyType&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;signal&nbsp;Ack&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;In&nbsp;&nbsp;&nbsp;&nbsp;AckType\n&nbsp;&nbsp;)&nbsp;is\n&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;Initiate&nbsp;Transaction&nbsp;Request\n&nbsp;&nbsp;&nbsp;&nbsp;Rdy&nbsp;&lt;=&nbsp;Increment(Rdy)&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;wait&nbsp;for&nbsp;0&nbsp;ns&nbsp;;\n&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;Wait&nbsp;for&nbsp;Transaction&nbsp;Completion\n&nbsp;&nbsp;&nbsp;&nbsp;wait&nbsp;until&nbsp;Rdy&nbsp;=&nbsp;Ack&nbsp;;\n&nbsp;&nbsp;end&nbsp;procedure&nbsp;RequestTransaction&nbsp;;\n&nbsp;\n&nbsp;&nbsp;procedure&nbsp;WaitForTransaction&nbsp;(\n&nbsp;&nbsp;&nbsp;&nbsp;signal&nbsp;Clk&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;In&nbsp;&nbsp;&nbsp;&nbsp;std_logic&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;signal&nbsp;Rdy&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;In&nbsp;&nbsp;&nbsp;&nbsp;RdyType&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;signal&nbsp;Ack&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;InOut&nbsp;AckType\n&nbsp;&nbsp;)&nbsp;is\n&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;End&nbsp;of&nbsp;Previous&nbsp;Cycle.&nbsp;&nbsp;Signal&nbsp;Done\n&nbsp;&nbsp;&nbsp;&nbsp;Ack&nbsp;&lt;=&nbsp;Increment(Ack)&nbsp;;\n&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;Find&nbsp;Start&nbsp;of&nbsp;Transaction\n&nbsp;&nbsp;&nbsp;&nbsp;wait&nbsp;until&nbsp;Ack&nbsp;/=&nbsp;Rdy&nbsp;;\n&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;Align&nbsp;to&nbsp;clock&nbsp;if&nbsp;needed&nbsp;(not&nbsp;back-to-back&nbsp;transactions)\n&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;not&nbsp;EdgeActive(Clk,&nbsp;CLK_ACTIVE)&nbsp;then\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;wait&nbsp;until&nbsp;Clk&nbsp;=&nbsp;CLK_ACTIVE&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;if&nbsp;;\n&nbsp;&nbsp;end&nbsp;procedure&nbsp;WaitForTransaction&nbsp;;\n&nbsp;\n&nbsp;&nbsp;--&nbsp;Only&nbsp;for&nbsp;clockless&nbsp;models&nbsp;\n&nbsp;&nbsp;procedure&nbsp;WaitForTransaction&nbsp;(\n&nbsp;&nbsp;&nbsp;&nbsp;signal&nbsp;Rdy&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;In&nbsp;&nbsp;&nbsp;&nbsp;RdyType&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;signal&nbsp;Ack&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;InOut&nbsp;AckType\n&nbsp;&nbsp;)&nbsp;is\n&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;End&nbsp;of&nbsp;Previous&nbsp;Cycle.&nbsp;&nbsp;Signal&nbsp;Done\n&nbsp;&nbsp;&nbsp;&nbsp;Ack&nbsp;&lt;=&nbsp;Increment(Ack)&nbsp;;\n&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;Find&nbsp;Start&nbsp;of&nbsp;Transaction\n&nbsp;&nbsp;&nbsp;&nbsp;wait&nbsp;until&nbsp;Ack&nbsp;/=&nbsp;Rdy&nbsp;;\n&nbsp;&nbsp;end&nbsp;procedure&nbsp;WaitForTransaction&nbsp;;\n&nbsp;\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;--&nbsp;WaitForTransaction&nbsp;\n&nbsp;&nbsp;--&nbsp;&nbsp;&nbsp;Specializations&nbsp;for&nbsp;interrupt&nbsp;handling\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;procedure&nbsp;WaitForTransaction&nbsp;(\n&nbsp;&nbsp;&nbsp;&nbsp;signal&nbsp;&nbsp;&nbsp;Clk&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;In&nbsp;&nbsp;std_logic&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;signal&nbsp;&nbsp;&nbsp;Rdy&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;In&nbsp;&nbsp;std_logic&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;signal&nbsp;&nbsp;&nbsp;Ack&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;Out&nbsp;std_logic&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;signal&nbsp;&nbsp;&nbsp;TimeOut&nbsp;&nbsp;&nbsp;:&nbsp;In&nbsp;&nbsp;std_logic&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;Polarity&nbsp;&nbsp;:&nbsp;In&nbsp;&nbsp;std_logic&nbsp;:=&nbsp;&apos;1&apos;\n&nbsp;&nbsp;)&nbsp;is\n&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;AckTime&nbsp;:&nbsp;time&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;FoundRdy&nbsp;:&nbsp;boolean&nbsp;;\n&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;End&nbsp;of&nbsp;Previous&nbsp;Cycle.&nbsp;&nbsp;Signal&nbsp;Done\n&nbsp;&nbsp;&nbsp;&nbsp;Ack&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;=&nbsp;&apos;1&apos;&nbsp;;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;&nbsp;#6\n&nbsp;&nbsp;&nbsp;&nbsp;AckTime&nbsp;&nbsp;&nbsp;&nbsp;:=&nbsp;NOW&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;Find&nbsp;Ready&nbsp;or&nbsp;Time&nbsp;out\n&nbsp;&nbsp;&nbsp;&nbsp;wait&nbsp;for&nbsp;0&nbsp;ns&nbsp;;&nbsp;--&nbsp;Allow&nbsp;Rdy&nbsp;from&nbsp;previous&nbsp;cycle&nbsp;to&nbsp;clear\n&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(Rdy&nbsp;/=&nbsp;&apos;1&apos;&nbsp;and&nbsp;TimeOut&nbsp;/=&nbsp;Polarity)&nbsp;then\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;wait&nbsp;until&nbsp;Rdy&nbsp;=&nbsp;&apos;1&apos;&nbsp;or&nbsp;TimeOut&nbsp;=&nbsp;Polarity&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;if&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;FoundRdy&nbsp;:=&nbsp;Rdy&nbsp;=&nbsp;&apos;1&apos;&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;align&nbsp;to&nbsp;clock&nbsp;if&nbsp;Rdy&nbsp;or&nbsp;TimeOut&nbsp;does&nbsp;not&nbsp;happen&nbsp;within&nbsp;delta&nbsp;cycles&nbsp;from&nbsp;Ack\n&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;NOW&nbsp;/=&nbsp;AckTime&nbsp;then\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;wait&nbsp;until&nbsp;Clk&nbsp;=&nbsp;CLK_ACTIVE&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;if&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;FoundRdy&nbsp;then\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;Model&nbsp;active&nbsp;and&nbsp;owns&nbsp;the&nbsp;record\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Ack&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;=&nbsp;&apos;0&apos;&nbsp;;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;&nbsp;#3\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;wait&nbsp;for&nbsp;0&nbsp;ns&nbsp;;&nbsp;--&nbsp;Allow&nbsp;transactions&nbsp;without&nbsp;time&nbsp;passing\n&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;if&nbsp;;\n&nbsp;&nbsp;end&nbsp;procedure&nbsp;WaitForTransaction&nbsp;;\n&nbsp;\n&nbsp;&nbsp;--&nbsp;Variation&nbsp;for&nbsp;model&nbsp;that&nbsp;stops&nbsp;waiting&nbsp;when&nbsp;IntReq&nbsp;is&nbsp;asserted\n&nbsp;&nbsp;--&nbsp;Intended&nbsp;for&nbsp;models&nbsp;that&nbsp;need&nbsp;to&nbsp;switch&nbsp;between&nbsp;instruction&nbsp;streams\n&nbsp;&nbsp;--&nbsp;such&nbsp;as&nbsp;a&nbsp;CPU&nbsp;when&nbsp;interrupt&nbsp;is&nbsp;pending\n&nbsp;&nbsp;procedure&nbsp;WaitForTransactionOrIrq&nbsp;(\n&nbsp;&nbsp;&nbsp;&nbsp;signal&nbsp;Clk&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;In&nbsp;&nbsp;std_logic&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;signal&nbsp;Rdy&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;In&nbsp;&nbsp;std_logic&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;signal&nbsp;IntReq&nbsp;&nbsp;:&nbsp;In&nbsp;&nbsp;std_logic\n&nbsp;&nbsp;)&nbsp;is\n&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;AckTime&nbsp;:&nbsp;time&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;POLARITY&nbsp;:&nbsp;std_logic&nbsp;:=&nbsp;&apos;1&apos;&nbsp;;\n&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;AckTime&nbsp;&nbsp;&nbsp;&nbsp;:=&nbsp;NOW&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;Find&nbsp;Ready&nbsp;or&nbsp;Time&nbsp;out\n&nbsp;&nbsp;&nbsp;&nbsp;wait&nbsp;for&nbsp;0&nbsp;ns&nbsp;;&nbsp;--&nbsp;allow&nbsp;Rdy&nbsp;from&nbsp;previous&nbsp;cycle&nbsp;to&nbsp;clear\n&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(Rdy&nbsp;/=&nbsp;&apos;1&apos;&nbsp;and&nbsp;IntReq&nbsp;/=&nbsp;POLARITY)&nbsp;then\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;wait&nbsp;until&nbsp;Rdy&nbsp;=&nbsp;&apos;1&apos;&nbsp;or&nbsp;IntReq&nbsp;=&nbsp;POLARITY&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;else\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;wait&nbsp;for&nbsp;0&nbsp;ns&nbsp;;&nbsp;--&nbsp;allow&nbsp;Ack&nbsp;to&nbsp;update\n&nbsp;&nbsp;&nbsp;end&nbsp;if&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;align&nbsp;to&nbsp;clock&nbsp;if&nbsp;Rdy&nbsp;or&nbsp;IntReq&nbsp;does&nbsp;not&nbsp;happen&nbsp;within&nbsp;delta&nbsp;cycles&nbsp;from&nbsp;Ack\n&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;NOW&nbsp;/=&nbsp;AckTime&nbsp;then\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;wait&nbsp;until&nbsp;Clk&nbsp;=&nbsp;CLK_ACTIVE&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;if&nbsp;;\n&nbsp;&nbsp;end&nbsp;procedure&nbsp;;\n&nbsp;\n&nbsp;&nbsp;--&nbsp;Set&nbsp;Ack&nbsp;to&nbsp;Model&nbsp;starting&nbsp;value\n&nbsp;&nbsp;--&nbsp;Pairs&nbsp;with&nbsp;WaitForTransactionOrIrq&nbsp;above\n&nbsp;&nbsp;procedure&nbsp;StartTransaction&nbsp;&nbsp;(&nbsp;signal&nbsp;Ack&nbsp;:&nbsp;Out&nbsp;std_logic&nbsp;)&nbsp;is\n&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;Ack&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;=&nbsp;&apos;0&apos;&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;wait&nbsp;for&nbsp;0&nbsp;ns&nbsp;;&nbsp;--&nbsp;Allow&nbsp;transactions&nbsp;without&nbsp;time&nbsp;passing\n&nbsp;&nbsp;end&nbsp;procedure&nbsp;StartTransaction&nbsp;;\n&nbsp;\n&nbsp;&nbsp;--&nbsp;Set&nbsp;Ack&nbsp;to&nbsp;Model&nbsp;finishing&nbsp;value\n&nbsp;&nbsp;--&nbsp;Pairs&nbsp;with&nbsp;WaitForTransactionOrIrq&nbsp;above\n&nbsp;&nbsp;procedure&nbsp;FinishTransaction&nbsp;(&nbsp;signal&nbsp;Ack&nbsp;:&nbsp;Out&nbsp;std_logic&nbsp;)&nbsp;is\n&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;End&nbsp;of&nbsp;Cycle\n&nbsp;&nbsp;&nbsp;&nbsp;Ack&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;=&nbsp;&apos;1&apos;&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;wait&nbsp;for&nbsp;0&nbsp;ns&nbsp;;&nbsp;--&nbsp;Allow&nbsp;Ack&nbsp;to&nbsp;update\n&nbsp;&nbsp;end&nbsp;procedure&nbsp;FinishTransaction&nbsp;;\n&nbsp;\n&nbsp;&nbsp;--&nbsp;If&nbsp;a&nbsp;transaction&nbsp;is&nbsp;pending,&nbsp;return&nbsp;true\n&nbsp;&nbsp;--&nbsp;&nbsp;&nbsp;Used&nbsp;to&nbsp;detect&nbsp;presence&nbsp;of&nbsp;transaction&nbsp;stream,\n&nbsp;&nbsp;--&nbsp;&nbsp;&nbsp;such&nbsp;as&nbsp;an&nbsp;interrupt&nbsp;handler\n&nbsp;&nbsp;function&nbsp;TransactionPending&nbsp;(\n&nbsp;&nbsp;&nbsp;&nbsp;signal&nbsp;Rdy&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;In&nbsp;&nbsp;std_logic\n&nbsp;&nbsp;)&nbsp;return&nbsp;boolean&nbsp;is\n&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;Rdy&nbsp;=&nbsp;&apos;1&apos;&nbsp;;\n&nbsp;&nbsp;end&nbsp;function&nbsp;TransactionPending&nbsp;;\n&nbsp;\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;--&nbsp;WaitForTransaction&nbsp;-&nbsp;RdyType/AckType&nbsp;\n&nbsp;&nbsp;--&nbsp;&nbsp;&nbsp;Specializations&nbsp;for&nbsp;interrupt&nbsp;handling\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;--&nbsp;Intended&nbsp;for&nbsp;models&nbsp;that&nbsp;need&nbsp;to&nbsp;switch&nbsp;between&nbsp;instruction&nbsp;streams\n&nbsp;&nbsp;--&nbsp;such&nbsp;as&nbsp;a&nbsp;CPU&nbsp;when&nbsp;interrupt&nbsp;is&nbsp;pending\n&nbsp;&nbsp;procedure&nbsp;WaitForTransactionOrIrq&nbsp;(\n&nbsp;&nbsp;&nbsp;&nbsp;signal&nbsp;&nbsp;&nbsp;Clk&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;In&nbsp;&nbsp;std_logic&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;signal&nbsp;&nbsp;&nbsp;Rdy&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;In&nbsp;&nbsp;RdyType&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;signal&nbsp;&nbsp;&nbsp;Ack&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;In&nbsp;&nbsp;AckType&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;signal&nbsp;&nbsp;&nbsp;IntReq&nbsp;&nbsp;&nbsp;:&nbsp;In&nbsp;&nbsp;std_logic&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;POLARITY&nbsp;:&nbsp;In&nbsp;&nbsp;std_logic&nbsp;:=&nbsp;&apos;1&apos;&nbsp;\n&nbsp;&nbsp;)&nbsp;is\n&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(Ack&nbsp;=&nbsp;Rdy&nbsp;and&nbsp;IntReq&nbsp;/=&nbsp;POLARITY)&nbsp;then\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;wait&nbsp;until&nbsp;Ack&nbsp;/=&nbsp;Rdy&nbsp;or&nbsp;IntReq&nbsp;=&nbsp;POLARITY&nbsp;;\n&nbsp;&nbsp;&nbsp;end&nbsp;if&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;Align&nbsp;to&nbsp;clock&nbsp;if&nbsp;needed&nbsp;(not&nbsp;back-to-back&nbsp;transactions)\n&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;not&nbsp;EdgeActive(Clk,&nbsp;CLK_ACTIVE)&nbsp;then\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;wait&nbsp;until&nbsp;Clk&nbsp;=&nbsp;CLK_ACTIVE&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;if&nbsp;;\n&nbsp;&nbsp;end&nbsp;procedure&nbsp;;\n&nbsp;\n&nbsp;&nbsp;--&nbsp;Set&nbsp;Ack&nbsp;to&nbsp;Model&nbsp;starting&nbsp;value\n&nbsp;&nbsp;--&nbsp;Pairs&nbsp;with&nbsp;WaitForTransactionOrIrq&nbsp;above\n--&nbsp;&nbsp;procedure&nbsp;StartTransaction&nbsp;&nbsp;(&nbsp;signal&nbsp;Ack&nbsp;:&nbsp;Out&nbsp;AckType&nbsp;)&nbsp;is\n--&nbsp;&nbsp;begin\n--&nbsp;&nbsp;&nbsp;&nbsp;Null&nbsp;;&nbsp;--&nbsp;Do&nbsp;nothing\n--&nbsp;&nbsp;end&nbsp;procedure&nbsp;StartTransaction&nbsp;;\n&nbsp;\n&nbsp;&nbsp;--&nbsp;Set&nbsp;Ack&nbsp;to&nbsp;Model&nbsp;finishing&nbsp;value\n&nbsp;&nbsp;--&nbsp;Pairs&nbsp;with&nbsp;WaitForTransactionOrIrq&nbsp;above\n&nbsp;&nbsp;procedure&nbsp;FinishTransaction&nbsp;(&nbsp;signal&nbsp;Ack&nbsp;:&nbsp;InOut&nbsp;AckType&nbsp;)&nbsp;is\n&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;End&nbsp;of&nbsp;Cycle\n&nbsp;&nbsp;&nbsp;&nbsp;Ack&nbsp;&lt;=&nbsp;Increment(Ack)&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;wait&nbsp;for&nbsp;0&nbsp;ns&nbsp;;&nbsp;--&nbsp;allow&nbsp;Ack&nbsp;to&nbsp;update&nbsp;-&nbsp;required&nbsp;for&nbsp;WaitForTransactionOrIrq\n&nbsp;&nbsp;end&nbsp;procedure&nbsp;FinishTransaction&nbsp;;\n&nbsp;\n&nbsp;&nbsp;--&nbsp;If&nbsp;a&nbsp;transaction&nbsp;is&nbsp;pending,&nbsp;return&nbsp;true\n&nbsp;&nbsp;--&nbsp;&nbsp;&nbsp;Used&nbsp;to&nbsp;detect&nbsp;presence&nbsp;of&nbsp;transaction&nbsp;stream,\n&nbsp;&nbsp;--&nbsp;&nbsp;&nbsp;such&nbsp;as&nbsp;an&nbsp;interrupt&nbsp;handler\n&nbsp;&nbsp;function&nbsp;TransactionPending&nbsp;(\n&nbsp;&nbsp;&nbsp;&nbsp;signal&nbsp;Rdy&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;In&nbsp;&nbsp;RdyType&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;signal&nbsp;Ack&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;In&nbsp;&nbsp;AckType\n&nbsp;&nbsp;)&nbsp;return&nbsp;boolean&nbsp;is\n&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;Rdy&nbsp;/=&nbsp;Ack&nbsp;;\n&nbsp;&nbsp;end&nbsp;function&nbsp;TransactionPending&nbsp;;\n&nbsp;\n&nbsp;\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;--&nbsp;Toggle,&nbsp;WaitForToggle\n&nbsp;&nbsp;--&nbsp;&nbsp;&nbsp;Used&nbsp;for&nbsp;communicating&nbsp;between&nbsp;processes\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;constant&nbsp;toggle_sl_table&nbsp;:&nbsp;stdulogic_indexby_stdulogic&nbsp;:=&nbsp;(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&apos;0&apos;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&gt;&nbsp;&apos;1&apos;,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&apos;L&apos;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&gt;&nbsp;&apos;1&apos;,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;others&nbsp;&nbsp;=&gt;&nbsp;&apos;0&apos;\n&nbsp;&nbsp;);\n&nbsp;\n&nbsp;&nbsp;procedure&nbsp;Toggle&nbsp;(\n&nbsp;&nbsp;&nbsp;&nbsp;signal&nbsp;Sig&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;InOut&nbsp;std_logic&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;DelayVal&nbsp;:&nbsp;time\n&nbsp;&nbsp;)&nbsp;is\n&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;iDelayVal&nbsp;:&nbsp;time&nbsp;;\n&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;DelayVal&nbsp;&gt;&nbsp;t_sim_resolution&nbsp;then\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;iDelayVal&nbsp;:=&nbsp;DelayVal&nbsp;-&nbsp;t_sim_resolution&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;else\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;iDelayVal&nbsp;:=&nbsp;0&nbsp;sec&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AlertIf(OSVVM_ALERTLOG_ID,&nbsp;DelayVal&nbsp;&lt;&nbsp;0&nbsp;sec,&nbsp;&quot;osvvm.TbUtilPkg.Toggle:&nbsp;Delay&nbsp;value&nbsp;&lt;&nbsp;0&nbsp;ns&quot;)&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;if&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;Sig&nbsp;&lt;=&nbsp;toggle_sl_table(Sig)&nbsp;after&nbsp;iDelayVal&nbsp;;\n&nbsp;&nbsp;end&nbsp;procedure&nbsp;Toggle&nbsp;;\n&nbsp;\n&nbsp;&nbsp;procedure&nbsp;Toggle&nbsp;(&nbsp;signal&nbsp;Sig&nbsp;:&nbsp;InOut&nbsp;std_logic&nbsp;)&nbsp;is\n&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;Sig&nbsp;&lt;=&nbsp;toggle_sl_table(Sig)&nbsp;;\n&nbsp;&nbsp;end&nbsp;procedure&nbsp;Toggle&nbsp;;\n&nbsp;\n&nbsp;&nbsp;procedure&nbsp;ToggleHS&nbsp;(&nbsp;signal&nbsp;Sig&nbsp;:&nbsp;InOut&nbsp;std_logic&nbsp;)&nbsp;is\n&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;Sig&nbsp;&nbsp;&nbsp;&nbsp;&lt;=&nbsp;toggle_sl_table(Sig)&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;wait&nbsp;for&nbsp;0&nbsp;ns&nbsp;;&nbsp;&nbsp;--&nbsp;Sig&nbsp;toggles\n&nbsp;&nbsp;&nbsp;&nbsp;wait&nbsp;for&nbsp;0&nbsp;ns&nbsp;;&nbsp;&nbsp;--&nbsp;new&nbsp;values&nbsp;updated&nbsp;into&nbsp;record\n&nbsp;&nbsp;end&nbsp;procedure&nbsp;ToggleHS&nbsp;;\n&nbsp;\n&nbsp;&nbsp;function&nbsp;IsToggle&nbsp;(&nbsp;signal&nbsp;Sig&nbsp;:&nbsp;In&nbsp;std_logic&nbsp;)&nbsp;return&nbsp;boolean&nbsp;is\n&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;Sig&apos;event&nbsp;;\n&nbsp;&nbsp;end&nbsp;function&nbsp;IsToggle&nbsp;;\n&nbsp;\n&nbsp;&nbsp;procedure&nbsp;WaitForToggle&nbsp;(&nbsp;signal&nbsp;Sig&nbsp;:&nbsp;In&nbsp;std_logic&nbsp;)&nbsp;is\n&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;wait&nbsp;on&nbsp;Sig&nbsp;;\n&nbsp;&nbsp;end&nbsp;procedure&nbsp;WaitForToggle&nbsp;;\n&nbsp;\n&nbsp;&nbsp;--&nbsp;Bit&nbsp;type&nbsp;versions\n&nbsp;&nbsp;procedure&nbsp;Toggle&nbsp;(&nbsp;signal&nbsp;Sig&nbsp;:&nbsp;InOut&nbsp;bit&nbsp;;&nbsp;constant&nbsp;DelayVal&nbsp;:&nbsp;time&nbsp;)&nbsp;is\n&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;iDelayVal&nbsp;:&nbsp;time&nbsp;;\n&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;DelayVal&nbsp;&gt;&nbsp;t_sim_resolution&nbsp;then\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;iDelayVal&nbsp;:=&nbsp;DelayVal&nbsp;-&nbsp;t_sim_resolution&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;else\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;iDelayVal&nbsp;:=&nbsp;0&nbsp;sec&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AlertIf(OSVVM_ALERTLOG_ID,&nbsp;DelayVal&nbsp;&lt;&nbsp;0&nbsp;sec,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;osvvm.TbUtilPkg.Toggle:&nbsp;Delay&nbsp;value&nbsp;&lt;&nbsp;0&nbsp;ns&quot;,&nbsp;WARNING)&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;if&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;Sig&nbsp;&lt;=&nbsp;not&nbsp;Sig&nbsp;after&nbsp;iDelayVal&nbsp;;\n&nbsp;&nbsp;end&nbsp;procedure&nbsp;Toggle&nbsp;;\n&nbsp;\n&nbsp;&nbsp;procedure&nbsp;Toggle&nbsp;(&nbsp;signal&nbsp;Sig&nbsp;:&nbsp;InOut&nbsp;bit&nbsp;)&nbsp;is\n&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;Sig&nbsp;&lt;=&nbsp;not&nbsp;Sig&nbsp;;\n&nbsp;&nbsp;end&nbsp;procedure&nbsp;Toggle&nbsp;;\n&nbsp;\n&nbsp;&nbsp;procedure&nbsp;ToggleHS&nbsp;(&nbsp;signal&nbsp;Sig&nbsp;:&nbsp;InOut&nbsp;bit&nbsp;)&nbsp;is\n&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;Sig&nbsp;&nbsp;&nbsp;&nbsp;&lt;=&nbsp;not&nbsp;Sig&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;wait&nbsp;for&nbsp;0&nbsp;ns&nbsp;;&nbsp;&nbsp;--&nbsp;Sig&nbsp;toggles\n&nbsp;&nbsp;&nbsp;&nbsp;wait&nbsp;for&nbsp;0&nbsp;ns&nbsp;;&nbsp;&nbsp;--&nbsp;new&nbsp;values&nbsp;updated&nbsp;into&nbsp;record\n&nbsp;&nbsp;end&nbsp;procedure&nbsp;ToggleHS&nbsp;;\n&nbsp;\n&nbsp;&nbsp;function&nbsp;IsToggle&nbsp;(&nbsp;signal&nbsp;Sig&nbsp;:&nbsp;In&nbsp;bit&nbsp;)&nbsp;return&nbsp;boolean&nbsp;is\n&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;Sig&apos;event&nbsp;;\n&nbsp;&nbsp;end&nbsp;function&nbsp;IsToggle&nbsp;;\n&nbsp;\n&nbsp;&nbsp;procedure&nbsp;WaitForToggle&nbsp;(&nbsp;signal&nbsp;Sig&nbsp;:&nbsp;In&nbsp;bit&nbsp;)&nbsp;is\n&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;wait&nbsp;on&nbsp;Sig&nbsp;;\n&nbsp;&nbsp;end&nbsp;procedure&nbsp;WaitForToggle&nbsp;;\n&nbsp;\n&nbsp;&nbsp;--&nbsp;Integer&nbsp;type&nbsp;versions\n&nbsp;&nbsp;procedure&nbsp;Increment&nbsp;(signal&nbsp;Sig&nbsp;:&nbsp;InOut&nbsp;integer&nbsp;;&nbsp;constant&nbsp;RollOverValue&nbsp;:&nbsp;in&nbsp;integer&nbsp;:=&nbsp;0)&nbsp;is\n&nbsp;&nbsp;begin\n--!!&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;Sig&nbsp;=&nbsp;integer&apos;high&nbsp;then\n&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;Sig&nbsp;=&nbsp;2**30-1&nbsp;then&nbsp;--&nbsp;for&nbsp;consistency&nbsp;with&nbsp;function&nbsp;increment\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sig&nbsp;&lt;=&nbsp;RollOverValue&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;else\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sig&nbsp;&lt;=&nbsp;Sig&nbsp;+&nbsp;1&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;if&nbsp;;\n&nbsp;&nbsp;end&nbsp;procedure&nbsp;Increment&nbsp;;\n&nbsp;\n&nbsp;&nbsp;function&nbsp;Increment&nbsp;(constant&nbsp;Sig&nbsp;:&nbsp;in&nbsp;integer&nbsp;;&nbsp;constant&nbsp;Amount&nbsp;:&nbsp;in&nbsp;integer&nbsp;:=&nbsp;1)&nbsp;return&nbsp;integer&nbsp;is\n&nbsp;&nbsp;begin\n--!&nbsp;Sig&nbsp;=&nbsp;integer&apos;high&nbsp;-&nbsp;Amount&nbsp;+&nbsp;1&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;(Sig&nbsp;+&nbsp;Amount)&nbsp;mod&nbsp;2**30&nbsp;;\n&nbsp;&nbsp;end&nbsp;function&nbsp;Increment&nbsp;;\n&nbsp;\n&nbsp;&nbsp;procedure&nbsp;WaitForToggle&nbsp;(&nbsp;signal&nbsp;Sig&nbsp;:&nbsp;In&nbsp;integer&nbsp;)&nbsp;is\n&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;wait&nbsp;on&nbsp;Sig&nbsp;;\n&nbsp;&nbsp;end&nbsp;procedure&nbsp;WaitForToggle&nbsp;;\n&nbsp;\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;--&nbsp;WaitForBarrier\n&nbsp;&nbsp;--&nbsp;&nbsp;&nbsp;Barrier&nbsp;Synchronization\n&nbsp;&nbsp;--&nbsp;&nbsp;&nbsp;Multiple&nbsp;processes&nbsp;call&nbsp;it,&nbsp;it&nbsp;finishes&nbsp;when&nbsp;all&nbsp;have&nbsp;called&nbsp;it\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;procedure&nbsp;WaitForBarrier&nbsp;(&nbsp;signal&nbsp;Sig&nbsp;:&nbsp;InOut&nbsp;std_logic&nbsp;)&nbsp;is\n&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;Sig&nbsp;&lt;=&nbsp;&apos;H&apos;&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;Wait&nbsp;until&nbsp;all&nbsp;processes&nbsp;set&nbsp;Sig&nbsp;to&nbsp;H\n&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;Level&nbsp;check&nbsp;not&nbsp;necessary&nbsp;since&nbsp;last&nbsp;value&nbsp;/=&nbsp;H&nbsp;yet\n&nbsp;&nbsp;&nbsp;&nbsp;wait&nbsp;until&nbsp;Sig&nbsp;=&nbsp;&apos;H&apos;&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;Deactivate&nbsp;and&nbsp;propagate&nbsp;to&nbsp;allow&nbsp;back&nbsp;to&nbsp;back&nbsp;calls\n&nbsp;&nbsp;&nbsp;&nbsp;Sig&nbsp;&lt;=&nbsp;&apos;0&apos;&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;wait&nbsp;for&nbsp;0&nbsp;ns&nbsp;;\n&nbsp;&nbsp;end&nbsp;procedure&nbsp;WaitForBarrier&nbsp;;\n&nbsp;\n&nbsp;&nbsp;procedure&nbsp;WaitForBarrier&nbsp;(&nbsp;signal&nbsp;Sig&nbsp;:&nbsp;InOut&nbsp;std_logic&nbsp;;&nbsp;signal&nbsp;TimeOut&nbsp;:&nbsp;std_logic&nbsp;;&nbsp;constant&nbsp;Polarity&nbsp;:&nbsp;in&nbsp;std_logic&nbsp;:=&nbsp;&apos;1&apos;)&nbsp;is\n&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;Sig&nbsp;&lt;=&nbsp;&apos;H&apos;&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;Wait&nbsp;until&nbsp;all&nbsp;processes&nbsp;set&nbsp;Sig&nbsp;to&nbsp;H\n&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;Level&nbsp;check&nbsp;not&nbsp;necessary&nbsp;since&nbsp;last&nbsp;value&nbsp;/=&nbsp;H&nbsp;yet\n&nbsp;&nbsp;&nbsp;&nbsp;wait&nbsp;until&nbsp;Sig&nbsp;=&nbsp;&apos;H&apos;&nbsp;or&nbsp;TimeOut&nbsp;=&nbsp;Polarity&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;Deactivate&nbsp;and&nbsp;propagate&nbsp;to&nbsp;allow&nbsp;back&nbsp;to&nbsp;back&nbsp;calls\n&nbsp;&nbsp;&nbsp;&nbsp;Sig&nbsp;&lt;=&nbsp;&apos;0&apos;&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;wait&nbsp;for&nbsp;0&nbsp;ns&nbsp;;\n&nbsp;&nbsp;end&nbsp;procedure&nbsp;WaitForBarrier&nbsp;;\n&nbsp;\n&nbsp;&nbsp;procedure&nbsp;WaitForBarrier&nbsp;(&nbsp;signal&nbsp;Sig&nbsp;:&nbsp;InOut&nbsp;std_logic&nbsp;;&nbsp;constant&nbsp;TimeOut&nbsp;:&nbsp;time&nbsp;)&nbsp;is\n&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;Sig&nbsp;&lt;=&nbsp;&apos;H&apos;&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;Wait&nbsp;until&nbsp;all&nbsp;processes&nbsp;set&nbsp;Sig&nbsp;to&nbsp;H\n&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;Level&nbsp;check&nbsp;not&nbsp;necessary&nbsp;since&nbsp;last&nbsp;value&nbsp;/=&nbsp;H&nbsp;yet\n&nbsp;&nbsp;&nbsp;&nbsp;wait&nbsp;until&nbsp;Sig&nbsp;=&nbsp;&apos;H&apos;&nbsp;for&nbsp;TimeOut&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;Deactivate&nbsp;and&nbsp;propagate&nbsp;to&nbsp;allow&nbsp;back&nbsp;to&nbsp;back&nbsp;calls\n&nbsp;&nbsp;&nbsp;&nbsp;Sig&nbsp;&lt;=&nbsp;&apos;0&apos;&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;wait&nbsp;for&nbsp;0&nbsp;ns&nbsp;;\n&nbsp;&nbsp;end&nbsp;procedure&nbsp;WaitForBarrier&nbsp;;\n&nbsp;\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;--&nbsp;resolved_barrier\n&nbsp;&nbsp;--&nbsp;summing&nbsp;resolution&nbsp;used&nbsp;in&nbsp;conjunction&nbsp;with&nbsp;integer&nbsp;based&nbsp;barriers\n&nbsp;&nbsp;function&nbsp;resolved_barrier&nbsp;(&nbsp;s&nbsp;:&nbsp;integer_vector&nbsp;)&nbsp;return&nbsp;integer&nbsp;is\n&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;result&nbsp;:&nbsp;integer&nbsp;:=&nbsp;0&nbsp;;\n&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;i&nbsp;in&nbsp;s&apos;RANGE&nbsp;loop\n--&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;s(i)&nbsp;/=&nbsp;integer&apos;left&nbsp;then\n--&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;result&nbsp;:=&nbsp;result&nbsp;+&nbsp;s(i);\n--&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;s(i)&nbsp;/=&nbsp;0&nbsp;then\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;result&nbsp;:=&nbsp;result&nbsp;+&nbsp;1;&nbsp;&nbsp;--&nbsp;removes&nbsp;the&nbsp;initialization&nbsp;requirement\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;if&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;loop&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;result&nbsp;;\n&nbsp;&nbsp;end&nbsp;function&nbsp;resolved_barrier&nbsp;;\n&nbsp;\n&nbsp;&nbsp;--&nbsp;Usage&nbsp;of&nbsp;integer&nbsp;barriers&nbsp;requires&nbsp;resolved_barrier.&nbsp;Initialization&nbsp;to&nbsp;1&nbsp;recommended,&nbsp;but&nbsp;not&nbsp;required\n&nbsp;&nbsp;--&nbsp;&nbsp;&nbsp;signal&nbsp;barrier1&nbsp;:&nbsp;resolved_barrier&nbsp;integer&nbsp;:=&nbsp;1&nbsp;;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;using&nbsp;the&nbsp;resolution&nbsp;function\n&nbsp;&nbsp;--&nbsp;&nbsp;&nbsp;signal&nbsp;barrier2&nbsp;:&nbsp;integer_barrier&nbsp;:=&nbsp;1&nbsp;;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;using&nbsp;the&nbsp;subtype&nbsp;that&nbsp;already&nbsp;applies&nbsp;the&nbsp;resolution&nbsp;function\n&nbsp;&nbsp;procedure&nbsp;WaitForBarrier&nbsp;(&nbsp;signal&nbsp;Sig&nbsp;:&nbsp;InOut&nbsp;integer&nbsp;)&nbsp;is\n&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;Sig&nbsp;&lt;=&nbsp;0&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;Wait&nbsp;until&nbsp;all&nbsp;processes&nbsp;set&nbsp;Sig&nbsp;to&nbsp;0\n&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;Level&nbsp;check&nbsp;not&nbsp;necessary&nbsp;since&nbsp;last&nbsp;value&nbsp;/=&nbsp;0&nbsp;yet\n&nbsp;&nbsp;&nbsp;&nbsp;wait&nbsp;until&nbsp;Sig&nbsp;=&nbsp;0&nbsp;&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;Deactivate&nbsp;and&nbsp;propagate&nbsp;to&nbsp;allow&nbsp;back&nbsp;to&nbsp;back&nbsp;calls\n&nbsp;&nbsp;&nbsp;&nbsp;Sig&nbsp;&lt;=&nbsp;1&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;wait&nbsp;for&nbsp;0&nbsp;ns&nbsp;;\n&nbsp;&nbsp;end&nbsp;procedure&nbsp;WaitForBarrier&nbsp;;\n&nbsp;\n&nbsp;&nbsp;procedure&nbsp;WaitForBarrier&nbsp;(&nbsp;signal&nbsp;Sig&nbsp;:&nbsp;InOut&nbsp;integer&nbsp;;&nbsp;signal&nbsp;TimeOut&nbsp;:&nbsp;std_logic&nbsp;;&nbsp;constant&nbsp;Polarity&nbsp;:&nbsp;in&nbsp;std_logic&nbsp;:=&nbsp;&apos;1&apos;)&nbsp;is\n&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;Sig&nbsp;&lt;=&nbsp;0&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;Wait&nbsp;until&nbsp;all&nbsp;processes&nbsp;set&nbsp;Sig&nbsp;to&nbsp;0\n&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;Level&nbsp;check&nbsp;not&nbsp;necessary&nbsp;since&nbsp;last&nbsp;value&nbsp;/=&nbsp;0&nbsp;yet\n&nbsp;&nbsp;&nbsp;&nbsp;wait&nbsp;until&nbsp;Sig&nbsp;=&nbsp;0&nbsp;or&nbsp;TimeOut&nbsp;=&nbsp;Polarity&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;Deactivate&nbsp;and&nbsp;propagate&nbsp;to&nbsp;allow&nbsp;back&nbsp;to&nbsp;back&nbsp;calls\n&nbsp;&nbsp;&nbsp;&nbsp;Sig&nbsp;&lt;=&nbsp;1&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;wait&nbsp;for&nbsp;0&nbsp;ns&nbsp;;\n&nbsp;&nbsp;end&nbsp;procedure&nbsp;WaitForBarrier&nbsp;;\n&nbsp;\n&nbsp;&nbsp;procedure&nbsp;WaitForBarrier&nbsp;(&nbsp;signal&nbsp;Sig&nbsp;:&nbsp;InOut&nbsp;integer&nbsp;;&nbsp;constant&nbsp;TimeOut&nbsp;:&nbsp;time&nbsp;)&nbsp;is\n&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;Sig&nbsp;&lt;=&nbsp;0&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;Wait&nbsp;until&nbsp;all&nbsp;processes&nbsp;set&nbsp;Sig&nbsp;to&nbsp;0\n&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;Level&nbsp;check&nbsp;not&nbsp;necessary&nbsp;since&nbsp;last&nbsp;value&nbsp;/=&nbsp;0&nbsp;yet\n&nbsp;&nbsp;&nbsp;&nbsp;wait&nbsp;until&nbsp;Sig&nbsp;=&nbsp;0&nbsp;for&nbsp;TimeOut&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;Deactivate&nbsp;and&nbsp;propagate&nbsp;to&nbsp;allow&nbsp;back&nbsp;to&nbsp;back&nbsp;calls\n&nbsp;&nbsp;&nbsp;&nbsp;Sig&nbsp;&lt;=&nbsp;1&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;wait&nbsp;for&nbsp;0&nbsp;ns&nbsp;;\n&nbsp;&nbsp;end&nbsp;procedure&nbsp;WaitForBarrier&nbsp;;\n&nbsp;\n&nbsp;&nbsp;--&nbsp;Using&nbsp;separate&nbsp;signals\n&nbsp;&nbsp;procedure&nbsp;WaitForBarrier2&nbsp;(&nbsp;signal&nbsp;SyncOut&nbsp;:&nbsp;out&nbsp;std_logic&nbsp;;&nbsp;signal&nbsp;SyncIn&nbsp;:&nbsp;in&nbsp;&nbsp;std_logic&nbsp;)&nbsp;is\n&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;Activate&nbsp;Rdy\n&nbsp;&nbsp;&nbsp;&nbsp;SyncOut&nbsp;&lt;=&nbsp;&apos;1&apos;&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;Make&nbsp;sure&nbsp;our&nbsp;Rdy&nbsp;is&nbsp;seen\n&nbsp;&nbsp;&nbsp;&nbsp;wait&nbsp;for&nbsp;0&nbsp;ns&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;Wait&nbsp;until&nbsp;other&nbsp;process&apos;&nbsp;Rdy&nbsp;is&nbsp;at&nbsp;level&nbsp;1\n&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;SyncIn&nbsp;/=&nbsp;&apos;1&apos;&nbsp;then\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;wait&nbsp;until&nbsp;SyncIn&nbsp;=&nbsp;&apos;1&apos;&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;if&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;Deactivate&nbsp;Rdy\n&nbsp;&nbsp;&nbsp;&nbsp;SyncOut&nbsp;&lt;=&nbsp;&apos;0&apos;&nbsp;;\n&nbsp;&nbsp;end&nbsp;procedure&nbsp;WaitForBarrier2&nbsp;;\n&nbsp;\n&nbsp;&nbsp;procedure&nbsp;WaitForBarrier2&nbsp;(&nbsp;signal&nbsp;SyncOut&nbsp;:&nbsp;out&nbsp;std_logic&nbsp;;&nbsp;signal&nbsp;SyncInV&nbsp;:&nbsp;in&nbsp;&nbsp;std_logic_vector&nbsp;)&nbsp;is\n&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;ALL_ONE&nbsp;:&nbsp;std_logic_vector(SyncInV&apos;Range)&nbsp;:=&nbsp;(others&nbsp;=&gt;&nbsp;&apos;1&apos;);\n&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;Activate&nbsp;Rdy\n&nbsp;&nbsp;&nbsp;&nbsp;SyncOut&nbsp;&lt;=&nbsp;&apos;1&apos;&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;Make&nbsp;sure&nbsp;our&nbsp;Rdy&nbsp;is&nbsp;seen\n&nbsp;&nbsp;&nbsp;&nbsp;wait&nbsp;for&nbsp;0&nbsp;ns&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;Wait&nbsp;until&nbsp;all&nbsp;other&nbsp;process&apos;&nbsp;Rdy&nbsp;is&nbsp;at&nbsp;level&nbsp;1\n&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;SyncInV&nbsp;/=&nbsp;ALL_ONE&nbsp;then\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;wait&nbsp;until&nbsp;SyncInV&nbsp;=&nbsp;ALL_ONE&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;if&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;Deactivate&nbsp;Rdy\n&nbsp;&nbsp;&nbsp;&nbsp;SyncOut&nbsp;&lt;=&nbsp;&apos;0&apos;&nbsp;;\n&nbsp;&nbsp;end&nbsp;procedure&nbsp;WaitForBarrier2&nbsp;;\n&nbsp;\n&nbsp;\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;--&nbsp;WaitForClock\n&nbsp;&nbsp;--&nbsp;&nbsp;&nbsp;Sync&nbsp;to&nbsp;Clock&nbsp;-&nbsp;after&nbsp;a&nbsp;delay,&nbsp;after&nbsp;a&nbsp;number&nbsp;of&nbsp;clocks\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;procedure&nbsp;WaitForClock&nbsp;(&nbsp;signal&nbsp;Clk&nbsp;:&nbsp;in&nbsp;std_logic&nbsp;;&nbsp;&nbsp;constant&nbsp;Delay&nbsp;:&nbsp;in&nbsp;time&nbsp;)&nbsp;is\n&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;delay&nbsp;&gt;&nbsp;t_sim_resolution&nbsp;then\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;wait&nbsp;for&nbsp;delay&nbsp;-&nbsp;t_sim_resolution&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;if&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;wait&nbsp;until&nbsp;Clk&nbsp;=&nbsp;CLK_ACTIVE&nbsp;;\n&nbsp;&nbsp;end&nbsp;procedure&nbsp;WaitForClock&nbsp;;\n&nbsp;\n&nbsp;&nbsp;procedure&nbsp;WaitForClock&nbsp;(&nbsp;signal&nbsp;Clk&nbsp;:&nbsp;in&nbsp;std_logic&nbsp;;&nbsp;&nbsp;constant&nbsp;NumberOfClocks&nbsp;:&nbsp;in&nbsp;integer&nbsp;:=&nbsp;1)&nbsp;is\n&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;i&nbsp;in&nbsp;1&nbsp;to&nbsp;NumberOfClocks&nbsp;loop\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;wait&nbsp;until&nbsp;Clk&nbsp;=&nbsp;CLK_ACTIVE&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;loop&nbsp;;\n&nbsp;&nbsp;end&nbsp;procedure&nbsp;WaitForClock&nbsp;;\n&nbsp;\n&nbsp;&nbsp;procedure&nbsp;WaitForClock&nbsp;(&nbsp;signal&nbsp;Clk&nbsp;:&nbsp;in&nbsp;std_logic&nbsp;;&nbsp;&nbsp;signal&nbsp;Enable&nbsp;:&nbsp;in&nbsp;boolean&nbsp;)&nbsp;is\n&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;wait&nbsp;on&nbsp;Clk&nbsp;until&nbsp;Clk&nbsp;=&nbsp;CLK_ACTIVE&nbsp;and&nbsp;Enable&nbsp;;\n&nbsp;&nbsp;end&nbsp;procedure&nbsp;WaitForClock&nbsp;;\n&nbsp;\n&nbsp;&nbsp;procedure&nbsp;WaitForClock&nbsp;(&nbsp;signal&nbsp;Clk&nbsp;:&nbsp;in&nbsp;std_logic&nbsp;;&nbsp;&nbsp;signal&nbsp;Enable&nbsp;:&nbsp;in&nbsp;std_logic&nbsp;;&nbsp;constant&nbsp;Polarity&nbsp;:&nbsp;std_logic&nbsp;:=&nbsp;&apos;1&apos;&nbsp;)&nbsp;is\n&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;wait&nbsp;on&nbsp;Clk&nbsp;until&nbsp;Clk&nbsp;=&nbsp;CLK_ACTIVE&nbsp;and&nbsp;Enable&nbsp;=&nbsp;Polarity&nbsp;;\n&nbsp;&nbsp;end&nbsp;procedure&nbsp;WaitForClock&nbsp;;\n&nbsp;\n&nbsp;\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;--&nbsp;WaitForLevel\n&nbsp;&nbsp;--&nbsp;&nbsp;&nbsp;Find&nbsp;a&nbsp;signal&nbsp;at&nbsp;a&nbsp;level\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;procedure&nbsp;WaitForLevel&nbsp;(&nbsp;signal&nbsp;A&nbsp;:&nbsp;in&nbsp;boolean&nbsp;)&nbsp;is\n&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;not&nbsp;A&nbsp;then\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;wait&nbsp;until&nbsp;A&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;if&nbsp;;\n&nbsp;&nbsp;end&nbsp;procedure&nbsp;WaitForLevel&nbsp;;\n&nbsp;\n&nbsp;&nbsp;procedure&nbsp;WaitForLevel&nbsp;(&nbsp;signal&nbsp;A&nbsp;:&nbsp;in&nbsp;std_logic&nbsp;;&nbsp;Polarity&nbsp;:&nbsp;std_logic&nbsp;:=&nbsp;&apos;1&apos;&nbsp;)&nbsp;is\n&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;A&nbsp;/=&nbsp;Polarity&nbsp;then\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;wait&nbsp;on&nbsp;A&nbsp;until&nbsp;A&nbsp;=&nbsp;Polarity&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;Polarity&nbsp;=&nbsp;&apos;1&apos;&nbsp;then\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;wait&nbsp;until&nbsp;A&nbsp;=&nbsp;&apos;1&apos;&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;wait&nbsp;until&nbsp;A&nbsp;=&nbsp;&apos;0&apos;&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;if&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;if&nbsp;;\n&nbsp;&nbsp;end&nbsp;procedure&nbsp;WaitForLevel&nbsp;;\n&nbsp;\n&nbsp;\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;--&nbsp;CreateClock,&nbsp;&nbsp;CreateReset\n&nbsp;&nbsp;--&nbsp;&nbsp;&nbsp;Note&nbsp;these&nbsp;do&nbsp;not&nbsp;exit\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;procedure&nbsp;CreateClock&nbsp;(\n&nbsp;&nbsp;&nbsp;&nbsp;signal&nbsp;&nbsp;&nbsp;Clk&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;inout&nbsp;std_logic&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;Period&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;time&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;DutyCycle&nbsp;&nbsp;:&nbsp;real&nbsp;:=&nbsp;0.5\n&nbsp;&nbsp;)&nbsp;is\n&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;HIGH_TIME&nbsp;:&nbsp;time&nbsp;:=&nbsp;Period&nbsp;*&nbsp;DutyCycle&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;LOW_TIME&nbsp;&nbsp;:&nbsp;time&nbsp;:=&nbsp;Period&nbsp;-&nbsp;HIGH_TIME&nbsp;;\n&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;HIGH_TIME&nbsp;=&nbsp;LOW_TIME&nbsp;then\n&nbsp;--&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;Set&nbsp;a&nbsp;1&nbsp;if&nbsp;not&nbsp;initialized,&nbsp;otherwise&nbsp;use&nbsp;initialized&nbsp;value.\n&nbsp;--&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;Clk&nbsp;=&nbsp;&apos;U&apos;&nbsp;then&nbsp;\n&nbsp;--&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Clk&nbsp;&lt;=&nbsp;&apos;1&apos;&nbsp;;&nbsp;\n&nbsp;--&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;wait&nbsp;for&nbsp;0&nbsp;ns&nbsp;;&nbsp;\n&nbsp;--&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;if&nbsp;&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;loop\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Clk&nbsp;&lt;=&nbsp;toggle_sl_table(Clk)&nbsp;after&nbsp;HIGH_TIME&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;wait&nbsp;on&nbsp;Clk&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;loop&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;else\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;Schedule&nbsp;s.t.&nbsp;all&nbsp;assignments&nbsp;after&nbsp;the&nbsp;first&nbsp;occur&nbsp;on&nbsp;delta&nbsp;cycle&nbsp;0\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Clk&nbsp;&lt;=&nbsp;&apos;0&apos;,&nbsp;&apos;1&apos;&nbsp;after&nbsp;LOW_TIME&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;wait&nbsp;for&nbsp;period&nbsp;-&nbsp;t_sim_resolution&nbsp;;&nbsp;--&nbsp;allows&nbsp;after&nbsp;on&nbsp;future&nbsp;Clk&nbsp;&lt;=&nbsp;&apos;0&apos;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;loop\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Clk&nbsp;&lt;=&nbsp;&apos;0&apos;&nbsp;after&nbsp;t_sim_resolution,&nbsp;&apos;1&apos;&nbsp;after&nbsp;LOW_TIME&nbsp;+&nbsp;t_sim_resolution&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;wait&nbsp;for&nbsp;period&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;loop&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;if&nbsp;;\n&nbsp;&nbsp;end&nbsp;procedure&nbsp;CreateClock&nbsp;;\n&nbsp;\n&nbsp;&nbsp;procedure&nbsp;CheckClockPeriod&nbsp;(\n&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;AlertLogID&nbsp;:&nbsp;AlertLogIDType&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;signal&nbsp;&nbsp;&nbsp;Clk&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;in&nbsp;&nbsp;std_logic&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;Period&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;time&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;ClkName&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;string&nbsp;:=&nbsp;&quot;Clock&quot;&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;HowMany&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;integer&nbsp;:=&nbsp;5\n&nbsp;&nbsp;)&nbsp;is\n&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;LastLogTime,&nbsp;ObservedPeriod&nbsp;:&nbsp;time&nbsp;;\n&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;wait&nbsp;until&nbsp;EdgeActive(Clk,&nbsp;CLK_ACTIVE)&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;LastLogTime&nbsp;:=&nbsp;now&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;Check&nbsp;First&nbsp;HowMany&nbsp;clocks\n&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;i&nbsp;in&nbsp;1&nbsp;to&nbsp;HowMany&nbsp;loop\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;wait&nbsp;until&nbsp;Clk&nbsp;=&nbsp;CLK_ACTIVE&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ObservedPeriod&nbsp;:=&nbsp;now&nbsp;-&nbsp;LastLogTime&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AffirmIf(AlertLogID,&nbsp;ObservedPeriod&nbsp;=&nbsp;Period,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;CheckClockPeriod:&nbsp;&quot;&nbsp;&amp;&nbsp;ClkName&nbsp;&amp;&nbsp;&quot;&nbsp;Period:&nbsp;&quot;&nbsp;&amp;&nbsp;to_string(ObservedPeriod,&nbsp;GetOsvvmDefaultTimeUnits)&nbsp;&amp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;&nbsp;=&nbsp;Expected&nbsp;&quot;&nbsp;&amp;&nbsp;to_string(Period,&nbsp;GetOsvvmDefaultTimeUnits))&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;LastLogTime&nbsp;:=&nbsp;now&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;loop&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;wait&nbsp;;\n&nbsp;&nbsp;end&nbsp;procedure&nbsp;CheckClockPeriod&nbsp;;\n&nbsp;\n&nbsp;&nbsp;procedure&nbsp;CheckClockPeriod&nbsp;(\n&nbsp;&nbsp;&nbsp;&nbsp;signal&nbsp;&nbsp;&nbsp;Clk&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;in&nbsp;&nbsp;std_logic&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;Period&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;time&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;ClkName&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;string&nbsp;:=&nbsp;&quot;Clock&quot;&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;HowMany&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;integer&nbsp;:=&nbsp;5\n&nbsp;&nbsp;)&nbsp;is\n&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;CheckClockPeriod&nbsp;(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AlertLogID&nbsp;=&gt;&nbsp;ALERTLOG_DEFAULT_ID,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Clk&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&gt;&nbsp;Clk,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Period&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&gt;&nbsp;Period,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ClkName&nbsp;&nbsp;&nbsp;&nbsp;=&gt;&nbsp;ClkName,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;HowMany&nbsp;&nbsp;&nbsp;&nbsp;=&gt;&nbsp;HowMany\n&nbsp;&nbsp;&nbsp;&nbsp;)&nbsp;;\n&nbsp;&nbsp;end&nbsp;procedure&nbsp;CheckClockPeriod&nbsp;;\n&nbsp;\n&nbsp;&nbsp;procedure&nbsp;CreateReset&nbsp;(\n&nbsp;&nbsp;&nbsp;&nbsp;signal&nbsp;&nbsp;&nbsp;Reset&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;out&nbsp;std_logic&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;ResetActive&nbsp;:&nbsp;in&nbsp;&nbsp;std_logic&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;signal&nbsp;&nbsp;&nbsp;Clk&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;in&nbsp;&nbsp;std_logic&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;Period&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;time&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;tpd&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;time&nbsp;:=&nbsp;0&nbsp;ns\n&nbsp;&nbsp;)&nbsp;is\n&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;wait&nbsp;until&nbsp;EdgeActive(Clk,&nbsp;CLK_ACTIVE)&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;Reset&nbsp;&lt;=&nbsp;ResetActive&nbsp;after&nbsp;tpd&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;wait&nbsp;for&nbsp;Period&nbsp;-&nbsp;t_sim_resolution&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;wait&nbsp;until&nbsp;Clk&nbsp;=&nbsp;CLK_ACTIVE&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;Reset&nbsp;&lt;=&nbsp;not&nbsp;ResetActive&nbsp;after&nbsp;tpd&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;wait&nbsp;;\n&nbsp;&nbsp;end&nbsp;procedure&nbsp;CreateReset&nbsp;;\n&nbsp;\n&nbsp;&nbsp;procedure&nbsp;LogReset&nbsp;(\n&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;AlertLogID&nbsp;&nbsp;:&nbsp;AlertLogIDType&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;signal&nbsp;&nbsp;&nbsp;Reset&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;in&nbsp;&nbsp;std_logic&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;ResetActive&nbsp;:&nbsp;in&nbsp;&nbsp;std_logic&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;ResetName&nbsp;&nbsp;&nbsp;:&nbsp;in&nbsp;&nbsp;string&nbsp;:=&nbsp;&quot;Reset&quot;&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;LogLevel&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;in&nbsp;&nbsp;LogType&nbsp;:=&nbsp;ALWAYS\n&nbsp;&nbsp;)&nbsp;is\n&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;Does&nbsp;not&nbsp;log&nbsp;the&nbsp;value&nbsp;of&nbsp;Reset&nbsp;at&nbsp;time&nbsp;0.\n&nbsp;&nbsp;&nbsp;&nbsp;for_ever&nbsp;:&nbsp;loop\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;wait&nbsp;on&nbsp;Reset&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;Reset&nbsp;=&nbsp;ResetActive&nbsp;then\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;LOG(AlertLogID,&nbsp;ResetName&nbsp;&amp;&nbsp;&quot;&nbsp;now&nbsp;active&quot;,&nbsp;INFO)&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print(&quot;&quot;)&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elsif&nbsp;Reset&nbsp;=&nbsp;not&nbsp;ResetActive&nbsp;then\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;LOG(AlertLogID,&nbsp;ResetName&nbsp;&amp;&nbsp;&quot;&nbsp;now&nbsp;inactive&quot;,&nbsp;INFO)&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print(&quot;&quot;)&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;LOG(AlertLogID,&nbsp;ResetName&nbsp;&amp;&nbsp;&quot;&nbsp;=&nbsp;&quot;&nbsp;&amp;&nbsp;to_string(Reset),&nbsp;INFO)&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print(&quot;&quot;)&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;if&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;loop&nbsp;for_ever&nbsp;;\n&nbsp;&nbsp;end&nbsp;procedure&nbsp;LogReset&nbsp;;\n&nbsp;\n&nbsp;&nbsp;procedure&nbsp;LogReset&nbsp;(\n&nbsp;&nbsp;&nbsp;&nbsp;signal&nbsp;&nbsp;&nbsp;Reset&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;in&nbsp;&nbsp;std_logic&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;ResetActive&nbsp;:&nbsp;in&nbsp;&nbsp;std_logic&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;ResetName&nbsp;&nbsp;&nbsp;:&nbsp;in&nbsp;&nbsp;string&nbsp;:=&nbsp;&quot;Reset&quot;&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;LogLevel&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;in&nbsp;&nbsp;LogType&nbsp;:=&nbsp;ALWAYS\n&nbsp;&nbsp;)&nbsp;is\n&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;LogReset&nbsp;(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AlertLogID&nbsp;&nbsp;=&gt;&nbsp;ALERTLOG_DEFAULT_ID,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Reset&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&gt;&nbsp;Reset,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ResetActive&nbsp;=&gt;&nbsp;ResetActive,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ResetName&nbsp;&nbsp;&nbsp;=&gt;&nbsp;ResetName,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;LogLevel&nbsp;&nbsp;&nbsp;&nbsp;=&gt;&nbsp;LogLevel\n&nbsp;&nbsp;&nbsp;&nbsp;)&nbsp;;\n&nbsp;&nbsp;end&nbsp;procedure&nbsp;LogReset&nbsp;;\n&nbsp;\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;--&nbsp;Deprecated\n&nbsp;&nbsp;--&nbsp;WaitForAck,&nbsp;StrobeAck\n&nbsp;&nbsp;--&nbsp;&nbsp;&nbsp;Replaced&nbsp;by&nbsp;WaitForToggle&nbsp;and&nbsp;Toggle\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;procedure&nbsp;WaitForAck&nbsp;(&nbsp;signal&nbsp;Ack&nbsp;:&nbsp;In&nbsp;&nbsp;std_logic&nbsp;)&nbsp;is\n&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;Wait&nbsp;for&nbsp;Model&nbsp;to&nbsp;be&nbsp;done\n&nbsp;&nbsp;&nbsp;&nbsp;wait&nbsp;until&nbsp;Ack&nbsp;=&nbsp;&apos;1&apos;&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;wait&nbsp;for&nbsp;0&nbsp;ns&nbsp;;\n&nbsp;&nbsp;end&nbsp;procedure&nbsp;;\n&nbsp;\n&nbsp;&nbsp;procedure&nbsp;StrobeAck&nbsp;&nbsp;(&nbsp;signal&nbsp;Ack&nbsp;&nbsp;:&nbsp;Out&nbsp;std_logic&nbsp;)&nbsp;is\n&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;Model&nbsp;done,&nbsp;drive&nbsp;rising&nbsp;edge&nbsp;on&nbsp;Ack\n&nbsp;&nbsp;&nbsp;&nbsp;Ack&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;=&nbsp;&apos;0&apos;&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;wait&nbsp;for&nbsp;0&nbsp;ns&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;Ack&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;=&nbsp;&apos;1&apos;&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;wait&nbsp;for&nbsp;0&nbsp;ns&nbsp;;\n&nbsp;&nbsp;end&nbsp;procedure&nbsp;;\n&nbsp;\n&nbsp;\nend&nbsp;TbUtilPkg&nbsp;;\n';
Report.brushes['./../../../SynthWorks/Dev/_osvvm/OsvvmLibraries/osvvm/TbUtilPkg.vhd'] = 'vhdl'

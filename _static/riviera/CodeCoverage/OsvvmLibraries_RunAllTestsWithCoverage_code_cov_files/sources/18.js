Report.sources['./../../../SynthWorks/Dev/_osvvm/OsvvmLibraries/osvvm/MemorySupportPkg.vhd'] = '--\n--&nbsp;&nbsp;File&nbsp;Name:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MemorySupportPkg.vhd\n--&nbsp;&nbsp;Design&nbsp;Unit&nbsp;Name:&nbsp;&nbsp;MemorySupportPkg\n--&nbsp;&nbsp;Revision:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;STANDARD&nbsp;VERSION\n--\n--&nbsp;&nbsp;Maintainer:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Jim&nbsp;Lewis&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;email:&nbsp;&nbsp;jim@synthworks.com&nbsp;\n--&nbsp;&nbsp;Contributor(s):&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n--&nbsp;&nbsp;&nbsp;&nbsp;Jim&nbsp;Lewis&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;email:&nbsp;&nbsp;jim@synthworks.com&nbsp;&nbsp;&nbsp;\n--\n--&nbsp;&nbsp;Description\n--&nbsp;&nbsp;&nbsp;&nbsp;Defines&nbsp;the&nbsp;storage&nbsp;policies:&nbsp;X,&nbsp;NoX,&nbsp;and&nbsp;orig&nbsp;\n--&nbsp;&nbsp;&nbsp;&nbsp;Supports&nbsp;MemoryGenericPkg\n--&nbsp;&nbsp;&nbsp;&nbsp;Policies&nbsp;are&nbsp;implemented&nbsp;in&nbsp;instances&nbsp;in&nbsp;MemoryPkg\n--&nbsp;&nbsp;&nbsp;&nbsp;\n--&nbsp;&nbsp;Developed&nbsp;for:&nbsp;\n--&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SynthWorks&nbsp;Design&nbsp;Inc.&nbsp;\n--&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;VHDL&nbsp;Training&nbsp;Classes\n--&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;11898&nbsp;SW&nbsp;128th&nbsp;Ave.&nbsp;&nbsp;Tigard,&nbsp;Or&nbsp;&nbsp;97223\n--&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;http://www.SynthWorks.com\n--\n--&nbsp;&nbsp;Revision&nbsp;History:\n--&nbsp;&nbsp;&nbsp;&nbsp;Date&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Version&nbsp;&nbsp;&nbsp;&nbsp;Description\n--&nbsp;&nbsp;&nbsp;&nbsp;10/2022&nbsp;&nbsp;&nbsp;2022.10&nbsp;&nbsp;&nbsp;&nbsp;Minor&nbsp;changes\n--&nbsp;&nbsp;&nbsp;&nbsp;08/2022&nbsp;&nbsp;&nbsp;2022.08&nbsp;&nbsp;&nbsp;&nbsp;Initial&nbsp;revision\n--\n--\n--&nbsp;&nbsp;This&nbsp;file&nbsp;is&nbsp;part&nbsp;of&nbsp;OSVVM.\n--&nbsp;&nbsp;\n--&nbsp;&nbsp;Copyright&nbsp;(c)&nbsp;2022&nbsp;by&nbsp;SynthWorks&nbsp;Design&nbsp;Inc.&nbsp;&nbsp;\n--&nbsp;&nbsp;\n--&nbsp;&nbsp;Licensed&nbsp;under&nbsp;the&nbsp;Apache&nbsp;License,&nbsp;Version&nbsp;2.0&nbsp;(the&nbsp;&quot;License&quot;);\n--&nbsp;&nbsp;you&nbsp;may&nbsp;not&nbsp;use&nbsp;this&nbsp;file&nbsp;except&nbsp;in&nbsp;compliance&nbsp;with&nbsp;the&nbsp;License.\n--&nbsp;&nbsp;You&nbsp;may&nbsp;obtain&nbsp;a&nbsp;copy&nbsp;of&nbsp;the&nbsp;License&nbsp;at\n--&nbsp;&nbsp;\n--&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;https://www.apache.org/licenses/LICENSE-2.0\n--&nbsp;&nbsp;\n--&nbsp;&nbsp;Unless&nbsp;required&nbsp;by&nbsp;applicable&nbsp;law&nbsp;or&nbsp;agreed&nbsp;to&nbsp;in&nbsp;writing,&nbsp;software\n--&nbsp;&nbsp;distributed&nbsp;under&nbsp;the&nbsp;License&nbsp;is&nbsp;distributed&nbsp;on&nbsp;an&nbsp;&quot;AS&nbsp;IS&quot;&nbsp;BASIS,\n--&nbsp;&nbsp;WITHOUT&nbsp;WARRANTIES&nbsp;OR&nbsp;CONDITIONS&nbsp;OF&nbsp;ANY&nbsp;KIND,&nbsp;either&nbsp;express&nbsp;or&nbsp;implied.\n--&nbsp;&nbsp;See&nbsp;the&nbsp;License&nbsp;for&nbsp;the&nbsp;specific&nbsp;language&nbsp;governing&nbsp;permissions&nbsp;and\n--&nbsp;&nbsp;limitations&nbsp;under&nbsp;the&nbsp;License.\n--&nbsp;&nbsp;\n&nbsp;\nlibrary&nbsp;IEEE&nbsp;;&nbsp;\n&nbsp;&nbsp;use&nbsp;IEEE.std_logic_1164.all&nbsp;;&nbsp;\n&nbsp;&nbsp;use&nbsp;IEEE.numeric_std.all&nbsp;;&nbsp;\n&nbsp;&nbsp;use&nbsp;IEEE.numeric_std_unsigned.all&nbsp;;&nbsp;\n&nbsp;&nbsp;use&nbsp;IEEE.math_real.all&nbsp;;\n&nbsp;\n&nbsp;&nbsp;use&nbsp;work.AlertLogPkg.all&nbsp;;\n&nbsp;&nbsp;\npackage&nbsp;MemorySupportPkg&nbsp;is\n&nbsp;\n&nbsp;&nbsp;subtype&nbsp;MemoryBaseType&nbsp;is&nbsp;integer_vector&nbsp;;&nbsp;\n&nbsp;\n&nbsp;&nbsp;--&nbsp;-----------------------------------------------\n&nbsp;&nbsp;--&nbsp;Memory&nbsp;Policy&nbsp;X\n&nbsp;&nbsp;--&nbsp;&nbsp;&nbsp;Maintains&nbsp;fidelity&nbsp;of&nbsp;X&nbsp;and&nbsp;U\n&nbsp;&nbsp;--&nbsp;&nbsp;&nbsp;Each&nbsp;integer&nbsp;value&nbsp;stores&nbsp;16&nbsp;bits&nbsp;of&nbsp;data&nbsp;and&nbsp;16&nbsp;bits&nbsp;o&nbsp;X&nbsp;and&nbsp;U\n&nbsp;&nbsp;--&nbsp;&nbsp;&nbsp;Bit&nbsp;size&nbsp;unlimited\n&nbsp;&nbsp;--&nbsp;\n&nbsp;&nbsp;subtype&nbsp;&nbsp;MemoryBaseType_X&nbsp;is&nbsp;integer_vector&nbsp;;\n&nbsp;&nbsp;function&nbsp;SizeMemoryBaseType_X(Size&nbsp;:&nbsp;integer)&nbsp;return&nbsp;integer&nbsp;;&nbsp;&nbsp;\n&nbsp;&nbsp;function&nbsp;ToMemoryBaseType_X&nbsp;&nbsp;(Slv&nbsp;&nbsp;:&nbsp;std_logic_vector&nbsp;;&nbsp;Size&nbsp;:&nbsp;integer)&nbsp;return&nbsp;integer_vector&nbsp;;\n&nbsp;&nbsp;function&nbsp;FromMemoryBaseType_X(Mem&nbsp;&nbsp;:&nbsp;integer_vector&nbsp;&nbsp;&nbsp;;&nbsp;Size&nbsp;:&nbsp;integer)&nbsp;return&nbsp;std_logic_vector&nbsp;;\n&nbsp;&nbsp;function&nbsp;InitMemoryBaseType_X(Size&nbsp;:&nbsp;integer)&nbsp;return&nbsp;integer_vector&nbsp;;&nbsp;\n&nbsp;\n&nbsp;&nbsp;--&nbsp;-----------------------------------------------\n&nbsp;&nbsp;--&nbsp;Memory&nbsp;Policy&nbsp;NoX\n&nbsp;&nbsp;--&nbsp;&nbsp;&nbsp;X&nbsp;and&nbsp;U&nbsp;are&nbsp;stored&nbsp;as&nbsp;a&nbsp;0\n&nbsp;&nbsp;--&nbsp;&nbsp;&nbsp;Each&nbsp;integer&nbsp;value&nbsp;stores&nbsp;32&nbsp;bits&nbsp;of&nbsp;data\n&nbsp;&nbsp;--&nbsp;&nbsp;&nbsp;Bit&nbsp;size&nbsp;unlimited\n&nbsp;&nbsp;--&nbsp;&nbsp;&nbsp;For&nbsp;larger&nbsp;word&nbsp;widths,&nbsp;uses&nbsp;half&nbsp;storage&nbsp;as&nbsp;X\n&nbsp;&nbsp;--&nbsp;\n&nbsp;&nbsp;subtype&nbsp;&nbsp;MemoryBaseType_NoX&nbsp;is&nbsp;integer_vector&nbsp;;\n&nbsp;&nbsp;function&nbsp;SizeMemoryBaseType_NoX(Size&nbsp;:&nbsp;integer)&nbsp;return&nbsp;integer&nbsp;;&nbsp;&nbsp;\n&nbsp;&nbsp;function&nbsp;ToMemoryBaseType_NoX&nbsp;&nbsp;(Slv&nbsp;&nbsp;:&nbsp;std_logic_vector&nbsp;;&nbsp;Size&nbsp;:&nbsp;integer)&nbsp;return&nbsp;integer_vector&nbsp;;\n&nbsp;&nbsp;function&nbsp;FromMemoryBaseType_NoX(Mem&nbsp;&nbsp;:&nbsp;integer_vector&nbsp;&nbsp;&nbsp;;&nbsp;Size&nbsp;:&nbsp;integer)&nbsp;return&nbsp;std_logic_vector&nbsp;;\n&nbsp;&nbsp;function&nbsp;InitMemoryBaseType_NoX(Size&nbsp;:&nbsp;integer)&nbsp;return&nbsp;integer_vector&nbsp;;&nbsp;\n&nbsp;\n&nbsp;&nbsp;--&nbsp;-----------------------------------------------\n&nbsp;&nbsp;--&nbsp;Memory&nbsp;policy&nbsp;orig&nbsp;\n&nbsp;&nbsp;--&nbsp;&nbsp;&nbsp;For&nbsp;backward&nbsp;compatibility&nbsp;only\n&nbsp;&nbsp;--&nbsp;&nbsp;&nbsp;upto&nbsp;31&nbsp;bits&nbsp;of&nbsp;data\n&nbsp;&nbsp;--&nbsp;&nbsp;&nbsp;X&nbsp;or&nbsp;U&nbsp;in&nbsp;any&nbsp;bit&nbsp;and&nbsp;the&nbsp;word&nbsp;becomes&nbsp;X\n&nbsp;&nbsp;--&nbsp;\n&nbsp;&nbsp;subtype&nbsp;&nbsp;MemoryBaseType_orig&nbsp;is&nbsp;integer_vector&nbsp;;&nbsp;\n&nbsp;&nbsp;function&nbsp;SizeMemoryBaseType_orig(Size&nbsp;:&nbsp;integer)&nbsp;return&nbsp;integer&nbsp;;&nbsp;&nbsp;\n&nbsp;&nbsp;function&nbsp;ToMemoryBaseType_orig&nbsp;&nbsp;(Slv&nbsp;&nbsp;:&nbsp;std_logic_vector&nbsp;;&nbsp;Size&nbsp;:&nbsp;integer)&nbsp;return&nbsp;integer_vector&nbsp;;\n&nbsp;&nbsp;function&nbsp;FromMemoryBaseType_orig(Mem&nbsp;&nbsp;:&nbsp;integer_vector&nbsp;&nbsp;&nbsp;;&nbsp;Size&nbsp;:&nbsp;integer)&nbsp;return&nbsp;std_logic_vector&nbsp;;\n&nbsp;&nbsp;function&nbsp;InitMemoryBaseType_orig(Size&nbsp;:&nbsp;integer)&nbsp;return&nbsp;integer_vector&nbsp;;&nbsp;\n&nbsp;\nend&nbsp;MemorySupportPkg&nbsp;;\n&nbsp;\npackage&nbsp;body&nbsp;MemorySupportPkg&nbsp;is&nbsp;\n&nbsp;\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;--&nbsp;Memory&nbsp;Policy&nbsp;X\n&nbsp;&nbsp;--&nbsp;&nbsp;&nbsp;Maintains&nbsp;fidelity&nbsp;of&nbsp;X&nbsp;and&nbsp;U\n&nbsp;&nbsp;--&nbsp;&nbsp;&nbsp;Each&nbsp;integer&nbsp;value&nbsp;stores&nbsp;16&nbsp;bits&nbsp;of&nbsp;data&nbsp;and&nbsp;16&nbsp;bits&nbsp;o&nbsp;X&nbsp;and&nbsp;U\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;function&nbsp;SizeMemoryBaseType_X(Size&nbsp;:&nbsp;integer)&nbsp;return&nbsp;integer&nbsp;is&nbsp;&nbsp;\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;integer(Ceil(real(Size)/16.0))&nbsp;;&nbsp;\n&nbsp;&nbsp;end&nbsp;function&nbsp;SizeMemoryBaseType_X&nbsp;;&nbsp;\n&nbsp;&nbsp;\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;function&nbsp;ToMemoryBaseType_X(Slv&nbsp;:&nbsp;std_logic_vector&nbsp;;&nbsp;Size&nbsp;:&nbsp;integer)&nbsp;return&nbsp;integer_vector&nbsp;is&nbsp;\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;NormalizedSlv&nbsp;:&nbsp;std_logic_vector(Size*16-1&nbsp;downto&nbsp;0)&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;Bits16&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;std_logic_vector(15&nbsp;downto&nbsp;0)&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;BitIsX&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;std_logic_vector(15&nbsp;downto&nbsp;0)&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;BitVal&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;std_logic_vector(15&nbsp;downto&nbsp;0)&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;result&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;integer_vector&nbsp;(Size-1&nbsp;downto&nbsp;0)&nbsp;;&nbsp;\n&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;NormalizedSlv&nbsp;:=&nbsp;Resize(Slv,&nbsp;Size*16)&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;MemIndex&nbsp;in&nbsp;result&apos;reverse_range&nbsp;loop&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Bits16&nbsp;:=&nbsp;NormalizedSlv(16*MemIndex+15&nbsp;downto&nbsp;16*MemIndex)&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;BitIndex&nbsp;in&nbsp;0&nbsp;to&nbsp;15&nbsp;loop\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;Is_X(Bits16(BitIndex))&nbsp;then&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;BitIsX(BitIndex)&nbsp;:=&nbsp;&apos;1&apos;&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;BitVal(BitIndex)&nbsp;:=&nbsp;&apos;1&apos;&nbsp;when&nbsp;Bits16(BitIndex)&nbsp;=&nbsp;&apos;U&apos;&nbsp;else&nbsp;&apos;0&apos;&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;BitIsX(BitIndex)&nbsp;:=&nbsp;&apos;0&apos;&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;BitVal(BitIndex)&nbsp;:=&nbsp;Bits16(BitIndex)&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;if&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;loop&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;result(MemIndex)&nbsp;:=&nbsp;to_integer(signed(BitIsX&nbsp;&amp;&nbsp;BitVal))&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;loop&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;result&nbsp;;&nbsp;\n&nbsp;&nbsp;end&nbsp;function&nbsp;ToMemoryBaseType_X&nbsp;;&nbsp;\n&nbsp;&nbsp;\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;function&nbsp;FromMemoryBaseType_X(Mem&nbsp;:&nbsp;integer_vector&nbsp;;&nbsp;Size&nbsp;:&nbsp;integer)&nbsp;return&nbsp;std_logic_vector&nbsp;is&nbsp;\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;NumIntegers&nbsp;&nbsp;&nbsp;:&nbsp;integer&nbsp;:=&nbsp;Mem&apos;length&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;alias&nbsp;&nbsp;&nbsp;&nbsp;NormalizedMem&nbsp;:&nbsp;integer_vector(NumIntegers-1&nbsp;downto&nbsp;0)&nbsp;is&nbsp;Mem&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;NormalizedSlv&nbsp;:&nbsp;std_logic_vector(NumIntegers*16-1&nbsp;downto&nbsp;0)&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;Bits16&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;std_logic_vector(15&nbsp;downto&nbsp;0)&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;BitIsX&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;std_logic_vector(15&nbsp;downto&nbsp;0)&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;BitVal&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;std_logic_vector(15&nbsp;downto&nbsp;0)&nbsp;;\n&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;MemIndex&nbsp;in&nbsp;NormalizedMem&apos;reverse_range&nbsp;loop&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(BitIsX,&nbsp;BitVal)&nbsp;:=&nbsp;std_logic_vector(to_signed(NormalizedMem(MemIndex),&nbsp;32))&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;BitIndex&nbsp;in&nbsp;0&nbsp;to&nbsp;15&nbsp;loop\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;BitIsX(BitIndex)&nbsp;=&nbsp;&apos;1&apos;&nbsp;then&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Bits16(BitIndex)&nbsp;:=&nbsp;&apos;U&apos;&nbsp;when&nbsp;BitVal(BitIndex)&nbsp;=&nbsp;&apos;1&apos;&nbsp;else&nbsp;&apos;X&apos;&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Bits16(BitIndex)&nbsp;:=&nbsp;BitVal(BitIndex)&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;if&nbsp;;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;loop&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;NormalizedSlv(16*MemIndex+15&nbsp;downto&nbsp;16*MemIndex)&nbsp;:=&nbsp;Bits16&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;loop&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;NormalizedSlv(Size-1&nbsp;downto&nbsp;0)&nbsp;;&nbsp;\n&nbsp;&nbsp;end&nbsp;function&nbsp;FromMemoryBaseType_X&nbsp;;&nbsp;\n&nbsp;&nbsp;\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;function&nbsp;InitMemoryBaseType_X(Size&nbsp;:&nbsp;integer)&nbsp;return&nbsp;integer_vector&nbsp;is&nbsp;&nbsp;\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;BaseU&nbsp;:&nbsp;integer_vector(0&nbsp;to&nbsp;Size-1)&nbsp;&nbsp;:=&nbsp;(others&nbsp;=&gt;&nbsp;-1)&nbsp;;\n&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;BaseU&nbsp;;&nbsp;\n&nbsp;&nbsp;end&nbsp;function&nbsp;InitMemoryBaseType_X&nbsp;;&nbsp;\n&nbsp;&nbsp;\n&nbsp;\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;--&nbsp;Memory&nbsp;Policy&nbsp;NoX\n&nbsp;&nbsp;--&nbsp;&nbsp;&nbsp;X&nbsp;and&nbsp;U&nbsp;are&nbsp;stored&nbsp;as&nbsp;a&nbsp;0\n&nbsp;&nbsp;--&nbsp;&nbsp;&nbsp;Each&nbsp;integer&nbsp;value&nbsp;stores&nbsp;32&nbsp;bits&nbsp;of&nbsp;data\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;function&nbsp;SizeMemoryBaseType_NoX(Size&nbsp;:&nbsp;integer)&nbsp;return&nbsp;integer&nbsp;is&nbsp;&nbsp;\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;integer(Ceil(real(Size)/32.0))&nbsp;;&nbsp;\n&nbsp;&nbsp;end&nbsp;function&nbsp;SizeMemoryBaseType_NoX&nbsp;;&nbsp;\n&nbsp;&nbsp;\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;function&nbsp;ToMemoryBaseType_NoX(Slv&nbsp;:&nbsp;std_logic_vector&nbsp;;&nbsp;Size&nbsp;:&nbsp;integer)&nbsp;return&nbsp;integer_vector&nbsp;is&nbsp;\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;NormalizedSlv&nbsp;:&nbsp;std_logic_vector(Size*32-1&nbsp;downto&nbsp;0)&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;Bits32&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;std_logic_vector(31&nbsp;downto&nbsp;0)&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;BitVal&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;std_logic_vector(31&nbsp;downto&nbsp;0)&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;result&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;integer_vector&nbsp;(Size-1&nbsp;downto&nbsp;0)&nbsp;;&nbsp;\n&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;NormalizedSlv&nbsp;:=&nbsp;Resize(Slv,&nbsp;Size*32)&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;MemIndex&nbsp;in&nbsp;result&apos;reverse_range&nbsp;loop&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Bits32&nbsp;:=&nbsp;NormalizedSlv(32*MemIndex+31&nbsp;downto&nbsp;32*MemIndex)&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;BitIndex&nbsp;in&nbsp;0&nbsp;to&nbsp;31&nbsp;loop\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;Is_X(Bits32(BitIndex))&nbsp;then&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;BitVal(BitIndex)&nbsp;:=&nbsp;&apos;0&apos;&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;BitVal(BitIndex)&nbsp;:=&nbsp;Bits32(BitIndex)&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;if&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;loop&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;result(MemIndex)&nbsp;:=&nbsp;to_integer(signed(BitVal))&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;loop&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;result&nbsp;;&nbsp;\n&nbsp;&nbsp;end&nbsp;function&nbsp;ToMemoryBaseType_NoX&nbsp;;&nbsp;\n&nbsp;&nbsp;\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;function&nbsp;FromMemoryBaseType_NoX(Mem&nbsp;:&nbsp;integer_vector&nbsp;;&nbsp;Size&nbsp;:&nbsp;integer)&nbsp;return&nbsp;std_logic_vector&nbsp;is&nbsp;\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;NumIntegers&nbsp;&nbsp;&nbsp;:&nbsp;integer&nbsp;:=&nbsp;Mem&apos;length&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;alias&nbsp;&nbsp;&nbsp;&nbsp;NormalizedMem&nbsp;:&nbsp;integer_vector(NumIntegers-1&nbsp;downto&nbsp;0)&nbsp;is&nbsp;Mem&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;NormalizedSlv&nbsp;:&nbsp;std_logic_vector(NumIntegers*32-1&nbsp;downto&nbsp;0)&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;Bits32&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;std_logic_vector(31&nbsp;downto&nbsp;0)&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;BitVal&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;std_logic_vector(31&nbsp;downto&nbsp;0)&nbsp;;\n&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;MemIndex&nbsp;in&nbsp;NormalizedMem&apos;reverse_range&nbsp;loop&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Bits32&nbsp;:=&nbsp;std_logic_vector(to_signed(NormalizedMem(MemIndex),&nbsp;32))&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;NormalizedSlv(32*MemIndex+31&nbsp;downto&nbsp;32*MemIndex)&nbsp;:=&nbsp;Bits32&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;loop&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;NormalizedSlv(Size-1&nbsp;downto&nbsp;0)&nbsp;;&nbsp;\n&nbsp;&nbsp;end&nbsp;function&nbsp;FromMemoryBaseType_NoX&nbsp;;&nbsp;\n&nbsp;&nbsp;\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;function&nbsp;InitMemoryBaseType_NoX(Size&nbsp;:&nbsp;integer)&nbsp;return&nbsp;integer_vector&nbsp;is&nbsp;&nbsp;\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;BaseU&nbsp;:&nbsp;integer_vector(0&nbsp;to&nbsp;Size-1)&nbsp;&nbsp;:=&nbsp;(others&nbsp;=&gt;&nbsp;0)&nbsp;;\n&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;BaseU&nbsp;;&nbsp;\n&nbsp;&nbsp;end&nbsp;function&nbsp;InitMemoryBaseType_NoX&nbsp;;&nbsp;\n&nbsp;\n&nbsp;\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;--&nbsp;Memory&nbsp;policy&nbsp;orig&nbsp;\n&nbsp;&nbsp;--&nbsp;&nbsp;&nbsp;For&nbsp;backward&nbsp;compatibility&nbsp;only\n&nbsp;&nbsp;--&nbsp;&nbsp;&nbsp;upto&nbsp;31&nbsp;bits&nbsp;of&nbsp;data\n&nbsp;&nbsp;--&nbsp;&nbsp;&nbsp;X&nbsp;or&nbsp;U&nbsp;in&nbsp;any&nbsp;bit&nbsp;and&nbsp;the&nbsp;word&nbsp;becomes&nbsp;X\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;function&nbsp;SizeMemoryBaseType_orig(Size&nbsp;:&nbsp;integer)&nbsp;return&nbsp;integer&nbsp;is&nbsp;&nbsp;\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;would&nbsp;be&nbsp;better&nbsp;as&nbsp;an&nbsp;alert,&nbsp;but&nbsp;not&nbsp;worth&nbsp;the&nbsp;pain&nbsp;since&nbsp;this&nbsp;is&nbsp;deprecated\n&nbsp;&nbsp;&nbsp;&nbsp;assert&nbsp;Size&nbsp;&lt;&nbsp;32&nbsp;report&nbsp;&quot;MemoryPkg.MemInit/NewID.&nbsp;&nbsp;DataWidth&nbsp;=&nbsp;&quot;&nbsp;&amp;&nbsp;to_string(Size)&nbsp;&amp;&nbsp;&quot;&nbsp;must&nbsp;be&nbsp;&lt;&nbsp;32&nbsp;&quot;&nbsp;severity&nbsp;FAILURE&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;1&nbsp;;&nbsp;\n&nbsp;&nbsp;end&nbsp;function&nbsp;SizeMemoryBaseType_orig&nbsp;;&nbsp;\n&nbsp;\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;function&nbsp;ToMemoryBaseType_orig(Slv&nbsp;:&nbsp;std_logic_vector&nbsp;;&nbsp;Size&nbsp;:&nbsp;integer)&nbsp;return&nbsp;integer_vector&nbsp;is&nbsp;\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;result&nbsp;:&nbsp;integer&nbsp;;&nbsp;\n&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(Is_X(Slv))&nbsp;then&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;result&nbsp;:=&nbsp;-1&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;else\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;result&nbsp;:=&nbsp;to_integer(&nbsp;Slv&nbsp;)&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;if&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;(1&nbsp;=&gt;&nbsp;result)&nbsp;;&nbsp;\n&nbsp;&nbsp;end&nbsp;function&nbsp;ToMemoryBaseType_orig&nbsp;;&nbsp;\n&nbsp;&nbsp;\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;function&nbsp;FromMemoryBaseType_orig(Mem&nbsp;:&nbsp;integer_vector&nbsp;;&nbsp;Size&nbsp;:&nbsp;integer)&nbsp;return&nbsp;std_logic_vector&nbsp;is&nbsp;\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;Data&nbsp;:&nbsp;std_logic_vector(Size-1&nbsp;downto&nbsp;0)&nbsp;;&nbsp;\n&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;Mem(Mem&apos;left)&nbsp;&gt;=&nbsp;0&nbsp;then&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;Get&nbsp;the&nbsp;Word&nbsp;from&nbsp;the&nbsp;Array\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Data&nbsp;:=&nbsp;to_slv(Mem(Mem&apos;left),&nbsp;Size)&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;elsif&nbsp;Mem(Mem&apos;left)&nbsp;=&nbsp;-1&nbsp;then&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;X&nbsp;in&nbsp;Word,&nbsp;return&nbsp;all&nbsp;X\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Data&nbsp;:=&nbsp;(Data&apos;range&nbsp;=&gt;&nbsp;&apos;X&apos;)&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;else&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;Location&nbsp;Uninitialized,&nbsp;return&nbsp;all&nbsp;X\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Data&nbsp;:=&nbsp;(Data&apos;range&nbsp;=&gt;&nbsp;&apos;U&apos;)&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;if&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;Data&nbsp;;&nbsp;\n&nbsp;&nbsp;end&nbsp;function&nbsp;FromMemoryBaseType_orig&nbsp;;&nbsp;\n&nbsp;&nbsp;\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;function&nbsp;InitMemoryBaseType_orig(Size&nbsp;:&nbsp;integer)&nbsp;return&nbsp;integer_vector&nbsp;is&nbsp;&nbsp;\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;(1&nbsp;=&gt;&nbsp;integer&apos;left)&nbsp;;&nbsp;\n&nbsp;&nbsp;end&nbsp;function&nbsp;InitMemoryBaseType_orig&nbsp;;&nbsp;\n&nbsp;\nend&nbsp;MemorySupportPkg&nbsp;;';
Report.brushes['./../../../SynthWorks/Dev/_osvvm/OsvvmLibraries/osvvm/MemorySupportPkg.vhd'] = 'vhdl'

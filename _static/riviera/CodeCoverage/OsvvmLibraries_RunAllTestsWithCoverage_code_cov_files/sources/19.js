Report.sources['./../../../SynthWorks/Dev/_osvvm/OsvvmLibraries/osvvm/MemoryGenericPkg.vhd'] = '--\n--&nbsp;&nbsp;File&nbsp;Name:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MemoryGenericPkg.vhd\n--&nbsp;&nbsp;Design&nbsp;Unit&nbsp;Name:&nbsp;&nbsp;MemoryGenericPkg\n--&nbsp;&nbsp;Revision:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;STANDARD&nbsp;VERSION\n--\n--&nbsp;&nbsp;Maintainer:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Jim&nbsp;Lewis&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;email:&nbsp;&nbsp;jim@synthworks.com&nbsp;\n--&nbsp;&nbsp;Contributor(s):&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n--&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Jim&nbsp;Lewis&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;email:&nbsp;&nbsp;jim@synthworks.com&nbsp;&nbsp;&nbsp;\n--\n--&nbsp;&nbsp;Description\n--&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Package&nbsp;defines&nbsp;a&nbsp;protected&nbsp;type,&nbsp;MemoryPType,&nbsp;and&nbsp;methods&nbsp;&nbsp;\n--&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;efficiently&nbsp;implementing&nbsp;memory&nbsp;data&nbsp;structures\n--&nbsp;&nbsp;&nbsp;&nbsp;\n--&nbsp;&nbsp;Developed&nbsp;for:&nbsp;\n--&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SynthWorks&nbsp;Design&nbsp;Inc.&nbsp;\n--&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;VHDL&nbsp;Training&nbsp;Classes\n--&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;11898&nbsp;SW&nbsp;128th&nbsp;Ave.&nbsp;&nbsp;Tigard,&nbsp;Or&nbsp;&nbsp;97223\n--&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;http://www.SynthWorks.com\n--\n--&nbsp;&nbsp;Revision&nbsp;History:\n--&nbsp;&nbsp;&nbsp;&nbsp;Date&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Version&nbsp;&nbsp;&nbsp;&nbsp;Description\n--&nbsp;&nbsp;&nbsp;&nbsp;01/2023&nbsp;&nbsp;&nbsp;2023.01&nbsp;&nbsp;&nbsp;&nbsp;Updated&nbsp;address&nbsp;checks&nbsp;in&nbsp;MemRead&nbsp;and&nbsp;MemWrite\n--&nbsp;&nbsp;&nbsp;&nbsp;11/2022&nbsp;&nbsp;&nbsp;2022.11&nbsp;&nbsp;&nbsp;&nbsp;Updated&nbsp;default&nbsp;search&nbsp;to&nbsp;PRIVATE_NAME\n--&nbsp;&nbsp;&nbsp;&nbsp;08/2022&nbsp;&nbsp;&nbsp;2022.08&nbsp;&nbsp;&nbsp;&nbsp;Refactored&nbsp;and&nbsp;added&nbsp;generics&nbsp;for&nbsp;base&nbsp;type\n--&nbsp;&nbsp;&nbsp;&nbsp;02/2022&nbsp;&nbsp;&nbsp;2022.02&nbsp;&nbsp;&nbsp;&nbsp;Updated&nbsp;NewID&nbsp;with&nbsp;ReportMode,&nbsp;Search,&nbsp;PrintParent.&nbsp;&nbsp;&nbsp;Supports&nbsp;searching&nbsp;for&nbsp;Memory&nbsp;models.\n--&nbsp;&nbsp;&nbsp;&nbsp;06/2021&nbsp;&nbsp;&nbsp;2021.06&nbsp;&nbsp;&nbsp;&nbsp;Updated&nbsp;Data&nbsp;Structure,&nbsp;IDs&nbsp;for&nbsp;new&nbsp;use&nbsp;model,&nbsp;and&nbsp;Wrapper&nbsp;Subprograms\n--&nbsp;&nbsp;&nbsp;&nbsp;01/2020&nbsp;&nbsp;&nbsp;2020.01&nbsp;&nbsp;&nbsp;&nbsp;Updated&nbsp;Licenses&nbsp;to&nbsp;Apache\n--&nbsp;&nbsp;&nbsp;&nbsp;11/2016&nbsp;&nbsp;&nbsp;2016.11&nbsp;&nbsp;&nbsp;&nbsp;Refinement&nbsp;to&nbsp;MemRead&nbsp;to&nbsp;return&nbsp;value,&nbsp;X&nbsp;(if&nbsp;X),&nbsp;U&nbsp;(if&nbsp;not&nbsp;initialized)\n--&nbsp;&nbsp;&nbsp;&nbsp;01/2016&nbsp;&nbsp;&nbsp;2016.01&nbsp;&nbsp;&nbsp;&nbsp;Update&nbsp;for&nbsp;buf.all(buf&apos;left)\n--&nbsp;&nbsp;&nbsp;&nbsp;06/2015&nbsp;&nbsp;&nbsp;2015.06&nbsp;&nbsp;&nbsp;&nbsp;Updated&nbsp;for&nbsp;Alerts,&nbsp;...\n--&nbsp;&nbsp;&nbsp;&nbsp;...&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;...&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Numerous&nbsp;revisions&nbsp;for&nbsp;VHDL&nbsp;Testbenches&nbsp;and&nbsp;Verification\n--&nbsp;&nbsp;&nbsp;&nbsp;05/2005&nbsp;&nbsp;&nbsp;0.1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Initial&nbsp;revision\n--\n--\n--&nbsp;&nbsp;This&nbsp;file&nbsp;is&nbsp;part&nbsp;of&nbsp;OSVVM.\n--&nbsp;&nbsp;\n--&nbsp;&nbsp;Copyright&nbsp;(c)&nbsp;2005&nbsp;-&nbsp;2022&nbsp;by&nbsp;SynthWorks&nbsp;Design&nbsp;Inc.&nbsp;&nbsp;\n--&nbsp;&nbsp;\n--&nbsp;&nbsp;Licensed&nbsp;under&nbsp;the&nbsp;Apache&nbsp;License,&nbsp;Version&nbsp;2.0&nbsp;(the&nbsp;&quot;License&quot;);\n--&nbsp;&nbsp;you&nbsp;may&nbsp;not&nbsp;use&nbsp;this&nbsp;file&nbsp;except&nbsp;in&nbsp;compliance&nbsp;with&nbsp;the&nbsp;License.\n--&nbsp;&nbsp;You&nbsp;may&nbsp;obtain&nbsp;a&nbsp;copy&nbsp;of&nbsp;the&nbsp;License&nbsp;at\n--&nbsp;&nbsp;\n--&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;https://www.apache.org/licenses/LICENSE-2.0\n--&nbsp;&nbsp;\n--&nbsp;&nbsp;Unless&nbsp;required&nbsp;by&nbsp;applicable&nbsp;law&nbsp;or&nbsp;agreed&nbsp;to&nbsp;in&nbsp;writing,&nbsp;software\n--&nbsp;&nbsp;distributed&nbsp;under&nbsp;the&nbsp;License&nbsp;is&nbsp;distributed&nbsp;on&nbsp;an&nbsp;&quot;AS&nbsp;IS&quot;&nbsp;BASIS,\n--&nbsp;&nbsp;WITHOUT&nbsp;WARRANTIES&nbsp;OR&nbsp;CONDITIONS&nbsp;OF&nbsp;ANY&nbsp;KIND,&nbsp;either&nbsp;express&nbsp;or&nbsp;implied.\n--&nbsp;&nbsp;See&nbsp;the&nbsp;License&nbsp;for&nbsp;the&nbsp;specific&nbsp;language&nbsp;governing&nbsp;permissions&nbsp;and\n--&nbsp;&nbsp;limitations&nbsp;under&nbsp;the&nbsp;License.\n--&nbsp;&nbsp;\n&nbsp;\nuse&nbsp;std.textio.all&nbsp;;\nlibrary&nbsp;IEEE&nbsp;;&nbsp;\n&nbsp;&nbsp;use&nbsp;IEEE.std_logic_1164.all&nbsp;;&nbsp;\n&nbsp;&nbsp;use&nbsp;IEEE.numeric_std.all&nbsp;;&nbsp;\n&nbsp;&nbsp;use&nbsp;IEEE.numeric_std_unsigned.all&nbsp;;&nbsp;\n&nbsp;&nbsp;use&nbsp;IEEE.math_real.all&nbsp;;\n&nbsp;&nbsp;\n&nbsp;&nbsp;use&nbsp;work.TextUtilPkg.all&nbsp;;\n&nbsp;&nbsp;use&nbsp;work.TranscriptPkg.all&nbsp;;&nbsp;&nbsp;\n&nbsp;&nbsp;use&nbsp;work.AlertLogPkg.all&nbsp;;\n&nbsp;&nbsp;use&nbsp;work.NameStorePkg.all&nbsp;;\n&nbsp;&nbsp;use&nbsp;work.ResolutionPkg.all&nbsp;;&nbsp;\n&nbsp;&nbsp;\n--&nbsp;Temporary&nbsp;workaround&nbsp;for&nbsp;MemoryBaseType&nbsp;\n&nbsp;&nbsp;use&nbsp;work.MemorySupportPkg.MemoryBaseType&nbsp;;\n&nbsp;\npackage&nbsp;MemoryGenericPkg&nbsp;is\n&nbsp;&nbsp;generic&nbsp;(\n--&nbsp;&nbsp;&nbsp;&nbsp;type&nbsp;MemoryBaseType&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;SizeMemoryBaseType(Size&nbsp;:&nbsp;integer)&nbsp;return&nbsp;integer&nbsp;;&nbsp;--&nbsp;is&nbsp;&lt;&gt;&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;ToMemoryBaseType&nbsp;&nbsp;(A&nbsp;:&nbsp;std_logic_vector&nbsp;;&nbsp;Size&nbsp;:&nbsp;integer)&nbsp;return&nbsp;MemoryBaseType&nbsp;;&nbsp;--&nbsp;is&nbsp;&lt;&gt;&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;FromMemoryBaseType(A&nbsp;:&nbsp;MemoryBaseType&nbsp;&nbsp;&nbsp;;&nbsp;Size&nbsp;:&nbsp;integer)&nbsp;return&nbsp;std_logic_vector&nbsp;;&nbsp;--&nbsp;is&nbsp;&lt;&gt;&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;InitMemoryBaseType(Size&nbsp;:&nbsp;integer)&nbsp;return&nbsp;MemoryBaseType&nbsp;--&nbsp;is&nbsp;&lt;&gt;&nbsp;\n&nbsp;&nbsp;)&nbsp;;\n&nbsp;&nbsp;\n&nbsp;&nbsp;type&nbsp;MemoryIDType&nbsp;is&nbsp;record\n&nbsp;&nbsp;&nbsp;&nbsp;ID&nbsp;:&nbsp;integer_max&nbsp;;\n&nbsp;&nbsp;end&nbsp;record&nbsp;MemoryIDType&nbsp;;&nbsp;\n&nbsp;&nbsp;type&nbsp;MemoryIDArrayType&nbsp;is&nbsp;array&nbsp;(integer&nbsp;range&nbsp;&lt;&gt;)&nbsp;of&nbsp;MemoryIDType&nbsp;;\n&nbsp;\n&nbsp;&nbsp;constant&nbsp;OSVVM_MEMORY_ALERTLOG_ID&nbsp;:&nbsp;AlertLogIDType&nbsp;:=&nbsp;OSVVM_ALERTLOG_ID&nbsp;;\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;impure&nbsp;function&nbsp;NewID&nbsp;(\n&nbsp;&nbsp;&nbsp;&nbsp;Name&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;String&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;AddrWidth&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;integer&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;DataWidth&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;integer&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;ParentID&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;AlertLogIDType&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:=&nbsp;OSVVM_MEMORY_ALERTLOG_ID&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;ReportMode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;AlertLogReportModeType&nbsp;&nbsp;:=&nbsp;ENABLED&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;Search&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;NameSearchType&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:=&nbsp;PRIVATE_NAME&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;PrintParent&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;AlertLogPrintParentType&nbsp;:=&nbsp;PRINT_NAME_AND_PARENT\n&nbsp;&nbsp;)&nbsp;return&nbsp;MemoryIDType&nbsp;;\n&nbsp;\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;procedure&nbsp;MemWrite&nbsp;(&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;ID&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;MemoryIDType&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;Addr&nbsp;&nbsp;:&nbsp;std_logic_vector&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;Data&nbsp;&nbsp;:&nbsp;std_logic_vector&nbsp;\n&nbsp;&nbsp;)&nbsp;;&nbsp;\n&nbsp;&nbsp;procedure&nbsp;MemRead&nbsp;(&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;ID&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;in&nbsp;MemoryIDType&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;Addr&nbsp;&nbsp;:&nbsp;in&nbsp;&nbsp;std_logic_vector&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;Data&nbsp;&nbsp;:&nbsp;out&nbsp;std_logic_vector&nbsp;\n&nbsp;&nbsp;)&nbsp;;&nbsp;\n&nbsp;&nbsp;impure&nbsp;function&nbsp;MemRead&nbsp;(&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;ID&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;MemoryIDType&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;Addr&nbsp;&nbsp;:&nbsp;std_logic_vector&nbsp;\n&nbsp;&nbsp;)&nbsp;return&nbsp;std_logic_vector&nbsp;;&nbsp;\n&nbsp;\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;procedure&nbsp;MemErase&nbsp;(ID&nbsp;:&nbsp;in&nbsp;MemoryIDType);&nbsp;\n&nbsp;&nbsp;\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;impure&nbsp;function&nbsp;GetAlertLogID&nbsp;(ID&nbsp;:&nbsp;in&nbsp;MemoryIDType)&nbsp;return&nbsp;AlertLogIDType&nbsp;;\n&nbsp;&nbsp;\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;procedure&nbsp;FileReadH&nbsp;(&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;Hexadecimal&nbsp;File&nbsp;Read&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;ID&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;MemoryIDType&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;FileName&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;string&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;StartAddr&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;std_logic_vector&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;EndAddr&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;std_logic_vector\n&nbsp;&nbsp;)&nbsp;;\n&nbsp;&nbsp;procedure&nbsp;FileReadH&nbsp;(\n&nbsp;&nbsp;&nbsp;&nbsp;ID&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;MemoryIDType&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;FileName&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;string&nbsp;;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;StartAddr&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;std_logic_vector\n&nbsp;&nbsp;)&nbsp;;\n&nbsp;&nbsp;procedure&nbsp;FileReadH&nbsp;(\n&nbsp;&nbsp;&nbsp;&nbsp;ID&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;MemoryIDType&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;FileName&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;string&nbsp;\n&nbsp;&nbsp;)&nbsp;;\n&nbsp;\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;procedure&nbsp;FileReadB&nbsp;(&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;Binary&nbsp;File&nbsp;Read&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;ID&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;MemoryIDType&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;FileName&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;string&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;StartAddr&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;std_logic_vector&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;EndAddr&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;std_logic_vector\n&nbsp;&nbsp;)&nbsp;;\n&nbsp;&nbsp;procedure&nbsp;FileReadB&nbsp;(\n&nbsp;&nbsp;&nbsp;&nbsp;ID&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;MemoryIDType&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;FileName&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;string&nbsp;;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;StartAddr&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;std_logic_vector\n&nbsp;&nbsp;)&nbsp;;\n&nbsp;&nbsp;procedure&nbsp;FileReadB&nbsp;(\n&nbsp;&nbsp;&nbsp;&nbsp;ID&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;MemoryIDType&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;FileName&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;string&nbsp;\n&nbsp;&nbsp;)&nbsp;;\n&nbsp;\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;procedure&nbsp;FileWriteH&nbsp;(&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;Hexadecimal&nbsp;File&nbsp;Write&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;ID&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;MemoryIDType&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;FileName&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;string&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;StartAddr&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;std_logic_vector&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;EndAddr&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;std_logic_vector\n&nbsp;&nbsp;)&nbsp;;\n&nbsp;&nbsp;procedure&nbsp;FileWriteH&nbsp;(\n&nbsp;&nbsp;&nbsp;&nbsp;ID&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;MemoryIDType&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;FileName&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;string&nbsp;;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;StartAddr&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;std_logic_vector\n&nbsp;&nbsp;)&nbsp;;\n&nbsp;&nbsp;procedure&nbsp;FileWriteH&nbsp;(\n&nbsp;&nbsp;&nbsp;&nbsp;ID&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;MemoryIDType&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;FileName&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;string&nbsp;\n&nbsp;&nbsp;)&nbsp;;\n&nbsp;\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;procedure&nbsp;FileWriteB&nbsp;(&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;Binary&nbsp;File&nbsp;Write&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;ID&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;MemoryIDType&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;FileName&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;string&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;StartAddr&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;std_logic_vector&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;EndAddr&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;std_logic_vector\n&nbsp;&nbsp;)&nbsp;;\n&nbsp;&nbsp;procedure&nbsp;FileWriteB&nbsp;(\n&nbsp;&nbsp;&nbsp;&nbsp;ID&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;MemoryIDType&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;FileName&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;string&nbsp;;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;StartAddr&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;std_logic_vector\n&nbsp;&nbsp;)&nbsp;;\n&nbsp;&nbsp;procedure&nbsp;FileWriteB&nbsp;(\n&nbsp;&nbsp;&nbsp;&nbsp;ID&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;MemoryIDType&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;FileName&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;string&nbsp;\n&nbsp;&nbsp;)&nbsp;;\n&nbsp;\n&nbsp;&nbsp;type&nbsp;MemoryPType&nbsp;is&nbsp;protected&nbsp;\n&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;&nbsp;&nbsp;impure&nbsp;function&nbsp;NewID&nbsp;(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Name&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;String&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AddrWidth&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;integer&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DataWidth&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;integer&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ParentID&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;AlertLogIDType&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:=&nbsp;OSVVM_MEMORY_ALERTLOG_ID&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ReportMode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;AlertLogReportModeType&nbsp;&nbsp;:=&nbsp;ENABLED&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Search&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;NameSearchType&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:=&nbsp;PRIVATE_NAME&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PrintParent&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;AlertLogPrintParentType&nbsp;:=&nbsp;PRINT_NAME_AND_PARENT\n&nbsp;&nbsp;&nbsp;&nbsp;)&nbsp;return&nbsp;integer&nbsp;;\n&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;&nbsp;&nbsp;procedure&nbsp;MemWrite&nbsp;(&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ID&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;integer&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Addr&nbsp;&nbsp;:&nbsp;std_logic_vector&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Data&nbsp;&nbsp;:&nbsp;std_logic_vector&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;)&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;procedure&nbsp;MemRead&nbsp;(&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ID&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;in&nbsp;integer&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Addr&nbsp;&nbsp;:&nbsp;in&nbsp;&nbsp;std_logic_vector&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Data&nbsp;&nbsp;:&nbsp;out&nbsp;std_logic_vector&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;)&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;impure&nbsp;function&nbsp;MemRead&nbsp;(&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ID&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;integer&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Addr&nbsp;&nbsp;:&nbsp;std_logic_vector&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;)&nbsp;return&nbsp;std_logic_vector&nbsp;;&nbsp;\n&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;&nbsp;&nbsp;procedure&nbsp;MemErase&nbsp;(ID&nbsp;:&nbsp;integer)&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;impure&nbsp;function&nbsp;GetAlertLogID&nbsp;(ID&nbsp;:&nbsp;integer)&nbsp;return&nbsp;AlertLogIDType&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;&nbsp;&nbsp;procedure&nbsp;FileReadH&nbsp;(&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;Hexadecimal&nbsp;File&nbsp;Read&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ID&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;integer&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FileName&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;string&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;StartAddr&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;std_logic_vector&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;EndAddr&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;std_logic_vector\n&nbsp;&nbsp;&nbsp;&nbsp;)&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;procedure&nbsp;FileReadH&nbsp;(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ID&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;integer&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FileName&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;string&nbsp;;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;StartAddr&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;std_logic_vector\n&nbsp;&nbsp;&nbsp;&nbsp;)&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;procedure&nbsp;FileReadH&nbsp;(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ID&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;integer&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FileName&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;string&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;)&nbsp;;\n&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;&nbsp;&nbsp;procedure&nbsp;FileReadB&nbsp;(&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;Binary&nbsp;File&nbsp;Read&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ID&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;integer&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FileName&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;string&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;StartAddr&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;std_logic_vector&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;EndAddr&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;std_logic_vector\n&nbsp;&nbsp;&nbsp;&nbsp;)&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;procedure&nbsp;FileReadB&nbsp;(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ID&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;integer&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FileName&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;string&nbsp;;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;StartAddr&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;std_logic_vector\n&nbsp;&nbsp;&nbsp;&nbsp;)&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;procedure&nbsp;FileReadB&nbsp;(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ID&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;integer&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FileName&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;string&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;)&nbsp;;\n&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;&nbsp;&nbsp;procedure&nbsp;FileWriteH&nbsp;(&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;Hexadecimal&nbsp;File&nbsp;Write&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ID&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;integer&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FileName&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;string&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;StartAddr&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;std_logic_vector&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;EndAddr&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;std_logic_vector\n&nbsp;&nbsp;&nbsp;&nbsp;)&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;procedure&nbsp;FileWriteH&nbsp;(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ID&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;integer&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FileName&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;string&nbsp;;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;StartAddr&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;std_logic_vector\n&nbsp;&nbsp;&nbsp;&nbsp;)&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;procedure&nbsp;FileWriteH&nbsp;(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ID&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;integer&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FileName&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;string&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;)&nbsp;;\n&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;&nbsp;&nbsp;procedure&nbsp;FileWriteB&nbsp;(&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;Binary&nbsp;File&nbsp;Write&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ID&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;integer&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FileName&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;string&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;StartAddr&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;std_logic_vector&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;EndAddr&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;std_logic_vector\n&nbsp;&nbsp;&nbsp;&nbsp;)&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;procedure&nbsp;FileWriteB&nbsp;(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ID&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;integer&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FileName&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;string&nbsp;;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;StartAddr&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;std_logic_vector\n&nbsp;&nbsp;&nbsp;&nbsp;)&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;procedure&nbsp;FileWriteB&nbsp;(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ID&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;integer&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FileName&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;string&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;)&nbsp;;\n&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;Destroys&nbsp;the&nbsp;entire&nbsp;data&nbsp;structure\n&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;Usage:&nbsp;&nbsp;At&nbsp;the&nbsp;end&nbsp;of&nbsp;the&nbsp;simulation&nbsp;to&nbsp;remove&nbsp;all&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;memory&nbsp;used&nbsp;by&nbsp;data&nbsp;structure.&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;Note,&nbsp;a&nbsp;normal&nbsp;simulator&nbsp;does&nbsp;this&nbsp;for&nbsp;you.&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;You&nbsp;only&nbsp;need&nbsp;this&nbsp;if&nbsp;the&nbsp;simulator&nbsp;is&nbsp;broken.\n&nbsp;&nbsp;&nbsp;&nbsp;procedure&nbsp;deallocate&nbsp;;&nbsp;\n&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;/////////////////////////////////////////\n&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;Historical&nbsp;Interface\n&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;&nbsp;&nbsp;In&nbsp;the&nbsp;new&nbsp;implementation,&nbsp;these&nbsp;use&nbsp;index&nbsp;1.&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;&nbsp;&nbsp;These&nbsp;are&nbsp;for&nbsp;backward&nbsp;compatibility&nbsp;support\n&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;/////////////////////////////////////////\n&nbsp;&nbsp;&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;&nbsp;&nbsp;procedure&nbsp;MemInit&nbsp;(&nbsp;AddrWidth,&nbsp;DataWidth&nbsp;&nbsp;:&nbsp;in&nbsp;&nbsp;integer&nbsp;)&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;&nbsp;&nbsp;procedure&nbsp;MemWrite&nbsp;(&nbsp;Addr,&nbsp;Data&nbsp;&nbsp;:&nbsp;in&nbsp;&nbsp;std_logic_vector&nbsp;)&nbsp;;&nbsp;\n&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;&nbsp;&nbsp;procedure&nbsp;MemRead&nbsp;(&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Addr&nbsp;&nbsp;:&nbsp;in&nbsp;&nbsp;std_logic_vector&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Data&nbsp;&nbsp;:&nbsp;out&nbsp;std_logic_vector&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;)&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;impure&nbsp;function&nbsp;MemRead&nbsp;(&nbsp;Addr&nbsp;&nbsp;:&nbsp;std_logic_vector&nbsp;)&nbsp;return&nbsp;std_logic_vector&nbsp;;&nbsp;\n&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;&nbsp;&nbsp;procedure&nbsp;MemErase&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;&nbsp;&nbsp;procedure&nbsp;SetAlertLogID&nbsp;(A&nbsp;:&nbsp;AlertLogIDType)&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;procedure&nbsp;SetAlertLogID&nbsp;(Name&nbsp;:&nbsp;string&nbsp;;&nbsp;ParentID&nbsp;:&nbsp;AlertLogIDType&nbsp;:=&nbsp;OSVVM_MEMORY_ALERTLOG_ID&nbsp;;&nbsp;CreateHierarchy&nbsp;:&nbsp;Boolean&nbsp;:=&nbsp;TRUE)&nbsp;;&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;impure&nbsp;function&nbsp;GetAlertLogID&nbsp;return&nbsp;AlertLogIDType&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;&nbsp;&nbsp;procedure&nbsp;FileReadH&nbsp;(&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;Hexadecimal&nbsp;File&nbsp;Read&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FileName&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;string&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;StartAddr&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;std_logic_vector&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;EndAddr&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;std_logic_vector\n&nbsp;&nbsp;&nbsp;&nbsp;)&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;procedure&nbsp;FileReadH&nbsp;(FileName&nbsp;:&nbsp;string&nbsp;;&nbsp;&nbsp;StartAddr&nbsp;:&nbsp;std_logic_vector)&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;procedure&nbsp;FileReadH&nbsp;(FileName&nbsp;:&nbsp;string)&nbsp;;&nbsp;\n&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;&nbsp;&nbsp;procedure&nbsp;FileReadB&nbsp;(&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;Binary&nbsp;File&nbsp;Read&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FileName&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;string&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;StartAddr&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;std_logic_vector&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;EndAddr&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;std_logic_vector\n&nbsp;&nbsp;&nbsp;&nbsp;)&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;procedure&nbsp;FileReadB&nbsp;(FileName&nbsp;:&nbsp;string&nbsp;;&nbsp;&nbsp;StartAddr&nbsp;:&nbsp;std_logic_vector)&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;procedure&nbsp;FileReadB&nbsp;(FileName&nbsp;:&nbsp;string)&nbsp;;&nbsp;\n&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;&nbsp;&nbsp;procedure&nbsp;FileWriteH&nbsp;(&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;Hexadecimal&nbsp;File&nbsp;Write&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FileName&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;string&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;StartAddr&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;std_logic_vector&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;EndAddr&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;std_logic_vector\n&nbsp;&nbsp;&nbsp;&nbsp;)&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;procedure&nbsp;FileWriteH&nbsp;(FileName&nbsp;:&nbsp;string&nbsp;;&nbsp;&nbsp;StartAddr&nbsp;:&nbsp;std_logic_vector)&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;procedure&nbsp;FileWriteH&nbsp;(FileName&nbsp;:&nbsp;string)&nbsp;;&nbsp;\n&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;&nbsp;&nbsp;procedure&nbsp;FileWriteB&nbsp;(&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;Binary&nbsp;File&nbsp;Write&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FileName&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;string&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;StartAddr&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;std_logic_vector&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;EndAddr&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;std_logic_vector\n&nbsp;&nbsp;&nbsp;&nbsp;)&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;procedure&nbsp;FileWriteB&nbsp;(FileName&nbsp;:&nbsp;string&nbsp;;&nbsp;&nbsp;StartAddr&nbsp;:&nbsp;std_logic_vector)&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;procedure&nbsp;FileWriteB&nbsp;(FileName&nbsp;:&nbsp;string)&nbsp;;&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;\n&nbsp;&nbsp;end&nbsp;protected&nbsp;MemoryPType&nbsp;;\n&nbsp;\nend&nbsp;MemoryGenericPkg&nbsp;;\n&nbsp;\npackage&nbsp;body&nbsp;MemoryGenericPkg&nbsp;is&nbsp;\n&nbsp;&nbsp;constant&nbsp;BLOCK_WIDTH&nbsp;:&nbsp;integer&nbsp;:=&nbsp;10&nbsp;;&nbsp;\n&nbsp;\n&nbsp;&nbsp;type&nbsp;MemoryPType&nbsp;is&nbsp;protected&nbsp;body\n&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;type&nbsp;MemBlockType&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;is&nbsp;array&nbsp;(integer&nbsp;range&nbsp;&lt;&gt;)&nbsp;of&nbsp;MemoryBaseType&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;type&nbsp;MemBlockPtrType&nbsp;&nbsp;&nbsp;is&nbsp;access&nbsp;MemBlockType&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;type&nbsp;MemArrayType&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;is&nbsp;array&nbsp;(integer&nbsp;range&nbsp;&lt;&gt;)&nbsp;of&nbsp;MemBlockPtrType&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;type&nbsp;MemArrayPtrType&nbsp;&nbsp;&nbsp;is&nbsp;access&nbsp;MemArrayType&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;type&nbsp;FileFormatType&nbsp;is&nbsp;(BINARY,&nbsp;HEX)&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;type&nbsp;MemStructType&nbsp;is&nbsp;record\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MemArrayPtr&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;MemArrayPtrType&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AddrWidth&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;integer&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DataWidth&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;natural&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;BlockWidth&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;natural&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MemoryBaseTypeWidth&nbsp;:&nbsp;natural&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AlertLogID&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;AlertLogIDType&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;record&nbsp;MemStructType&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;New&nbsp;Structure\n&nbsp;&nbsp;&nbsp;&nbsp;type&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ItemArrayType&nbsp;&nbsp;&nbsp;&nbsp;is&nbsp;array&nbsp;(integer&nbsp;range&nbsp;&lt;&gt;)&nbsp;of&nbsp;MemStructType&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;type&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ItemArrayPtrType&nbsp;is&nbsp;access&nbsp;ItemArrayType&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;Template&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;ItemArrayType(1&nbsp;to&nbsp;1)&nbsp;:=&nbsp;(1&nbsp;=&gt;&nbsp;(NULL,&nbsp;-1,&nbsp;1,&nbsp;0,&nbsp;0,&nbsp;OSVVM_MEMORY_ALERTLOG_ID))&nbsp;;&nbsp;&nbsp;--&nbsp;Work&nbsp;around&nbsp;for&nbsp;QS&nbsp;2020.04&nbsp;and&nbsp;2021.02\n&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;MEM_STRUCT_PTR_LEFT&nbsp;:&nbsp;integer&nbsp;:=&nbsp;Template&apos;left&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;MemStructPtr&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;ItemArrayPtrType&nbsp;:=&nbsp;new&nbsp;ItemArrayType&apos;(Template)&nbsp;;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;NumItems&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;integer&nbsp;:=&nbsp;0&nbsp;;&nbsp;\n--&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;MIN_NUM_ITEMS&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;integer&nbsp;:=&nbsp;4&nbsp;;&nbsp;--&nbsp;Temporarily&nbsp;small&nbsp;for&nbsp;testing\n&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;MIN_NUM_ITEMS&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;integer&nbsp;:=&nbsp;32&nbsp;;&nbsp;--&nbsp;Min&nbsp;amount&nbsp;to&nbsp;resize&nbsp;array\n&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;LocalNameStore&nbsp;&nbsp;&nbsp;:&nbsp;NameStorePType&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;Package&nbsp;Local\n&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;NormalizeArraySize(&nbsp;NewNumItems,&nbsp;MinNumItems&nbsp;:&nbsp;integer&nbsp;)&nbsp;return&nbsp;integer&nbsp;is\n&nbsp;&nbsp;&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;NormNumItems&nbsp;:&nbsp;integer&nbsp;:=&nbsp;NewNumItems&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;ModNumItems&nbsp;&nbsp;:&nbsp;integer&nbsp;:=&nbsp;0;\n&nbsp;&nbsp;&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ModNumItems&nbsp;:=&nbsp;NewNumItems&nbsp;mod&nbsp;MinNumItems&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;ModNumItems&nbsp;&gt;&nbsp;0&nbsp;then&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;NormNumItems&nbsp;:=&nbsp;NormNumItems&nbsp;+&nbsp;(MinNumItems&nbsp;-&nbsp;ModNumItems)&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;if&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;NormNumItems&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;function&nbsp;NormalizeArraySize&nbsp;;\n&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;Package&nbsp;Local\n&nbsp;&nbsp;&nbsp;&nbsp;procedure&nbsp;GrowNumberItems&nbsp;(\n&nbsp;&nbsp;&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;ItemArrayPtr&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;InOut&nbsp;ItemArrayPtrType&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;NumItems&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;InOut&nbsp;integer&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;GrowAmount&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;in&nbsp;integer&nbsp;;\n--&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;NewNumItems&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;in&nbsp;integer&nbsp;;\n--&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;CurNumItems&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;in&nbsp;integer&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;MinNumItems&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;in&nbsp;integer&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;)&nbsp;is\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;oldItemArrayPtr&nbsp;&nbsp;:&nbsp;ItemArrayPtrType&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;NewNumItems&nbsp;:&nbsp;integer&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;NewNumItems&nbsp;:=&nbsp;NumItems&nbsp;+&nbsp;GrowAmount&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;Array&nbsp;Allocated&nbsp;in&nbsp;declaration&nbsp;to&nbsp;have&nbsp;a&nbsp;single&nbsp;item,&nbsp;but&nbsp;no&nbsp;items&nbsp;(historical&nbsp;mode)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;if&nbsp;ItemArrayPtr&nbsp;=&nbsp;NULL&nbsp;then\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;&nbsp;ItemArrayPtr&nbsp;:=&nbsp;new&nbsp;ItemArrayType(1&nbsp;to&nbsp;NormalizeArraySize(NewNumItems,&nbsp;MinNumItems))&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;elsif&nbsp;NewNumItems&nbsp;&gt;&nbsp;ItemArrayPtr&apos;length&nbsp;then\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;NewNumItems&nbsp;&gt;&nbsp;ItemArrayPtr&apos;length&nbsp;then\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;oldItemArrayPtr&nbsp;:=&nbsp;ItemArrayPtr&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ItemArrayPtr&nbsp;:=&nbsp;new&nbsp;ItemArrayType(1&nbsp;to&nbsp;NormalizeArraySize(NewNumItems,&nbsp;MinNumItems))&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ItemArrayPtr.all(1&nbsp;to&nbsp;NumItems)&nbsp;:=&nbsp;oldItemArrayPtr.all(1&nbsp;to&nbsp;NumItems)&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;deallocate(oldItemArrayPtr)&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;if&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;NumItems&nbsp;:=&nbsp;NewNumItems&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;procedure&nbsp;GrowNumberItems&nbsp;;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;PT&nbsp;Local&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;procedure&nbsp;MemInit&nbsp;(ID&nbsp;:&nbsp;integer&nbsp;;&nbsp;&nbsp;AddrWidth,&nbsp;DataWidth&nbsp;&nbsp;:&nbsp;integer&nbsp;)&nbsp;is\n&nbsp;&nbsp;&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;ADJ_BLOCK_WIDTH&nbsp;:&nbsp;integer&nbsp;:=&nbsp;minimum(BLOCK_WIDTH,&nbsp;AddrWidth)&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;AddrWidth&nbsp;&lt;=&nbsp;0&nbsp;then&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Alert(MemStructPtr(ID).AlertLogID,&nbsp;&quot;MemoryPkg.MemInit/NewID.&nbsp;&nbsp;AddrWidth&nbsp;=&nbsp;&quot;&nbsp;&amp;&nbsp;to_string(AddrWidth)&nbsp;&amp;&nbsp;&quot;&nbsp;must&nbsp;be&nbsp;&gt;&nbsp;0.&quot;,&nbsp;FAILURE)&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;if&nbsp;;&nbsp;\n--&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;DataWidth&nbsp;&lt;=&nbsp;0&nbsp;or&nbsp;DataWidth&nbsp;&gt;&nbsp;31&nbsp;then&nbsp;\n--&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Alert(MemStructPtr(ID).AlertLogID,&nbsp;&quot;MemoryPkg.MemInit/NewID.&nbsp;&nbsp;DataWidth&nbsp;=&nbsp;&quot;&nbsp;&amp;&nbsp;to_string(DataWidth)&nbsp;&amp;&nbsp;&quot;&nbsp;must&nbsp;be&nbsp;&gt;&nbsp;0&nbsp;and&nbsp;&lt;=&nbsp;31.&quot;,&nbsp;FAILURE)&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;DataWidth&nbsp;&lt;=&nbsp;0&nbsp;then&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Alert(MemStructPtr(ID).AlertLogID,&nbsp;&quot;MemoryPkg.MemInit/NewID.&nbsp;&nbsp;DataWidth&nbsp;=&nbsp;&quot;&nbsp;&amp;&nbsp;to_string(DataWidth)&nbsp;&amp;&nbsp;&quot;&nbsp;must&nbsp;be&nbsp;&gt;&nbsp;0&nbsp;&quot;,&nbsp;FAILURE)&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;if&nbsp;;&nbsp;\n&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MemStructPtr(ID).AddrWidth&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:=&nbsp;AddrWidth&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MemStructPtr(ID).DataWidth&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:=&nbsp;DataWidth&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MemStructPtr(ID).MemoryBaseTypeWidth&nbsp;:=&nbsp;SizeMemoryBaseType(DataWidth)&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MemStructPtr(ID).BlockWidth&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:=&nbsp;ADJ_BLOCK_WIDTH&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MemStructPtr(ID).MemArrayPtr&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:=&nbsp;new&nbsp;MemArrayType(0&nbsp;to&nbsp;2**(AddrWidth-ADJ_BLOCK_WIDTH)-1)&nbsp;;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;procedure&nbsp;MemInit&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;&nbsp;&nbsp;impure&nbsp;function&nbsp;NewID&nbsp;(\n&nbsp;&nbsp;&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Name&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;String&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AddrWidth&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;integer&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DataWidth&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;integer&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ParentID&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;AlertLogIDType&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:=&nbsp;OSVVM_MEMORY_ALERTLOG_ID&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ReportMode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;AlertLogReportModeType&nbsp;&nbsp;:=&nbsp;ENABLED&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Search&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;NameSearchType&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:=&nbsp;PRIVATE_NAME&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PrintParent&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;AlertLogPrintParentType&nbsp;:=&nbsp;PRINT_NAME_AND_PARENT\n&nbsp;&nbsp;&nbsp;&nbsp;)&nbsp;return&nbsp;integer&nbsp;is&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;NameID&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;integer&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;ResolvedSearch&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;NameSearchType&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;ResolvedPrintParent&nbsp;:&nbsp;AlertLogPrintParentType&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ResolvedSearch&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:=&nbsp;ResolveSearch&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(ParentID&nbsp;/=&nbsp;OSVVM_MEMORY_ALERTLOG_ID,&nbsp;Search)&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ResolvedPrintParent&nbsp;:=&nbsp;ResolvePrintParent(ParentID&nbsp;/=&nbsp;OSVVM_MEMORY_ALERTLOG_ID,&nbsp;PrintParent)&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;NameID&nbsp;:=&nbsp;LocalNameStore.find(Name,&nbsp;ParentID,&nbsp;ResolvedSearch)&nbsp;;&nbsp;\n&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;Share&nbsp;the&nbsp;memory&nbsp;if&nbsp;they&nbsp;match\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;NameID&nbsp;/=&nbsp;ID_NOT_FOUND.ID&nbsp;then\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;MemStructPtr(NumItems).MemArrayPtr&nbsp;/=&nbsp;NULL&nbsp;then&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;Found&nbsp;ID&nbsp;and&nbsp;structure&nbsp;exists,&nbsp;does&nbsp;structure&nbsp;match?\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AlertIf(MemStructPtr(NumItems).AlertLogID,&nbsp;AddrWidth&nbsp;/=&nbsp;MemStructPtr(NameID).AddrWidth,&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;NewID:&nbsp;AddrWidth:&nbsp;&quot;&nbsp;&amp;&nbsp;to_string(AddrWidth)&nbsp;&amp;&nbsp;&quot;&nbsp;/=&nbsp;Existing&nbsp;AddrWidth:&nbsp;&quot;&nbsp;&nbsp;&amp;&nbsp;to_string(MemStructPtr(NameID).AddrWidth),&nbsp;FAILURE);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AlertIf(MemStructPtr(NumItems).AlertLogID,&nbsp;DataWidth&nbsp;/=&nbsp;MemStructPtr(NameID).DataWidth,&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;NewID:&nbsp;DataWidth:&nbsp;&quot;&nbsp;&amp;&nbsp;to_string(DataWidth)&nbsp;&amp;&nbsp;&quot;&nbsp;/=&nbsp;Existing&nbsp;DataWidth:&nbsp;&quot;&nbsp;&nbsp;&amp;&nbsp;to_string(MemStructPtr(NameID).DataWidth),&nbsp;FAILURE);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;NameStore&nbsp;IDs&nbsp;are&nbsp;issued&nbsp;sequentially&nbsp;and&nbsp;match&nbsp;MemoryID\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;Found&nbsp;ID&nbsp;and&nbsp;structure&nbsp;does&nbsp;not&nbsp;exist,&nbsp;Reconstruct&nbsp;Memory\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MemInit(NameID,&nbsp;AddrWidth,&nbsp;DataWidth)&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;if&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;NameID&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;Add&nbsp;New&nbsp;Memory&nbsp;to&nbsp;Structure&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;GrowNumberItems(MemStructPtr,&nbsp;NumItems,&nbsp;GrowAmount&nbsp;=&gt;&nbsp;1,&nbsp;MinNumItems&nbsp;=&gt;&nbsp;MIN_NUM_ITEMS)&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;Create&nbsp;AlertLogID\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MemStructPtr(NumItems).AlertLogID&nbsp;:=&nbsp;NewID(Name,&nbsp;ParentID,&nbsp;ReportMode,&nbsp;ResolvedPrintParent,&nbsp;CreateHierarchy&nbsp;=&gt;&nbsp;FALSE)&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;Construct&nbsp;Memory,&nbsp;Reports&nbsp;agains&nbsp;AlertLogID\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MemInit(NumItems,&nbsp;AddrWidth,&nbsp;DataWidth)&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;Add&nbsp;item&nbsp;to&nbsp;NameStore\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;NameID&nbsp;:=&nbsp;LocalNameStore.NewID(Name,&nbsp;ParentID,&nbsp;ResolvedSearch)&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;Check&nbsp;NameStore&nbsp;Index&nbsp;vs&nbsp;MemoryIndex\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AlertIfNotEqual(MemStructPtr(NumItems).AlertLogID,&nbsp;NameID,&nbsp;NumItems,&nbsp;&quot;MemoryStore,&nbsp;Check&nbsp;Index&nbsp;of&nbsp;LocalNameStore&nbsp;matches&nbsp;MemoryID&quot;)&nbsp;;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;NumItems&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;if&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;function&nbsp;NewID&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;PT&nbsp;Local&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;impure&nbsp;function&nbsp;IdOutOfRange(\n&nbsp;&nbsp;&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;ID&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;in&nbsp;integer&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;Name&nbsp;&nbsp;:&nbsp;in&nbsp;string\n&nbsp;&nbsp;&nbsp;&nbsp;)&nbsp;return&nbsp;boolean&nbsp;is&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;AlertIf(OSVVM_MEMORY_ALERTLOG_ID,&nbsp;ID&nbsp;&lt;&nbsp;MemStructPtr&apos;Low&nbsp;or&nbsp;ID&nbsp;&gt;&nbsp;MemStructPtr&apos;High,&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;MemoryPkg.&quot;&nbsp;&amp;&nbsp;Name&nbsp;&amp;&nbsp;&quot;&nbsp;ID:&nbsp;&quot;&nbsp;&amp;&nbsp;to_string(ID)&nbsp;&amp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;is&nbsp;not&nbsp;in&nbsp;the&nbsp;range&nbsp;(&quot;&nbsp;&amp;&nbsp;to_string(MemStructPtr&apos;Low)&nbsp;&amp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;&nbsp;to&nbsp;&quot;&nbsp;&amp;&nbsp;to_string(MemStructPtr&apos;High)&nbsp;&amp;&nbsp;&quot;)&quot;,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FAILURE&nbsp;)&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;function&nbsp;IdOutOfRange&nbsp;;&nbsp;\n&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;Local\n&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;This&nbsp;is&nbsp;a&nbsp;temporary&nbsp;solution&nbsp;that&nbsp;works&nbsp;around&nbsp;GHDL&nbsp;issues\n&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;InitMemoryBlockType(BlockWidth,&nbsp;BaseWidth&nbsp;:&nbsp;integer)&nbsp;return&nbsp;MemBlockType&nbsp;is&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;------------------------------------------------------------\n--&nbsp;This&nbsp;keeps&nbsp;MemoryBaseType&nbsp;from&nbsp;being&nbsp;a&nbsp;generic&nbsp;type\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;BaseU&nbsp;:&nbsp;MemoryBaseType(BaseWidth-1&nbsp;downto&nbsp;0)&nbsp;:=&nbsp;InitMemoryBaseType(BaseWidth)&nbsp;;\n--!!&nbsp;GHDL&nbsp;Bug&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;BaseU&nbsp;:&nbsp;MemoryBaseType&nbsp;:=&nbsp;InitMemoryBaseType(BaseWidth)&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;MemBlockType&apos;(0&nbsp;to&nbsp;2**BlockWidth-1&nbsp;=&gt;&nbsp;BaseU)&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;function&nbsp;InitMemoryBlockType&nbsp;;&nbsp;\n&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;&nbsp;&nbsp;procedure&nbsp;MemWrite&nbsp;(&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ID&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;integer&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Addr&nbsp;&nbsp;:&nbsp;std_logic_vector&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Data&nbsp;&nbsp;:&nbsp;std_logic_vector&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;)&nbsp;is&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;BlockWidth,&nbsp;AddrWidth&nbsp;:&nbsp;integer&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;MemoryBaseWidth&nbsp;:&nbsp;integer&nbsp;;\n--&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;BlockWidth&nbsp;:&nbsp;integer&nbsp;:=&nbsp;MemStructPtr(ID).BlockWidth;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;BlockAddr,&nbsp;WordAddr&nbsp;&nbsp;:&nbsp;integer&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;alias&nbsp;aAddr&nbsp;:&nbsp;std_logic_vector&nbsp;(Addr&apos;length-1&nbsp;downto&nbsp;0)&nbsp;is&nbsp;Addr&nbsp;;&nbsp;\n--&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;subtype&nbsp;MemBlockSubType&nbsp;is&nbsp;MemBlockType(0&nbsp;to&nbsp;2**BlockWidth-1)&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;IdOutOfRange(ID,&nbsp;&quot;MemWrite&quot;)&nbsp;then&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;if&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AddrWidth&nbsp;&nbsp;:=&nbsp;MemStructPtr(ID).AddrWidth&nbsp;&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;Check&nbsp;Bounds&nbsp;of&nbsp;Address&nbsp;and&nbsp;if&nbsp;memory&nbsp;is&nbsp;initialized\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;Addr&apos;length&nbsp;&gt;&nbsp;AddrWidth&nbsp;then\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(MemStructPtr(ID).MemArrayPtr&nbsp;=&nbsp;NULL)&nbsp;then&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Alert(MemStructPtr(ID).AlertLogID,&nbsp;&quot;MemoryPkg.MemWrite:&nbsp;&nbsp;Memory&nbsp;not&nbsp;initialized,&nbsp;Write&nbsp;Ignored.&quot;,&nbsp;FAILURE)&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elsif&nbsp;aAddr(aAddr&apos;left&nbsp;downto&nbsp;AddrWidth)&nbsp;/=&nbsp;0&nbsp;then\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Alert(MemStructPtr(ID).AlertLogID,&nbsp;&quot;MemoryPkg.MemWrite:&nbsp;&nbsp;Address&nbsp;value&nbsp;&quot;&nbsp;&amp;&nbsp;to_hxstring(Addr)&nbsp;&amp;&nbsp;&quot;&nbsp;goes&nbsp;beyond&nbsp;memory&nbsp;address&nbsp;width:&nbsp;&quot;&nbsp;&amp;&nbsp;to_string(MemStructPtr(ID).AddrWidth),&nbsp;FAILURE)&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;if&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;if&nbsp;;&nbsp;\n&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;Check&nbsp;Bounds&nbsp;on&nbsp;Data\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;Data&apos;length&nbsp;/=&nbsp;MemStructPtr(ID).DataWidth&nbsp;then\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Alert(MemStructPtr(ID).AlertLogID,&nbsp;&quot;MemoryPkg.MemWrite:&nbsp;&nbsp;Data&apos;length:&nbsp;&quot;&nbsp;&amp;&nbsp;to_string(Data&apos;length)&nbsp;&amp;&nbsp;&quot;&nbsp;/=&nbsp;Memory&nbsp;Data&nbsp;Width:&nbsp;&quot;&nbsp;&amp;&nbsp;to_string(MemStructPtr(ID).DataWidth),&nbsp;FAILURE)&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;if&nbsp;;&nbsp;\n&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;is_X(&nbsp;Addr&nbsp;)&nbsp;then\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Alert(MemStructPtr(ID).AlertLogID,&nbsp;&quot;MemoryPkg.MemWrite:&nbsp;&nbsp;Address&nbsp;X,&nbsp;Write&nbsp;Ignored.&quot;)&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;if&nbsp;;&nbsp;\n&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;BlockWidth&nbsp;:=&nbsp;MemStructPtr(ID).BlockWidth&nbsp;;&nbsp;\n&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;Slice&nbsp;out&nbsp;upper&nbsp;address&nbsp;to&nbsp;form&nbsp;block&nbsp;address\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;aAddr&apos;high&nbsp;&gt;=&nbsp;BlockWidth&nbsp;then\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;BlockAddr&nbsp;:=&nbsp;to_integer(aAddr(aAddr&apos;high&nbsp;downto&nbsp;BlockWidth))&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;BlockAddr&nbsp;&nbsp;:=&nbsp;0&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;if&nbsp;;&nbsp;\n&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MemoryBaseWidth&nbsp;:=&nbsp;MemStructPtr(ID).MemoryBaseTypeWidth&nbsp;;&nbsp;\n&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;If&nbsp;empty,&nbsp;allocate&nbsp;a&nbsp;memory&nbsp;block\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(MemStructPtr(ID).MemArrayPtr(BlockAddr)&nbsp;=&nbsp;NULL)&nbsp;then&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MemStructPtr(ID).MemArrayPtr(BlockAddr)&nbsp;:=&nbsp;new&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MemBlockType&apos;(InitMemoryBlockType(BlockWidth,&nbsp;MemoryBaseWidth))&nbsp;;\n&nbsp;\n--&nbsp;Long&nbsp;term,&nbsp;we&nbsp;need&nbsp;the&nbsp;first&nbsp;one&nbsp;to&nbsp;allow&nbsp;transition&nbsp;of&nbsp;MemoryBaseType&nbsp;to&nbsp;a&nbsp;generic.\n--!!&nbsp;GHDL&nbsp;Bug&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MemStructPtr(ID).MemArrayPtr(BlockAddr)&nbsp;:=&nbsp;new&nbsp;\n--!!&nbsp;GHDL&nbsp;Bug&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MemBlockType&apos;(0&nbsp;to&nbsp;2**BlockWidth-1&nbsp;=&gt;&nbsp;&nbsp;InitMemoryBaseType(MemoryBaseWidth)&nbsp;)&nbsp;;\n--&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MemStructPtr(ID).MemArrayPtr(BlockAddr)&nbsp;:=&nbsp;new&nbsp;\n--&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MemBlockType(0&nbsp;to&nbsp;2**BlockWidth-1)(MemoryBaseWidth-1&nbsp;downto&nbsp;0)&nbsp;;\n--!!&nbsp;GHDL&nbsp;Bug&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MemStructPtr(ID).MemArrayPtr(BlockAddr).all&nbsp;:=&nbsp;(0&nbsp;to&nbsp;2**BlockWidth-1&nbsp;=&gt;&nbsp;InitMemoryBaseType(MemoryBaseWidth));\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;if&nbsp;;&nbsp;\n&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;Address&nbsp;of&nbsp;a&nbsp;word&nbsp;within&nbsp;a&nbsp;block\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;WordAddr&nbsp;&nbsp;:=&nbsp;to_integer(aAddr(BlockWidth&nbsp;-1&nbsp;downto&nbsp;0))&nbsp;;\n&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;Write&nbsp;to&nbsp;BlockAddr,&nbsp;WordAddr\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MemStructPtr(ID).MemArrayPtr(BlockAddr)(WordAddr)&nbsp;:=&nbsp;ToMemoryBaseType(Data,&nbsp;MemoryBaseWidth)&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;procedure&nbsp;MemWrite&nbsp;;&nbsp;\n&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;&nbsp;&nbsp;procedure&nbsp;MemRead&nbsp;(&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ID&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;in&nbsp;integer&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Addr&nbsp;&nbsp;:&nbsp;in&nbsp;&nbsp;std_logic_vector&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Data&nbsp;&nbsp;:&nbsp;out&nbsp;std_logic_vector&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;)&nbsp;is\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;BlockWidth,&nbsp;AddrWidth&nbsp;:&nbsp;integer&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;BlockAddr,&nbsp;WordAddr&nbsp;&nbsp;:&nbsp;integer&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;alias&nbsp;aAddr&nbsp;:&nbsp;std_logic_vector&nbsp;(Addr&apos;length-1&nbsp;downto&nbsp;0)&nbsp;is&nbsp;Addr&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;IdOutOfRange(ID,&nbsp;&quot;MemRead&quot;)&nbsp;then&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;if&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AddrWidth&nbsp;:=&nbsp;MemStructPtr(ID).AddrWidth&nbsp;;\n&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;Check&nbsp;Bounds&nbsp;of&nbsp;Address&nbsp;and&nbsp;if&nbsp;memory&nbsp;is&nbsp;initialized\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;Addr&apos;length&nbsp;&gt;&nbsp;AddrWidth&nbsp;then\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Data&nbsp;:=&nbsp;(Data&apos;range&nbsp;=&gt;&nbsp;&apos;U&apos;)&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(MemStructPtr(ID).MemArrayPtr&nbsp;=&nbsp;NULL)&nbsp;then&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Alert(MemStructPtr(ID).AlertLogID,&nbsp;&quot;MemoryPkg.MemRead:&nbsp;&nbsp;Memory&nbsp;not&nbsp;initialized.&nbsp;Returning&nbsp;U&quot;,&nbsp;FAILURE)&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elsif&nbsp;aAddr(aAddr&apos;left&nbsp;downto&nbsp;AddrWidth)&nbsp;/=&nbsp;0&nbsp;then\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Alert(MemStructPtr(ID).AlertLogID,&nbsp;&quot;MemoryPkg.MemRead:&nbsp;&nbsp;Address&nbsp;value&nbsp;&quot;&nbsp;&amp;&nbsp;to_hxstring(Addr)&nbsp;&amp;&nbsp;&quot;&nbsp;goes&nbsp;beyond&nbsp;memory&nbsp;address&nbsp;width:&nbsp;&quot;&nbsp;&amp;&nbsp;to_string(MemStructPtr(ID).AddrWidth),&nbsp;FAILURE)&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;if&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;if&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;Check&nbsp;Bounds&nbsp;on&nbsp;Data\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;Data&apos;length&nbsp;/=&nbsp;MemStructPtr(ID).DataWidth&nbsp;then\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Alert(MemStructPtr(ID).AlertLogID,&nbsp;&quot;MemoryPkg.MemRead:&nbsp;&nbsp;Data&apos;length:&nbsp;&quot;&nbsp;&amp;&nbsp;to_string(Data&apos;length)&nbsp;&amp;&nbsp;&quot;&nbsp;/=&nbsp;Memory&nbsp;Data&nbsp;Width:&nbsp;&quot;&nbsp;&amp;&nbsp;to_string(MemStructPtr(ID).DataWidth),&nbsp;FAILURE)&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Data&nbsp;:=&nbsp;(Data&apos;range&nbsp;=&gt;&nbsp;&apos;U&apos;)&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;if&nbsp;;&nbsp;\n&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;If&nbsp;Addr&nbsp;X,&nbsp;data&nbsp;=&nbsp;X\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;is_X(&nbsp;aAddr&nbsp;)&nbsp;then\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Data&nbsp;:=&nbsp;(Data&apos;range&nbsp;=&gt;&nbsp;&apos;X&apos;)&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;if&nbsp;;&nbsp;\n&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;BlockWidth&nbsp;:=&nbsp;MemStructPtr(ID).BlockWidth&nbsp;;\n&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;Slice&nbsp;out&nbsp;upper&nbsp;address&nbsp;to&nbsp;form&nbsp;block&nbsp;address\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;aAddr&apos;high&nbsp;&gt;=&nbsp;BlockWidth&nbsp;then\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;BlockAddr&nbsp;:=&nbsp;to_integer(aAddr(aAddr&apos;high&nbsp;downto&nbsp;BlockWidth))&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;BlockAddr&nbsp;&nbsp;:=&nbsp;0&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;if&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;Empty&nbsp;Block,&nbsp;return&nbsp;all&nbsp;U\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(MemStructPtr(ID).MemArrayPtr(BlockAddr)&nbsp;=&nbsp;NULL)&nbsp;then&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Data&nbsp;:=&nbsp;(Data&apos;range&nbsp;=&gt;&nbsp;&apos;U&apos;)&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;if&nbsp;;&nbsp;\n&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;Address&nbsp;of&nbsp;a&nbsp;word&nbsp;within&nbsp;a&nbsp;block\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;WordAddr&nbsp;:=&nbsp;to_integer(aAddr(BlockWidth&nbsp;-1&nbsp;downto&nbsp;0))&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Data&nbsp;:=&nbsp;FromMemoryBaseType(MemStructPtr(ID).MemArrayPtr(BlockAddr)(WordAddr),&nbsp;Data&apos;length)&nbsp;;&nbsp;\n&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;procedure&nbsp;MemRead&nbsp;;&nbsp;\n&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;&nbsp;&nbsp;impure&nbsp;function&nbsp;MemRead&nbsp;(&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ID&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;integer&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Addr&nbsp;&nbsp;:&nbsp;std_logic_vector&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;)&nbsp;return&nbsp;std_logic_vector&nbsp;is\n&nbsp;&nbsp;&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;ID_CHECK_OK&nbsp;:&nbsp;boolean&nbsp;:=&nbsp;IdOutOfRange(ID,&nbsp;&quot;MemRead&nbsp;function&quot;)&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;DATA_WIDTH&nbsp;:&nbsp;integer&nbsp;:=&nbsp;MemStructPtr(ID).DataWidth&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;Data&nbsp;&nbsp;:&nbsp;std_logic_vector(DATA_WIDTH-1&nbsp;downto&nbsp;0)&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MemRead(ID,&nbsp;Addr,&nbsp;Data)&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;Data&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;function&nbsp;MemRead&nbsp;;&nbsp;\n&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;&nbsp;&nbsp;procedure&nbsp;MemErase(ID&nbsp;:&nbsp;integer)&nbsp;is&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;Erase&nbsp;the&nbsp;memory,&nbsp;but&nbsp;not&nbsp;the&nbsp;array&nbsp;of&nbsp;pointers\n&nbsp;&nbsp;&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;IdOutOfRange(ID,&nbsp;&quot;MemErase&quot;)&nbsp;then&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;if&nbsp;;&nbsp;\n&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;BlockAddr&nbsp;in&nbsp;MemStructPtr(ID).MemArrayPtr&apos;range&nbsp;loop&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(MemStructPtr(ID).MemArrayPtr(BlockAddr)&nbsp;/=&nbsp;NULL)&nbsp;then&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;deallocate&nbsp;(MemStructPtr(ID).MemArrayPtr(BlockAddr))&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;if&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;loop&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;procedure&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;&nbsp;&nbsp;impure&nbsp;function&nbsp;GetAlertLogID&nbsp;(ID&nbsp;:&nbsp;integer)&nbsp;return&nbsp;AlertLogIDType&nbsp;is\n&nbsp;&nbsp;&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;IdOutOfRange(ID,&nbsp;&quot;MemErase&quot;)&nbsp;then&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;ALERTLOG_ID_NOT_FOUND&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;MemStructPtr(ID).AlertLogID&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;if&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;function&nbsp;GetAlertLogID&nbsp;;\n&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;PT&nbsp;Local\n&nbsp;&nbsp;&nbsp;&nbsp;procedure&nbsp;FileReadX&nbsp;(\n&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;Hexadecimal&nbsp;or&nbsp;Binary&nbsp;File&nbsp;Read&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ID&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;integer&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FileName&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;string&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DataFormat&nbsp;&nbsp;&nbsp;:&nbsp;FileFormatType&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;StartAddr&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;std_logic_vector&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;EndAddr&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;std_logic_vector\n&nbsp;&nbsp;&nbsp;&nbsp;)&nbsp;is\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;ADDR_WIDTH&nbsp;:&nbsp;integer&nbsp;:=&nbsp;MemStructPtr(ID).AddrWidth&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;DATA_WIDTH&nbsp;:&nbsp;integer&nbsp;:=&nbsp;MemStructPtr(ID).DataWidth&nbsp;;&nbsp;\n--&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;TemplateRange&nbsp;:&nbsp;std_logic_vector&nbsp;:=&nbsp;(ADDR_WIDTH-1&nbsp;downto&nbsp;0&nbsp;=&gt;&nbsp;&apos;0&apos;)&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;Format:&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;&nbsp;@hh..h&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;Address&nbsp;in&nbsp;hex\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;&nbsp;hhh_XX_ZZ&nbsp;&nbsp;--&nbsp;data&nbsp;values&nbsp;in&nbsp;hex&nbsp;-&nbsp;space&nbsp;delimited&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;&nbsp;&quot;--&quot;&nbsp;or&nbsp;&quot;//&quot;&nbsp;--&nbsp;comments\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;file&nbsp;MemFile&nbsp;:&nbsp;text&nbsp;open&nbsp;READ_MODE&nbsp;is&nbsp;FileName&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;Addr&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;std_logic_vector(ADDR_WIDTH&nbsp;-&nbsp;1&nbsp;downto&nbsp;0)&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;SmallAddr&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;std_logic_vector(ADDR_WIDTH&nbsp;-&nbsp;1&nbsp;downto&nbsp;0)&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;BigAddr&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;std_logic_vector(ADDR_WIDTH&nbsp;-&nbsp;1&nbsp;downto&nbsp;0)&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;Data&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;std_logic_vector(DATA_WIDTH&nbsp;-&nbsp;1&nbsp;downto&nbsp;0)&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;LineNum&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;natural&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;ItemNum&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;natural&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;AddrInc&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;std_logic_vector(ADDR_WIDTH&nbsp;-&nbsp;1&nbsp;downto&nbsp;0)&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;buf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;line&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;ReadValid&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;boolean&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;Empty&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;boolean&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;MultiLineComment&nbsp;:&nbsp;boolean&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;NextChar&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;character&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;StrLen&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;integer&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MultiLineComment&nbsp;:=&nbsp;FALSE&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;StartAddr&apos;length&nbsp;/=&nbsp;ADDR_WIDTH&nbsp;and&nbsp;EndAddr&apos;length&nbsp;/=&nbsp;ADDR_WIDTH&nbsp;then\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(MemStructPtr(ID).MemArrayPtr&nbsp;=&nbsp;NULL)&nbsp;then&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Alert(MemStructPtr(ID).AlertLogID,&nbsp;&quot;MemoryPkg.FileReadX:&nbsp;&nbsp;Memory&nbsp;not&nbsp;initialized,&nbsp;FileRead&nbsp;Ignored.&quot;,&nbsp;FAILURE)&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Alert(MemStructPtr(ID).AlertLogID,&nbsp;&quot;MemoryPkg.FileReadX:&nbsp;&nbsp;Addr&apos;length:&nbsp;&quot;&nbsp;&amp;&nbsp;to_string(Addr&apos;length)&nbsp;&amp;&nbsp;&quot;&nbsp;/=&nbsp;Memory&nbsp;Address&nbsp;Width:&nbsp;&quot;&nbsp;&amp;&nbsp;to_string(ADDR_WIDTH),&nbsp;FAILURE)&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;if&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;if&nbsp;;&nbsp;\n&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Addr&nbsp;&nbsp;&nbsp;&nbsp;:=&nbsp;StartAddr&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;LineNum&nbsp;:=&nbsp;0&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;StartAddr&nbsp;&lt;=&nbsp;EndAddr&nbsp;then&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SmallAddr&nbsp;:=&nbsp;StartAddr&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;BigAddr&nbsp;&nbsp;&nbsp;:=&nbsp;EndAddr&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AddrInc&nbsp;&nbsp;&nbsp;:=&nbsp;(ADDR_WIDTH&nbsp;-1&nbsp;downto&nbsp;0&nbsp;=&gt;&nbsp;&apos;0&apos;)&nbsp;+&nbsp;1&nbsp;;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SmallAddr&nbsp;:=&nbsp;EndAddr&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;BigAddr&nbsp;&nbsp;&nbsp;:=&nbsp;StartAddr&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AddrInc&nbsp;&nbsp;&nbsp;:=&nbsp;(others&nbsp;=&gt;&nbsp;&apos;1&apos;)&nbsp;;&nbsp;&nbsp;--&nbsp;-1\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;if;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ReadLineLoop&nbsp;:&nbsp;while&nbsp;not&nbsp;EndFile(MemFile)&nbsp;loop\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ReadLine(MemFile,&nbsp;buf)&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;LineNum&nbsp;:=&nbsp;LineNum&nbsp;+&nbsp;1&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ItemNum&nbsp;:=&nbsp;0&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ItemLoop&nbsp;:&nbsp;loop&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;EmptyOrCommentLine(buf,&nbsp;Empty,&nbsp;MultiLineComment)&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;exit&nbsp;ItemLoop&nbsp;when&nbsp;Empty&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ItemNum&nbsp;:=&nbsp;ItemNum&nbsp;+&nbsp;1&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;NextChar&nbsp;:=&nbsp;buf.all(buf&apos;left)&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(NextChar&nbsp;=&nbsp;&apos;@&apos;)&nbsp;then&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;Get&nbsp;Address\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;read(buf,&nbsp;NextChar)&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ReadHexToken(buf,&nbsp;Addr,&nbsp;StrLen)&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;exit&nbsp;ReadLineLoop&nbsp;when&nbsp;AlertIf(MemStructPtr(ID).AlertLogID,&nbsp;StrLen&nbsp;=&nbsp;0,&nbsp;&quot;MemoryPkg.FileReadX:&nbsp;Address&nbsp;length&nbsp;0&nbsp;on&nbsp;line:&nbsp;&quot;&nbsp;&amp;&nbsp;to_string(LineNum),&nbsp;FAILURE)&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;exit&nbsp;ItemLoop&nbsp;when&nbsp;AlertIf(MemStructPtr(ID).AlertLogID,&nbsp;Addr&nbsp;&lt;&nbsp;SmallAddr,&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;MemoryPkg.FileReadX:&nbsp;Address&nbsp;in&nbsp;file:&nbsp;&quot;&nbsp;&amp;&nbsp;to_hxstring(Addr)&nbsp;&amp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;&nbsp;&lt;&nbsp;StartAddr:&nbsp;&quot;&nbsp;&amp;&nbsp;to_hxstring(StartAddr)&nbsp;&amp;&nbsp;&quot;&nbsp;on&nbsp;line:&nbsp;&quot;&nbsp;&amp;&nbsp;to_string(LineNum))&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;exit&nbsp;ItemLoop&nbsp;when&nbsp;AlertIf(MemStructPtr(ID).AlertLogID,&nbsp;Addr&nbsp;&gt;&nbsp;BigAddr,&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;MemoryPkg.FileReadX:&nbsp;Address&nbsp;in&nbsp;file:&nbsp;&quot;&nbsp;&amp;&nbsp;to_hxstring(Addr)&nbsp;&amp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;&nbsp;&gt;&nbsp;EndAddr:&nbsp;&quot;&nbsp;&amp;&nbsp;to_hxstring(BigAddr)&nbsp;&amp;&nbsp;&quot;&nbsp;on&nbsp;line:&nbsp;&quot;&nbsp;&amp;&nbsp;to_string(LineNum))&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elsif&nbsp;DataFormat&nbsp;=&nbsp;HEX&nbsp;and&nbsp;IsHexOrStdLogic(NextChar)&nbsp;then&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;Get&nbsp;Hex&nbsp;Data\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ReadHexToken(buf,&nbsp;data,&nbsp;StrLen)&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;exit&nbsp;ReadLineLoop&nbsp;when&nbsp;AlertIfNot(MemStructPtr(ID).AlertLogID,&nbsp;StrLen&nbsp;&gt;&nbsp;0,&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;MemoryPkg.FileReadH:&nbsp;Error&nbsp;while&nbsp;reading&nbsp;data&nbsp;on&nbsp;line:&nbsp;&quot;&nbsp;&amp;&nbsp;to_string(LineNum)&nbsp;&amp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;&nbsp;&nbsp;Item&nbsp;number:&nbsp;&quot;&nbsp;&amp;&nbsp;to_string(ItemNum),&nbsp;FAILURE)&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;log(MemStructPtr(ID).AlertLogID,&nbsp;&quot;MemoryPkg.FileReadX:&nbsp;&nbsp;MemWrite(Addr&nbsp;=&gt;&nbsp;&quot;&nbsp;&amp;&nbsp;to_hxstring(Addr)&nbsp;&amp;&nbsp;&quot;,&nbsp;Data&nbsp;=&gt;&nbsp;&quot;&nbsp;&amp;&nbsp;to_hxstring(Data)&nbsp;&amp;&nbsp;&quot;)&quot;,&nbsp;DEBUG)&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MemWrite(ID,&nbsp;Addr,&nbsp;data)&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Addr&nbsp;:=&nbsp;Addr&nbsp;+&nbsp;AddrInc&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elsif&nbsp;DataFormat&nbsp;=&nbsp;BINARY&nbsp;and&nbsp;isstd_logic(NextChar)&nbsp;then&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;Get&nbsp;Binary&nbsp;Data\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;read(buf,&nbsp;data,&nbsp;ReadValid)&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ReadBinaryToken(buf,&nbsp;data,&nbsp;StrLen)&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;exit&nbsp;ReadLineLoop&nbsp;when&nbsp;AlertIfNot(MemStructPtr(ID).AlertLogID,&nbsp;ReadValid,&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;exit&nbsp;ReadLineLoop&nbsp;when&nbsp;AlertIfNot(MemStructPtr(ID).AlertLogID,&nbsp;StrLen&nbsp;&gt;&nbsp;0,&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;MemoryPkg.FileReadB:&nbsp;Error&nbsp;while&nbsp;reading&nbsp;data&nbsp;on&nbsp;line:&nbsp;&quot;&nbsp;&amp;&nbsp;to_string(LineNum)&nbsp;&amp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;&nbsp;&nbsp;Item&nbsp;number:&nbsp;&quot;&nbsp;&amp;&nbsp;to_string(ItemNum),&nbsp;FAILURE)&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;log(MemStructPtr(ID).AlertLogID,&nbsp;&quot;MemoryPkg.FileReadX:&nbsp;&nbsp;MemWrite(Addr&nbsp;=&gt;&nbsp;&quot;&nbsp;&amp;&nbsp;to_hxstring(Addr)&nbsp;&amp;&nbsp;&quot;,&nbsp;Data&nbsp;=&gt;&nbsp;&quot;&nbsp;&amp;&nbsp;to_string(Data)&nbsp;&amp;&nbsp;&quot;)&quot;,&nbsp;DEBUG)&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MemWrite(ID,&nbsp;Addr,&nbsp;data)&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Addr&nbsp;:=&nbsp;Addr&nbsp;+&nbsp;AddrInc&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;NextChar&nbsp;=&nbsp;LF&nbsp;or&nbsp;NextChar&nbsp;=&nbsp;CR&nbsp;then&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;If&nbsp;LF&nbsp;or&nbsp;CR,&nbsp;silently&nbsp;skip&nbsp;the&nbsp;character&nbsp;(DOS&nbsp;file&nbsp;in&nbsp;Unix)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;read(buf,&nbsp;NextChar)&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;invalid&nbsp;Text,&nbsp;issue&nbsp;warning&nbsp;and&nbsp;skip&nbsp;rest&nbsp;of&nbsp;line\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Alert(MemStructPtr(ID).AlertLogID,&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;MemoryPkg.FileReadX:&nbsp;Invalid&nbsp;text&nbsp;on&nbsp;line:&nbsp;&quot;&nbsp;&amp;&nbsp;to_string(LineNum)&nbsp;&amp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;&nbsp;&nbsp;Item:&nbsp;&quot;&nbsp;&amp;&nbsp;to_string(ItemNum)&nbsp;&amp;&nbsp;&quot;.&nbsp;&nbsp;Skipping&nbsp;text:&nbsp;&quot;&nbsp;&amp;&nbsp;buf.all)&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;exit&nbsp;ItemLoop&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;if&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;if&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;loop&nbsp;ItemLoop&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;loop&nbsp;ReadLineLoop&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n--&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;must&nbsp;read&nbsp;EndAddr-StartAddr&nbsp;number&nbsp;of&nbsp;words&nbsp;if&nbsp;both&nbsp;start&nbsp;and&nbsp;end&nbsp;specified\n--&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(StartAddr&nbsp;/=&nbsp;0&nbsp;or&nbsp;(not&nbsp;EndAddr)&nbsp;/=&nbsp;0)&nbsp;and&nbsp;(Addr&nbsp;/=&nbsp;EndAddr)&nbsp;then&nbsp;\n--&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Alert(&quot;MemoryPkg.FileReadH:&nbsp;insufficient&nbsp;data&nbsp;values&quot;,&nbsp;WARNING)&nbsp;;&nbsp;\n--&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;if&nbsp;;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;file_close(MemFile)&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;FileReadX&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;&nbsp;&nbsp;procedure&nbsp;FileReadH&nbsp;(\n&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;Hexadecimal&nbsp;File&nbsp;Read&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ID&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;integer&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FileName&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;string&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;StartAddr&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;std_logic_vector&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;EndAddr&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;std_logic_vector\n&nbsp;&nbsp;&nbsp;&nbsp;)&nbsp;is\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;ID_CHECK_OK&nbsp;:&nbsp;boolean&nbsp;:=&nbsp;IdOutOfRange(ID,&nbsp;&quot;FileReadH&quot;)&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FileReadX(ID,&nbsp;FileName,&nbsp;HEX,&nbsp;StartAddr,&nbsp;EndAddr)&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;FileReadH&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;Hexadecimal&nbsp;File&nbsp;Read&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;procedure&nbsp;FileReadH&nbsp;(\n&nbsp;&nbsp;&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ID&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;integer&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FileName&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;string&nbsp;;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;StartAddr&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;std_logic_vector\n&nbsp;&nbsp;&nbsp;&nbsp;)&nbsp;is\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;ID_CHECK_OK&nbsp;:&nbsp;boolean&nbsp;:=&nbsp;IdOutOfRange(ID,&nbsp;&quot;FileReadH&quot;)&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;ADDR_WIDTH&nbsp;&nbsp;:&nbsp;integer&nbsp;:=&nbsp;MemStructPtr(ID).AddrWidth&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;EndAddr&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;std_logic_vector&nbsp;:=&nbsp;(ADDR_WIDTH&nbsp;-&nbsp;1&nbsp;downto&nbsp;0&nbsp;=&gt;&nbsp;&apos;1&apos;)&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FileReadX(ID,&nbsp;FileName,&nbsp;HEX,&nbsp;StartAddr,&nbsp;EndAddr)&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;FileReadH&nbsp;;\n&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;Hexadecimal&nbsp;File&nbsp;Read&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;procedure&nbsp;FileReadH&nbsp;(\n&nbsp;&nbsp;&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ID&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;integer&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FileName&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;string&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;)&nbsp;is&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;ID_CHECK_OK&nbsp;:&nbsp;boolean&nbsp;:=&nbsp;IdOutOfRange(ID,&nbsp;&quot;FileReadH&quot;)&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;ADDR_WIDTH&nbsp;&nbsp;:&nbsp;integer&nbsp;:=&nbsp;MemStructPtr(ID).AddrWidth&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;StartAddr&nbsp;&nbsp;&nbsp;:&nbsp;std_logic_vector&nbsp;:=&nbsp;(ADDR_WIDTH&nbsp;-&nbsp;1&nbsp;downto&nbsp;0&nbsp;=&gt;&nbsp;&apos;0&apos;)&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;EndAddr&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;std_logic_vector&nbsp;:=&nbsp;(ADDR_WIDTH&nbsp;-&nbsp;1&nbsp;downto&nbsp;0&nbsp;=&gt;&nbsp;&apos;1&apos;)&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FileReadX(ID,&nbsp;FileName,&nbsp;HEX,&nbsp;StartAddr,&nbsp;EndAddr)&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;FileReadH&nbsp;;&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;Binary&nbsp;File&nbsp;Read&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;procedure&nbsp;FileReadB&nbsp;(\n&nbsp;&nbsp;&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ID&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;integer&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FileName&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;string&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;StartAddr&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;std_logic_vector&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;EndAddr&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;std_logic_vector\n&nbsp;&nbsp;&nbsp;&nbsp;)&nbsp;is\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;ID_CHECK_OK&nbsp;:&nbsp;boolean&nbsp;:=&nbsp;IdOutOfRange(ID,&nbsp;&quot;FileReadB&quot;)&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FileReadX(ID,&nbsp;FileName,&nbsp;BINARY,&nbsp;StartAddr,&nbsp;EndAddr)&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;FileReadB&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;Binary&nbsp;File&nbsp;Read&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;procedure&nbsp;FileReadB&nbsp;(\n&nbsp;&nbsp;&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ID&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;integer&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FileName&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;string&nbsp;;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;StartAddr&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;std_logic_vector\n&nbsp;&nbsp;&nbsp;&nbsp;)&nbsp;is\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;ID_CHECK_OK&nbsp;:&nbsp;boolean&nbsp;:=&nbsp;IdOutOfRange(ID,&nbsp;&quot;FileReadB&quot;)&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;ADDR_WIDTH&nbsp;&nbsp;:&nbsp;integer&nbsp;:=&nbsp;MemStructPtr(ID).AddrWidth&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;EndAddr&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;std_logic_vector&nbsp;:=&nbsp;(ADDR_WIDTH&nbsp;-&nbsp;1&nbsp;downto&nbsp;0&nbsp;=&gt;&nbsp;&apos;1&apos;)&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;begin&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FileReadX(ID,&nbsp;FileName,&nbsp;BINARY,&nbsp;StartAddr,&nbsp;EndAddr)&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;FileReadB&nbsp;;\n&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;Binary&nbsp;File&nbsp;Read&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;procedure&nbsp;FileReadB&nbsp;(\n&nbsp;&nbsp;&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ID&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;integer&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FileName&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;string&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;)&nbsp;is&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;ID_CHECK_OK&nbsp;:&nbsp;boolean&nbsp;:=&nbsp;IdOutOfRange(ID,&nbsp;&quot;FileReadB&quot;)&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;ADDR_WIDTH&nbsp;&nbsp;:&nbsp;integer&nbsp;:=&nbsp;MemStructPtr(ID).AddrWidth&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;StartAddr&nbsp;&nbsp;&nbsp;:&nbsp;std_logic_vector&nbsp;:=&nbsp;(ADDR_WIDTH&nbsp;-&nbsp;1&nbsp;downto&nbsp;0&nbsp;=&gt;&nbsp;&apos;0&apos;)&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;EndAddr&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;std_logic_vector&nbsp;:=&nbsp;(ADDR_WIDTH&nbsp;-&nbsp;1&nbsp;downto&nbsp;0&nbsp;=&gt;&nbsp;&apos;1&apos;)&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FileReadX(ID,&nbsp;FileName,&nbsp;BINARY,&nbsp;StartAddr,&nbsp;EndAddr)&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;FileReadB&nbsp;;&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;PT&nbsp;Local\n&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;Hexadecimal&nbsp;or&nbsp;Binary&nbsp;File&nbsp;Write&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;procedure&nbsp;FileWriteX&nbsp;(\n&nbsp;&nbsp;&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ID&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;integer&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FileName&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;string&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DataFormat&nbsp;&nbsp;&nbsp;:&nbsp;FileFormatType&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;StartAddr&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;std_logic_vector&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;EndAddr&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;std_logic_vector\n&nbsp;&nbsp;&nbsp;&nbsp;)&nbsp;is\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;ADDR_WIDTH&nbsp;&nbsp;:&nbsp;integer&nbsp;:=&nbsp;MemStructPtr(ID).AddrWidth&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;DATA_WIDTH&nbsp;&nbsp;:&nbsp;integer&nbsp;:=&nbsp;MemStructPtr(ID).DataWidth&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;BLOCK_WIDTH&nbsp;:&nbsp;integer&nbsp;:=&nbsp;MemStructPtr(ID).BlockWidth&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;Format:&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;&nbsp;@hh..h&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;Address&nbsp;in&nbsp;hex\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;&nbsp;hhhhh&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;data&nbsp;one&nbsp;per&nbsp;line&nbsp;in&nbsp;either&nbsp;hex&nbsp;or&nbsp;binary&nbsp;as&nbsp;specified&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;file&nbsp;MemFile&nbsp;:&nbsp;text&nbsp;open&nbsp;WRITE_MODE&nbsp;is&nbsp;FileName&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;alias&nbsp;normStartAddr&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;std_logic_vector(StartAddr&apos;length-1&nbsp;downto&nbsp;0)&nbsp;is&nbsp;StartAddr&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;alias&nbsp;normEndAddr&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;std_logic_vector(EndAddr&apos;length-1&nbsp;downto&nbsp;0)&nbsp;is&nbsp;EndAddr&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;StartBlockAddr&nbsp;:&nbsp;natural&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;EndBlockAddr&nbsp;&nbsp;&nbsp;:&nbsp;natural&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;StartWordAddr&nbsp;&nbsp;:&nbsp;natural&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;EndWordAddr&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;natural&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;FoundData&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;boolean&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;buf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;line&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;Data&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;std_logic_vector(DATA_WIDTH-1&nbsp;downto&nbsp;0)&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;AllU&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;std_logic_vector&nbsp;:=&nbsp;(DATA_WIDTH-1&nbsp;downto&nbsp;0&nbsp;=&gt;&nbsp;&apos;U&apos;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;StartAddr&apos;length&nbsp;/=&nbsp;ADDR_WIDTH&nbsp;and&nbsp;EndAddr&apos;length&nbsp;/=&nbsp;ADDR_WIDTH&nbsp;then\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;Check&nbsp;StartAddr&nbsp;and&nbsp;EndAddr&nbsp;Widths&nbsp;and&nbsp;Memory&nbsp;not&nbsp;initialized\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(MemStructPtr(ID).MemArrayPtr&nbsp;=&nbsp;NULL)&nbsp;then&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Alert(MemStructPtr(ID).AlertLogID,&nbsp;&quot;MemoryPkg.FileWriteX:&nbsp;&nbsp;Memory&nbsp;not&nbsp;initialized,&nbsp;FileRead&nbsp;Ignored.&quot;,&nbsp;FAILURE)&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AlertIf(MemStructPtr(ID).AlertLogID,&nbsp;StartAddr&apos;length&nbsp;/=&nbsp;ADDR_WIDTH,&nbsp;&quot;MemoryPkg.FileWriteX:&nbsp;&nbsp;StartAddr&apos;length:&nbsp;&quot;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;&nbsp;to_string(StartAddr&apos;length)&nbsp;&amp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;&nbsp;/=&nbsp;Memory&nbsp;Address&nbsp;Width:&nbsp;&quot;&nbsp;&amp;&nbsp;to_string(ADDR_WIDTH),&nbsp;FAILURE)&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AlertIf(MemStructPtr(ID).AlertLogID,&nbsp;EndAddr&apos;length&nbsp;/=&nbsp;ADDR_WIDTH,&nbsp;&quot;MemoryPkg.FileWriteX:&nbsp;&nbsp;EndAddr&apos;length:&nbsp;&quot;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;&nbsp;to_string(EndAddr&apos;length)&nbsp;&amp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;&nbsp;/=&nbsp;Memory&nbsp;Address&nbsp;Width:&nbsp;&quot;&nbsp;&amp;&nbsp;to_string(ADDR_WIDTH),&nbsp;FAILURE)&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;if&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;if&nbsp;;&nbsp;\n&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;StartAddr&nbsp;&gt;&nbsp;EndAddr&nbsp;then&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;Only&nbsp;support&nbsp;ascending&nbsp;addresses\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Alert(MemStructPtr(ID).AlertLogID,&nbsp;&quot;MemoryPkg.FileWriteX:&nbsp;&nbsp;StartAddr:&nbsp;&quot;&nbsp;&amp;&nbsp;to_hxstring(StartAddr)&nbsp;&amp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;&nbsp;&gt;&nbsp;EndAddr:&nbsp;&quot;&nbsp;&amp;&nbsp;to_hxstring(EndAddr),&nbsp;FAILURE)&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;if&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;Slice&nbsp;out&nbsp;upper&nbsp;address&nbsp;to&nbsp;form&nbsp;block&nbsp;address\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;ADDR_WIDTH&nbsp;&gt;=&nbsp;BLOCK_WIDTH&nbsp;then\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;StartBlockAddr&nbsp;:=&nbsp;to_integer(normStartAddr(ADDR_WIDTH-1&nbsp;downto&nbsp;BLOCK_WIDTH))&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;EndBlockAddr&nbsp;&nbsp;&nbsp;:=&nbsp;to_integer(&nbsp;&nbsp;normEndAddr(ADDR_WIDTH-1&nbsp;downto&nbsp;BLOCK_WIDTH))&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;StartBlockAddr&nbsp;&nbsp;:=&nbsp;0&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;EndBlockAddr&nbsp;&nbsp;:=&nbsp;0&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;if&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;BlockAddrLoop&nbsp;:&nbsp;for&nbsp;BlockAddr&nbsp;in&nbsp;StartBlockAddr&nbsp;to&nbsp;EndBlockAddr&nbsp;loop&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;next&nbsp;BlockAddrLoop&nbsp;when&nbsp;MemStructPtr(ID).MemArrayPtr(BlockAddr)&nbsp;=&nbsp;NULL&nbsp;;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;BlockAddr&nbsp;=&nbsp;StartBlockAddr&nbsp;then&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;StartWordAddr&nbsp;:=&nbsp;to_integer(normStartAddr(BLOCK_WIDTH-1&nbsp;downto&nbsp;0))&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;StartWordAddr&nbsp;:=&nbsp;0&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;if&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;BlockAddr&nbsp;=&nbsp;EndBlockAddr&nbsp;then&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;EndWordAddr&nbsp;:=&nbsp;to_integer(normEndAddr(BLOCK_WIDTH-1&nbsp;downto&nbsp;0))&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;EndWordAddr&nbsp;:=&nbsp;2**BLOCK_WIDTH-1&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;if&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FoundData&nbsp;:=&nbsp;FALSE&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;WordAddrLoop&nbsp;:&nbsp;for&nbsp;WordAddr&nbsp;in&nbsp;StartWordAddr&nbsp;to&nbsp;EndWordAddr&nbsp;loop&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Data&nbsp;:=&nbsp;FromMemoryBaseType(MemStructPtr(ID).MemArrayPtr(BlockAddr)(WordAddr),&nbsp;Data&apos;length)&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;MetaMatch(Data,&nbsp;AllU)&nbsp;then&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FoundData&nbsp;:=&nbsp;FALSE&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;not&nbsp;FoundData&nbsp;then\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;Write&nbsp;Address\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;write(buf,&nbsp;&apos;@&apos;)&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;hwrite(buf,&nbsp;to_slv(BlockAddr,&nbsp;ADDR_WIDTH-BLOCK_WIDTH)&nbsp;&amp;&nbsp;to_slv(WordAddr,&nbsp;BLOCK_WIDTH))&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;writeline(MemFile,&nbsp;buf)&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;if&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FoundData&nbsp;:=&nbsp;TRUE&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;if&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;FoundData&nbsp;then&nbsp;&nbsp;--&nbsp;Write&nbsp;Data\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;DataFormat&nbsp;=&nbsp;HEX&nbsp;then\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;hwrite(buf,&nbsp;Data)&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;writeline(MemFile,&nbsp;buf)&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;write(buf,&nbsp;Data)&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;writeline(MemFile,&nbsp;buf)&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;if;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;if&nbsp;;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;loop&nbsp;WordAddrLoop&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;loop&nbsp;BlockAddrLoop&nbsp;;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;file_close(MemFile)&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;FileWriteX&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;Hexadecimal&nbsp;File&nbsp;Write&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;procedure&nbsp;FileWriteH&nbsp;(\n&nbsp;&nbsp;&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ID&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;integer&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FileName&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;string&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;StartAddr&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;std_logic_vector&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;EndAddr&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;std_logic_vector\n&nbsp;&nbsp;&nbsp;&nbsp;)&nbsp;is\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;ID_CHECK_OK&nbsp;:&nbsp;boolean&nbsp;:=&nbsp;IdOutOfRange(ID,&nbsp;&quot;FileWriteH&quot;)&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FileWriteX(ID,&nbsp;FileName,&nbsp;HEX,&nbsp;StartAddr,&nbsp;EndAddr)&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;FileWriteH&nbsp;;\n&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;Hexadecimal&nbsp;File&nbsp;Write&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;procedure&nbsp;FileWriteH&nbsp;(\n&nbsp;&nbsp;&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ID&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;integer&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FileName&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;string&nbsp;;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;StartAddr&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;std_logic_vector\n&nbsp;&nbsp;&nbsp;&nbsp;)&nbsp;is\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;ID_CHECK_OK&nbsp;:&nbsp;boolean&nbsp;:=&nbsp;IdOutOfRange(ID,&nbsp;&quot;FileWriteH&quot;)&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;ADDR_WIDTH&nbsp;&nbsp;:&nbsp;integer&nbsp;:=&nbsp;MemStructPtr(ID).AddrWidth&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;EndAddr&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;std_logic_vector&nbsp;:=&nbsp;(ADDR_WIDTH-1&nbsp;downto&nbsp;0&nbsp;=&gt;&nbsp;&apos;1&apos;)&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FileWriteX(ID,&nbsp;FileName,&nbsp;HEX,&nbsp;StartAddr,&nbsp;EndAddr)&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;FileWriteH&nbsp;;\n&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;Hexadecimal&nbsp;File&nbsp;Write&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;procedure&nbsp;FileWriteH&nbsp;(\n&nbsp;&nbsp;&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ID&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;integer&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FileName&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;string&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;)&nbsp;is&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;ID_CHECK_OK&nbsp;:&nbsp;boolean&nbsp;:=&nbsp;IdOutOfRange(ID,&nbsp;&quot;FileWriteH&quot;)&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;ADDR_WIDTH&nbsp;&nbsp;:&nbsp;integer&nbsp;:=&nbsp;MemStructPtr(ID).AddrWidth&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;StartAddr&nbsp;&nbsp;&nbsp;:&nbsp;std_logic_vector&nbsp;:=&nbsp;(ADDR_WIDTH-1&nbsp;downto&nbsp;0&nbsp;=&gt;&nbsp;&apos;0&apos;)&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;EndAddr&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;std_logic_vector&nbsp;:=&nbsp;(ADDR_WIDTH-1&nbsp;downto&nbsp;0&nbsp;=&gt;&nbsp;&apos;1&apos;)&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FileWriteX(ID,&nbsp;FileName,&nbsp;HEX,&nbsp;StartAddr,&nbsp;EndAddr)&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;FileWriteH&nbsp;;&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;Binary&nbsp;File&nbsp;Write&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;procedure&nbsp;FileWriteB&nbsp;(\n&nbsp;&nbsp;&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ID&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;integer&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FileName&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;string&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;StartAddr&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;std_logic_vector&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;EndAddr&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;std_logic_vector\n&nbsp;&nbsp;&nbsp;&nbsp;)&nbsp;is\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;ID_CHECK_OK&nbsp;:&nbsp;boolean&nbsp;:=&nbsp;IdOutOfRange(ID,&nbsp;&quot;FileWriteB&quot;)&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FileWriteX(ID,&nbsp;FileName,&nbsp;BINARY,&nbsp;StartAddr,&nbsp;EndAddr)&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;FileWriteB&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;Binary&nbsp;File&nbsp;Write&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;procedure&nbsp;FileWriteB&nbsp;(\n&nbsp;&nbsp;&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ID&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;integer&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FileName&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;string&nbsp;;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;StartAddr&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;std_logic_vector\n&nbsp;&nbsp;&nbsp;&nbsp;)&nbsp;is\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;ID_CHECK_OK&nbsp;:&nbsp;boolean&nbsp;:=&nbsp;IdOutOfRange(ID,&nbsp;&quot;FileWriteB&quot;)&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;ADDR_WIDTH&nbsp;&nbsp;:&nbsp;integer&nbsp;:=&nbsp;MemStructPtr(ID).AddrWidth&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;EndAddr&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;std_logic_vector&nbsp;:=&nbsp;(ADDR_WIDTH-1&nbsp;downto&nbsp;0&nbsp;=&gt;&nbsp;&apos;1&apos;)&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FileWriteX(ID,&nbsp;FileName,&nbsp;BINARY,&nbsp;StartAddr,&nbsp;EndAddr)&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;FileWriteB&nbsp;;\n&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;Binary&nbsp;File&nbsp;Write&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;procedure&nbsp;FileWriteB&nbsp;(\n&nbsp;&nbsp;&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ID&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;integer&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FileName&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;string&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;)&nbsp;is&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;ID_CHECK_OK&nbsp;:&nbsp;boolean&nbsp;:=&nbsp;IdOutOfRange(ID,&nbsp;&quot;FileWriteB&quot;)&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;ADDR_WIDTH&nbsp;&nbsp;:&nbsp;integer&nbsp;:=&nbsp;MemStructPtr(ID).AddrWidth&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;StartAddr&nbsp;&nbsp;&nbsp;:&nbsp;std_logic_vector&nbsp;:=&nbsp;(ADDR_WIDTH-1&nbsp;downto&nbsp;0&nbsp;=&gt;&nbsp;&apos;0&apos;)&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;EndAddr&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;std_logic_vector&nbsp;:=&nbsp;(ADDR_WIDTH-1&nbsp;downto&nbsp;0&nbsp;=&gt;&nbsp;&apos;1&apos;)&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FileWriteX(ID,&nbsp;FileName,&nbsp;BINARY,&nbsp;StartAddr,&nbsp;EndAddr)&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;FileWriteB&nbsp;;&nbsp;&nbsp;\n&nbsp;\n--&nbsp;/////////////////////////////////////////\n--&nbsp;/////////////////////////////////////////\n--&nbsp;Structure&nbsp;Wide&nbsp;Methods\n--&nbsp;/////////////////////////////////////////\n--&nbsp;/////////////////////////////////////////\n&nbsp;&nbsp;&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;Erase&nbsp;the&nbsp;memory\n&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;Used&nbsp;between&nbsp;independent&nbsp;pieces&nbsp;of&nbsp;a&nbsp;test\n&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;to&nbsp;erase&nbsp;the&nbsp;all&nbsp;memory&nbsp;model&nbsp;contents,&nbsp;but\n&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;keeps&nbsp;the&nbsp;memory&nbsp;size&nbsp;and&nbsp;infrastructure\n&nbsp;&nbsp;&nbsp;&nbsp;procedure&nbsp;MemErase&nbsp;is&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;ID&nbsp;in&nbsp;MemStructPtr&apos;range&nbsp;loop&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MemErase(ID)&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;loop&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;procedure&nbsp;;&nbsp;\n&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;Destroys&nbsp;the&nbsp;entire&nbsp;data&nbsp;structure\n&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;Usage:&nbsp;&nbsp;At&nbsp;the&nbsp;end&nbsp;of&nbsp;the&nbsp;simulation&nbsp;to&nbsp;remove&nbsp;all&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;memory&nbsp;used&nbsp;by&nbsp;data&nbsp;structure.&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;Note,&nbsp;a&nbsp;normal&nbsp;simulator&nbsp;does&nbsp;this&nbsp;for&nbsp;you.&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;You&nbsp;only&nbsp;need&nbsp;this&nbsp;if&nbsp;the&nbsp;simulator&nbsp;is&nbsp;broken.\n&nbsp;&nbsp;&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;PT&nbsp;Local\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;procedure&nbsp;deallocate&nbsp;(ID&nbsp;:&nbsp;integer)&nbsp;is&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MemErase(ID)&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;deallocate(MemStructPtr(ID).MemArrayPtr)&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MemStructPtr(ID).AddrWidth&nbsp;&nbsp;&nbsp;:=&nbsp;-1&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MemStructPtr(ID).DataWidth&nbsp;&nbsp;&nbsp;:=&nbsp;1&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MemStructPtr(ID).BlockWidth&nbsp;&nbsp;:=&nbsp;0&nbsp;;\n--!&nbsp;removed&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;deallocate(MemStructPtr(ID).Name)&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;procedure&nbsp;;&nbsp;\n&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;procedure&nbsp;deallocate&nbsp;is\n&nbsp;&nbsp;&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;ID&nbsp;in&nbsp;MemStructPtr&apos;range&nbsp;loop&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;deallocate(ID)&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;loop&nbsp;;\n--!&nbsp;Deallocate&nbsp;not&nbsp;able&nbsp;to&nbsp;be&nbsp;called&nbsp;on&nbsp;MemoryStore&nbsp;-&nbsp;no&nbsp;accessor&nbsp;procedure\n--!&nbsp;if&nbsp;make&nbsp;directly&nbsp;visible,&nbsp;then&nbsp;do&nbsp;this,&nbsp;but&nbsp;otherwise&nbsp;no.\n--&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;deallocate(MemStructPtr)&nbsp;;&nbsp;&nbsp;&nbsp;\n--&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;NumItems&nbsp;:=&nbsp;0&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;procedure&nbsp;deallocate&nbsp;;&nbsp;\n&nbsp;\n--&nbsp;/////////////////////////////////////////\n--&nbsp;/////////////////////////////////////////\n--&nbsp;Compatibility&nbsp;Methods\n--&nbsp;/////////////////////////////////////////\n--&nbsp;/////////////////////////////////////////\n&nbsp;&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;&nbsp;&nbsp;procedure&nbsp;MemInit&nbsp;(&nbsp;AddrWidth,&nbsp;DataWidth&nbsp;&nbsp;:&nbsp;in&nbsp;&nbsp;integer&nbsp;)&nbsp;is\n&nbsp;&nbsp;&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MemInit(MEM_STRUCT_PTR_LEFT,&nbsp;AddrWidth,&nbsp;DataWidth)&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;procedure&nbsp;MemInit&nbsp;;\n&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;&nbsp;&nbsp;procedure&nbsp;MemWrite&nbsp;(&nbsp;&nbsp;Addr,&nbsp;Data&nbsp;&nbsp;:&nbsp;in&nbsp;&nbsp;std_logic_vector&nbsp;)&nbsp;is&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MemWrite(MEM_STRUCT_PTR_LEFT,&nbsp;Addr,&nbsp;Data)&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;procedure&nbsp;MemWrite&nbsp;;&nbsp;\n&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;&nbsp;&nbsp;procedure&nbsp;MemRead&nbsp;(&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Addr&nbsp;&nbsp;:&nbsp;In&nbsp;&nbsp;&nbsp;std_logic_vector&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Data&nbsp;&nbsp;:&nbsp;Out&nbsp;&nbsp;std_logic_vector&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;)&nbsp;is\n&nbsp;&nbsp;&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MemRead(MEM_STRUCT_PTR_LEFT,&nbsp;Addr,&nbsp;Data)&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;procedure&nbsp;MemRead&nbsp;;&nbsp;\n&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;&nbsp;&nbsp;impure&nbsp;function&nbsp;MemRead&nbsp;(&nbsp;Addr&nbsp;&nbsp;:&nbsp;std_logic_vector&nbsp;)&nbsp;return&nbsp;std_logic_vector&nbsp;is\n&nbsp;&nbsp;&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;constant&nbsp;DATA_WIDTH&nbsp;:&nbsp;integer&nbsp;:=&nbsp;MemStructPtr(MEM_STRUCT_PTR_LEFT).DataWidth&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;Data&nbsp;&nbsp;:&nbsp;std_logic_vector(DATA_WIDTH-1&nbsp;downto&nbsp;0)&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MemRead(MEM_STRUCT_PTR_LEFT,&nbsp;Addr,&nbsp;Data)&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;Data&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;function&nbsp;MemRead&nbsp;;&nbsp;\n&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;&nbsp;&nbsp;procedure&nbsp;SetAlertLogID&nbsp;(A&nbsp;:&nbsp;AlertLogIDType)&nbsp;is\n&nbsp;&nbsp;&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MemStructPtr(MEM_STRUCT_PTR_LEFT).AlertLogID&nbsp;&nbsp;:=&nbsp;A&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;procedure&nbsp;SetAlertLogID&nbsp;;\n&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;&nbsp;&nbsp;procedure&nbsp;SetAlertLogID(Name&nbsp;:&nbsp;string&nbsp;;&nbsp;ParentID&nbsp;:&nbsp;AlertLogIDType&nbsp;:=&nbsp;OSVVM_MEMORY_ALERTLOG_ID&nbsp;;&nbsp;CreateHierarchy&nbsp;:&nbsp;Boolean&nbsp;:=&nbsp;TRUE)&nbsp;is\n&nbsp;&nbsp;&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MemStructPtr(MEM_STRUCT_PTR_LEFT).AlertLogID&nbsp;:=&nbsp;GetAlertLogID(Name,&nbsp;ParentID,&nbsp;CreateHierarchy)&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;procedure&nbsp;SetAlertLogID&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;&nbsp;&nbsp;impure&nbsp;function&nbsp;GetAlertLogID&nbsp;return&nbsp;AlertLogIDType&nbsp;is\n&nbsp;&nbsp;&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;MemStructPtr(MEM_STRUCT_PTR_LEFT).AlertLogID&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;function&nbsp;GetAlertLogID&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;&nbsp;&nbsp;procedure&nbsp;FileReadH&nbsp;(\n&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;Hexadecimal&nbsp;File&nbsp;Read&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FileName&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;string&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;StartAddr&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;std_logic_vector&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;EndAddr&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;std_logic_vector\n&nbsp;&nbsp;&nbsp;&nbsp;)&nbsp;is\n&nbsp;&nbsp;&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FileReadH(MEM_STRUCT_PTR_LEFT,&nbsp;FileName,&nbsp;StartAddr,&nbsp;EndAddr)&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;FileReadH&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;&nbsp;&nbsp;procedure&nbsp;FileReadH&nbsp;(FileName&nbsp;:&nbsp;string&nbsp;;&nbsp;&nbsp;StartAddr&nbsp;:&nbsp;std_logic_vector)&nbsp;is\n&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;Hexadecimal&nbsp;File&nbsp;Read&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FileReadH(MEM_STRUCT_PTR_LEFT,&nbsp;FileName,&nbsp;StartAddr)&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;FileReadH&nbsp;;\n&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;&nbsp;&nbsp;procedure&nbsp;FileReadH&nbsp;(FileName&nbsp;:&nbsp;string)&nbsp;is&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;Hexadecimal&nbsp;File&nbsp;Read&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FileReadH(MEM_STRUCT_PTR_LEFT,&nbsp;FileName)&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;FileReadH&nbsp;;&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;&nbsp;&nbsp;procedure&nbsp;FileReadB&nbsp;(\n&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;Binary&nbsp;File&nbsp;Read&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FileName&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;string&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;StartAddr&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;std_logic_vector&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;EndAddr&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;std_logic_vector\n&nbsp;&nbsp;&nbsp;&nbsp;)&nbsp;is\n&nbsp;&nbsp;&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FileReadB(MEM_STRUCT_PTR_LEFT,&nbsp;FileName,&nbsp;StartAddr,&nbsp;EndAddr)&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;FileReadB&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;&nbsp;&nbsp;procedure&nbsp;FileReadB&nbsp;(FileName&nbsp;:&nbsp;string&nbsp;;&nbsp;&nbsp;StartAddr&nbsp;:&nbsp;std_logic_vector)&nbsp;is\n&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;Binary&nbsp;File&nbsp;Read&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FileReadB(MEM_STRUCT_PTR_LEFT,&nbsp;FileName,&nbsp;StartAddr)&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;FileReadB&nbsp;;\n&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;&nbsp;&nbsp;procedure&nbsp;FileReadB&nbsp;(FileName&nbsp;:&nbsp;string)&nbsp;is&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;Binary&nbsp;File&nbsp;Read&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FileReadB(MEM_STRUCT_PTR_LEFT,&nbsp;FileName)&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;FileReadB&nbsp;;&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;&nbsp;&nbsp;procedure&nbsp;FileWriteH&nbsp;(\n&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;Hexadecimal&nbsp;File&nbsp;Write&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FileName&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;string&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;StartAddr&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;std_logic_vector&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;EndAddr&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;std_logic_vector\n&nbsp;&nbsp;&nbsp;&nbsp;)&nbsp;is\n&nbsp;&nbsp;&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FileWriteH(MEM_STRUCT_PTR_LEFT,&nbsp;FileName,&nbsp;StartAddr,&nbsp;EndAddr)&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;FileWriteH&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;&nbsp;&nbsp;procedure&nbsp;FileWriteH&nbsp;(FileName&nbsp;:&nbsp;string&nbsp;;&nbsp;&nbsp;StartAddr&nbsp;:&nbsp;std_logic_vector)&nbsp;is\n&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;Hexadecimal&nbsp;File&nbsp;Write&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FileWriteH(MEM_STRUCT_PTR_LEFT,&nbsp;FileName,&nbsp;StartAddr)&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;FileWriteH&nbsp;;\n&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;&nbsp;&nbsp;procedure&nbsp;FileWriteH&nbsp;(FileName&nbsp;:&nbsp;string)&nbsp;is&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;Hexadecimal&nbsp;File&nbsp;Write&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FileWriteH(MEM_STRUCT_PTR_LEFT,&nbsp;FileName)&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;FileWriteH&nbsp;;&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;&nbsp;&nbsp;procedure&nbsp;FileWriteB&nbsp;(\n&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;Binary&nbsp;File&nbsp;Write&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FileName&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;string&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;StartAddr&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;std_logic_vector&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;EndAddr&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;std_logic_vector\n&nbsp;&nbsp;&nbsp;&nbsp;)&nbsp;is\n&nbsp;&nbsp;&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FileWriteB(MEM_STRUCT_PTR_LEFT,&nbsp;FileName,&nbsp;StartAddr,&nbsp;EndAddr)&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;FileWriteB&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;&nbsp;&nbsp;procedure&nbsp;FileWriteB&nbsp;(FileName&nbsp;:&nbsp;string&nbsp;;&nbsp;&nbsp;StartAddr&nbsp;:&nbsp;std_logic_vector)&nbsp;is\n&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;Binary&nbsp;File&nbsp;Write&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FileWriteB(MEM_STRUCT_PTR_LEFT,&nbsp;FileName,&nbsp;StartAddr)&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;FileWriteB&nbsp;;\n&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;&nbsp;&nbsp;procedure&nbsp;FileWriteB&nbsp;(FileName&nbsp;:&nbsp;string)&nbsp;is&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;Binary&nbsp;File&nbsp;Write&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FileWriteB(MEM_STRUCT_PTR_LEFT,&nbsp;FileName)&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;end&nbsp;FileWriteB&nbsp;;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;end&nbsp;protected&nbsp;body&nbsp;MemoryPType&nbsp;;\n&nbsp;\n--&nbsp;/////////////////////////////////////////\n--&nbsp;/////////////////////////////////////////\n--&nbsp;Singleton&nbsp;Data&nbsp;Structure\n--&nbsp;/////////////////////////////////////////\n--&nbsp;/////////////////////////////////////////\n&nbsp;&nbsp;shared&nbsp;variable&nbsp;MemoryStore&nbsp;:&nbsp;MemoryPType&nbsp;;\n&nbsp;\n&nbsp;&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;impure&nbsp;function&nbsp;NewID&nbsp;(\n&nbsp;&nbsp;&nbsp;&nbsp;Name&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;String&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;AddrWidth&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;integer&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;DataWidth&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;integer&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;ParentID&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;AlertLogIDType&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:=&nbsp;OSVVM_MEMORY_ALERTLOG_ID&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;ReportMode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;AlertLogReportModeType&nbsp;&nbsp;:=&nbsp;ENABLED&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;Search&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;NameSearchType&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:=&nbsp;PRIVATE_NAME&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;PrintParent&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;AlertLogPrintParentType&nbsp;:=&nbsp;PRINT_NAME_AND_PARENT\n&nbsp;&nbsp;)&nbsp;return&nbsp;MemoryIDType&nbsp;is\n&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;Result&nbsp;:&nbsp;MemoryIDType&nbsp;;&nbsp;\n&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;Result.ID&nbsp;:=&nbsp;MemoryStore.NewID(Name,&nbsp;AddrWidth,&nbsp;DataWidth,&nbsp;ParentID,&nbsp;ReportMode,&nbsp;Search,&nbsp;PrintParent)&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;Result&nbsp;;&nbsp;\n&nbsp;&nbsp;end&nbsp;function&nbsp;NewID&nbsp;;&nbsp;\n&nbsp;\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;procedure&nbsp;MemWrite&nbsp;(&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;ID&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;MemoryIDType&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;Addr&nbsp;&nbsp;:&nbsp;std_logic_vector&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;Data&nbsp;&nbsp;:&nbsp;std_logic_vector&nbsp;\n&nbsp;&nbsp;)&nbsp;is\n&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;MemoryStore.MemWrite(ID.ID,&nbsp;Addr,&nbsp;Data)&nbsp;;&nbsp;\n&nbsp;&nbsp;end&nbsp;procedure&nbsp;MemWrite&nbsp;;&nbsp;\n&nbsp;&nbsp;\n&nbsp;&nbsp;procedure&nbsp;MemRead&nbsp;(&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;ID&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;in&nbsp;MemoryIDType&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;Addr&nbsp;&nbsp;:&nbsp;in&nbsp;&nbsp;std_logic_vector&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;Data&nbsp;&nbsp;:&nbsp;out&nbsp;std_logic_vector&nbsp;\n&nbsp;&nbsp;)&nbsp;is\n&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;MemoryStore.MemRead(ID.ID,&nbsp;Addr,&nbsp;Data)&nbsp;;&nbsp;\n&nbsp;&nbsp;end&nbsp;procedure&nbsp;MemRead&nbsp;;&nbsp;\n&nbsp;&nbsp;\n&nbsp;&nbsp;impure&nbsp;function&nbsp;MemRead&nbsp;(&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;ID&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;MemoryIDType&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;Addr&nbsp;&nbsp;:&nbsp;std_logic_vector&nbsp;\n&nbsp;&nbsp;)&nbsp;return&nbsp;std_logic_vector&nbsp;is\n&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;MemoryStore.MemRead(ID.ID,&nbsp;Addr)&nbsp;;&nbsp;\n&nbsp;&nbsp;end&nbsp;function&nbsp;MemRead&nbsp;;&nbsp;\n&nbsp;\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;procedure&nbsp;MemErase&nbsp;(ID&nbsp;:&nbsp;in&nbsp;MemoryIDType)&nbsp;is\n&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;MemoryStore.MemErase(ID.ID)&nbsp;;&nbsp;\n&nbsp;&nbsp;end&nbsp;procedure&nbsp;MemErase&nbsp;;&nbsp;&nbsp;\n&nbsp;&nbsp;\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;impure&nbsp;function&nbsp;GetAlertLogID&nbsp;(\n&nbsp;&nbsp;&nbsp;&nbsp;ID&nbsp;:&nbsp;in&nbsp;MemoryIDType\n&nbsp;&nbsp;)&nbsp;return&nbsp;AlertLogIDType&nbsp;is\n&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;MemoryStore.GetAlertLogID(ID.ID)&nbsp;;&nbsp;\n&nbsp;&nbsp;end&nbsp;function&nbsp;GetAlertLogID&nbsp;;&nbsp;\n&nbsp;&nbsp;\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;procedure&nbsp;FileReadH&nbsp;(&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;Hexadecimal&nbsp;File&nbsp;Read&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;ID&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;MemoryIDType&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;FileName&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;string&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;StartAddr&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;std_logic_vector&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;EndAddr&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;std_logic_vector\n&nbsp;&nbsp;)&nbsp;is\n&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;MemoryStore.FileReadH(ID.ID,&nbsp;FileName,&nbsp;StartAddr,&nbsp;EndAddr)&nbsp;;&nbsp;\n&nbsp;&nbsp;end&nbsp;procedure&nbsp;FileReadH&nbsp;;&nbsp;\n&nbsp;&nbsp;\n&nbsp;&nbsp;procedure&nbsp;FileReadH&nbsp;(\n&nbsp;&nbsp;&nbsp;&nbsp;ID&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;MemoryIDType&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;FileName&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;string&nbsp;;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;StartAddr&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;std_logic_vector\n&nbsp;&nbsp;)&nbsp;is\n&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;MemoryStore.FileReadH(ID.ID,&nbsp;FileName,&nbsp;StartAddr)&nbsp;;&nbsp;\n&nbsp;&nbsp;end&nbsp;procedure&nbsp;FileReadH&nbsp;;&nbsp;\n&nbsp;\n&nbsp;&nbsp;procedure&nbsp;FileReadH&nbsp;(\n&nbsp;&nbsp;&nbsp;&nbsp;ID&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;MemoryIDType&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;FileName&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;string&nbsp;\n&nbsp;&nbsp;)&nbsp;is\n&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;MemoryStore.FileReadH(ID.ID,&nbsp;FileName)&nbsp;;&nbsp;\n&nbsp;&nbsp;end&nbsp;procedure&nbsp;FileReadH&nbsp;;&nbsp;\n&nbsp;\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;procedure&nbsp;FileReadB&nbsp;(&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;Binary&nbsp;File&nbsp;Read&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;ID&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;MemoryIDType&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;FileName&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;string&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;StartAddr&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;std_logic_vector&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;EndAddr&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;std_logic_vector\n&nbsp;&nbsp;)&nbsp;is\n&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;MemoryStore.FileReadB(ID.ID,&nbsp;FileName,&nbsp;StartAddr,&nbsp;EndAddr)&nbsp;;&nbsp;\n&nbsp;&nbsp;end&nbsp;procedure&nbsp;FileReadB&nbsp;;&nbsp;\n&nbsp;\n&nbsp;&nbsp;procedure&nbsp;FileReadB&nbsp;(\n&nbsp;&nbsp;&nbsp;&nbsp;ID&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;MemoryIDType&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;FileName&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;string&nbsp;;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;StartAddr&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;std_logic_vector\n&nbsp;&nbsp;)&nbsp;is\n&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;MemoryStore.FileReadB(ID.ID,&nbsp;FileName,&nbsp;StartAddr)&nbsp;;&nbsp;\n&nbsp;&nbsp;end&nbsp;procedure&nbsp;FileReadB&nbsp;;&nbsp;\n&nbsp;\n&nbsp;&nbsp;procedure&nbsp;FileReadB&nbsp;(\n&nbsp;&nbsp;&nbsp;&nbsp;ID&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;MemoryIDType&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;FileName&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;string&nbsp;\n&nbsp;&nbsp;)&nbsp;is\n&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;MemoryStore.FileReadB(ID.ID,&nbsp;FileName)&nbsp;;&nbsp;\n&nbsp;&nbsp;end&nbsp;procedure&nbsp;FileReadB&nbsp;;&nbsp;\n&nbsp;\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;procedure&nbsp;FileWriteH&nbsp;(&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;Hexadecimal&nbsp;File&nbsp;Write&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;ID&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;MemoryIDType&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;FileName&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;string&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;StartAddr&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;std_logic_vector&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;EndAddr&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;std_logic_vector\n&nbsp;&nbsp;)&nbsp;is\n&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;MemoryStore.FileWriteH(ID.ID,&nbsp;FileName,&nbsp;StartAddr,&nbsp;EndAddr)&nbsp;;&nbsp;\n&nbsp;&nbsp;end&nbsp;procedure&nbsp;FileWriteH&nbsp;;&nbsp;\n&nbsp;\n&nbsp;&nbsp;procedure&nbsp;FileWriteH&nbsp;(\n&nbsp;&nbsp;&nbsp;&nbsp;ID&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;MemoryIDType&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;FileName&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;string&nbsp;;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;StartAddr&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;std_logic_vector\n&nbsp;&nbsp;)&nbsp;is\n&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;MemoryStore.FileWriteH(ID.ID,&nbsp;FileName,&nbsp;StartAddr)&nbsp;;&nbsp;\n&nbsp;&nbsp;end&nbsp;procedure&nbsp;FileWriteH&nbsp;;&nbsp;\n&nbsp;&nbsp;\n&nbsp;&nbsp;procedure&nbsp;FileWriteH&nbsp;(\n&nbsp;&nbsp;&nbsp;&nbsp;ID&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;MemoryIDType&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;FileName&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;string&nbsp;\n&nbsp;&nbsp;)&nbsp;is\n&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;MemoryStore.FileWriteH(ID.ID,&nbsp;FileName)&nbsp;;&nbsp;\n&nbsp;&nbsp;end&nbsp;procedure&nbsp;FileWriteH&nbsp;;&nbsp;\n&nbsp;&nbsp;\n&nbsp;&nbsp;------------------------------------------------------------\n&nbsp;&nbsp;procedure&nbsp;FileWriteB&nbsp;(&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;Binary&nbsp;File&nbsp;Write&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;ID&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;MemoryIDType&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;FileName&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;string&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;StartAddr&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;std_logic_vector&nbsp;;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;EndAddr&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;std_logic_vector\n&nbsp;&nbsp;)&nbsp;is\n&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;MemoryStore.FileWriteB(ID.ID,&nbsp;FileName,&nbsp;StartAddr,&nbsp;EndAddr)&nbsp;;&nbsp;\n&nbsp;&nbsp;end&nbsp;procedure&nbsp;FileWriteB&nbsp;;&nbsp;\n&nbsp;&nbsp;\n&nbsp;&nbsp;procedure&nbsp;FileWriteB&nbsp;(\n&nbsp;&nbsp;&nbsp;&nbsp;ID&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;MemoryIDType&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;FileName&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;string&nbsp;;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;StartAddr&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;std_logic_vector\n&nbsp;&nbsp;)&nbsp;is\n&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;MemoryStore.FileWriteB(ID.ID,&nbsp;FileName,&nbsp;StartAddr)&nbsp;;&nbsp;\n&nbsp;&nbsp;end&nbsp;procedure&nbsp;FileWriteB&nbsp;;&nbsp;\n&nbsp;\n&nbsp;&nbsp;procedure&nbsp;FileWriteB&nbsp;(\n&nbsp;&nbsp;&nbsp;&nbsp;ID&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;MemoryIDType&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;FileName&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;string&nbsp;\n&nbsp;&nbsp;)&nbsp;is\n&nbsp;&nbsp;begin\n&nbsp;&nbsp;&nbsp;&nbsp;MemoryStore.FileWriteB(ID.ID,&nbsp;FileName)&nbsp;;&nbsp;\n&nbsp;&nbsp;end&nbsp;procedure&nbsp;FileWriteB&nbsp;;&nbsp;\nend&nbsp;MemoryGenericPkg&nbsp;;';
Report.brushes['./../../../SynthWorks/Dev/_osvvm/OsvvmLibraries/osvvm/MemoryGenericPkg.vhd'] = 'vhdl'
